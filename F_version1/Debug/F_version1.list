
F_version1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006568  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000998  080066f8  080066f8  000166f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007090  08007090  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08007090  08007090  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007090  08007090  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007090  08007090  00017090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007094  08007094  00017094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000aed8  20000078  08007110  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000af50  08007110  0002af50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d91  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e54  00000000  00000000  00036e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00039c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  0003ad28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000285a4  00000000  00000000  0003bc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b55  00000000  00000000  00064204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f51fa  00000000  00000000  00075d59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  0016af53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ed4  00000000  00000000  0016b01c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  0016fef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066e0 	.word	0x080066e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080066e0 	.word	0x080066e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	0000      	movs	r0, r0
	...

08000af0 <get_C6>:



//Tone 1 C6 1046.5 Hz
	uint8_t C6[42];
void get_C6(){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 42; i++){
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	e043      	b.n	8000b84 <get_C6+0x94>
		C6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/42))*256;
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff fd09 	bl	8000514 <__aeabi_i2d>
 8000b02:	a32a      	add	r3, pc, #168	; (adr r3, 8000bac <get_C6+0xbc>)
 8000b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b08:	f7ff fd6e 	bl	80005e8 <__aeabi_dmul>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	460b      	mov	r3, r1
 8000b10:	4610      	mov	r0, r2
 8000b12:	4619      	mov	r1, r3
 8000b14:	f04f 0200 	mov.w	r2, #0
 8000b18:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <get_C6+0xb0>)
 8000b1a:	f7ff fe8f 	bl	800083c <__aeabi_ddiv>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	460b      	mov	r3, r1
 8000b22:	4610      	mov	r0, r2
 8000b24:	4619      	mov	r1, r3
 8000b26:	f7ff ff91 	bl	8000a4c <__aeabi_d2f>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	ee00 3a10 	vmov	s0, r3
 8000b30:	f004 fd5c 	bl	80055ec <arm_sin_f32>
 8000b34:	eef0 7a40 	vmov.f32	s15, s0
 8000b38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b40:	ee17 0a90 	vmov	r0, s15
 8000b44:	f7ff fcf8 	bl	8000538 <__aeabi_f2d>
 8000b48:	a313      	add	r3, pc, #76	; (adr r3, 8000b98 <get_C6+0xa8>)
 8000b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b4e:	f7ff fd4b 	bl	80005e8 <__aeabi_dmul>
 8000b52:	4602      	mov	r2, r0
 8000b54:	460b      	mov	r3, r1
 8000b56:	4610      	mov	r0, r2
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f04f 0200 	mov.w	r2, #0
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <get_C6+0xb4>)
 8000b60:	f7ff fd42 	bl	80005e8 <__aeabi_dmul>
 8000b64:	4602      	mov	r2, r0
 8000b66:	460b      	mov	r3, r1
 8000b68:	4610      	mov	r0, r2
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	f7ff ff4e 	bl	8000a0c <__aeabi_d2uiz>
 8000b70:	4603      	mov	r3, r0
 8000b72:	b2d9      	uxtb	r1, r3
 8000b74:	4a0c      	ldr	r2, [pc, #48]	; (8000ba8 <get_C6+0xb8>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	460a      	mov	r2, r1
 8000b7c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 42; i++){
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3301      	adds	r3, #1
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b29      	cmp	r3, #41	; 0x29
 8000b88:	ddb8      	ble.n	8000afc <get_C6+0xc>
	}
}
 8000b8a:	bf00      	nop
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	f3af 8000 	nop.w
 8000b98:	51eb851f 	.word	0x51eb851f
 8000b9c:	3fd51eb8 	.word	0x3fd51eb8
 8000ba0:	40450000 	.word	0x40450000
 8000ba4:	40700000 	.word	0x40700000
 8000ba8:	2000adb8 	.word	0x2000adb8
 8000bac:	53c8d4f1 	.word	0x53c8d4f1
 8000bb0:	401921fb 	.word	0x401921fb
 8000bb4:	00000000 	.word	0x00000000

08000bb8 <get_E6>:

//Tone 2 E6 1318.5 Hz
	uint8_t E6[34];
void get_E6(){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
	for(int i = 0; i < 34; i++){
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	e043      	b.n	8000c4c <get_E6+0x94>
		E6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/34))*256;
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff fca5 	bl	8000514 <__aeabi_i2d>
 8000bca:	a32a      	add	r3, pc, #168	; (adr r3, 8000c74 <get_E6+0xbc>)
 8000bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd0:	f7ff fd0a 	bl	80005e8 <__aeabi_dmul>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	4610      	mov	r0, r2
 8000bda:	4619      	mov	r1, r3
 8000bdc:	f04f 0200 	mov.w	r2, #0
 8000be0:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <get_E6+0xb0>)
 8000be2:	f7ff fe2b 	bl	800083c <__aeabi_ddiv>
 8000be6:	4602      	mov	r2, r0
 8000be8:	460b      	mov	r3, r1
 8000bea:	4610      	mov	r0, r2
 8000bec:	4619      	mov	r1, r3
 8000bee:	f7ff ff2d 	bl	8000a4c <__aeabi_d2f>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	ee00 3a10 	vmov	s0, r3
 8000bf8:	f004 fcf8 	bl	80055ec <arm_sin_f32>
 8000bfc:	eef0 7a40 	vmov.f32	s15, s0
 8000c00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c08:	ee17 0a90 	vmov	r0, s15
 8000c0c:	f7ff fc94 	bl	8000538 <__aeabi_f2d>
 8000c10:	a313      	add	r3, pc, #76	; (adr r3, 8000c60 <get_E6+0xa8>)
 8000c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c16:	f7ff fce7 	bl	80005e8 <__aeabi_dmul>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	4610      	mov	r0, r2
 8000c20:	4619      	mov	r1, r3
 8000c22:	f04f 0200 	mov.w	r2, #0
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <get_E6+0xb4>)
 8000c28:	f7ff fcde 	bl	80005e8 <__aeabi_dmul>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	4610      	mov	r0, r2
 8000c32:	4619      	mov	r1, r3
 8000c34:	f7ff feea 	bl	8000a0c <__aeabi_d2uiz>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	b2d9      	uxtb	r1, r3
 8000c3c:	4a0c      	ldr	r2, [pc, #48]	; (8000c70 <get_E6+0xb8>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	460a      	mov	r2, r1
 8000c44:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 34; i++){
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b21      	cmp	r3, #33	; 0x21
 8000c50:	ddb8      	ble.n	8000bc4 <get_E6+0xc>
	}
}
 8000c52:	bf00      	nop
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	f3af 8000 	nop.w
 8000c60:	51eb851f 	.word	0x51eb851f
 8000c64:	3fd51eb8 	.word	0x3fd51eb8
 8000c68:	40410000 	.word	0x40410000
 8000c6c:	40700000 	.word	0x40700000
 8000c70:	2000ad04 	.word	0x2000ad04
 8000c74:	53c8d4f1 	.word	0x53c8d4f1
 8000c78:	401921fb 	.word	0x401921fb
 8000c7c:	00000000 	.word	0x00000000

08000c80 <get_G6>:

//Tone 3 G6 1568.0 Hz
	uint8_t G6[28];
void get_G6(){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
	for(int i = 0; i < 28; i++){
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	e043      	b.n	8000d14 <get_G6+0x94>
		G6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/28))*256;
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff fc41 	bl	8000514 <__aeabi_i2d>
 8000c92:	a32a      	add	r3, pc, #168	; (adr r3, 8000d3c <get_G6+0xbc>)
 8000c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c98:	f7ff fca6 	bl	80005e8 <__aeabi_dmul>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4610      	mov	r0, r2
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f04f 0200 	mov.w	r2, #0
 8000ca8:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <get_G6+0xb0>)
 8000caa:	f7ff fdc7 	bl	800083c <__aeabi_ddiv>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	4610      	mov	r0, r2
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f7ff fec9 	bl	8000a4c <__aeabi_d2f>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	ee00 3a10 	vmov	s0, r3
 8000cc0:	f004 fc94 	bl	80055ec <arm_sin_f32>
 8000cc4:	eef0 7a40 	vmov.f32	s15, s0
 8000cc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ccc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000cd0:	ee17 0a90 	vmov	r0, s15
 8000cd4:	f7ff fc30 	bl	8000538 <__aeabi_f2d>
 8000cd8:	a313      	add	r3, pc, #76	; (adr r3, 8000d28 <get_G6+0xa8>)
 8000cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cde:	f7ff fc83 	bl	80005e8 <__aeabi_dmul>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	4610      	mov	r0, r2
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f04f 0200 	mov.w	r2, #0
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <get_G6+0xb4>)
 8000cf0:	f7ff fc7a 	bl	80005e8 <__aeabi_dmul>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	4610      	mov	r0, r2
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f7ff fe86 	bl	8000a0c <__aeabi_d2uiz>
 8000d00:	4603      	mov	r3, r0
 8000d02:	b2d9      	uxtb	r1, r3
 8000d04:	4a0c      	ldr	r2, [pc, #48]	; (8000d38 <get_G6+0xb8>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	460a      	mov	r2, r1
 8000d0c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 28; i++){
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3301      	adds	r3, #1
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b1b      	cmp	r3, #27
 8000d18:	ddb8      	ble.n	8000c8c <get_G6+0xc>
	}
}
 8000d1a:	bf00      	nop
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	f3af 8000 	nop.w
 8000d28:	51eb851f 	.word	0x51eb851f
 8000d2c:	3fd51eb8 	.word	0x3fd51eb8
 8000d30:	403c0000 	.word	0x403c0000
 8000d34:	40700000 	.word	0x40700000
 8000d38:	2000ade4 	.word	0x2000ade4
 8000d3c:	53c8d4f1 	.word	0x53c8d4f1
 8000d40:	401921fb 	.word	0x401921fb
 8000d44:	00000000 	.word	0x00000000

08000d48 <get_A6>:

//Tone 4 A6 1760.0 Hz

	uint8_t A6[25];
void get_A6(){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 25; i++){
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	e043      	b.n	8000ddc <get_A6+0x94>
		A6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/25))*256;
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff fbdd 	bl	8000514 <__aeabi_i2d>
 8000d5a:	a32a      	add	r3, pc, #168	; (adr r3, 8000e04 <get_A6+0xbc>)
 8000d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d60:	f7ff fc42 	bl	80005e8 <__aeabi_dmul>
 8000d64:	4602      	mov	r2, r0
 8000d66:	460b      	mov	r3, r1
 8000d68:	4610      	mov	r0, r2
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <get_A6+0xb0>)
 8000d72:	f7ff fd63 	bl	800083c <__aeabi_ddiv>
 8000d76:	4602      	mov	r2, r0
 8000d78:	460b      	mov	r3, r1
 8000d7a:	4610      	mov	r0, r2
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f7ff fe65 	bl	8000a4c <__aeabi_d2f>
 8000d82:	4603      	mov	r3, r0
 8000d84:	ee00 3a10 	vmov	s0, r3
 8000d88:	f004 fc30 	bl	80055ec <arm_sin_f32>
 8000d8c:	eef0 7a40 	vmov.f32	s15, s0
 8000d90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d98:	ee17 0a90 	vmov	r0, s15
 8000d9c:	f7ff fbcc 	bl	8000538 <__aeabi_f2d>
 8000da0:	a313      	add	r3, pc, #76	; (adr r3, 8000df0 <get_A6+0xa8>)
 8000da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da6:	f7ff fc1f 	bl	80005e8 <__aeabi_dmul>
 8000daa:	4602      	mov	r2, r0
 8000dac:	460b      	mov	r3, r1
 8000dae:	4610      	mov	r0, r2
 8000db0:	4619      	mov	r1, r3
 8000db2:	f04f 0200 	mov.w	r2, #0
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <get_A6+0xb4>)
 8000db8:	f7ff fc16 	bl	80005e8 <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f7ff fe22 	bl	8000a0c <__aeabi_d2uiz>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	b2d9      	uxtb	r1, r3
 8000dcc:	4a0c      	ldr	r2, [pc, #48]	; (8000e00 <get_A6+0xb8>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	460a      	mov	r2, r1
 8000dd4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 25; i++){
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b18      	cmp	r3, #24
 8000de0:	ddb8      	ble.n	8000d54 <get_A6+0xc>
	}
}
 8000de2:	bf00      	nop
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	f3af 8000 	nop.w
 8000df0:	51eb851f 	.word	0x51eb851f
 8000df4:	3fd51eb8 	.word	0x3fd51eb8
 8000df8:	40390000 	.word	0x40390000
 8000dfc:	40700000 	.word	0x40700000
 8000e00:	2000ae90 	.word	0x2000ae90
 8000e04:	53c8d4f1 	.word	0x53c8d4f1
 8000e08:	401921fb 	.word	0x401921fb
 8000e0c:	00000000 	.word	0x00000000

08000e10 <get_B6>:

//Tone 5 B6 1975.53 Hz
	uint8_t B6[22];
void get_B6(){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
	for(int i = 0; i < 22; i++){
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	e043      	b.n	8000ea4 <get_B6+0x94>
		B6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/22))*256;
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff fb79 	bl	8000514 <__aeabi_i2d>
 8000e22:	a32a      	add	r3, pc, #168	; (adr r3, 8000ecc <get_B6+0xbc>)
 8000e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e28:	f7ff fbde 	bl	80005e8 <__aeabi_dmul>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	460b      	mov	r3, r1
 8000e30:	4610      	mov	r0, r2
 8000e32:	4619      	mov	r1, r3
 8000e34:	f04f 0200 	mov.w	r2, #0
 8000e38:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <get_B6+0xb0>)
 8000e3a:	f7ff fcff 	bl	800083c <__aeabi_ddiv>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	460b      	mov	r3, r1
 8000e42:	4610      	mov	r0, r2
 8000e44:	4619      	mov	r1, r3
 8000e46:	f7ff fe01 	bl	8000a4c <__aeabi_d2f>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	ee00 3a10 	vmov	s0, r3
 8000e50:	f004 fbcc 	bl	80055ec <arm_sin_f32>
 8000e54:	eef0 7a40 	vmov.f32	s15, s0
 8000e58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e60:	ee17 0a90 	vmov	r0, s15
 8000e64:	f7ff fb68 	bl	8000538 <__aeabi_f2d>
 8000e68:	a313      	add	r3, pc, #76	; (adr r3, 8000eb8 <get_B6+0xa8>)
 8000e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6e:	f7ff fbbb 	bl	80005e8 <__aeabi_dmul>
 8000e72:	4602      	mov	r2, r0
 8000e74:	460b      	mov	r3, r1
 8000e76:	4610      	mov	r0, r2
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <get_B6+0xb4>)
 8000e80:	f7ff fbb2 	bl	80005e8 <__aeabi_dmul>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4610      	mov	r0, r2
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f7ff fdbe 	bl	8000a0c <__aeabi_d2uiz>
 8000e90:	4603      	mov	r3, r0
 8000e92:	b2d9      	uxtb	r1, r3
 8000e94:	4a0c      	ldr	r2, [pc, #48]	; (8000ec8 <get_B6+0xb8>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	460a      	mov	r2, r1
 8000e9c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 22; i++){
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b15      	cmp	r3, #21
 8000ea8:	ddb8      	ble.n	8000e1c <get_B6+0xc>
	}
}
 8000eaa:	bf00      	nop
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	f3af 8000 	nop.w
 8000eb8:	51eb851f 	.word	0x51eb851f
 8000ebc:	3fd51eb8 	.word	0x3fd51eb8
 8000ec0:	40360000 	.word	0x40360000
 8000ec4:	40700000 	.word	0x40700000
 8000ec8:	2000ad28 	.word	0x2000ad28
 8000ecc:	53c8d4f1 	.word	0x53c8d4f1
 8000ed0:	401921fb 	.word	0x401921fb
 8000ed4:	00000000 	.word	0x00000000

08000ed8 <get_B5>:

//Tone 6 B5 987.78 Hz
	uint8_t B5[45];
void get_B5(){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
	for(int i = 0; i < 45; i++){
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	e043      	b.n	8000f6c <get_B5+0x94>
		B5[i] =  0.33*(1 + arm_sin_f32(2*pi*i/45))*256;
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff fb15 	bl	8000514 <__aeabi_i2d>
 8000eea:	a32a      	add	r3, pc, #168	; (adr r3, 8000f94 <get_B5+0xbc>)
 8000eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef0:	f7ff fb7a 	bl	80005e8 <__aeabi_dmul>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4610      	mov	r0, r2
 8000efa:	4619      	mov	r1, r3
 8000efc:	f04f 0200 	mov.w	r2, #0
 8000f00:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <get_B5+0xb0>)
 8000f02:	f7ff fc9b 	bl	800083c <__aeabi_ddiv>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f7ff fd9d 	bl	8000a4c <__aeabi_d2f>
 8000f12:	4603      	mov	r3, r0
 8000f14:	ee00 3a10 	vmov	s0, r3
 8000f18:	f004 fb68 	bl	80055ec <arm_sin_f32>
 8000f1c:	eef0 7a40 	vmov.f32	s15, s0
 8000f20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f28:	ee17 0a90 	vmov	r0, s15
 8000f2c:	f7ff fb04 	bl	8000538 <__aeabi_f2d>
 8000f30:	a313      	add	r3, pc, #76	; (adr r3, 8000f80 <get_B5+0xa8>)
 8000f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f36:	f7ff fb57 	bl	80005e8 <__aeabi_dmul>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4610      	mov	r0, r2
 8000f40:	4619      	mov	r1, r3
 8000f42:	f04f 0200 	mov.w	r2, #0
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <get_B5+0xb4>)
 8000f48:	f7ff fb4e 	bl	80005e8 <__aeabi_dmul>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f7ff fd5a 	bl	8000a0c <__aeabi_d2uiz>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	b2d9      	uxtb	r1, r3
 8000f5c:	4a0c      	ldr	r2, [pc, #48]	; (8000f90 <get_B5+0xb8>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	460a      	mov	r2, r1
 8000f64:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 45; i++){
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b2c      	cmp	r3, #44	; 0x2c
 8000f70:	ddb8      	ble.n	8000ee4 <get_B5+0xc>
	}
}
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	f3af 8000 	nop.w
 8000f80:	51eb851f 	.word	0x51eb851f
 8000f84:	3fd51eb8 	.word	0x3fd51eb8
 8000f88:	40468000 	.word	0x40468000
 8000f8c:	40700000 	.word	0x40700000
 8000f90:	2000ad88 	.word	0x2000ad88
 8000f94:	53c8d4f1 	.word	0x53c8d4f1
 8000f98:	401921fb 	.word	0x401921fb

08000f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08c      	sub	sp, #48	; 0x30
 8000fa0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa2:	f001 fa24 	bl	80023ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa6:	f000 f919 	bl	80011dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000faa:	f000 fa2d 	bl	8001408 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fae:	f000 fa0d 	bl	80013cc <MX_DMA_Init>
  MX_DAC1_Init();
 8000fb2:	f000 f965 	bl	8001280 <MX_DAC1_Init>
  MX_QUADSPI_Init();
 8000fb6:	f000 f995 	bl	80012e4 <MX_QUADSPI_Init>
  MX_TIM2_Init();
 8000fba:	f000 f9b9 	bl	8001330 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  BSP_QSPI_Init();
 8000fbe:	f000 fb3b 	bl	8001638 <BSP_QSPI_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000fc2:	4878      	ldr	r0, [pc, #480]	; (80011a4 <main+0x208>)
 8000fc4:	f003 feba 	bl	8004d3c <HAL_TIM_Base_Start_IT>




  get_B5();
 8000fc8:	f7ff ff86 	bl	8000ed8 <get_B5>
  get_C6();
 8000fcc:	f7ff fd90 	bl	8000af0 <get_C6>
  get_E6();
 8000fd0:	f7ff fdf2 	bl	8000bb8 <get_E6>
  get_G6();
 8000fd4:	f7ff fe54 	bl	8000c80 <get_G6>
  get_A6();
 8000fd8:	f7ff feb6 	bl	8000d48 <get_A6>
  get_B6();
 8000fdc:	f7ff ff18 	bl	8000e10 <get_B6>
  uint32_t addr = 0x000000;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
  for(int i = 0; i < 3; i++){
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe8:	e00f      	b.n	800100a <main+0x6e>
	  if(BSP_QSPI_Erase_Block(addr + i * 0x010000) != QSPI_OK){
 8000fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fec:	041b      	lsls	r3, r3, #16
 8000fee:	461a      	mov	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 fc4f 	bl	8001898 <BSP_QSPI_Erase_Block>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <main+0x68>
		  Error_Handler();
 8001000:	f000 fb12 	bl	8001628 <Error_Handler>
  for(int i = 0; i < 3; i++){
 8001004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001006:	3301      	adds	r3, #1
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	2b02      	cmp	r3, #2
 800100e:	ddec      	ble.n	8000fea <main+0x4e>
	  }
  }

  uint32_t tone_addr = 0x000000;
 8001010:	2300      	movs	r3, #0
 8001012:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 490; i++){
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
 8001018:	e00f      	b.n	800103a <main+0x9e>
	  if(BSP_QSPI_Write((uint8_t *)B5, tone_addr, 45) != QSPI_OK){
 800101a:	222d      	movs	r2, #45	; 0x2d
 800101c:	6a39      	ldr	r1, [r7, #32]
 800101e:	4862      	ldr	r0, [pc, #392]	; (80011a8 <main+0x20c>)
 8001020:	f000 fbbc 	bl	800179c <BSP_QSPI_Write>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <main+0x92>
		  Error_Handler();
 800102a:	f000 fafd 	bl	8001628 <Error_Handler>
	  }
	  tone_addr += 45;
 800102e:	6a3b      	ldr	r3, [r7, #32]
 8001030:	332d      	adds	r3, #45	; 0x2d
 8001032:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 490; i++){
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	3301      	adds	r3, #1
 8001038:	61fb      	str	r3, [r7, #28]
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 8001040:	dbeb      	blt.n	800101a <main+0x7e>
  }
  for(int i = 0; i < 525; i++){
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
 8001046:	e00f      	b.n	8001068 <main+0xcc>
	  if(BSP_QSPI_Write((uint8_t *)C6, tone_addr, 42) != QSPI_OK){
 8001048:	222a      	movs	r2, #42	; 0x2a
 800104a:	6a39      	ldr	r1, [r7, #32]
 800104c:	4857      	ldr	r0, [pc, #348]	; (80011ac <main+0x210>)
 800104e:	f000 fba5 	bl	800179c <BSP_QSPI_Write>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <main+0xc0>
		  Error_Handler();
 8001058:	f000 fae6 	bl	8001628 <Error_Handler>
	  }
	  tone_addr += 42;
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	332a      	adds	r3, #42	; 0x2a
 8001060:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 525; i++){
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	3301      	adds	r3, #1
 8001066:	61bb      	str	r3, [r7, #24]
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 800106e:	ddeb      	ble.n	8001048 <main+0xac>
  }
  for(int i = 0; i < 648; i++){
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	e00f      	b.n	8001096 <main+0xfa>
	  if(BSP_QSPI_Write((uint8_t *)E6, tone_addr, 34) != QSPI_OK){
 8001076:	2222      	movs	r2, #34	; 0x22
 8001078:	6a39      	ldr	r1, [r7, #32]
 800107a:	484d      	ldr	r0, [pc, #308]	; (80011b0 <main+0x214>)
 800107c:	f000 fb8e 	bl	800179c <BSP_QSPI_Write>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <main+0xee>
		  Error_Handler();
 8001086:	f000 facf 	bl	8001628 <Error_Handler>
	  }
	  tone_addr += 34;
 800108a:	6a3b      	ldr	r3, [r7, #32]
 800108c:	3322      	adds	r3, #34	; 0x22
 800108e:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 648; i++){
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	3301      	adds	r3, #1
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f5b3 7f22 	cmp.w	r3, #648	; 0x288
 800109c:	dbeb      	blt.n	8001076 <main+0xda>
  }
  tone_addr = 0x010266;
 800109e:	4b45      	ldr	r3, [pc, #276]	; (80011b4 <main+0x218>)
 80010a0:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 787; i++){
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	e00f      	b.n	80010c8 <main+0x12c>
	  if(BSP_QSPI_Write((uint8_t *)G6, tone_addr, 28) != QSPI_OK){
 80010a8:	221c      	movs	r2, #28
 80010aa:	6a39      	ldr	r1, [r7, #32]
 80010ac:	4842      	ldr	r0, [pc, #264]	; (80011b8 <main+0x21c>)
 80010ae:	f000 fb75 	bl	800179c <BSP_QSPI_Write>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <main+0x120>
		  Error_Handler();
 80010b8:	f000 fab6 	bl	8001628 <Error_Handler>
	  }
	  tone_addr += 28;
 80010bc:	6a3b      	ldr	r3, [r7, #32]
 80010be:	331c      	adds	r3, #28
 80010c0:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 787; i++){
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	3301      	adds	r3, #1
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	f240 3212 	movw	r2, #786	; 0x312
 80010ce:	4293      	cmp	r3, r2
 80010d0:	ddea      	ble.n	80010a8 <main+0x10c>
  }
  tone_addr = 0x015888;
 80010d2:	4b3a      	ldr	r3, [pc, #232]	; (80011bc <main+0x220>)
 80010d4:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 882; i++){
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	e00f      	b.n	80010fc <main+0x160>
	  if(BSP_QSPI_Write((uint8_t *)A6, tone_addr, 25) != QSPI_OK){
 80010dc:	2219      	movs	r2, #25
 80010de:	6a39      	ldr	r1, [r7, #32]
 80010e0:	4837      	ldr	r0, [pc, #220]	; (80011c0 <main+0x224>)
 80010e2:	f000 fb5b 	bl	800179c <BSP_QSPI_Write>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <main+0x154>
		  Error_Handler();
 80010ec:	f000 fa9c 	bl	8001628 <Error_Handler>
	  }
	  tone_addr += 25;
 80010f0:	6a3b      	ldr	r3, [r7, #32]
 80010f2:	3319      	adds	r3, #25
 80010f4:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 882; i++){
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	3301      	adds	r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f240 3271 	movw	r2, #881	; 0x371
 8001102:	4293      	cmp	r3, r2
 8001104:	ddea      	ble.n	80010dc <main+0x140>
  }
  for(int i = 0; i < 1002; i++){
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	e00f      	b.n	800112c <main+0x190>
	  if(BSP_QSPI_Write((uint8_t *)B6, tone_addr, 22) != QSPI_OK){
 800110c:	2216      	movs	r2, #22
 800110e:	6a39      	ldr	r1, [r7, #32]
 8001110:	482c      	ldr	r0, [pc, #176]	; (80011c4 <main+0x228>)
 8001112:	f000 fb43 	bl	800179c <BSP_QSPI_Write>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <main+0x184>
		  Error_Handler();
 800111c:	f000 fa84 	bl	8001628 <Error_Handler>
	  }
	  tone_addr += 22;
 8001120:	6a3b      	ldr	r3, [r7, #32]
 8001122:	3316      	adds	r3, #22
 8001124:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 1002; i++){
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	3301      	adds	r3, #1
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8001132:	4293      	cmp	r3, r2
 8001134:	ddea      	ble.n	800110c <main+0x170>
  }

  //Read the data
  if(BSP_QSPI_Read((uint8_t *)play, 0x00000000, 22050) != QSPI_OK){
 8001136:	f245 6222 	movw	r2, #22050	; 0x5622
 800113a:	2100      	movs	r1, #0
 800113c:	4822      	ldr	r0, [pc, #136]	; (80011c8 <main+0x22c>)
 800113e:	f000 fae7 	bl	8001710 <BSP_QSPI_Read>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <main+0x1b0>
	  Error_Handler();
 8001148:	f000 fa6e 	bl	8001628 <Error_Handler>
  }

  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 800114c:	2308      	movs	r3, #8
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	f245 6322 	movw	r3, #22050	; 0x5622
 8001154:	4a1c      	ldr	r2, [pc, #112]	; (80011c8 <main+0x22c>)
 8001156:	2100      	movs	r1, #0
 8001158:	481c      	ldr	r0, [pc, #112]	; (80011cc <main+0x230>)
 800115a:	f001 faa9 	bl	80026b0 <HAL_DAC_Start_DMA>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  int GPIO_PinState = 0;//When you press the button, status is 0
 800115e:	2300      	movs	r3, #0
 8001160:	603b      	str	r3, [r7, #0]
	  GPIO_PinState =  HAL_GPIO_ReadPin (Button_GPIO_Port, Button_Pin);
 8001162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001166:	481a      	ldr	r0, [pc, #104]	; (80011d0 <main+0x234>)
 8001168:	f002 f9fa 	bl	8003560 <HAL_GPIO_ReadPin>
 800116c:	4603      	mov	r3, r0
 800116e:	603b      	str	r3, [r7, #0]
	  if(GPIO_PinState==1){
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d0f3      	beq.n	800115e <main+0x1c2>
		  //HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
	  }
	  else
	  {
		  if(HAL_GPIO_ReadPin (LED_GPIO_Port, LED_Pin)){
 8001176:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800117a:	4816      	ldr	r0, [pc, #88]	; (80011d4 <main+0x238>)
 800117c:	f002 f9f0 	bl	8003560 <HAL_GPIO_ReadPin>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0eb      	beq.n	800115e <main+0x1c2>
			  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2108      	movs	r1, #8
 800118a:	4813      	ldr	r0, [pc, #76]	; (80011d8 <main+0x23c>)
 800118c:	f002 fa00 	bl	8003590 <HAL_GPIO_WritePin>
			  HAL_Delay(500);
 8001190:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001194:	f001 f964 	bl	8002460 <HAL_Delay>
			  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001198:	2201      	movs	r2, #1
 800119a:	2108      	movs	r1, #8
 800119c:	480e      	ldr	r0, [pc, #56]	; (80011d8 <main+0x23c>)
 800119e:	f002 f9f7 	bl	8003590 <HAL_GPIO_WritePin>
  {
 80011a2:	e7dc      	b.n	800115e <main+0x1c2>
 80011a4:	2000ae00 	.word	0x2000ae00
 80011a8:	2000ad88 	.word	0x2000ad88
 80011ac:	2000adb8 	.word	0x2000adb8
 80011b0:	2000ad04 	.word	0x2000ad04
 80011b4:	00010266 	.word	0x00010266
 80011b8:	2000ade4 	.word	0x2000ade4
 80011bc:	00015888 	.word	0x00015888
 80011c0:	2000ae90 	.word	0x2000ae90
 80011c4:	2000ad28 	.word	0x2000ad28
 80011c8:	20000094 	.word	0x20000094
 80011cc:	2000acf0 	.word	0x2000acf0
 80011d0:	48000800 	.word	0x48000800
 80011d4:	48000400 	.word	0x48000400
 80011d8:	48001000 	.word	0x48001000

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b096      	sub	sp, #88	; 0x58
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	2244      	movs	r2, #68	; 0x44
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f004 fa6e 	bl	80056cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	463b      	mov	r3, r7
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001202:	f002 fa05 	bl	8003610 <HAL_PWREx_ControlVoltageScaling>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800120c:	f000 fa0c 	bl	8001628 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001210:	2310      	movs	r3, #16
 8001212:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001214:	2301      	movs	r3, #1
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800121c:	2360      	movs	r3, #96	; 0x60
 800121e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001220:	2302      	movs	r3, #2
 8001222:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001224:	2301      	movs	r3, #1
 8001226:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001228:	2301      	movs	r3, #1
 800122a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800122c:	2328      	movs	r3, #40	; 0x28
 800122e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001230:	2307      	movs	r3, #7
 8001232:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001234:	2302      	movs	r3, #2
 8001236:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001238:	2302      	movs	r3, #2
 800123a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4618      	mov	r0, r3
 8001242:	f002 ff1b 	bl	800407c <HAL_RCC_OscConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800124c:	f000 f9ec 	bl	8001628 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001250:	230f      	movs	r3, #15
 8001252:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001254:	2303      	movs	r3, #3
 8001256:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	2104      	movs	r1, #4
 8001268:	4618      	mov	r0, r3
 800126a:	f003 faed 	bl	8004848 <HAL_RCC_ClockConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001274:	f000 f9d8 	bl	8001628 <Error_Handler>
  }
}
 8001278:	bf00      	nop
 800127a:	3758      	adds	r7, #88	; 0x58
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	2224      	movs	r2, #36	; 0x24
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f004 fa1d 	bl	80056cc <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_DAC1_Init+0x5c>)
 8001294:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <MX_DAC1_Init+0x60>)
 8001296:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001298:	4810      	ldr	r0, [pc, #64]	; (80012dc <MX_DAC1_Init+0x5c>)
 800129a:	f001 f9e7 	bl	800266c <HAL_DAC_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80012a4:	f000 f9c0 	bl	8001628 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80012ac:	2324      	movs	r3, #36	; 0x24
 80012ae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	2200      	movs	r2, #0
 80012c0:	4619      	mov	r1, r3
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <MX_DAC1_Init+0x5c>)
 80012c4:	f001 fad4 	bl	8002870 <HAL_DAC_ConfigChannel>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80012ce:	f000 f9ab 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	3728      	adds	r7, #40	; 0x28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	2000acf0 	.word	0x2000acf0
 80012e0:	40007400 	.word	0x40007400

080012e4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_QUADSPI_Init+0x44>)
 80012ea:	4a10      	ldr	r2, [pc, #64]	; (800132c <MX_QUADSPI_Init+0x48>)
 80012ec:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <MX_QUADSPI_Init+0x44>)
 80012f0:	22ff      	movs	r2, #255	; 0xff
 80012f2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <MX_QUADSPI_Init+0x44>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <MX_QUADSPI_Init+0x44>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_QUADSPI_Init+0x44>)
 8001302:	2201      	movs	r2, #1
 8001304:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <MX_QUADSPI_Init+0x44>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <MX_QUADSPI_Init+0x44>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_QUADSPI_Init+0x44>)
 8001314:	f002 f9d2 	bl	80036bc <HAL_QSPI_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800131e:	f000 f983 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	2000ae4c 	.word	0x2000ae4c
 800132c:	a0001000 	.word	0xa0001000

08001330 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800134e:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <MX_TIM2_Init+0x98>)
 8001350:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001354:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001356:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <MX_TIM2_Init+0x98>)
 8001358:	2200      	movs	r2, #0
 800135a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135c:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <MX_TIM2_Init+0x98>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 8001362:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <MX_TIM2_Init+0x98>)
 8001364:	f240 7216 	movw	r2, #1814	; 0x716
 8001368:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136a:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <MX_TIM2_Init+0x98>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <MX_TIM2_Init+0x98>)
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001376:	4814      	ldr	r0, [pc, #80]	; (80013c8 <MX_TIM2_Init+0x98>)
 8001378:	f003 fc88 	bl	8004c8c <HAL_TIM_Base_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001382:	f000 f951 	bl	8001628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	4619      	mov	r1, r3
 8001392:	480d      	ldr	r0, [pc, #52]	; (80013c8 <MX_TIM2_Init+0x98>)
 8001394:	f003 fe61 	bl	800505a <HAL_TIM_ConfigClockSource>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800139e:	f000 f943 	bl	8001628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013a2:	2320      	movs	r3, #32
 80013a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	4619      	mov	r1, r3
 80013ae:	4806      	ldr	r0, [pc, #24]	; (80013c8 <MX_TIM2_Init+0x98>)
 80013b0:	f004 f876 	bl	80054a0 <HAL_TIMEx_MasterConfigSynchronization>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013ba:	f000 f935 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	3720      	adds	r7, #32
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	2000ae00 	.word	0x2000ae00

080013cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_DMA_Init+0x38>)
 80013d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <MX_DMA_Init+0x38>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6493      	str	r3, [r2, #72]	; 0x48
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_DMA_Init+0x38>)
 80013e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	200d      	movs	r0, #13
 80013f0:	f001 f912 	bl	8002618 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80013f4:	200d      	movs	r0, #13
 80013f6:	f001 f92b 	bl	8002650 <HAL_NVIC_EnableIRQ>

}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000

08001408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800141e:	4b34      	ldr	r3, [pc, #208]	; (80014f0 <MX_GPIO_Init+0xe8>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	4a33      	ldr	r2, [pc, #204]	; (80014f0 <MX_GPIO_Init+0xe8>)
 8001424:	f043 0310 	orr.w	r3, r3, #16
 8001428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142a:	4b31      	ldr	r3, [pc, #196]	; (80014f0 <MX_GPIO_Init+0xe8>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001436:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <MX_GPIO_Init+0xe8>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	4a2d      	ldr	r2, [pc, #180]	; (80014f0 <MX_GPIO_Init+0xe8>)
 800143c:	f043 0304 	orr.w	r3, r3, #4
 8001440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001442:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <MX_GPIO_Init+0xe8>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <MX_GPIO_Init+0xe8>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	4a27      	ldr	r2, [pc, #156]	; (80014f0 <MX_GPIO_Init+0xe8>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145a:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <MX_GPIO_Init+0xe8>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <MX_GPIO_Init+0xe8>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	4a21      	ldr	r2, [pc, #132]	; (80014f0 <MX_GPIO_Init+0xe8>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001472:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <MX_GPIO_Init+0xe8>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800147e:	2201      	movs	r2, #1
 8001480:	2108      	movs	r1, #8
 8001482:	481c      	ldr	r0, [pc, #112]	; (80014f4 <MX_GPIO_Init+0xec>)
 8001484:	f002 f884 	bl	8003590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800148e:	481a      	ldr	r0, [pc, #104]	; (80014f8 <MX_GPIO_Init+0xf0>)
 8001490:	f002 f87e 	bl	8003590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001494:	2308      	movs	r3, #8
 8001496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001498:	2301      	movs	r3, #1
 800149a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	4812      	ldr	r0, [pc, #72]	; (80014f4 <MX_GPIO_Init+0xec>)
 80014ac:	f001 fdba 	bl	8003024 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80014b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_GPIO_Init+0xf4>)
 80014b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	480e      	ldr	r0, [pc, #56]	; (8001500 <MX_GPIO_Init+0xf8>)
 80014c6:	f001 fdad 	bl	8003024 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80014ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_GPIO_Init+0xf0>)
 80014e4:	f001 fd9e 	bl	8003024 <HAL_GPIO_Init>

}
 80014e8:	bf00      	nop
 80014ea:	3728      	adds	r7, #40	; 0x28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40021000 	.word	0x40021000
 80014f4:	48001000 	.word	0x48001000
 80014f8:	48000400 	.word	0x48000400
 80014fc:	10110000 	.word	0x10110000
 8001500:	48000800 	.word	0x48000800

08001504 <HAL_DAC_ConvCpltCallbackCh1>:
/* USER CODE BEGIN 4 */
int lower = 1;
int upper = 3;
int DAC_status = 0;
int LED_status2 = 0;
void HAL_DAC_ConvCpltCallbackCh1 (DAC_HandleTypeDef * hdac){
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af02      	add	r7, sp, #8
 800150a:	6078      	str	r0, [r7, #4]

	if(DAC_status == 1){
 800150c:	4b33      	ldr	r3, [pc, #204]	; (80015dc <HAL_DAC_ConvCpltCallbackCh1+0xd8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d116      	bne.n	8001542 <HAL_DAC_ConvCpltCallbackCh1+0x3e>
		if(BSP_QSPI_Read((uint8_t *)play, 0x02AEAA, 22050) != QSPI_OK){
 8001514:	f245 6222 	movw	r2, #22050	; 0x5622
 8001518:	4931      	ldr	r1, [pc, #196]	; (80015e0 <HAL_DAC_ConvCpltCallbackCh1+0xdc>)
 800151a:	4832      	ldr	r0, [pc, #200]	; (80015e4 <HAL_DAC_ConvCpltCallbackCh1+0xe0>)
 800151c:	f000 f8f8 	bl	8001710 <BSP_QSPI_Read>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_DAC_ConvCpltCallbackCh1+0x26>
					  Error_Handler();
 8001526:	f000 f87f 	bl	8001628 <Error_Handler>
		}
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, empty, 22050, DAC_ALIGN_8B_R);
 800152a:	2308      	movs	r3, #8
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	f245 6322 	movw	r3, #22050	; 0x5622
 8001532:	4a2d      	ldr	r2, [pc, #180]	; (80015e8 <HAL_DAC_ConvCpltCallbackCh1+0xe4>)
 8001534:	2100      	movs	r1, #0
 8001536:	482d      	ldr	r0, [pc, #180]	; (80015ec <HAL_DAC_ConvCpltCallbackCh1+0xe8>)
 8001538:	f001 f8ba 	bl	80026b0 <HAL_DAC_Start_DMA>
		DAC_status = 0;
 800153c:	4b27      	ldr	r3, [pc, #156]	; (80015dc <HAL_DAC_ConvCpltCallbackCh1+0xd8>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
	}
	int randomnumber = (rand() % (upper - lower + 1)) + lower;
 8001542:	f004 f8cb 	bl	80056dc <rand>
 8001546:	4602      	mov	r2, r0
 8001548:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <HAL_DAC_ConvCpltCallbackCh1+0xec>)
 800154a:	6819      	ldr	r1, [r3, #0]
 800154c:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <HAL_DAC_ConvCpltCallbackCh1+0xf0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	1acb      	subs	r3, r1, r3
 8001552:	3301      	adds	r3, #1
 8001554:	fb92 f1f3 	sdiv	r1, r2, r3
 8001558:	fb03 f301 	mul.w	r3, r3, r1
 800155c:	1ad2      	subs	r2, r2, r3
 800155e:	4b25      	ldr	r3, [pc, #148]	; (80015f4 <HAL_DAC_ConvCpltCallbackCh1+0xf0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]
	if(randomnumber%3 == 0){
 8001566:	68f9      	ldr	r1, [r7, #12]
 8001568:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <HAL_DAC_ConvCpltCallbackCh1+0xf4>)
 800156a:	fb83 3201 	smull	r3, r2, r3, r1
 800156e:	17cb      	asrs	r3, r1, #31
 8001570:	1ad2      	subs	r2, r2, r3
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	1aca      	subs	r2, r1, r3
 800157a:	2a00      	cmp	r2, #0
 800157c:	d129      	bne.n	80015d2 <HAL_DAC_ConvCpltCallbackCh1+0xce>
		LED_status2 = (LED_status2 + 1) % 2;
 800157e:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <HAL_DAC_ConvCpltCallbackCh1+0xf8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	3301      	adds	r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	bfb8      	it	lt
 800158c:	425b      	neglt	r3, r3
 800158e:	4a1b      	ldr	r2, [pc, #108]	; (80015fc <HAL_DAC_ConvCpltCallbackCh1+0xf8>)
 8001590:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001592:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001596:	481a      	ldr	r0, [pc, #104]	; (8001600 <HAL_DAC_ConvCpltCallbackCh1+0xfc>)
 8001598:	f002 f812 	bl	80035c0 <HAL_GPIO_TogglePin>
		if(LED_status2){
 800159c:	4b17      	ldr	r3, [pc, #92]	; (80015fc <HAL_DAC_ConvCpltCallbackCh1+0xf8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d016      	beq.n	80015d2 <HAL_DAC_ConvCpltCallbackCh1+0xce>
			DAC_status = 1;
 80015a4:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <HAL_DAC_ConvCpltCallbackCh1+0xd8>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]
			if(BSP_QSPI_Read((uint8_t *)play, 0x000000, 22050) != QSPI_OK){
 80015aa:	f245 6222 	movw	r2, #22050	; 0x5622
 80015ae:	2100      	movs	r1, #0
 80015b0:	480c      	ldr	r0, [pc, #48]	; (80015e4 <HAL_DAC_ConvCpltCallbackCh1+0xe0>)
 80015b2:	f000 f8ad 	bl	8001710 <BSP_QSPI_Read>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <HAL_DAC_ConvCpltCallbackCh1+0xbc>
								  Error_Handler();
 80015bc:	f000 f834 	bl	8001628 <Error_Handler>
			}
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 80015c0:	2308      	movs	r3, #8
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	f245 6322 	movw	r3, #22050	; 0x5622
 80015c8:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <HAL_DAC_ConvCpltCallbackCh1+0xe0>)
 80015ca:	2100      	movs	r1, #0
 80015cc:	4807      	ldr	r0, [pc, #28]	; (80015ec <HAL_DAC_ConvCpltCallbackCh1+0xe8>)
 80015ce:	f001 f86f 	bl	80026b0 <HAL_DAC_Start_DMA>
		  }
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
		counter=0;
	}
	counter++;*/
}
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	2000acdc 	.word	0x2000acdc
 80015e0:	0002aeaa 	.word	0x0002aeaa
 80015e4:	20000094 	.word	0x20000094
 80015e8:	200056b8 	.word	0x200056b8
 80015ec:	2000acf0 	.word	0x2000acf0
 80015f0:	20000004 	.word	0x20000004
 80015f4:	20000000 	.word	0x20000000
 80015f8:	55555556 	.word	0x55555556
 80015fc:	2000ace0 	.word	0x2000ace0
 8001600:	48000400 	.word	0x48000400

08001604 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a04      	ldr	r2, [pc, #16]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d101      	bne.n	800161a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001616:	f000 ff03 	bl	8002420 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40014800 	.word	0x40014800

08001628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	__BKPT();
 800162c:	be00      	bkpt	0x0000

  /* USER CODE END Error_Handler_Debug */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 800163e:	4b32      	ldr	r3, [pc, #200]	; (8001708 <BSP_QSPI_Init+0xd0>)
 8001640:	4a32      	ldr	r2, [pc, #200]	; (800170c <BSP_QSPI_Init+0xd4>)
 8001642:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8001644:	4830      	ldr	r0, [pc, #192]	; (8001708 <BSP_QSPI_Init+0xd0>)
 8001646:	f002 f8af 	bl	80037a8 <HAL_QSPI_DeInit>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e054      	b.n	80016fe <BSP_QSPI_Init+0xc6>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8001654:	f000 f964 	bl	8001920 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 2; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 26.67MHz */
 8001658:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <BSP_QSPI_Init+0xd0>)
 800165a:	2202      	movs	r2, #2
 800165c:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 800165e:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <BSP_QSPI_Init+0xd0>)
 8001660:	2204      	movs	r2, #4
 8001662:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001664:	4b28      	ldr	r3, [pc, #160]	; (8001708 <BSP_QSPI_Init+0xd0>)
 8001666:	2210      	movs	r2, #16
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800166e:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	fa93 f3a3 	rbit	r3, r3
 8001676:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 8001682:	2320      	movs	r3, #32
 8001684:	e003      	b.n	800168e <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	fab3 f383 	clz	r3, r3
 800168c:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25R6435F_FLASH_SIZE) - 1;
 800168e:	3b01      	subs	r3, #1
 8001690:	461a      	mov	r2, r3
 8001692:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <BSP_QSPI_Init+0xd0>)
 8001694:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <BSP_QSPI_Init+0xd0>)
 8001698:	2200      	movs	r2, #0
 800169a:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800169c:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <BSP_QSPI_Init+0xd0>)
 800169e:	2200      	movs	r2, #0
 80016a0:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80016a2:	4819      	ldr	r0, [pc, #100]	; (8001708 <BSP_QSPI_Init+0xd0>)
 80016a4:	f002 f80a 	bl	80036bc <HAL_QSPI_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e025      	b.n	80016fe <BSP_QSPI_Init+0xc6>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 80016b2:	4815      	ldr	r0, [pc, #84]	; (8001708 <BSP_QSPI_Init+0xd0>)
 80016b4:	f000 f974 	bl	80019a0 <QSPI_ResetMemory>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 80016be:	2304      	movs	r3, #4
 80016c0:	e01d      	b.n	80016fe <BSP_QSPI_Init+0xc6>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&QSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 80016c2:	2101      	movs	r1, #1
 80016c4:	4810      	ldr	r0, [pc, #64]	; (8001708 <BSP_QSPI_Init+0xd0>)
 80016c6:	f000 fa35 	bl	8001b34 <QSPI_QuadMode>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <BSP_QSPI_Init+0x9c>
  {
    return QSPI_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e014      	b.n	80016fe <BSP_QSPI_Init+0xc6>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&QSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 80016d4:	2101      	movs	r1, #1
 80016d6:	480c      	ldr	r0, [pc, #48]	; (8001708 <BSP_QSPI_Init+0xd0>)
 80016d8:	f000 fad4 	bl	8001c84 <QSPI_HighPerfMode>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <BSP_QSPI_Init+0xae>
  {
    return QSPI_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00b      	b.n	80016fe <BSP_QSPI_Init+0xc6>
  }
  
  /* Re-configure the clock for the high performance mode */
  QSPIHandle.Init.ClockPrescaler = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <BSP_QSPI_Init+0xd0>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	605a      	str	r2, [r3, #4]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80016ec:	4806      	ldr	r0, [pc, #24]	; (8001708 <BSP_QSPI_Init+0xd0>)
 80016ee:	f001 ffe5 	bl	80036bc <HAL_QSPI_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <BSP_QSPI_Init+0xc4>
  {
    return QSPI_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <BSP_QSPI_Init+0xc6>
  }

  return QSPI_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	2000aeac 	.word	0x2000aeac
 800170c:	a0001000 	.word	0xa0001000

08001710 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b092      	sub	sp, #72	; 0x48
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 800171c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001720:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction        = QUAD_INOUT_READ_CMD;
 8001722:	23eb      	movs	r3, #235	; 0xeb
 8001724:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = QSPI_ADDRESS_4_LINES;
 8001726:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = QSPI_ADDRESS_24_BITS;
 800172c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001730:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = ReadAddr;
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 8001736:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytes     = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8001740:	23aa      	movs	r3, #170	; 0xaa
 8001742:	61bb      	str	r3, [r7, #24]
  sCommand.DataMode           = QSPI_DATA_4_LINES;
 8001744:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001748:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles        = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 800174a:	2304      	movs	r3, #4
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData             = Size;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode            = QSPI_DDR_MODE_DISABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 8001756:	2300      	movs	r3, #0
 8001758:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 800175a:	2300      	movs	r3, #0
 800175c:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800175e:	f107 0310 	add.w	r3, r7, #16
 8001762:	f241 3288 	movw	r2, #5000	; 0x1388
 8001766:	4619      	mov	r1, r3
 8001768:	480b      	ldr	r0, [pc, #44]	; (8001798 <BSP_QSPI_Read+0x88>)
 800176a:	f002 f841 	bl	80037f0 <HAL_QSPI_Command>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <BSP_QSPI_Read+0x68>
  {
    return QSPI_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e00b      	b.n	8001790 <BSP_QSPI_Read+0x80>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001778:	f241 3288 	movw	r2, #5000	; 0x1388
 800177c:	68f9      	ldr	r1, [r7, #12]
 800177e:	4806      	ldr	r0, [pc, #24]	; (8001798 <BSP_QSPI_Read+0x88>)
 8001780:	f002 f92b 	bl	80039da <HAL_QSPI_Receive>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <BSP_QSPI_Read+0x80>
  }

  return QSPI_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3748      	adds	r7, #72	; 0x48
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	2000aeac 	.word	0x2000aeac

0800179c <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b096      	sub	sp, #88	; 0x58
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80017b0:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 80017b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d901      	bls.n	80017be <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4413      	add	r3, r2
 80017c8:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80017ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = QUAD_PAGE_PROG_CMD;
 80017d0:	2338      	movs	r3, #56	; 0x38
 80017d2:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 80017d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017d8:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 80017da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017de:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 80017e4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80017e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80017f2:	2300      	movs	r3, #0
 80017f4:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80017f6:	2300      	movs	r3, #0
 80017f8:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 80017fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017fc:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 80017fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001800:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001802:	4824      	ldr	r0, [pc, #144]	; (8001894 <BSP_QSPI_Write+0xf8>)
 8001804:	f000 f910 	bl	8001a28 <QSPI_WriteEnable>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e03b      	b.n	800188a <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	f241 3288 	movw	r2, #5000	; 0x1388
 800181a:	4619      	mov	r1, r3
 800181c:	481d      	ldr	r0, [pc, #116]	; (8001894 <BSP_QSPI_Write+0xf8>)
 800181e:	f001 ffe7 	bl	80037f0 <HAL_QSPI_Command>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e02e      	b.n	800188a <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800182c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001830:	68f9      	ldr	r1, [r7, #12]
 8001832:	4818      	ldr	r0, [pc, #96]	; (8001894 <BSP_QSPI_Write+0xf8>)
 8001834:	f002 f83a 	bl	80038ac <HAL_QSPI_Transmit>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e023      	b.n	800188a <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001842:	f241 3188 	movw	r1, #5000	; 0x1388
 8001846:	4813      	ldr	r0, [pc, #76]	; (8001894 <BSP_QSPI_Write+0xf8>)
 8001848:	f000 f93a 	bl	8001ac0 <QSPI_AutoPollingMemReady>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e019      	b.n	800188a <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8001856:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800185a:	4413      	add	r3, r2
 800185c:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001862:	4413      	add	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8001866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001868:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800186c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800186e:	429a      	cmp	r2, r3
 8001870:	d203      	bcs.n	800187a <BSP_QSPI_Write+0xde>
 8001872:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	e001      	b.n	800187e <BSP_QSPI_Write+0xe2>
 800187a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800187e:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8001880:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001884:	429a      	cmp	r2, r3
 8001886:	d3b8      	bcc.n	80017fa <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3758      	adds	r7, #88	; 0x58
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	2000aeac 	.word	0x2000aeac

08001898 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b090      	sub	sp, #64	; 0x40
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80018a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018a4:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = BLOCK_ERASE_CMD;
 80018a6:	23d8      	movs	r3, #216	; 0xd8
 80018a8:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 80018aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 80018b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018b4:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 80018be:	2300      	movs	r3, #0
 80018c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80018ca:	2300      	movs	r3, #0
 80018cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80018ce:	2300      	movs	r3, #0
 80018d0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80018d2:	4812      	ldr	r0, [pc, #72]	; (800191c <BSP_QSPI_Erase_Block+0x84>)
 80018d4:	f000 f8a8 	bl	8001a28 <QSPI_WriteEnable>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e017      	b.n	8001912 <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80018e2:	f107 0308 	add.w	r3, r7, #8
 80018e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ea:	4619      	mov	r1, r3
 80018ec:	480b      	ldr	r0, [pc, #44]	; (800191c <BSP_QSPI_Erase_Block+0x84>)
 80018ee:	f001 ff7f 	bl	80037f0 <HAL_QSPI_Command>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e00a      	b.n	8001912 <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 80018fc:	f640 51ac 	movw	r1, #3500	; 0xdac
 8001900:	4806      	ldr	r0, [pc, #24]	; (800191c <BSP_QSPI_Erase_Block+0x84>)
 8001902:	f000 f8dd 	bl	8001ac0 <QSPI_AutoPollingMemReady>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3740      	adds	r7, #64	; 0x40
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	2000aeac 	.word	0x2000aeac

08001920 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <BSP_QSPI_MspInit+0x78>)
 8001928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800192a:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <BSP_QSPI_MspInit+0x78>)
 800192c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001930:	6513      	str	r3, [r2, #80]	; 0x50
 8001932:	4b19      	ldr	r3, [pc, #100]	; (8001998 <BSP_QSPI_MspInit+0x78>)
 8001934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 800193e:	4b16      	ldr	r3, [pc, #88]	; (8001998 <BSP_QSPI_MspInit+0x78>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a15      	ldr	r2, [pc, #84]	; (8001998 <BSP_QSPI_MspInit+0x78>)
 8001944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <BSP_QSPI_MspInit+0x78>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a12      	ldr	r2, [pc, #72]	; (8001998 <BSP_QSPI_MspInit+0x78>)
 8001950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001954:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <BSP_QSPI_MspInit+0x78>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	4a0f      	ldr	r2, [pc, #60]	; (8001998 <BSP_QSPI_MspInit+0x78>)
 800195c:	f043 0310 	orr.w	r3, r3, #16
 8001960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <BSP_QSPI_MspInit+0x78>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	f003 0310 	and.w	r3, r3, #16
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 800196e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001972:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800197c:	2303      	movs	r3, #3
 800197e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001980:	230a      	movs	r3, #10
 8001982:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	4619      	mov	r1, r3
 800198a:	4804      	ldr	r0, [pc, #16]	; (800199c <BSP_QSPI_MspInit+0x7c>)
 800198c:	f001 fb4a 	bl	8003024 <HAL_GPIO_Init>
}
 8001990:	bf00      	nop
 8001992:	3720      	adds	r7, #32
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40021000 	.word	0x40021000
 800199c:	48001000 	.word	0x48001000

080019a0 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b090      	sub	sp, #64	; 0x40
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80019a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ac:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 80019ae:	2366      	movs	r3, #102	; 0x66
 80019b0:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80019c6:	2300      	movs	r3, #0
 80019c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80019ca:	2300      	movs	r3, #0
 80019cc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80019ce:	f107 0308 	add.w	r3, r7, #8
 80019d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d6:	4619      	mov	r1, r3
 80019d8:	4812      	ldr	r0, [pc, #72]	; (8001a24 <QSPI_ResetMemory+0x84>)
 80019da:	f001 ff09 	bl	80037f0 <HAL_QSPI_Command>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e019      	b.n	8001a1c <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 80019e8:	2399      	movs	r3, #153	; 0x99
 80019ea:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80019ec:	f107 0308 	add.w	r3, r7, #8
 80019f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f4:	4619      	mov	r1, r3
 80019f6:	480b      	ldr	r0, [pc, #44]	; (8001a24 <QSPI_ResetMemory+0x84>)
 80019f8:	f001 fefa 	bl	80037f0 <HAL_QSPI_Command>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e00a      	b.n	8001a1c <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001a06:	f241 3188 	movw	r1, #5000	; 0x1388
 8001a0a:	4806      	ldr	r0, [pc, #24]	; (8001a24 <QSPI_ResetMemory+0x84>)
 8001a0c:	f000 f858 	bl	8001ac0 <QSPI_AutoPollingMemReady>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3740      	adds	r7, #64	; 0x40
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	2000aeac 	.word	0x2000aeac

08001a28 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b096      	sub	sp, #88	; 0x58
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001a30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a34:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8001a36:	2306      	movs	r3, #6
 8001a38:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001a52:	2300      	movs	r3, #0
 8001a54:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a56:	f107 0320 	add.w	r3, r7, #32
 8001a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4816      	ldr	r0, [pc, #88]	; (8001abc <QSPI_WriteEnable+0x94>)
 8001a62:	f001 fec5 	bl	80037f0 <HAL_QSPI_Command>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e020      	b.n	8001ab2 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = MX25R6435F_SR_WEL;
 8001a70:	2302      	movs	r3, #2
 8001a72:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WEL;
 8001a74:	2302      	movs	r3, #2
 8001a76:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8001a80:	2310      	movs	r3, #16
 8001a82:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001a84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a88:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8001a8a:	2305      	movs	r3, #5
 8001a8c:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8001a8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a92:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a94:	f107 0208 	add.w	r2, r7, #8
 8001a98:	f107 0120 	add.w	r1, r7, #32
 8001a9c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001aa0:	4806      	ldr	r0, [pc, #24]	; (8001abc <QSPI_WriteEnable+0x94>)
 8001aa2:	f002 f83c 	bl	8003b1e <HAL_QSPI_AutoPolling>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e000      	b.n	8001ab2 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3758      	adds	r7, #88	; 0x58
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	2000aeac 	.word	0x2000aeac

08001ac0 <QSPI_AutoPollingMemReady>:
  * @param  hqspi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b096      	sub	sp, #88	; 0x58
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001aca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ace:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001ad0:	2305      	movs	r3, #5
 8001ad2:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001adc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ae0:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001aea:	2300      	movs	r3, #0
 8001aec:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001aee:	2300      	movs	r3, #0
 8001af0:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WIP;
 8001af6:	2301      	movs	r3, #1
 8001af8:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8001afe:	2301      	movs	r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8001b02:	2310      	movs	r3, #16
 8001b04:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001b06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b0a:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 8001b0c:	f107 0208 	add.w	r2, r7, #8
 8001b10:	f107 0120 	add.w	r1, r7, #32
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	4806      	ldr	r0, [pc, #24]	; (8001b30 <QSPI_AutoPollingMemReady+0x70>)
 8001b18:	f002 f801 	bl	8003b1e <HAL_QSPI_AutoPolling>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3758      	adds	r7, #88	; 0x58
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	2000aeac 	.word	0x2000aeac

08001b34 <QSPI_QuadMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b092      	sub	sp, #72	; 0x48
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001b40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001b46:	2305      	movs	r3, #5
 8001b48:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001b52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b56:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001b64:	2300      	movs	r3, #0
 8001b66:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b6c:	f107 0310 	add.w	r3, r7, #16
 8001b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b74:	4619      	mov	r1, r3
 8001b76:	4842      	ldr	r0, [pc, #264]	; (8001c80 <QSPI_QuadMode+0x14c>)
 8001b78:	f001 fe3a 	bl	80037f0 <HAL_QSPI_Command>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <QSPI_QuadMode+0x52>
  {
    return QSPI_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e077      	b.n	8001c76 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b86:	f107 030f 	add.w	r3, r7, #15
 8001b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8e:	4619      	mov	r1, r3
 8001b90:	483b      	ldr	r0, [pc, #236]	; (8001c80 <QSPI_QuadMode+0x14c>)
 8001b92:	f001 ff22 	bl	80039da <HAL_QSPI_Receive>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <QSPI_QuadMode+0x6c>
  {
    return QSPI_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e06a      	b.n	8001c76 <QSPI_QuadMode+0x142>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001ba0:	4837      	ldr	r0, [pc, #220]	; (8001c80 <QSPI_QuadMode+0x14c>)
 8001ba2:	f7ff ff41 	bl	8001a28 <QSPI_WriteEnable>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <QSPI_QuadMode+0x7c>
  {
    return QSPI_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e062      	b.n	8001c76 <QSPI_QuadMode+0x142>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d105      	bne.n	8001bc2 <QSPI_QuadMode+0x8e>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	73fb      	strb	r3, [r7, #15]
 8001bc0:	e004      	b.n	8001bcc <QSPI_QuadMode+0x98>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001bd0:	f107 0310 	add.w	r3, r7, #16
 8001bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4829      	ldr	r0, [pc, #164]	; (8001c80 <QSPI_QuadMode+0x14c>)
 8001bdc:	f001 fe08 	bl	80037f0 <HAL_QSPI_Command>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <QSPI_QuadMode+0xb6>
  {
    return QSPI_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e045      	b.n	8001c76 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001bea:	f107 030f 	add.w	r3, r7, #15
 8001bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4822      	ldr	r0, [pc, #136]	; (8001c80 <QSPI_QuadMode+0x14c>)
 8001bf6:	f001 fe59 	bl	80038ac <HAL_QSPI_Transmit>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <QSPI_QuadMode+0xd0>
  {
    return QSPI_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e038      	b.n	8001c76 <QSPI_QuadMode+0x142>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001c04:	f241 3188 	movw	r1, #5000	; 0x1388
 8001c08:	481d      	ldr	r0, [pc, #116]	; (8001c80 <QSPI_QuadMode+0x14c>)
 8001c0a:	f7ff ff59 	bl	8001ac0 <QSPI_AutoPollingMemReady>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <QSPI_QuadMode+0xe4>
  {
    return QSPI_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e02e      	b.n	8001c76 <QSPI_QuadMode+0x142>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8001c18:	2305      	movs	r3, #5
 8001c1a:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c24:	4619      	mov	r1, r3
 8001c26:	4816      	ldr	r0, [pc, #88]	; (8001c80 <QSPI_QuadMode+0x14c>)
 8001c28:	f001 fde2 	bl	80037f0 <HAL_QSPI_Command>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <QSPI_QuadMode+0x102>
  {
    return QSPI_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e01f      	b.n	8001c76 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c36:	f107 030f 	add.w	r3, r7, #15
 8001c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3e:	4619      	mov	r1, r3
 8001c40:	480f      	ldr	r0, [pc, #60]	; (8001c80 <QSPI_QuadMode+0x14c>)
 8001c42:	f001 feca 	bl	80039da <HAL_QSPI_Receive>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <QSPI_QuadMode+0x11c>
  {
    return QSPI_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e012      	b.n	8001c76 <QSPI_QuadMode+0x142>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d102      	bne.n	8001c60 <QSPI_QuadMode+0x12c>
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d007      	beq.n	8001c70 <QSPI_QuadMode+0x13c>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d004      	beq.n	8001c74 <QSPI_QuadMode+0x140>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <QSPI_QuadMode+0x140>
  {
    return QSPI_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <QSPI_QuadMode+0x142>
  }

  return QSPI_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3748      	adds	r7, #72	; 0x48
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	2000aeac 	.word	0x2000aeac

08001c84 <QSPI_HighPerfMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b092      	sub	sp, #72	; 0x48
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001c96:	2305      	movs	r3, #5
 8001c98:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001ca2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ca6:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8001cac:	2301      	movs	r3, #1
 8001cae:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001cbc:	f107 0310 	add.w	r3, r7, #16
 8001cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4853      	ldr	r0, [pc, #332]	; (8001e14 <QSPI_HighPerfMode+0x190>)
 8001cc8:	f001 fd92 	bl	80037f0 <HAL_QSPI_Command>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <QSPI_HighPerfMode+0x52>
  {
    return QSPI_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e09a      	b.n	8001e0c <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cde:	4619      	mov	r1, r3
 8001ce0:	484c      	ldr	r0, [pc, #304]	; (8001e14 <QSPI_HighPerfMode+0x190>)
 8001ce2:	f001 fe7a 	bl	80039da <HAL_QSPI_Receive>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <QSPI_HighPerfMode+0x6c>
  {
    return QSPI_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e08d      	b.n	8001e0c <QSPI_HighPerfMode+0x188>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8001cf0:	2315      	movs	r3, #21
 8001cf2:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001cf8:	f107 0310 	add.w	r3, r7, #16
 8001cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d00:	4619      	mov	r1, r3
 8001d02:	4844      	ldr	r0, [pc, #272]	; (8001e14 <QSPI_HighPerfMode+0x190>)
 8001d04:	f001 fd74 	bl	80037f0 <HAL_QSPI_Command>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <QSPI_HighPerfMode+0x8e>
  {
    return QSPI_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e07c      	b.n	8001e0c <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d12:	f107 030c 	add.w	r3, r7, #12
 8001d16:	3301      	adds	r3, #1
 8001d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	483d      	ldr	r0, [pc, #244]	; (8001e14 <QSPI_HighPerfMode+0x190>)
 8001d20:	f001 fe5b 	bl	80039da <HAL_QSPI_Receive>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <QSPI_HighPerfMode+0xaa>
  {
    return QSPI_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e06e      	b.n	8001e0c <QSPI_HighPerfMode+0x188>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001d2e:	4839      	ldr	r0, [pc, #228]	; (8001e14 <QSPI_HighPerfMode+0x190>)
 8001d30:	f7ff fe7a 	bl	8001a28 <QSPI_WriteEnable>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <QSPI_HighPerfMode+0xba>
  {
    return QSPI_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e066      	b.n	8001e0c <QSPI_HighPerfMode+0x188>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8001d3e:	78fb      	ldrb	r3, [r7, #3]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d105      	bne.n	8001d50 <QSPI_HighPerfMode+0xcc>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8001d44:	7bbb      	ldrb	r3, [r7, #14]
 8001d46:	f043 0302 	orr.w	r3, r3, #2
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	73bb      	strb	r3, [r7, #14]
 8001d4e:	e004      	b.n	8001d5a <QSPI_HighPerfMode+0xd6>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8001d50:	7bbb      	ldrb	r3, [r7, #14]
 8001d52:	f023 0302 	bic.w	r3, r3, #2
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 3;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d62:	f107 0310 	add.w	r3, r7, #16
 8001d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4829      	ldr	r0, [pc, #164]	; (8001e14 <QSPI_HighPerfMode+0x190>)
 8001d6e:	f001 fd3f 	bl	80037f0 <HAL_QSPI_Command>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <QSPI_HighPerfMode+0xf8>
  {
    return QSPI_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e047      	b.n	8001e0c <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d84:	4619      	mov	r1, r3
 8001d86:	4823      	ldr	r0, [pc, #140]	; (8001e14 <QSPI_HighPerfMode+0x190>)
 8001d88:	f001 fd90 	bl	80038ac <HAL_QSPI_Transmit>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <QSPI_HighPerfMode+0x112>
  {
    return QSPI_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e03a      	b.n	8001e0c <QSPI_HighPerfMode+0x188>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001d96:	f241 3188 	movw	r1, #5000	; 0x1388
 8001d9a:	481e      	ldr	r0, [pc, #120]	; (8001e14 <QSPI_HighPerfMode+0x190>)
 8001d9c:	f7ff fe90 	bl	8001ac0 <QSPI_AutoPollingMemReady>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <QSPI_HighPerfMode+0x126>
  {
    return QSPI_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e030      	b.n	8001e0c <QSPI_HighPerfMode+0x188>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8001daa:	2315      	movs	r3, #21
 8001dac:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8001dae:	2302      	movs	r3, #2
 8001db0:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001db2:	f107 0310 	add.w	r3, r7, #16
 8001db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4815      	ldr	r0, [pc, #84]	; (8001e14 <QSPI_HighPerfMode+0x190>)
 8001dbe:	f001 fd17 	bl	80037f0 <HAL_QSPI_Command>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <QSPI_HighPerfMode+0x148>
  {
    return QSPI_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e01f      	b.n	8001e0c <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001dcc:	f107 030c 	add.w	r3, r7, #12
 8001dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	480f      	ldr	r0, [pc, #60]	; (8001e14 <QSPI_HighPerfMode+0x190>)
 8001dd8:	f001 fdff 	bl	80039da <HAL_QSPI_Receive>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <QSPI_HighPerfMode+0x162>
  {
    return QSPI_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e012      	b.n	8001e0c <QSPI_HighPerfMode+0x188>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8001de6:	7b7b      	ldrb	r3, [r7, #13]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d102      	bne.n	8001df6 <QSPI_HighPerfMode+0x172>
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d007      	beq.n	8001e06 <QSPI_HighPerfMode+0x182>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8001df6:	7b7b      	ldrb	r3, [r7, #13]
 8001df8:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d004      	beq.n	8001e0a <QSPI_HighPerfMode+0x186>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <QSPI_HighPerfMode+0x186>
  {
    return QSPI_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <QSPI_HighPerfMode+0x188>
  }

  return QSPI_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3748      	adds	r7, #72	; 0x48
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	2000aeac 	.word	0x2000aeac

08001e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1e:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <HAL_MspInit+0x44>)
 8001e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e22:	4a0e      	ldr	r2, [pc, #56]	; (8001e5c <HAL_MspInit+0x44>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6613      	str	r3, [r2, #96]	; 0x60
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <HAL_MspInit+0x44>)
 8001e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e36:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <HAL_MspInit+0x44>)
 8001e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3a:	4a08      	ldr	r2, [pc, #32]	; (8001e5c <HAL_MspInit+0x44>)
 8001e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e40:	6593      	str	r3, [r2, #88]	; 0x58
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_MspInit+0x44>)
 8001e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000

08001e60 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08a      	sub	sp, #40	; 0x28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a2a      	ldr	r2, [pc, #168]	; (8001f28 <HAL_DAC_MspInit+0xc8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d14d      	bne.n	8001f1e <HAL_DAC_MspInit+0xbe>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001e82:	4b2a      	ldr	r3, [pc, #168]	; (8001f2c <HAL_DAC_MspInit+0xcc>)
 8001e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e86:	4a29      	ldr	r2, [pc, #164]	; (8001f2c <HAL_DAC_MspInit+0xcc>)
 8001e88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e8e:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <HAL_DAC_MspInit+0xcc>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9a:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <HAL_DAC_MspInit+0xcc>)
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9e:	4a23      	ldr	r2, [pc, #140]	; (8001f2c <HAL_DAC_MspInit+0xcc>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea6:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <HAL_DAC_MspInit+0xcc>)
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001eb2:	2310      	movs	r3, #16
 8001eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebe:	f107 0314 	add.w	r3, r7, #20
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec8:	f001 f8ac 	bl	8003024 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001ecc:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <HAL_DAC_MspInit+0xd0>)
 8001ece:	4a19      	ldr	r2, [pc, #100]	; (8001f34 <HAL_DAC_MspInit+0xd4>)
 8001ed0:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <HAL_DAC_MspInit+0xd0>)
 8001ed4:	2206      	movs	r2, #6
 8001ed6:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ed8:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <HAL_DAC_MspInit+0xd0>)
 8001eda:	2210      	movs	r2, #16
 8001edc:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_DAC_MspInit+0xd0>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001ee4:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_DAC_MspInit+0xd0>)
 8001ee6:	2280      	movs	r2, #128	; 0x80
 8001ee8:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_DAC_MspInit+0xd0>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <HAL_DAC_MspInit+0xd0>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <HAL_DAC_MspInit+0xd0>)
 8001ef8:	2220      	movs	r2, #32
 8001efa:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <HAL_DAC_MspInit+0xd0>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001f02:	480b      	ldr	r0, [pc, #44]	; (8001f30 <HAL_DAC_MspInit+0xd0>)
 8001f04:	f000 fe58 	bl	8002bb8 <HAL_DMA_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8001f0e:	f7ff fb8b 	bl	8001628 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a06      	ldr	r2, [pc, #24]	; (8001f30 <HAL_DAC_MspInit+0xd0>)
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	4a05      	ldr	r2, [pc, #20]	; (8001f30 <HAL_DAC_MspInit+0xd0>)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001f1e:	bf00      	nop
 8001f20:	3728      	adds	r7, #40	; 0x28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40007400 	.word	0x40007400
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	2000ad40 	.word	0x2000ad40
 8001f34:	40020030 	.word	0x40020030

08001f38 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a26      	ldr	r2, [pc, #152]	; (8001ff0 <HAL_QSPI_MspInit+0xb8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d145      	bne.n	8001fe6 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001f5a:	4b26      	ldr	r3, [pc, #152]	; (8001ff4 <HAL_QSPI_MspInit+0xbc>)
 8001f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f5e:	4a25      	ldr	r2, [pc, #148]	; (8001ff4 <HAL_QSPI_MspInit+0xbc>)
 8001f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f64:	6513      	str	r3, [r2, #80]	; 0x50
 8001f66:	4b23      	ldr	r3, [pc, #140]	; (8001ff4 <HAL_QSPI_MspInit+0xbc>)
 8001f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	4b20      	ldr	r3, [pc, #128]	; (8001ff4 <HAL_QSPI_MspInit+0xbc>)
 8001f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f76:	4a1f      	ldr	r2, [pc, #124]	; (8001ff4 <HAL_QSPI_MspInit+0xbc>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <HAL_QSPI_MspInit+0xbc>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <HAL_QSPI_MspInit+0xbc>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8e:	4a19      	ldr	r2, [pc, #100]	; (8001ff4 <HAL_QSPI_MspInit+0xbc>)
 8001f90:	f043 0310 	orr.w	r3, r3, #16
 8001f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f96:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <HAL_QSPI_MspInit+0xbc>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9a:	f003 0310 	and.w	r3, r3, #16
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
    PE10     ------> QUADSPI_CLK
    PE11     ------> QUADSPI_NCS
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fa2:	23c0      	movs	r3, #192	; 0xc0
 8001fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001fb2:	230a      	movs	r3, #10
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc0:	f001 f830 	bl	8003024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001fc4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001fd6:	230a      	movs	r3, #10
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <HAL_QSPI_MspInit+0xc0>)
 8001fe2:	f001 f81f 	bl	8003024 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001fe6:	bf00      	nop
 8001fe8:	3728      	adds	r7, #40	; 0x28
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	a0001000 	.word	0xa0001000
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	48001000 	.word	0x48001000

08001ffc <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0b      	ldr	r2, [pc, #44]	; (8002038 <HAL_QSPI_MspDeInit+0x3c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d10f      	bne.n	800202e <HAL_QSPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 800200e:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_QSPI_MspDeInit+0x40>)
 8002010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002012:	4a0a      	ldr	r2, [pc, #40]	; (800203c <HAL_QSPI_MspDeInit+0x40>)
 8002014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002018:	6513      	str	r3, [r2, #80]	; 0x50
    PE10     ------> QUADSPI_CLK
    PE11     ------> QUADSPI_NCS
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6|GPIO_PIN_7);
 800201a:	21c0      	movs	r1, #192	; 0xc0
 800201c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002020:	f001 f9aa 	bl	8003378 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13);
 8002024:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8002028:	4805      	ldr	r0, [pc, #20]	; (8002040 <HAL_QSPI_MspDeInit+0x44>)
 800202a:	f001 f9a5 	bl	8003378 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	a0001000 	.word	0xa0001000
 800203c:	40021000 	.word	0x40021000
 8002040:	48001000 	.word	0x48001000

08002044 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002054:	d10b      	bne.n	800206e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <HAL_TIM_Base_MspInit+0x38>)
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	4a08      	ldr	r2, [pc, #32]	; (800207c <HAL_TIM_Base_MspInit+0x38>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6593      	str	r3, [r2, #88]	; 0x58
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_TIM_Base_MspInit+0x38>)
 8002064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000

08002080 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08c      	sub	sp, #48	; 0x30
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8002090:	2200      	movs	r2, #0
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	201a      	movs	r0, #26
 8002096:	f000 fabf 	bl	8002618 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800209a:	201a      	movs	r0, #26
 800209c:	f000 fad8 	bl	8002650 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80020a0:	4b1e      	ldr	r3, [pc, #120]	; (800211c <HAL_InitTick+0x9c>)
 80020a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a4:	4a1d      	ldr	r2, [pc, #116]	; (800211c <HAL_InitTick+0x9c>)
 80020a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020aa:	6613      	str	r3, [r2, #96]	; 0x60
 80020ac:	4b1b      	ldr	r3, [pc, #108]	; (800211c <HAL_InitTick+0x9c>)
 80020ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020b8:	f107 0210 	add.w	r2, r7, #16
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	4611      	mov	r1, r2
 80020c2:	4618      	mov	r0, r3
 80020c4:	f002 fd50 	bl	8004b68 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80020c8:	f002 fd38 	bl	8004b3c <HAL_RCC_GetPCLK2Freq>
 80020cc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d0:	4a13      	ldr	r2, [pc, #76]	; (8002120 <HAL_InitTick+0xa0>)
 80020d2:	fba2 2303 	umull	r2, r3, r2, r3
 80020d6:	0c9b      	lsrs	r3, r3, #18
 80020d8:	3b01      	subs	r3, #1
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80020dc:	4b11      	ldr	r3, [pc, #68]	; (8002124 <HAL_InitTick+0xa4>)
 80020de:	4a12      	ldr	r2, [pc, #72]	; (8002128 <HAL_InitTick+0xa8>)
 80020e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <HAL_InitTick+0xa4>)
 80020e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020e8:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80020ea:	4a0e      	ldr	r2, [pc, #56]	; (8002124 <HAL_InitTick+0xa4>)
 80020ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ee:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <HAL_InitTick+0xa4>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f6:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <HAL_InitTick+0xa4>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 80020fc:	4809      	ldr	r0, [pc, #36]	; (8002124 <HAL_InitTick+0xa4>)
 80020fe:	f002 fdc5 	bl	8004c8c <HAL_TIM_Base_Init>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d104      	bne.n	8002112 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8002108:	4806      	ldr	r0, [pc, #24]	; (8002124 <HAL_InitTick+0xa4>)
 800210a:	f002 fe17 	bl	8004d3c <HAL_TIM_Base_Start_IT>
 800210e:	4603      	mov	r3, r0
 8002110:	e000      	b.n	8002114 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
}
 8002114:	4618      	mov	r0, r3
 8002116:	3730      	adds	r7, #48	; 0x30
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000
 8002120:	431bde83 	.word	0x431bde83
 8002124:	2000aef0 	.word	0x2000aef0
 8002128:	40014800 	.word	0x40014800

0800212c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002130:	e7fe      	b.n	8002130 <NMI_Handler+0x4>

08002132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002136:	e7fe      	b.n	8002136 <HardFault_Handler+0x4>

08002138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800213c:	e7fe      	b.n	800213c <MemManage_Handler+0x4>

0800213e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002142:	e7fe      	b.n	8002142 <BusFault_Handler+0x4>

08002144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <UsageFault_Handler+0x4>

0800214a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8002188:	4802      	ldr	r0, [pc, #8]	; (8002194 <DMA1_Channel3_IRQHandler+0x10>)
 800218a:	f000 fe6b 	bl	8002e64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	2000ad40 	.word	0x2000ad40

08002198 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800219c:	4802      	ldr	r0, [pc, #8]	; (80021a8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800219e:	f002 fe3d 	bl	8004e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	2000aef0 	.word	0x2000aef0

080021ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
	return 1;
 80021b0:	2301      	movs	r3, #1
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <_kill>:

int _kill(int pid, int sig)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021c6:	f003 fa57 	bl	8005678 <__errno>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2216      	movs	r2, #22
 80021ce:	601a      	str	r2, [r3, #0]
	return -1;
 80021d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <_exit>:

void _exit (int status)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021e4:	f04f 31ff 	mov.w	r1, #4294967295
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ffe7 	bl	80021bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80021ee:	e7fe      	b.n	80021ee <_exit+0x12>

080021f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	e00a      	b.n	8002218 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002202:	f3af 8000 	nop.w
 8002206:	4601      	mov	r1, r0
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	60ba      	str	r2, [r7, #8]
 800220e:	b2ca      	uxtb	r2, r1
 8002210:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	3301      	adds	r3, #1
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	429a      	cmp	r2, r3
 800221e:	dbf0      	blt.n	8002202 <_read+0x12>
	}

return len;
 8002220:	687b      	ldr	r3, [r7, #4]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b086      	sub	sp, #24
 800222e:	af00      	add	r7, sp, #0
 8002230:	60f8      	str	r0, [r7, #12]
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	e009      	b.n	8002250 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	60ba      	str	r2, [r7, #8]
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	3301      	adds	r3, #1
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	429a      	cmp	r2, r3
 8002256:	dbf1      	blt.n	800223c <_write+0x12>
	}
	return len;
 8002258:	687b      	ldr	r3, [r7, #4]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <_close>:

int _close(int file)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
	return -1;
 800226a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800228a:	605a      	str	r2, [r3, #4]
	return 0;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <_isatty>:

int _isatty(int file)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
	return 1;
 80022a2:	2301      	movs	r3, #1
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
	return 0;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
	...

080022cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022d4:	4a14      	ldr	r2, [pc, #80]	; (8002328 <_sbrk+0x5c>)
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <_sbrk+0x60>)
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022e0:	4b13      	ldr	r3, [pc, #76]	; (8002330 <_sbrk+0x64>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d102      	bne.n	80022ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022e8:	4b11      	ldr	r3, [pc, #68]	; (8002330 <_sbrk+0x64>)
 80022ea:	4a12      	ldr	r2, [pc, #72]	; (8002334 <_sbrk+0x68>)
 80022ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <_sbrk+0x64>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d207      	bcs.n	800230c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022fc:	f003 f9bc 	bl	8005678 <__errno>
 8002300:	4603      	mov	r3, r0
 8002302:	220c      	movs	r2, #12
 8002304:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002306:	f04f 33ff 	mov.w	r3, #4294967295
 800230a:	e009      	b.n	8002320 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800230c:	4b08      	ldr	r3, [pc, #32]	; (8002330 <_sbrk+0x64>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002312:	4b07      	ldr	r3, [pc, #28]	; (8002330 <_sbrk+0x64>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	4a05      	ldr	r2, [pc, #20]	; (8002330 <_sbrk+0x64>)
 800231c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800231e:	68fb      	ldr	r3, [r7, #12]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20018000 	.word	0x20018000
 800232c:	00000400 	.word	0x00000400
 8002330:	2000ace4 	.word	0x2000ace4
 8002334:	2000af50 	.word	0x2000af50

08002338 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800233c:	4b15      	ldr	r3, [pc, #84]	; (8002394 <SystemInit+0x5c>)
 800233e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002342:	4a14      	ldr	r2, [pc, #80]	; (8002394 <SystemInit+0x5c>)
 8002344:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002348:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <SystemInit+0x60>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a11      	ldr	r2, [pc, #68]	; (8002398 <SystemInit+0x60>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002358:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <SystemInit+0x60>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <SystemInit+0x60>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a0d      	ldr	r2, [pc, #52]	; (8002398 <SystemInit+0x60>)
 8002364:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002368:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800236c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800236e:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <SystemInit+0x60>)
 8002370:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002374:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <SystemInit+0x60>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a07      	ldr	r2, [pc, #28]	; (8002398 <SystemInit+0x60>)
 800237c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002380:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <SystemInit+0x60>)
 8002384:	2200      	movs	r2, #0
 8002386:	619a      	str	r2, [r3, #24]
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000ed00 	.word	0xe000ed00
 8002398:	40021000 	.word	0x40021000

0800239c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800239c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023a0:	f7ff ffca 	bl	8002338 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80023a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80023a6:	e003      	b.n	80023b0 <LoopCopyDataInit>

080023a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80023aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80023ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80023ae:	3104      	adds	r1, #4

080023b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80023b0:	480a      	ldr	r0, [pc, #40]	; (80023dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80023b2:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80023b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80023b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80023b8:	d3f6      	bcc.n	80023a8 <CopyDataInit>
	ldr	r2, =_sbss
 80023ba:	4a0a      	ldr	r2, [pc, #40]	; (80023e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80023bc:	e002      	b.n	80023c4 <LoopFillZerobss>

080023be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80023be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80023c0:	f842 3b04 	str.w	r3, [r2], #4

080023c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <LoopForever+0x16>)
	cmp	r2, r3
 80023c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80023c8:	d3f9      	bcc.n	80023be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ca:	f003 f95b 	bl	8005684 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023ce:	f7fe fde5 	bl	8000f9c <main>

080023d2 <LoopForever>:

LoopForever:
    b LoopForever
 80023d2:	e7fe      	b.n	80023d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023d4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80023d8:	08007098 	.word	0x08007098
	ldr	r0, =_sdata
 80023dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80023e0:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 80023e4:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 80023e8:	2000af50 	.word	0x2000af50

080023ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023ec:	e7fe      	b.n	80023ec <ADC1_2_IRQHandler>

080023ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023f8:	2003      	movs	r0, #3
 80023fa:	f000 f902 	bl	8002602 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023fe:	200f      	movs	r0, #15
 8002400:	f7ff fe3e 	bl	8002080 <HAL_InitTick>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	71fb      	strb	r3, [r7, #7]
 800240e:	e001      	b.n	8002414 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002410:	f7ff fd02 	bl	8001e18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002414:	79fb      	ldrb	r3, [r7, #7]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_IncTick+0x20>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	4b06      	ldr	r3, [pc, #24]	; (8002444 <HAL_IncTick+0x24>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4413      	add	r3, r2
 8002430:	4a04      	ldr	r2, [pc, #16]	; (8002444 <HAL_IncTick+0x24>)
 8002432:	6013      	str	r3, [r2, #0]
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000010 	.word	0x20000010
 8002444:	2000af3c 	.word	0x2000af3c

08002448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return uwTick;
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <HAL_GetTick+0x14>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	2000af3c 	.word	0x2000af3c

08002460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002468:	f7ff ffee 	bl	8002448 <HAL_GetTick>
 800246c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002478:	d005      	beq.n	8002486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800247a:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <HAL_Delay+0x44>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4413      	add	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002486:	bf00      	nop
 8002488:	f7ff ffde 	bl	8002448 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	429a      	cmp	r2, r3
 8002496:	d8f7      	bhi.n	8002488 <HAL_Delay+0x28>
  {
  }
}
 8002498:	bf00      	nop
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000010 	.word	0x20000010

080024a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <__NVIC_SetPriorityGrouping+0x44>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024c4:	4013      	ands	r3, r2
 80024c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024da:	4a04      	ldr	r2, [pc, #16]	; (80024ec <__NVIC_SetPriorityGrouping+0x44>)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	60d3      	str	r3, [r2, #12]
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f4:	4b04      	ldr	r3, [pc, #16]	; (8002508 <__NVIC_GetPriorityGrouping+0x18>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	f003 0307 	and.w	r3, r3, #7
}
 80024fe:	4618      	mov	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251a:	2b00      	cmp	r3, #0
 800251c:	db0b      	blt.n	8002536 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	f003 021f 	and.w	r2, r3, #31
 8002524:	4907      	ldr	r1, [pc, #28]	; (8002544 <__NVIC_EnableIRQ+0x38>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	2001      	movs	r0, #1
 800252e:	fa00 f202 	lsl.w	r2, r0, r2
 8002532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000e100 	.word	0xe000e100

08002548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	6039      	str	r1, [r7, #0]
 8002552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002558:	2b00      	cmp	r3, #0
 800255a:	db0a      	blt.n	8002572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	b2da      	uxtb	r2, r3
 8002560:	490c      	ldr	r1, [pc, #48]	; (8002594 <__NVIC_SetPriority+0x4c>)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	0112      	lsls	r2, r2, #4
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	440b      	add	r3, r1
 800256c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002570:	e00a      	b.n	8002588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	b2da      	uxtb	r2, r3
 8002576:	4908      	ldr	r1, [pc, #32]	; (8002598 <__NVIC_SetPriority+0x50>)
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	3b04      	subs	r3, #4
 8002580:	0112      	lsls	r2, r2, #4
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	440b      	add	r3, r1
 8002586:	761a      	strb	r2, [r3, #24]
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000e100 	.word	0xe000e100
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800259c:	b480      	push	{r7}
 800259e:	b089      	sub	sp, #36	; 0x24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f1c3 0307 	rsb	r3, r3, #7
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	bf28      	it	cs
 80025ba:	2304      	movcs	r3, #4
 80025bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3304      	adds	r3, #4
 80025c2:	2b06      	cmp	r3, #6
 80025c4:	d902      	bls.n	80025cc <NVIC_EncodePriority+0x30>
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3b03      	subs	r3, #3
 80025ca:	e000      	b.n	80025ce <NVIC_EncodePriority+0x32>
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d0:	f04f 32ff 	mov.w	r2, #4294967295
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43da      	mvns	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	401a      	ands	r2, r3
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e4:	f04f 31ff 	mov.w	r1, #4294967295
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	fa01 f303 	lsl.w	r3, r1, r3
 80025ee:	43d9      	mvns	r1, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f4:	4313      	orrs	r3, r2
         );
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3724      	adds	r7, #36	; 0x24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff ff4c 	bl	80024a8 <__NVIC_SetPriorityGrouping>
}
 8002610:	bf00      	nop
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800262a:	f7ff ff61 	bl	80024f0 <__NVIC_GetPriorityGrouping>
 800262e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	68b9      	ldr	r1, [r7, #8]
 8002634:	6978      	ldr	r0, [r7, #20]
 8002636:	f7ff ffb1 	bl	800259c <NVIC_EncodePriority>
 800263a:	4602      	mov	r2, r0
 800263c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff ff80 	bl	8002548 <__NVIC_SetPriority>
}
 8002648:	bf00      	nop
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff ff54 	bl	800250c <__NVIC_EnableIRQ>
}
 8002664:	bf00      	nop
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e014      	b.n	80026a8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	791b      	ldrb	r3, [r3, #4]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d105      	bne.n	8002694 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff fbe6 	bl	8001e60 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
 80026bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	795b      	ldrb	r3, [r3, #5]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_DAC_Start_DMA+0x1e>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e0ab      	b.n	8002826 <HAL_DAC_Start_DMA+0x176>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2202      	movs	r2, #2
 80026d8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d12f      	bne.n	8002740 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4a52      	ldr	r2, [pc, #328]	; (8002830 <HAL_DAC_Start_DMA+0x180>)
 80026e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	4a51      	ldr	r2, [pc, #324]	; (8002834 <HAL_DAC_Start_DMA+0x184>)
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	4a50      	ldr	r2, [pc, #320]	; (8002838 <HAL_DAC_Start_DMA+0x188>)
 80026f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002706:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	2b08      	cmp	r3, #8
 800270c:	d013      	beq.n	8002736 <HAL_DAC_Start_DMA+0x86>
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	2b08      	cmp	r3, #8
 8002712:	d845      	bhi.n	80027a0 <HAL_DAC_Start_DMA+0xf0>
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_DAC_Start_DMA+0x72>
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	2b04      	cmp	r3, #4
 800271e:	d005      	beq.n	800272c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002720:	e03e      	b.n	80027a0 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	3308      	adds	r3, #8
 8002728:	613b      	str	r3, [r7, #16]
        break;
 800272a:	e03c      	b.n	80027a6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	330c      	adds	r3, #12
 8002732:	613b      	str	r3, [r7, #16]
        break;
 8002734:	e037      	b.n	80027a6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	3310      	adds	r3, #16
 800273c:	613b      	str	r3, [r7, #16]
        break;
 800273e:	e032      	b.n	80027a6 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	4a3d      	ldr	r2, [pc, #244]	; (800283c <HAL_DAC_Start_DMA+0x18c>)
 8002746:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4a3c      	ldr	r2, [pc, #240]	; (8002840 <HAL_DAC_Start_DMA+0x190>)
 800274e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4a3b      	ldr	r2, [pc, #236]	; (8002844 <HAL_DAC_Start_DMA+0x194>)
 8002756:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002766:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	2b08      	cmp	r3, #8
 800276c:	d013      	beq.n	8002796 <HAL_DAC_Start_DMA+0xe6>
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	2b08      	cmp	r3, #8
 8002772:	d817      	bhi.n	80027a4 <HAL_DAC_Start_DMA+0xf4>
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_DAC_Start_DMA+0xd2>
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	2b04      	cmp	r3, #4
 800277e:	d005      	beq.n	800278c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002780:	e010      	b.n	80027a4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	3314      	adds	r3, #20
 8002788:	613b      	str	r3, [r7, #16]
        break;
 800278a:	e00c      	b.n	80027a6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3318      	adds	r3, #24
 8002792:	613b      	str	r3, [r7, #16]
        break;
 8002794:	e007      	b.n	80027a6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	331c      	adds	r3, #28
 800279c:	613b      	str	r3, [r7, #16]
        break;
 800279e:	e002      	b.n	80027a6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80027a0:	bf00      	nop
 80027a2:	e000      	b.n	80027a6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80027a4:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d111      	bne.n	80027d0 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027ba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6898      	ldr	r0, [r3, #8]
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	f000 faaf 	bl	8002d28 <HAL_DMA_Start_IT>
 80027ca:	4603      	mov	r3, r0
 80027cc:	75fb      	strb	r3, [r7, #23]
 80027ce:	e010      	b.n	80027f2 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80027de:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	68d8      	ldr	r0, [r3, #12]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	f000 fa9d 	bl	8002d28 <HAL_DMA_Start_IT>
 80027ee:	4603      	mov	r3, r0
 80027f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80027f8:	7dfb      	ldrb	r3, [r7, #23]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10c      	bne.n	8002818 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6819      	ldr	r1, [r3, #0]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f003 0310 	and.w	r3, r3, #16
 800280a:	2201      	movs	r2, #1
 800280c:	409a      	lsls	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	e005      	b.n	8002824 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	f043 0204 	orr.w	r2, r3, #4
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002824:	7dfb      	ldrb	r3, [r7, #23]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	08002aa5 	.word	0x08002aa5
 8002834:	08002ac7 	.word	0x08002ac7
 8002838:	08002ae3 	.word	0x08002ae3
 800283c:	08002b4d 	.word	0x08002b4d
 8002840:	08002b6f 	.word	0x08002b6f
 8002844:	08002b8b 	.word	0x08002b8b

08002848 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	795b      	ldrb	r3, [r3, #5]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_DAC_ConfigChannel+0x1c>
 8002888:	2302      	movs	r3, #2
 800288a:	e107      	b.n	8002a9c <HAL_DAC_ConfigChannel+0x22c>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2201      	movs	r2, #1
 8002890:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2202      	movs	r2, #2
 8002896:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b04      	cmp	r3, #4
 800289e:	d174      	bne.n	800298a <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80028a0:	f7ff fdd2 	bl	8002448 <HAL_GetTick>
 80028a4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d134      	bne.n	8002916 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80028ac:	e011      	b.n	80028d2 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80028ae:	f7ff fdcb 	bl	8002448 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d90a      	bls.n	80028d2 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	f043 0208 	orr.w	r2, r3, #8
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2203      	movs	r2, #3
 80028cc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e0e4      	b.n	8002a9c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1e6      	bne.n	80028ae <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80028e0:	2001      	movs	r0, #1
 80028e2:	f7ff fdbd 	bl	8002460 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	6992      	ldr	r2, [r2, #24]
 80028ee:	641a      	str	r2, [r3, #64]	; 0x40
 80028f0:	e01e      	b.n	8002930 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80028f2:	f7ff fda9 	bl	8002448 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d90a      	bls.n	8002916 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	f043 0208 	orr.w	r2, r3, #8
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2203      	movs	r2, #3
 8002910:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e0c2      	b.n	8002a9c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291c:	2b00      	cmp	r3, #0
 800291e:	dbe8      	blt.n	80028f2 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002920:	2001      	movs	r0, #1
 8002922:	f7ff fd9d 	bl	8002460 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	6992      	ldr	r2, [r2, #24]
 800292e:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002940:	fa01 f303 	lsl.w	r3, r1, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	ea02 0103 	and.w	r1, r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	69da      	ldr	r2, [r3, #28]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f003 0310 	and.w	r3, r3, #16
 8002954:	409a      	lsls	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f003 0310 	and.w	r3, r3, #16
 800296a:	21ff      	movs	r1, #255	; 0xff
 800296c:	fa01 f303 	lsl.w	r3, r1, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	ea02 0103 	and.w	r1, r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	6a1a      	ldr	r2, [r3, #32]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	409a      	lsls	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d11d      	bne.n	80029ce <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002998:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	221f      	movs	r2, #31
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f003 0310 	and.w	r3, r3, #16
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d4:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	2207      	movs	r2, #7
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	431a      	orrs	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6819      	ldr	r1, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	400a      	ands	r2, r1
 8002a32:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6819      	ldr	r1, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	22c0      	movs	r2, #192	; 0xc0
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43da      	mvns	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	400a      	ands	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3720      	adds	r7, #32
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f7fe fd26 	bl	8001504 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	711a      	strb	r2, [r3, #4]
}
 8002abe:	bf00      	nop
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f7ff feb7 	bl	8002848 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	f043 0204 	orr.w	r2, r3, #4
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f7ff fead 	bl	800285c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	711a      	strb	r2, [r3, #4]
}
 8002b08:	bf00      	nop
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f7ff ffd8 	bl	8002b10 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2201      	movs	r2, #1
 8002b64:	711a      	strb	r2, [r3, #4]
}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b084      	sub	sp, #16
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f7ff ffd1 	bl	8002b24 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002b82:	bf00      	nop
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f043 0204 	orr.w	r2, r3, #4
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f7ff ffc7 	bl	8002b38 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2201      	movs	r2, #1
 8002bae:	711a      	strb	r2, [r3, #4]
}
 8002bb0:	bf00      	nop
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e098      	b.n	8002cfc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	4b4d      	ldr	r3, [pc, #308]	; (8002d08 <HAL_DMA_Init+0x150>)
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d80f      	bhi.n	8002bf6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4b4b      	ldr	r3, [pc, #300]	; (8002d0c <HAL_DMA_Init+0x154>)
 8002bde:	4413      	add	r3, r2
 8002be0:	4a4b      	ldr	r2, [pc, #300]	; (8002d10 <HAL_DMA_Init+0x158>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	091b      	lsrs	r3, r3, #4
 8002be8:	009a      	lsls	r2, r3, #2
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a48      	ldr	r2, [pc, #288]	; (8002d14 <HAL_DMA_Init+0x15c>)
 8002bf2:	641a      	str	r2, [r3, #64]	; 0x40
 8002bf4:	e00e      	b.n	8002c14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	4b46      	ldr	r3, [pc, #280]	; (8002d18 <HAL_DMA_Init+0x160>)
 8002bfe:	4413      	add	r3, r2
 8002c00:	4a43      	ldr	r2, [pc, #268]	; (8002d10 <HAL_DMA_Init+0x158>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	091b      	lsrs	r3, r3, #4
 8002c08:	009a      	lsls	r2, r3, #2
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a42      	ldr	r2, [pc, #264]	; (8002d1c <HAL_DMA_Init+0x164>)
 8002c12:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002c38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c6e:	d039      	beq.n	8002ce4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	4a27      	ldr	r2, [pc, #156]	; (8002d14 <HAL_DMA_Init+0x15c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d11a      	bne.n	8002cb0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002c7a:	4b29      	ldr	r3, [pc, #164]	; (8002d20 <HAL_DMA_Init+0x168>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	f003 031c 	and.w	r3, r3, #28
 8002c86:	210f      	movs	r1, #15
 8002c88:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	4924      	ldr	r1, [pc, #144]	; (8002d20 <HAL_DMA_Init+0x168>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002c94:	4b22      	ldr	r3, [pc, #136]	; (8002d20 <HAL_DMA_Init+0x168>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6859      	ldr	r1, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca0:	f003 031c 	and.w	r3, r3, #28
 8002ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca8:	491d      	ldr	r1, [pc, #116]	; (8002d20 <HAL_DMA_Init+0x168>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	600b      	str	r3, [r1, #0]
 8002cae:	e019      	b.n	8002ce4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002cb0:	4b1c      	ldr	r3, [pc, #112]	; (8002d24 <HAL_DMA_Init+0x16c>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb8:	f003 031c 	and.w	r3, r3, #28
 8002cbc:	210f      	movs	r1, #15
 8002cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	4917      	ldr	r1, [pc, #92]	; (8002d24 <HAL_DMA_Init+0x16c>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002cca:	4b16      	ldr	r3, [pc, #88]	; (8002d24 <HAL_DMA_Init+0x16c>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6859      	ldr	r1, [r3, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd6:	f003 031c 	and.w	r3, r3, #28
 8002cda:	fa01 f303 	lsl.w	r3, r1, r3
 8002cde:	4911      	ldr	r1, [pc, #68]	; (8002d24 <HAL_DMA_Init+0x16c>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	40020407 	.word	0x40020407
 8002d0c:	bffdfff8 	.word	0xbffdfff8
 8002d10:	cccccccd 	.word	0xcccccccd
 8002d14:	40020000 	.word	0x40020000
 8002d18:	bffdfbf8 	.word	0xbffdfbf8
 8002d1c:	40020400 	.word	0x40020400
 8002d20:	400200a8 	.word	0x400200a8
 8002d24:	400204a8 	.word	0x400204a8

08002d28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_DMA_Start_IT+0x20>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e04b      	b.n	8002de0 <HAL_DMA_Start_IT+0xb8>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d13a      	bne.n	8002dd2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0201 	bic.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 f91e 	bl	8002fc2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d008      	beq.n	8002da0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f042 020e 	orr.w	r2, r2, #14
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	e00f      	b.n	8002dc0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0204 	bic.w	r2, r2, #4
 8002dae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 020a 	orr.w	r2, r2, #10
 8002dbe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	e005      	b.n	8002dde <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d008      	beq.n	8002e12 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2204      	movs	r2, #4
 8002e04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e022      	b.n	8002e58 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 020e 	bic.w	r2, r2, #14
 8002e20:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0201 	bic.w	r2, r2, #1
 8002e30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	f003 021c 	and.w	r2, r3, #28
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2101      	movs	r1, #1
 8002e40:	fa01 f202 	lsl.w	r2, r1, r2
 8002e44:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e80:	f003 031c 	and.w	r3, r3, #28
 8002e84:	2204      	movs	r2, #4
 8002e86:	409a      	lsls	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d026      	beq.n	8002ede <HAL_DMA_IRQHandler+0x7a>
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d021      	beq.n	8002ede <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0320 	and.w	r3, r3, #32
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d107      	bne.n	8002eb8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0204 	bic.w	r2, r2, #4
 8002eb6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebc:	f003 021c 	and.w	r2, r3, #28
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	2104      	movs	r1, #4
 8002ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eca:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d071      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002edc:	e06c      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee2:	f003 031c 	and.w	r3, r3, #28
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d02e      	beq.n	8002f50 <HAL_DMA_IRQHandler+0xec>
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d029      	beq.n	8002f50 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10b      	bne.n	8002f22 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 020a 	bic.w	r2, r2, #10
 8002f18:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f26:	f003 021c 	and.w	r2, r3, #28
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	2102      	movs	r1, #2
 8002f30:	fa01 f202 	lsl.w	r2, r1, r2
 8002f34:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d038      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f4e:	e033      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f54:	f003 031c 	and.w	r3, r3, #28
 8002f58:	2208      	movs	r2, #8
 8002f5a:	409a      	lsls	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d02a      	beq.n	8002fba <HAL_DMA_IRQHandler+0x156>
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d025      	beq.n	8002fba <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 020e 	bic.w	r2, r2, #14
 8002f7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	f003 021c 	and.w	r2, r3, #28
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f90:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d004      	beq.n	8002fba <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
}
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b085      	sub	sp, #20
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	60f8      	str	r0, [r7, #12]
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	607a      	str	r2, [r7, #4]
 8002fce:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd4:	f003 021c 	and.w	r2, r3, #28
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	2101      	movs	r1, #1
 8002fde:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b10      	cmp	r3, #16
 8002ff2:	d108      	bne.n	8003006 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003004:	e007      	b.n	8003016 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	60da      	str	r2, [r3, #12]
}
 8003016:	bf00      	nop
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003024:	b480      	push	{r7}
 8003026:	b087      	sub	sp, #28
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003032:	e17f      	b.n	8003334 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	2101      	movs	r1, #1
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	fa01 f303 	lsl.w	r3, r1, r3
 8003040:	4013      	ands	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 8171 	beq.w	800332e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d00b      	beq.n	800306c <HAL_GPIO_Init+0x48>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b02      	cmp	r3, #2
 800305a:	d007      	beq.n	800306c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003060:	2b11      	cmp	r3, #17
 8003062:	d003      	beq.n	800306c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b12      	cmp	r3, #18
 800306a:	d130      	bne.n	80030ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	2203      	movs	r2, #3
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4013      	ands	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030a2:	2201      	movs	r2, #1
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4013      	ands	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	091b      	lsrs	r3, r3, #4
 80030b8:	f003 0201 	and.w	r2, r3, #1
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d118      	bne.n	800310c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80030e0:	2201      	movs	r2, #1
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4013      	ands	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	08db      	lsrs	r3, r3, #3
 80030f6:	f003 0201 	and.w	r2, r3, #1
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	2203      	movs	r2, #3
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4013      	ands	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d003      	beq.n	800314c <HAL_GPIO_Init+0x128>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b12      	cmp	r3, #18
 800314a:	d123      	bne.n	8003194 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	08da      	lsrs	r2, r3, #3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3208      	adds	r2, #8
 8003154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003158:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	220f      	movs	r2, #15
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	4013      	ands	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	08da      	lsrs	r2, r3, #3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3208      	adds	r2, #8
 800318e:	6939      	ldr	r1, [r7, #16]
 8003190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	2203      	movs	r2, #3
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4013      	ands	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 0203 	and.w	r2, r3, #3
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	4313      	orrs	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 80ac 	beq.w	800332e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d6:	4b5f      	ldr	r3, [pc, #380]	; (8003354 <HAL_GPIO_Init+0x330>)
 80031d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031da:	4a5e      	ldr	r2, [pc, #376]	; (8003354 <HAL_GPIO_Init+0x330>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	6613      	str	r3, [r2, #96]	; 0x60
 80031e2:	4b5c      	ldr	r3, [pc, #368]	; (8003354 <HAL_GPIO_Init+0x330>)
 80031e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031ee:	4a5a      	ldr	r2, [pc, #360]	; (8003358 <HAL_GPIO_Init+0x334>)
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	089b      	lsrs	r3, r3, #2
 80031f4:	3302      	adds	r3, #2
 80031f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	220f      	movs	r2, #15
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	4013      	ands	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003218:	d025      	beq.n	8003266 <HAL_GPIO_Init+0x242>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a4f      	ldr	r2, [pc, #316]	; (800335c <HAL_GPIO_Init+0x338>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d01f      	beq.n	8003262 <HAL_GPIO_Init+0x23e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a4e      	ldr	r2, [pc, #312]	; (8003360 <HAL_GPIO_Init+0x33c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d019      	beq.n	800325e <HAL_GPIO_Init+0x23a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a4d      	ldr	r2, [pc, #308]	; (8003364 <HAL_GPIO_Init+0x340>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d013      	beq.n	800325a <HAL_GPIO_Init+0x236>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a4c      	ldr	r2, [pc, #304]	; (8003368 <HAL_GPIO_Init+0x344>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d00d      	beq.n	8003256 <HAL_GPIO_Init+0x232>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a4b      	ldr	r2, [pc, #300]	; (800336c <HAL_GPIO_Init+0x348>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d007      	beq.n	8003252 <HAL_GPIO_Init+0x22e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a4a      	ldr	r2, [pc, #296]	; (8003370 <HAL_GPIO_Init+0x34c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d101      	bne.n	800324e <HAL_GPIO_Init+0x22a>
 800324a:	2306      	movs	r3, #6
 800324c:	e00c      	b.n	8003268 <HAL_GPIO_Init+0x244>
 800324e:	2307      	movs	r3, #7
 8003250:	e00a      	b.n	8003268 <HAL_GPIO_Init+0x244>
 8003252:	2305      	movs	r3, #5
 8003254:	e008      	b.n	8003268 <HAL_GPIO_Init+0x244>
 8003256:	2304      	movs	r3, #4
 8003258:	e006      	b.n	8003268 <HAL_GPIO_Init+0x244>
 800325a:	2303      	movs	r3, #3
 800325c:	e004      	b.n	8003268 <HAL_GPIO_Init+0x244>
 800325e:	2302      	movs	r3, #2
 8003260:	e002      	b.n	8003268 <HAL_GPIO_Init+0x244>
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <HAL_GPIO_Init+0x244>
 8003266:	2300      	movs	r3, #0
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	f002 0203 	and.w	r2, r2, #3
 800326e:	0092      	lsls	r2, r2, #2
 8003270:	4093      	lsls	r3, r2
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003278:	4937      	ldr	r1, [pc, #220]	; (8003358 <HAL_GPIO_Init+0x334>)
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	089b      	lsrs	r3, r3, #2
 800327e:	3302      	adds	r3, #2
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003286:	4b3b      	ldr	r3, [pc, #236]	; (8003374 <HAL_GPIO_Init+0x350>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	43db      	mvns	r3, r3
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4013      	ands	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032aa:	4a32      	ldr	r2, [pc, #200]	; (8003374 <HAL_GPIO_Init+0x350>)
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80032b0:	4b30      	ldr	r3, [pc, #192]	; (8003374 <HAL_GPIO_Init+0x350>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	43db      	mvns	r3, r3
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4013      	ands	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032d4:	4a27      	ldr	r2, [pc, #156]	; (8003374 <HAL_GPIO_Init+0x350>)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032da:	4b26      	ldr	r3, [pc, #152]	; (8003374 <HAL_GPIO_Init+0x350>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	43db      	mvns	r3, r3
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4013      	ands	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032fe:	4a1d      	ldr	r2, [pc, #116]	; (8003374 <HAL_GPIO_Init+0x350>)
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003304:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <HAL_GPIO_Init+0x350>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	43db      	mvns	r3, r3
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4013      	ands	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4313      	orrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003328:	4a12      	ldr	r2, [pc, #72]	; (8003374 <HAL_GPIO_Init+0x350>)
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	3301      	adds	r3, #1
 8003332:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	fa22 f303 	lsr.w	r3, r2, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	f47f ae78 	bne.w	8003034 <HAL_GPIO_Init+0x10>
  }
}
 8003344:	bf00      	nop
 8003346:	bf00      	nop
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000
 8003358:	40010000 	.word	0x40010000
 800335c:	48000400 	.word	0x48000400
 8003360:	48000800 	.word	0x48000800
 8003364:	48000c00 	.word	0x48000c00
 8003368:	48001000 	.word	0x48001000
 800336c:	48001400 	.word	0x48001400
 8003370:	48001800 	.word	0x48001800
 8003374:	40010400 	.word	0x40010400

08003378 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003386:	e0cd      	b.n	8003524 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003388:	2201      	movs	r2, #1
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	4013      	ands	r3, r2
 8003394:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 80c0 	beq.w	800351e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800339e:	4a68      	ldr	r2, [pc, #416]	; (8003540 <HAL_GPIO_DeInit+0x1c8>)
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	3302      	adds	r3, #2
 80033a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033aa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	220f      	movs	r2, #15
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4013      	ands	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033c6:	d025      	beq.n	8003414 <HAL_GPIO_DeInit+0x9c>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a5e      	ldr	r2, [pc, #376]	; (8003544 <HAL_GPIO_DeInit+0x1cc>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d01f      	beq.n	8003410 <HAL_GPIO_DeInit+0x98>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a5d      	ldr	r2, [pc, #372]	; (8003548 <HAL_GPIO_DeInit+0x1d0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d019      	beq.n	800340c <HAL_GPIO_DeInit+0x94>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a5c      	ldr	r2, [pc, #368]	; (800354c <HAL_GPIO_DeInit+0x1d4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d013      	beq.n	8003408 <HAL_GPIO_DeInit+0x90>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a5b      	ldr	r2, [pc, #364]	; (8003550 <HAL_GPIO_DeInit+0x1d8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d00d      	beq.n	8003404 <HAL_GPIO_DeInit+0x8c>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a5a      	ldr	r2, [pc, #360]	; (8003554 <HAL_GPIO_DeInit+0x1dc>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d007      	beq.n	8003400 <HAL_GPIO_DeInit+0x88>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a59      	ldr	r2, [pc, #356]	; (8003558 <HAL_GPIO_DeInit+0x1e0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d101      	bne.n	80033fc <HAL_GPIO_DeInit+0x84>
 80033f8:	2306      	movs	r3, #6
 80033fa:	e00c      	b.n	8003416 <HAL_GPIO_DeInit+0x9e>
 80033fc:	2307      	movs	r3, #7
 80033fe:	e00a      	b.n	8003416 <HAL_GPIO_DeInit+0x9e>
 8003400:	2305      	movs	r3, #5
 8003402:	e008      	b.n	8003416 <HAL_GPIO_DeInit+0x9e>
 8003404:	2304      	movs	r3, #4
 8003406:	e006      	b.n	8003416 <HAL_GPIO_DeInit+0x9e>
 8003408:	2303      	movs	r3, #3
 800340a:	e004      	b.n	8003416 <HAL_GPIO_DeInit+0x9e>
 800340c:	2302      	movs	r3, #2
 800340e:	e002      	b.n	8003416 <HAL_GPIO_DeInit+0x9e>
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <HAL_GPIO_DeInit+0x9e>
 8003414:	2300      	movs	r3, #0
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	f002 0203 	and.w	r2, r2, #3
 800341c:	0092      	lsls	r2, r2, #2
 800341e:	4093      	lsls	r3, r2
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	429a      	cmp	r2, r3
 8003424:	d132      	bne.n	800348c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003426:	4b4d      	ldr	r3, [pc, #308]	; (800355c <HAL_GPIO_DeInit+0x1e4>)
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	43db      	mvns	r3, r3
 800342e:	494b      	ldr	r1, [pc, #300]	; (800355c <HAL_GPIO_DeInit+0x1e4>)
 8003430:	4013      	ands	r3, r2
 8003432:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003434:	4b49      	ldr	r3, [pc, #292]	; (800355c <HAL_GPIO_DeInit+0x1e4>)
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	43db      	mvns	r3, r3
 800343c:	4947      	ldr	r1, [pc, #284]	; (800355c <HAL_GPIO_DeInit+0x1e4>)
 800343e:	4013      	ands	r3, r2
 8003440:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003442:	4b46      	ldr	r3, [pc, #280]	; (800355c <HAL_GPIO_DeInit+0x1e4>)
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	43db      	mvns	r3, r3
 800344a:	4944      	ldr	r1, [pc, #272]	; (800355c <HAL_GPIO_DeInit+0x1e4>)
 800344c:	4013      	ands	r3, r2
 800344e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003450:	4b42      	ldr	r3, [pc, #264]	; (800355c <HAL_GPIO_DeInit+0x1e4>)
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	43db      	mvns	r3, r3
 8003458:	4940      	ldr	r1, [pc, #256]	; (800355c <HAL_GPIO_DeInit+0x1e4>)
 800345a:	4013      	ands	r3, r2
 800345c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	220f      	movs	r2, #15
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800346e:	4a34      	ldr	r2, [pc, #208]	; (8003540 <HAL_GPIO_DeInit+0x1c8>)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	089b      	lsrs	r3, r3, #2
 8003474:	3302      	adds	r3, #2
 8003476:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	43da      	mvns	r2, r3
 800347e:	4830      	ldr	r0, [pc, #192]	; (8003540 <HAL_GPIO_DeInit+0x1c8>)
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	089b      	lsrs	r3, r3, #2
 8003484:	400a      	ands	r2, r1
 8003486:	3302      	adds	r3, #2
 8003488:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	2103      	movs	r1, #3
 8003496:	fa01 f303 	lsl.w	r3, r1, r3
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	08da      	lsrs	r2, r3, #3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3208      	adds	r2, #8
 80034a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	220f      	movs	r2, #15
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	43db      	mvns	r3, r3
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	08d2      	lsrs	r2, r2, #3
 80034c0:	4019      	ands	r1, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3208      	adds	r2, #8
 80034c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	2103      	movs	r1, #3
 80034d4:	fa01 f303 	lsl.w	r3, r1, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	401a      	ands	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	2101      	movs	r1, #1
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	401a      	ands	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	2103      	movs	r1, #3
 80034fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	401a      	ands	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350e:	2101      	movs	r1, #1
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	fa01 f303 	lsl.w	r3, r1, r3
 8003516:	43db      	mvns	r3, r3
 8003518:	401a      	ands	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	3301      	adds	r3, #1
 8003522:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	fa22 f303 	lsr.w	r3, r2, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	f47f af2b 	bne.w	8003388 <HAL_GPIO_DeInit+0x10>
  }
}
 8003532:	bf00      	nop
 8003534:	bf00      	nop
 8003536:	371c      	adds	r7, #28
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	40010000 	.word	0x40010000
 8003544:	48000400 	.word	0x48000400
 8003548:	48000800 	.word	0x48000800
 800354c:	48000c00 	.word	0x48000c00
 8003550:	48001000 	.word	0x48001000
 8003554:	48001400 	.word	0x48001400
 8003558:	48001800 	.word	0x48001800
 800355c:	40010400 	.word	0x40010400

08003560 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691a      	ldr	r2, [r3, #16]
 8003570:	887b      	ldrh	r3, [r7, #2]
 8003572:	4013      	ands	r3, r2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003578:	2301      	movs	r3, #1
 800357a:	73fb      	strb	r3, [r7, #15]
 800357c:	e001      	b.n	8003582 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800357e:	2300      	movs	r3, #0
 8003580:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003582:	7bfb      	ldrb	r3, [r7, #15]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	807b      	strh	r3, [r7, #2]
 800359c:	4613      	mov	r3, r2
 800359e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035a0:	787b      	ldrb	r3, [r7, #1]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035a6:	887a      	ldrh	r2, [r7, #2]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035ac:	e002      	b.n	80035b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035ae:	887a      	ldrh	r2, [r7, #2]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035d2:	887a      	ldrh	r2, [r7, #2]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4013      	ands	r3, r2
 80035d8:	041a      	lsls	r2, r3, #16
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	43d9      	mvns	r1, r3
 80035de:	887b      	ldrh	r3, [r7, #2]
 80035e0:	400b      	ands	r3, r1
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	619a      	str	r2, [r3, #24]
}
 80035e8:	bf00      	nop
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80035f8:	4b04      	ldr	r3, [pc, #16]	; (800360c <HAL_PWREx_GetVoltageRange+0x18>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003600:	4618      	mov	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40007000 	.word	0x40007000

08003610 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800361e:	d130      	bne.n	8003682 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003620:	4b23      	ldr	r3, [pc, #140]	; (80036b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800362c:	d038      	beq.n	80036a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800362e:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003636:	4a1e      	ldr	r2, [pc, #120]	; (80036b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003638:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800363c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800363e:	4b1d      	ldr	r3, [pc, #116]	; (80036b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2232      	movs	r2, #50	; 0x32
 8003644:	fb02 f303 	mul.w	r3, r2, r3
 8003648:	4a1b      	ldr	r2, [pc, #108]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800364a:	fba2 2303 	umull	r2, r3, r2, r3
 800364e:	0c9b      	lsrs	r3, r3, #18
 8003650:	3301      	adds	r3, #1
 8003652:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003654:	e002      	b.n	800365c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	3b01      	subs	r3, #1
 800365a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800365c:	4b14      	ldr	r3, [pc, #80]	; (80036b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003668:	d102      	bne.n	8003670 <HAL_PWREx_ControlVoltageScaling+0x60>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1f2      	bne.n	8003656 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003670:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367c:	d110      	bne.n	80036a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e00f      	b.n	80036a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003682:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800368a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800368e:	d007      	beq.n	80036a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003690:	4b07      	ldr	r3, [pc, #28]	; (80036b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003698:	4a05      	ldr	r2, [pc, #20]	; (80036b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800369a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800369e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40007000 	.word	0x40007000
 80036b4:	20000008 	.word	0x20000008
 80036b8:	431bde83 	.word	0x431bde83

080036bc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80036c4:	f7fe fec0 	bl	8002448 <HAL_GetTick>
 80036c8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e063      	b.n	800379c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10b      	bne.n	80036f8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7fe fc25 	bl	8001f38 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80036ee:	f241 3188 	movw	r1, #5000	; 0x1388
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 faf7 	bl	8003ce6 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	3b01      	subs	r3, #1
 8003708:	021a      	lsls	r2, r3, #8
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	2120      	movs	r1, #32
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 faef 	bl	8003d02 <QSPI_WaitFlagStateUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003728:	7afb      	ldrb	r3, [r7, #11]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d131      	bne.n	8003792 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003738:	f023 0310 	bic.w	r3, r3, #16
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6852      	ldr	r2, [r2, #4]
 8003740:	0611      	lsls	r1, r2, #24
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	68d2      	ldr	r2, [r2, #12]
 8003746:	4311      	orrs	r1, r2
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6812      	ldr	r2, [r2, #0]
 800374c:	430b      	orrs	r3, r1
 800374e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	4b13      	ldr	r3, [pc, #76]	; (80037a4 <HAL_QSPI_Init+0xe8>)
 8003758:	4013      	ands	r3, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6912      	ldr	r2, [r2, #16]
 800375e:	0411      	lsls	r1, r2, #16
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6952      	ldr	r2, [r2, #20]
 8003764:	4311      	orrs	r1, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6992      	ldr	r2, [r2, #24]
 800376a:	4311      	orrs	r1, r2
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6812      	ldr	r2, [r2, #0]
 8003770:	430b      	orrs	r3, r1
 8003772:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800379a:	7afb      	ldrb	r3, [r7, #11]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	ffe0f8fe 	.word	0xffe0f8fe

080037a8 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e016      	b.n	80037e8 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0201 	bic.w	r2, r2, #1
 80037c8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fe fc16 	bl	8001ffc <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80037fc:	f7fe fe24 	bl	8002448 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_QSPI_Command+0x22>
 800380e:	2302      	movs	r3, #2
 8003810:	e048      	b.n	80038a4 <HAL_QSPI_Command+0xb4>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b01      	cmp	r3, #1
 8003824:	d137      	bne.n	8003896 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2202      	movs	r2, #2
 8003830:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	2200      	movs	r2, #0
 800383c:	2120      	movs	r1, #32
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 fa5f 	bl	8003d02 <QSPI_WaitFlagStateUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003848:	7dfb      	ldrb	r3, [r7, #23]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d125      	bne.n	800389a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800384e:	2200      	movs	r2, #0
 8003850:	68b9      	ldr	r1, [r7, #8]
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 fa8c 	bl	8003d70 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	2b00      	cmp	r3, #0
 800385e:	d115      	bne.n	800388c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	2201      	movs	r2, #1
 8003868:	2102      	movs	r1, #2
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 fa49 	bl	8003d02 <QSPI_WaitFlagStateUntilTimeout>
 8003870:	4603      	mov	r3, r0
 8003872:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003874:	7dfb      	ldrb	r3, [r7, #23]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10f      	bne.n	800389a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2202      	movs	r2, #2
 8003880:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800388a:	e006      	b.n	800389a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003894:	e001      	b.n	800389a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003896:	2302      	movs	r3, #2
 8003898:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80038a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08a      	sub	sp, #40	; 0x28
 80038b0:	af02      	add	r7, sp, #8
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80038bc:	f7fe fdc4 	bl	8002448 <HAL_GetTick>
 80038c0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3320      	adds	r3, #32
 80038c8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <HAL_QSPI_Transmit+0x2e>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e07b      	b.n	80039d2 <HAL_QSPI_Transmit+0x126>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d16a      	bne.n	80039c4 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d05b      	beq.n	80039b2 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2212      	movs	r2, #18
 80038fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695a      	ldr	r2, [r3, #20]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800392e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8003930:	e01b      	b.n	800396a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2201      	movs	r2, #1
 800393a:	2104      	movs	r1, #4
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 f9e0 	bl	8003d02 <QSPI_WaitFlagStateUntilTimeout>
 8003942:	4603      	mov	r3, r0
 8003944:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003946:	7ffb      	ldrb	r3, [r7, #31]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d113      	bne.n	8003974 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	781a      	ldrb	r2, [r3, #0]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	1e5a      	subs	r2, r3, #1
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1df      	bne.n	8003932 <HAL_QSPI_Transmit+0x86>
 8003972:	e000      	b.n	8003976 <HAL_QSPI_Transmit+0xca>
          break;
 8003974:	bf00      	nop
      }

      if (status == HAL_OK)
 8003976:	7ffb      	ldrb	r3, [r7, #31]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d115      	bne.n	80039a8 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2201      	movs	r2, #1
 8003984:	2102      	movs	r1, #2
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 f9bb 	bl	8003d02 <QSPI_WaitFlagStateUntilTimeout>
 800398c:	4603      	mov	r3, r0
 800398e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003990:	7ffb      	ldrb	r3, [r7, #31]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d108      	bne.n	80039a8 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2202      	movs	r2, #2
 800399c:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 f934 	bl	8003c0c <HAL_QSPI_Abort>
 80039a4:	4603      	mov	r3, r0
 80039a6:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80039b0:	e00a      	b.n	80039c8 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b6:	f043 0208 	orr.w	r2, r3, #8
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	77fb      	strb	r3, [r7, #31]
 80039c2:	e001      	b.n	80039c8 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 80039c4:	2302      	movs	r3, #2
 80039c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80039d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3720      	adds	r7, #32
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b08a      	sub	sp, #40	; 0x28
 80039de:	af02      	add	r7, sp, #8
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80039ea:	f7fe fd2d 	bl	8002448 <HAL_GetTick>
 80039ee:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3320      	adds	r3, #32
 80039fe:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_QSPI_Receive+0x36>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e082      	b.n	8003b16 <HAL_QSPI_Receive+0x13c>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d171      	bne.n	8003b08 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d062      	beq.n	8003af6 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2222      	movs	r2, #34	; 0x22
 8003a34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003a68:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8003a72:	e01c      	b.n	8003aae <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	2106      	movs	r1, #6
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f93f 	bl	8003d02 <QSPI_WaitFlagStateUntilTimeout>
 8003a84:	4603      	mov	r3, r0
 8003a86:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8003a88:	7ffb      	ldrb	r3, [r7, #31]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d114      	bne.n	8003ab8 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	7812      	ldrb	r2, [r2, #0]
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	1e5a      	subs	r2, r3, #1
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1de      	bne.n	8003a74 <HAL_QSPI_Receive+0x9a>
 8003ab6:	e000      	b.n	8003aba <HAL_QSPI_Receive+0xe0>
          break;
 8003ab8:	bf00      	nop
      }

      if (status == HAL_OK)
 8003aba:	7ffb      	ldrb	r3, [r7, #31]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d115      	bne.n	8003aec <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	2102      	movs	r1, #2
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f919 	bl	8003d02 <QSPI_WaitFlagStateUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8003ad4:	7ffb      	ldrb	r3, [r7, #31]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d108      	bne.n	8003aec <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 f892 	bl	8003c0c <HAL_QSPI_Abort>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003af4:	e00a      	b.n	8003b0c <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afa:	f043 0208 	orr.w	r2, r3, #8
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	77fb      	strb	r3, [r7, #31]
 8003b06:	e001      	b.n	8003b0c <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003b08:	2302      	movs	r3, #2
 8003b0a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003b14:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3720      	adds	r7, #32
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b088      	sub	sp, #32
 8003b22:	af02      	add	r7, sp, #8
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	607a      	str	r2, [r7, #4]
 8003b2a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003b2c:	f7fe fc8c 	bl	8002448 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_QSPI_AutoPolling+0x24>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e060      	b.n	8003c04 <HAL_QSPI_AutoPolling+0xe6>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d14f      	bne.n	8003bf6 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2242      	movs	r2, #66	; 0x42
 8003b60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2120      	movs	r1, #32
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 f8c7 	bl	8003d02 <QSPI_WaitFlagStateUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003b78:	7dfb      	ldrb	r3, [r7, #23]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d13d      	bne.n	8003bfa <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6812      	ldr	r2, [r2, #0]
 8003b86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6852      	ldr	r2, [r2, #4]
 8003b90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6892      	ldr	r2, [r2, #8]
 8003b9a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003bb4:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8003bbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003bc2:	68b9      	ldr	r1, [r7, #8]
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 f8d3 	bl	8003d70 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	2108      	movs	r1, #8
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f894 	bl	8003d02 <QSPI_WaitFlagStateUntilTimeout>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8003bde:	7dfb      	ldrb	r3, [r7, #23]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10a      	bne.n	8003bfa <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2208      	movs	r2, #8
 8003bea:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003bf4:	e001      	b.n	8003bfa <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003c18:	f7fe fc16 	bl	8002448 <HAL_GetTick>
 8003c1c:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d056      	beq.n	8003cdc <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d017      	beq.n	8003c74 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0204 	bic.w	r2, r2, #4
 8003c52:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff f8c5 	bl	8002de8 <HAL_DMA_Abort>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6c:	f043 0204 	orr.w	r2, r3, #4
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0202 	orr.w	r2, r2, #2
 8003c82:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	2102      	movs	r1, #2
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f836 	bl	8003d02 <QSPI_WaitFlagStateUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10e      	bne.n	8003cbe <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	2120      	movs	r1, #32
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f824 	bl	8003d02 <QSPI_WaitFlagStateUntilTimeout>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10b      	bne.n	8003cdc <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003cd2:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
 8003cee:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	603b      	str	r3, [r7, #0]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003d12:	e01a      	b.n	8003d4a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1a:	d016      	beq.n	8003d4a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1c:	f7fe fb94 	bl	8002448 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d302      	bcc.n	8003d32 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10b      	bne.n	8003d4a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2204      	movs	r2, #4
 8003d36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3e:	f043 0201 	orr.w	r2, r3, #1
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e00e      	b.n	8003d68 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	bf14      	ite	ne
 8003d58:	2301      	movne	r3, #1
 8003d5a:	2300      	moveq	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	79fb      	ldrb	r3, [r7, #7]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d1d6      	bne.n	8003d14 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d009      	beq.n	8003d98 <QSPI_Config+0x28>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003d8a:	d005      	beq.n	8003d98 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3a01      	subs	r2, #1
 8003d96:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 80b9 	beq.w	8003f14 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d05f      	beq.n	8003e6a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	6892      	ldr	r2, [r2, #8]
 8003db2:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d031      	beq.n	8003e20 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	049b      	lsls	r3, r3, #18
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	431a      	orrs	r2, r3
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	431a      	orrs	r2, r3
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	431a      	orrs	r2, r3
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	ea42 0103 	orr.w	r1, r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003e10:	f000 812e 	beq.w	8004070 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	6852      	ldr	r2, [r2, #4]
 8003e1c:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8003e1e:	e127      	b.n	8004070 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	431a      	orrs	r2, r3
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	049b      	lsls	r3, r3, #18
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	431a      	orrs	r2, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	431a      	orrs	r2, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	ea42 0103 	orr.w	r1, r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	615a      	str	r2, [r3, #20]
}
 8003e68:	e102      	b.n	8004070 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d02e      	beq.n	8003ed0 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e80:	431a      	orrs	r2, r3
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	431a      	orrs	r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	049b      	lsls	r3, r3, #18
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	431a      	orrs	r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	ea42 0103 	orr.w	r1, r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003ec0:	f000 80d6 	beq.w	8004070 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	6852      	ldr	r2, [r2, #4]
 8003ecc:	619a      	str	r2, [r3, #24]
}
 8003ece:	e0cf      	b.n	8004070 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	049b      	lsls	r3, r3, #18
 8003eec:	431a      	orrs	r2, r3
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	431a      	orrs	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	ea42 0103 	orr.w	r1, r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	615a      	str	r2, [r3, #20]
}
 8003f12:	e0ad      	b.n	8004070 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d058      	beq.n	8003fce <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	6892      	ldr	r2, [r2, #8]
 8003f24:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d02d      	beq.n	8003f8a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	431a      	orrs	r2, r3
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	431a      	orrs	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	049b      	lsls	r3, r3, #18
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	431a      	orrs	r2, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	431a      	orrs	r2, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	431a      	orrs	r2, r3
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	ea42 0103 	orr.w	r1, r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003f7c:	d078      	beq.n	8004070 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	6852      	ldr	r2, [r2, #4]
 8003f86:	619a      	str	r2, [r3, #24]
}
 8003f88:	e072      	b.n	8004070 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	431a      	orrs	r2, r3
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	049b      	lsls	r3, r3, #18
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	431a      	orrs	r2, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	ea42 0103 	orr.w	r1, r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	615a      	str	r2, [r3, #20]
}
 8003fcc:	e050      	b.n	8004070 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d02a      	beq.n	800402c <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	431a      	orrs	r2, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	049b      	lsls	r3, r3, #18
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	431a      	orrs	r2, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	431a      	orrs	r2, r3
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	ea42 0103 	orr.w	r1, r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	430a      	orrs	r2, r1
 8004016:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800401e:	d027      	beq.n	8004070 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	6852      	ldr	r2, [r2, #4]
 8004028:	619a      	str	r2, [r3, #24]
}
 800402a:	e021      	b.n	8004070 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	2b00      	cmp	r3, #0
 8004032:	d01d      	beq.n	8004070 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	431a      	orrs	r2, r3
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004042:	431a      	orrs	r2, r3
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	431a      	orrs	r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	049b      	lsls	r3, r3, #18
 8004050:	431a      	orrs	r2, r3
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	431a      	orrs	r2, r3
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	431a      	orrs	r2, r3
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	ea42 0103 	orr.w	r1, r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	430a      	orrs	r2, r1
 800406e:	615a      	str	r2, [r3, #20]
}
 8004070:	bf00      	nop
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b088      	sub	sp, #32
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e3d4      	b.n	8004838 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800408e:	4ba1      	ldr	r3, [pc, #644]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 030c 	and.w	r3, r3, #12
 8004096:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004098:	4b9e      	ldr	r3, [pc, #632]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0310 	and.w	r3, r3, #16
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 80e4 	beq.w	8004278 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d007      	beq.n	80040c6 <HAL_RCC_OscConfig+0x4a>
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	2b0c      	cmp	r3, #12
 80040ba:	f040 808b 	bne.w	80041d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	f040 8087 	bne.w	80041d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040c6:	4b93      	ldr	r3, [pc, #588]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d005      	beq.n	80040de <HAL_RCC_OscConfig+0x62>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e3ac      	b.n	8004838 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1a      	ldr	r2, [r3, #32]
 80040e2:	4b8c      	ldr	r3, [pc, #560]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d004      	beq.n	80040f8 <HAL_RCC_OscConfig+0x7c>
 80040ee:	4b89      	ldr	r3, [pc, #548]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040f6:	e005      	b.n	8004104 <HAL_RCC_OscConfig+0x88>
 80040f8:	4b86      	ldr	r3, [pc, #536]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 80040fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040fe:	091b      	lsrs	r3, r3, #4
 8004100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004104:	4293      	cmp	r3, r2
 8004106:	d223      	bcs.n	8004150 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fd5d 	bl	8004bcc <RCC_SetFlashLatencyFromMSIRange>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e38d      	b.n	8004838 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800411c:	4b7d      	ldr	r3, [pc, #500]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a7c      	ldr	r2, [pc, #496]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 8004122:	f043 0308 	orr.w	r3, r3, #8
 8004126:	6013      	str	r3, [r2, #0]
 8004128:	4b7a      	ldr	r3, [pc, #488]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	4977      	ldr	r1, [pc, #476]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 8004136:	4313      	orrs	r3, r2
 8004138:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800413a:	4b76      	ldr	r3, [pc, #472]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	021b      	lsls	r3, r3, #8
 8004148:	4972      	ldr	r1, [pc, #456]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 800414a:	4313      	orrs	r3, r2
 800414c:	604b      	str	r3, [r1, #4]
 800414e:	e025      	b.n	800419c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004150:	4b70      	ldr	r3, [pc, #448]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a6f      	ldr	r2, [pc, #444]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 8004156:	f043 0308 	orr.w	r3, r3, #8
 800415a:	6013      	str	r3, [r2, #0]
 800415c:	4b6d      	ldr	r3, [pc, #436]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	496a      	ldr	r1, [pc, #424]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 800416a:	4313      	orrs	r3, r2
 800416c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800416e:	4b69      	ldr	r3, [pc, #420]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	4965      	ldr	r1, [pc, #404]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 800417e:	4313      	orrs	r3, r2
 8004180:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d109      	bne.n	800419c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fd1d 	bl	8004bcc <RCC_SetFlashLatencyFromMSIRange>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e34d      	b.n	8004838 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800419c:	f000 fc36 	bl	8004a0c <HAL_RCC_GetSysClockFreq>
 80041a0:	4602      	mov	r2, r0
 80041a2:	4b5c      	ldr	r3, [pc, #368]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	091b      	lsrs	r3, r3, #4
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	495a      	ldr	r1, [pc, #360]	; (8004318 <HAL_RCC_OscConfig+0x29c>)
 80041ae:	5ccb      	ldrb	r3, [r1, r3]
 80041b0:	f003 031f 	and.w	r3, r3, #31
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
 80041b8:	4a58      	ldr	r2, [pc, #352]	; (800431c <HAL_RCC_OscConfig+0x2a0>)
 80041ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80041bc:	4b58      	ldr	r3, [pc, #352]	; (8004320 <HAL_RCC_OscConfig+0x2a4>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fd ff5d 	bl	8002080 <HAL_InitTick>
 80041c6:	4603      	mov	r3, r0
 80041c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d052      	beq.n	8004276 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80041d0:	7bfb      	ldrb	r3, [r7, #15]
 80041d2:	e331      	b.n	8004838 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d032      	beq.n	8004242 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041dc:	4b4d      	ldr	r3, [pc, #308]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a4c      	ldr	r2, [pc, #304]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 80041e2:	f043 0301 	orr.w	r3, r3, #1
 80041e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041e8:	f7fe f92e 	bl	8002448 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041f0:	f7fe f92a 	bl	8002448 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e31a      	b.n	8004838 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004202:	4b44      	ldr	r3, [pc, #272]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0f0      	beq.n	80041f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800420e:	4b41      	ldr	r3, [pc, #260]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a40      	ldr	r2, [pc, #256]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 8004214:	f043 0308 	orr.w	r3, r3, #8
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	4b3e      	ldr	r3, [pc, #248]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	493b      	ldr	r1, [pc, #236]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 8004228:	4313      	orrs	r3, r2
 800422a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800422c:	4b39      	ldr	r3, [pc, #228]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	021b      	lsls	r3, r3, #8
 800423a:	4936      	ldr	r1, [pc, #216]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 800423c:	4313      	orrs	r3, r2
 800423e:	604b      	str	r3, [r1, #4]
 8004240:	e01a      	b.n	8004278 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004242:	4b34      	ldr	r3, [pc, #208]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a33      	ldr	r2, [pc, #204]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 8004248:	f023 0301 	bic.w	r3, r3, #1
 800424c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800424e:	f7fe f8fb 	bl	8002448 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004254:	e008      	b.n	8004268 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004256:	f7fe f8f7 	bl	8002448 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e2e7      	b.n	8004838 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004268:	4b2a      	ldr	r3, [pc, #168]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1f0      	bne.n	8004256 <HAL_RCC_OscConfig+0x1da>
 8004274:	e000      	b.n	8004278 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004276:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d074      	beq.n	800436e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	2b08      	cmp	r3, #8
 8004288:	d005      	beq.n	8004296 <HAL_RCC_OscConfig+0x21a>
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	2b0c      	cmp	r3, #12
 800428e:	d10e      	bne.n	80042ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2b03      	cmp	r3, #3
 8004294:	d10b      	bne.n	80042ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004296:	4b1f      	ldr	r3, [pc, #124]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d064      	beq.n	800436c <HAL_RCC_OscConfig+0x2f0>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d160      	bne.n	800436c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e2c4      	b.n	8004838 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b6:	d106      	bne.n	80042c6 <HAL_RCC_OscConfig+0x24a>
 80042b8:	4b16      	ldr	r3, [pc, #88]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a15      	ldr	r2, [pc, #84]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 80042be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c2:	6013      	str	r3, [r2, #0]
 80042c4:	e01d      	b.n	8004302 <HAL_RCC_OscConfig+0x286>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042ce:	d10c      	bne.n	80042ea <HAL_RCC_OscConfig+0x26e>
 80042d0:	4b10      	ldr	r3, [pc, #64]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a0f      	ldr	r2, [pc, #60]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 80042d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a0c      	ldr	r2, [pc, #48]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 80042e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	e00b      	b.n	8004302 <HAL_RCC_OscConfig+0x286>
 80042ea:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a09      	ldr	r2, [pc, #36]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 80042f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	4b07      	ldr	r3, [pc, #28]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a06      	ldr	r2, [pc, #24]	; (8004314 <HAL_RCC_OscConfig+0x298>)
 80042fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004300:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d01c      	beq.n	8004344 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430a:	f7fe f89d 	bl	8002448 <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004310:	e011      	b.n	8004336 <HAL_RCC_OscConfig+0x2ba>
 8004312:	bf00      	nop
 8004314:	40021000 	.word	0x40021000
 8004318:	080066f8 	.word	0x080066f8
 800431c:	20000008 	.word	0x20000008
 8004320:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004324:	f7fe f890 	bl	8002448 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b64      	cmp	r3, #100	; 0x64
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e280      	b.n	8004838 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004336:	4baf      	ldr	r3, [pc, #700]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0f0      	beq.n	8004324 <HAL_RCC_OscConfig+0x2a8>
 8004342:	e014      	b.n	800436e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004344:	f7fe f880 	bl	8002448 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800434c:	f7fe f87c 	bl	8002448 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b64      	cmp	r3, #100	; 0x64
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e26c      	b.n	8004838 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800435e:	4ba5      	ldr	r3, [pc, #660]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0x2d0>
 800436a:	e000      	b.n	800436e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800436c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d060      	beq.n	800443c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	2b04      	cmp	r3, #4
 800437e:	d005      	beq.n	800438c <HAL_RCC_OscConfig+0x310>
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	2b0c      	cmp	r3, #12
 8004384:	d119      	bne.n	80043ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b02      	cmp	r3, #2
 800438a:	d116      	bne.n	80043ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800438c:	4b99      	ldr	r3, [pc, #612]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <HAL_RCC_OscConfig+0x328>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e249      	b.n	8004838 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a4:	4b93      	ldr	r3, [pc, #588]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	061b      	lsls	r3, r3, #24
 80043b2:	4990      	ldr	r1, [pc, #576]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043b8:	e040      	b.n	800443c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d023      	beq.n	800440a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043c2:	4b8c      	ldr	r3, [pc, #560]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a8b      	ldr	r2, [pc, #556]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 80043c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ce:	f7fe f83b 	bl	8002448 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043d4:	e008      	b.n	80043e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043d6:	f7fe f837 	bl	8002448 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e227      	b.n	8004838 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043e8:	4b82      	ldr	r3, [pc, #520]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0f0      	beq.n	80043d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f4:	4b7f      	ldr	r3, [pc, #508]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	061b      	lsls	r3, r3, #24
 8004402:	497c      	ldr	r1, [pc, #496]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 8004404:	4313      	orrs	r3, r2
 8004406:	604b      	str	r3, [r1, #4]
 8004408:	e018      	b.n	800443c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800440a:	4b7a      	ldr	r3, [pc, #488]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a79      	ldr	r2, [pc, #484]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 8004410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004416:	f7fe f817 	bl	8002448 <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800441e:	f7fe f813 	bl	8002448 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e203      	b.n	8004838 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004430:	4b70      	ldr	r3, [pc, #448]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1f0      	bne.n	800441e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b00      	cmp	r3, #0
 8004446:	d03c      	beq.n	80044c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d01c      	beq.n	800448a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004450:	4b68      	ldr	r3, [pc, #416]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 8004452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004456:	4a67      	ldr	r2, [pc, #412]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 8004458:	f043 0301 	orr.w	r3, r3, #1
 800445c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004460:	f7fd fff2 	bl	8002448 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004468:	f7fd ffee 	bl	8002448 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e1de      	b.n	8004838 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800447a:	4b5e      	ldr	r3, [pc, #376]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 800447c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0ef      	beq.n	8004468 <HAL_RCC_OscConfig+0x3ec>
 8004488:	e01b      	b.n	80044c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800448a:	4b5a      	ldr	r3, [pc, #360]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 800448c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004490:	4a58      	ldr	r2, [pc, #352]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 8004492:	f023 0301 	bic.w	r3, r3, #1
 8004496:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449a:	f7fd ffd5 	bl	8002448 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a2:	f7fd ffd1 	bl	8002448 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e1c1      	b.n	8004838 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044b4:	4b4f      	ldr	r3, [pc, #316]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 80044b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1ef      	bne.n	80044a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 80a6 	beq.w	800461c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044d0:	2300      	movs	r3, #0
 80044d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80044d4:	4b47      	ldr	r3, [pc, #284]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 80044d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10d      	bne.n	80044fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044e0:	4b44      	ldr	r3, [pc, #272]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 80044e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e4:	4a43      	ldr	r2, [pc, #268]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 80044e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ea:	6593      	str	r3, [r2, #88]	; 0x58
 80044ec:	4b41      	ldr	r3, [pc, #260]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 80044ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f4:	60bb      	str	r3, [r7, #8]
 80044f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044f8:	2301      	movs	r3, #1
 80044fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044fc:	4b3e      	ldr	r3, [pc, #248]	; (80045f8 <HAL_RCC_OscConfig+0x57c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004504:	2b00      	cmp	r3, #0
 8004506:	d118      	bne.n	800453a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004508:	4b3b      	ldr	r3, [pc, #236]	; (80045f8 <HAL_RCC_OscConfig+0x57c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a3a      	ldr	r2, [pc, #232]	; (80045f8 <HAL_RCC_OscConfig+0x57c>)
 800450e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004512:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004514:	f7fd ff98 	bl	8002448 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800451c:	f7fd ff94 	bl	8002448 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e184      	b.n	8004838 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800452e:	4b32      	ldr	r3, [pc, #200]	; (80045f8 <HAL_RCC_OscConfig+0x57c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0f0      	beq.n	800451c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d108      	bne.n	8004554 <HAL_RCC_OscConfig+0x4d8>
 8004542:	4b2c      	ldr	r3, [pc, #176]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 8004544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004548:	4a2a      	ldr	r2, [pc, #168]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004552:	e024      	b.n	800459e <HAL_RCC_OscConfig+0x522>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2b05      	cmp	r3, #5
 800455a:	d110      	bne.n	800457e <HAL_RCC_OscConfig+0x502>
 800455c:	4b25      	ldr	r3, [pc, #148]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 800455e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004562:	4a24      	ldr	r2, [pc, #144]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 8004564:	f043 0304 	orr.w	r3, r3, #4
 8004568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800456c:	4b21      	ldr	r3, [pc, #132]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 800456e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004572:	4a20      	ldr	r2, [pc, #128]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 8004574:	f043 0301 	orr.w	r3, r3, #1
 8004578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800457c:	e00f      	b.n	800459e <HAL_RCC_OscConfig+0x522>
 800457e:	4b1d      	ldr	r3, [pc, #116]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 8004580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004584:	4a1b      	ldr	r2, [pc, #108]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 8004586:	f023 0301 	bic.w	r3, r3, #1
 800458a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800458e:	4b19      	ldr	r3, [pc, #100]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 8004590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004594:	4a17      	ldr	r2, [pc, #92]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 8004596:	f023 0304 	bic.w	r3, r3, #4
 800459a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d016      	beq.n	80045d4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a6:	f7fd ff4f 	bl	8002448 <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ac:	e00a      	b.n	80045c4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ae:	f7fd ff4b 	bl	8002448 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045bc:	4293      	cmp	r3, r2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e139      	b.n	8004838 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045c4:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <HAL_RCC_OscConfig+0x578>)
 80045c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0ed      	beq.n	80045ae <HAL_RCC_OscConfig+0x532>
 80045d2:	e01a      	b.n	800460a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d4:	f7fd ff38 	bl	8002448 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045da:	e00f      	b.n	80045fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045dc:	f7fd ff34 	bl	8002448 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d906      	bls.n	80045fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e122      	b.n	8004838 <HAL_RCC_OscConfig+0x7bc>
 80045f2:	bf00      	nop
 80045f4:	40021000 	.word	0x40021000
 80045f8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045fc:	4b90      	ldr	r3, [pc, #576]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 80045fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1e8      	bne.n	80045dc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800460a:	7ffb      	ldrb	r3, [r7, #31]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d105      	bne.n	800461c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004610:	4b8b      	ldr	r3, [pc, #556]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 8004612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004614:	4a8a      	ldr	r2, [pc, #552]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 8004616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800461a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 8108 	beq.w	8004836 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462a:	2b02      	cmp	r3, #2
 800462c:	f040 80d0 	bne.w	80047d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004630:	4b83      	ldr	r3, [pc, #524]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f003 0203 	and.w	r2, r3, #3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	429a      	cmp	r2, r3
 8004642:	d130      	bne.n	80046a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	3b01      	subs	r3, #1
 8004650:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004652:	429a      	cmp	r2, r3
 8004654:	d127      	bne.n	80046a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004660:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004662:	429a      	cmp	r2, r3
 8004664:	d11f      	bne.n	80046a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004670:	2a07      	cmp	r2, #7
 8004672:	bf14      	ite	ne
 8004674:	2201      	movne	r2, #1
 8004676:	2200      	moveq	r2, #0
 8004678:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800467a:	4293      	cmp	r3, r2
 800467c:	d113      	bne.n	80046a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004688:	085b      	lsrs	r3, r3, #1
 800468a:	3b01      	subs	r3, #1
 800468c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800468e:	429a      	cmp	r2, r3
 8004690:	d109      	bne.n	80046a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	085b      	lsrs	r3, r3, #1
 800469e:	3b01      	subs	r3, #1
 80046a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d06e      	beq.n	8004784 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	2b0c      	cmp	r3, #12
 80046aa:	d069      	beq.n	8004780 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046ac:	4b64      	ldr	r3, [pc, #400]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d105      	bne.n	80046c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80046b8:	4b61      	ldr	r3, [pc, #388]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0b7      	b.n	8004838 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046c8:	4b5d      	ldr	r3, [pc, #372]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a5c      	ldr	r2, [pc, #368]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 80046ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046d4:	f7fd feb8 	bl	8002448 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046dc:	f7fd feb4 	bl	8002448 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e0a4      	b.n	8004838 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046ee:	4b54      	ldr	r3, [pc, #336]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1f0      	bne.n	80046dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046fa:	4b51      	ldr	r3, [pc, #324]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	4b51      	ldr	r3, [pc, #324]	; (8004844 <HAL_RCC_OscConfig+0x7c8>)
 8004700:	4013      	ands	r3, r2
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800470a:	3a01      	subs	r2, #1
 800470c:	0112      	lsls	r2, r2, #4
 800470e:	4311      	orrs	r1, r2
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004714:	0212      	lsls	r2, r2, #8
 8004716:	4311      	orrs	r1, r2
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800471c:	0852      	lsrs	r2, r2, #1
 800471e:	3a01      	subs	r2, #1
 8004720:	0552      	lsls	r2, r2, #21
 8004722:	4311      	orrs	r1, r2
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004728:	0852      	lsrs	r2, r2, #1
 800472a:	3a01      	subs	r2, #1
 800472c:	0652      	lsls	r2, r2, #25
 800472e:	4311      	orrs	r1, r2
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004734:	0912      	lsrs	r2, r2, #4
 8004736:	0452      	lsls	r2, r2, #17
 8004738:	430a      	orrs	r2, r1
 800473a:	4941      	ldr	r1, [pc, #260]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 800473c:	4313      	orrs	r3, r2
 800473e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004740:	4b3f      	ldr	r3, [pc, #252]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a3e      	ldr	r2, [pc, #248]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 8004746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800474a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800474c:	4b3c      	ldr	r3, [pc, #240]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4a3b      	ldr	r2, [pc, #236]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 8004752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004756:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004758:	f7fd fe76 	bl	8002448 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004760:	f7fd fe72 	bl	8002448 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e062      	b.n	8004838 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004772:	4b33      	ldr	r3, [pc, #204]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0f0      	beq.n	8004760 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800477e:	e05a      	b.n	8004836 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e059      	b.n	8004838 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004784:	4b2e      	ldr	r3, [pc, #184]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d152      	bne.n	8004836 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004790:	4b2b      	ldr	r3, [pc, #172]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a2a      	ldr	r2, [pc, #168]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 8004796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800479a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800479c:	4b28      	ldr	r3, [pc, #160]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	4a27      	ldr	r2, [pc, #156]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 80047a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047a8:	f7fd fe4e 	bl	8002448 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b0:	f7fd fe4a 	bl	8002448 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e03a      	b.n	8004838 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047c2:	4b1f      	ldr	r3, [pc, #124]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCC_OscConfig+0x734>
 80047ce:	e032      	b.n	8004836 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2b0c      	cmp	r3, #12
 80047d4:	d02d      	beq.n	8004832 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d6:	4b1a      	ldr	r3, [pc, #104]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a19      	ldr	r2, [pc, #100]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 80047dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047e0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80047e2:	4b17      	ldr	r3, [pc, #92]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d105      	bne.n	80047fa <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80047ee:	4b14      	ldr	r3, [pc, #80]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	4a13      	ldr	r2, [pc, #76]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 80047f4:	f023 0303 	bic.w	r3, r3, #3
 80047f8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80047fa:	4b11      	ldr	r3, [pc, #68]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	4a10      	ldr	r2, [pc, #64]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 8004800:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004808:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480a:	f7fd fe1d 	bl	8002448 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004812:	f7fd fe19 	bl	8002448 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e009      	b.n	8004838 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004824:	4b06      	ldr	r3, [pc, #24]	; (8004840 <HAL_RCC_OscConfig+0x7c4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1f0      	bne.n	8004812 <HAL_RCC_OscConfig+0x796>
 8004830:	e001      	b.n	8004836 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e000      	b.n	8004838 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3720      	adds	r7, #32
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40021000 	.word	0x40021000
 8004844:	f99d808c 	.word	0xf99d808c

08004848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e0c8      	b.n	80049ee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800485c:	4b66      	ldr	r3, [pc, #408]	; (80049f8 <HAL_RCC_ClockConfig+0x1b0>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d910      	bls.n	800488c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486a:	4b63      	ldr	r3, [pc, #396]	; (80049f8 <HAL_RCC_ClockConfig+0x1b0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f023 0207 	bic.w	r2, r3, #7
 8004872:	4961      	ldr	r1, [pc, #388]	; (80049f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	4313      	orrs	r3, r2
 8004878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800487a:	4b5f      	ldr	r3, [pc, #380]	; (80049f8 <HAL_RCC_ClockConfig+0x1b0>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d001      	beq.n	800488c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e0b0      	b.n	80049ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d04c      	beq.n	8004932 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	2b03      	cmp	r3, #3
 800489e:	d107      	bne.n	80048b0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048a0:	4b56      	ldr	r3, [pc, #344]	; (80049fc <HAL_RCC_ClockConfig+0x1b4>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d121      	bne.n	80048f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e09e      	b.n	80049ee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d107      	bne.n	80048c8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048b8:	4b50      	ldr	r3, [pc, #320]	; (80049fc <HAL_RCC_ClockConfig+0x1b4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d115      	bne.n	80048f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e092      	b.n	80049ee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d107      	bne.n	80048e0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048d0:	4b4a      	ldr	r3, [pc, #296]	; (80049fc <HAL_RCC_ClockConfig+0x1b4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d109      	bne.n	80048f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e086      	b.n	80049ee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048e0:	4b46      	ldr	r3, [pc, #280]	; (80049fc <HAL_RCC_ClockConfig+0x1b4>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e07e      	b.n	80049ee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048f0:	4b42      	ldr	r3, [pc, #264]	; (80049fc <HAL_RCC_ClockConfig+0x1b4>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f023 0203 	bic.w	r2, r3, #3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	493f      	ldr	r1, [pc, #252]	; (80049fc <HAL_RCC_ClockConfig+0x1b4>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004902:	f7fd fda1 	bl	8002448 <HAL_GetTick>
 8004906:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004908:	e00a      	b.n	8004920 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800490a:	f7fd fd9d 	bl	8002448 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	f241 3288 	movw	r2, #5000	; 0x1388
 8004918:	4293      	cmp	r3, r2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e066      	b.n	80049ee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004920:	4b36      	ldr	r3, [pc, #216]	; (80049fc <HAL_RCC_ClockConfig+0x1b4>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f003 020c 	and.w	r2, r3, #12
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	429a      	cmp	r2, r3
 8004930:	d1eb      	bne.n	800490a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d008      	beq.n	8004950 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800493e:	4b2f      	ldr	r3, [pc, #188]	; (80049fc <HAL_RCC_ClockConfig+0x1b4>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	492c      	ldr	r1, [pc, #176]	; (80049fc <HAL_RCC_ClockConfig+0x1b4>)
 800494c:	4313      	orrs	r3, r2
 800494e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004950:	4b29      	ldr	r3, [pc, #164]	; (80049f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d210      	bcs.n	8004980 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495e:	4b26      	ldr	r3, [pc, #152]	; (80049f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f023 0207 	bic.w	r2, r3, #7
 8004966:	4924      	ldr	r1, [pc, #144]	; (80049f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	4313      	orrs	r3, r2
 800496c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800496e:	4b22      	ldr	r3, [pc, #136]	; (80049f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	429a      	cmp	r2, r3
 800497a:	d001      	beq.n	8004980 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e036      	b.n	80049ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0304 	and.w	r3, r3, #4
 8004988:	2b00      	cmp	r3, #0
 800498a:	d008      	beq.n	800499e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800498c:	4b1b      	ldr	r3, [pc, #108]	; (80049fc <HAL_RCC_ClockConfig+0x1b4>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	4918      	ldr	r1, [pc, #96]	; (80049fc <HAL_RCC_ClockConfig+0x1b4>)
 800499a:	4313      	orrs	r3, r2
 800499c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d009      	beq.n	80049be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049aa:	4b14      	ldr	r3, [pc, #80]	; (80049fc <HAL_RCC_ClockConfig+0x1b4>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	4910      	ldr	r1, [pc, #64]	; (80049fc <HAL_RCC_ClockConfig+0x1b4>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049be:	f000 f825 	bl	8004a0c <HAL_RCC_GetSysClockFreq>
 80049c2:	4602      	mov	r2, r0
 80049c4:	4b0d      	ldr	r3, [pc, #52]	; (80049fc <HAL_RCC_ClockConfig+0x1b4>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	091b      	lsrs	r3, r3, #4
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	490c      	ldr	r1, [pc, #48]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 80049d0:	5ccb      	ldrb	r3, [r1, r3]
 80049d2:	f003 031f 	and.w	r3, r3, #31
 80049d6:	fa22 f303 	lsr.w	r3, r2, r3
 80049da:	4a0a      	ldr	r2, [pc, #40]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80049dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80049de:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <HAL_RCC_ClockConfig+0x1c0>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fd fb4c 	bl	8002080 <HAL_InitTick>
 80049e8:	4603      	mov	r3, r0
 80049ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80049ec:	7afb      	ldrb	r3, [r7, #11]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40022000 	.word	0x40022000
 80049fc:	40021000 	.word	0x40021000
 8004a00:	080066f8 	.word	0x080066f8
 8004a04:	20000008 	.word	0x20000008
 8004a08:	2000000c 	.word	0x2000000c

08004a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b089      	sub	sp, #36	; 0x24
 8004a10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a12:	2300      	movs	r3, #0
 8004a14:	61fb      	str	r3, [r7, #28]
 8004a16:	2300      	movs	r3, #0
 8004a18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a1a:	4b3e      	ldr	r3, [pc, #248]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f003 030c 	and.w	r3, r3, #12
 8004a22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a24:	4b3b      	ldr	r3, [pc, #236]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f003 0303 	and.w	r3, r3, #3
 8004a2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_RCC_GetSysClockFreq+0x34>
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	2b0c      	cmp	r3, #12
 8004a38:	d121      	bne.n	8004a7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d11e      	bne.n	8004a7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a40:	4b34      	ldr	r3, [pc, #208]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0308 	and.w	r3, r3, #8
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d107      	bne.n	8004a5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a4c:	4b31      	ldr	r3, [pc, #196]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	f003 030f 	and.w	r3, r3, #15
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	e005      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a5c:	4b2d      	ldr	r3, [pc, #180]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	091b      	lsrs	r3, r3, #4
 8004a62:	f003 030f 	and.w	r3, r3, #15
 8004a66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a68:	4a2b      	ldr	r2, [pc, #172]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10d      	bne.n	8004a94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a7c:	e00a      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d102      	bne.n	8004a8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a84:	4b25      	ldr	r3, [pc, #148]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x110>)
 8004a86:	61bb      	str	r3, [r7, #24]
 8004a88:	e004      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d101      	bne.n	8004a94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a90:	4b23      	ldr	r3, [pc, #140]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	2b0c      	cmp	r3, #12
 8004a98:	d134      	bne.n	8004b04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a9a:	4b1e      	ldr	r3, [pc, #120]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d003      	beq.n	8004ab2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d003      	beq.n	8004ab8 <HAL_RCC_GetSysClockFreq+0xac>
 8004ab0:	e005      	b.n	8004abe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ab2:	4b1a      	ldr	r3, [pc, #104]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x110>)
 8004ab4:	617b      	str	r3, [r7, #20]
      break;
 8004ab6:	e005      	b.n	8004ac4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ab8:	4b19      	ldr	r3, [pc, #100]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x114>)
 8004aba:	617b      	str	r3, [r7, #20]
      break;
 8004abc:	e002      	b.n	8004ac4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	617b      	str	r3, [r7, #20]
      break;
 8004ac2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ac4:	4b13      	ldr	r3, [pc, #76]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	091b      	lsrs	r3, r3, #4
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	3301      	adds	r3, #1
 8004ad0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ad2:	4b10      	ldr	r3, [pc, #64]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	0a1b      	lsrs	r3, r3, #8
 8004ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	fb02 f203 	mul.w	r2, r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004aea:	4b0a      	ldr	r3, [pc, #40]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	0e5b      	lsrs	r3, r3, #25
 8004af0:	f003 0303 	and.w	r3, r3, #3
 8004af4:	3301      	adds	r3, #1
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b04:	69bb      	ldr	r3, [r7, #24]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3724      	adds	r7, #36	; 0x24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40021000 	.word	0x40021000
 8004b18:	08006710 	.word	0x08006710
 8004b1c:	00f42400 	.word	0x00f42400
 8004b20:	007a1200 	.word	0x007a1200

08004b24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b28:	4b03      	ldr	r3, [pc, #12]	; (8004b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	20000008 	.word	0x20000008

08004b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b40:	f7ff fff0 	bl	8004b24 <HAL_RCC_GetHCLKFreq>
 8004b44:	4602      	mov	r2, r0
 8004b46:	4b06      	ldr	r3, [pc, #24]	; (8004b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	0adb      	lsrs	r3, r3, #11
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	4904      	ldr	r1, [pc, #16]	; (8004b64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b52:	5ccb      	ldrb	r3, [r1, r3]
 8004b54:	f003 031f 	and.w	r3, r3, #31
 8004b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40021000 	.word	0x40021000
 8004b64:	08006708 	.word	0x08006708

08004b68 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	220f      	movs	r2, #15
 8004b76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004b78:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 0203 	and.w	r2, r3, #3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004b84:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004b90:	4b0c      	ldr	r3, [pc, #48]	; (8004bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004b9c:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	08db      	lsrs	r3, r3, #3
 8004ba2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004baa:	4b07      	ldr	r3, [pc, #28]	; (8004bc8 <HAL_RCC_GetClockConfig+0x60>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0207 	and.w	r2, r3, #7
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	601a      	str	r2, [r3, #0]
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	40022000 	.word	0x40022000

08004bcc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004bd8:	4b2a      	ldr	r3, [pc, #168]	; (8004c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004be4:	f7fe fd06 	bl	80035f4 <HAL_PWREx_GetVoltageRange>
 8004be8:	6178      	str	r0, [r7, #20]
 8004bea:	e014      	b.n	8004c16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bec:	4b25      	ldr	r3, [pc, #148]	; (8004c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf0:	4a24      	ldr	r2, [pc, #144]	; (8004c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf6:	6593      	str	r3, [r2, #88]	; 0x58
 8004bf8:	4b22      	ldr	r3, [pc, #136]	; (8004c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c04:	f7fe fcf6 	bl	80035f4 <HAL_PWREx_GetVoltageRange>
 8004c08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c0a:	4b1e      	ldr	r3, [pc, #120]	; (8004c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0e:	4a1d      	ldr	r2, [pc, #116]	; (8004c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c14:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c1c:	d10b      	bne.n	8004c36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b80      	cmp	r3, #128	; 0x80
 8004c22:	d919      	bls.n	8004c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2ba0      	cmp	r3, #160	; 0xa0
 8004c28:	d902      	bls.n	8004c30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	613b      	str	r3, [r7, #16]
 8004c2e:	e013      	b.n	8004c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c30:	2301      	movs	r3, #1
 8004c32:	613b      	str	r3, [r7, #16]
 8004c34:	e010      	b.n	8004c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b80      	cmp	r3, #128	; 0x80
 8004c3a:	d902      	bls.n	8004c42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	613b      	str	r3, [r7, #16]
 8004c40:	e00a      	b.n	8004c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b80      	cmp	r3, #128	; 0x80
 8004c46:	d102      	bne.n	8004c4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c48:	2302      	movs	r3, #2
 8004c4a:	613b      	str	r3, [r7, #16]
 8004c4c:	e004      	b.n	8004c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b70      	cmp	r3, #112	; 0x70
 8004c52:	d101      	bne.n	8004c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c54:	2301      	movs	r3, #1
 8004c56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c58:	4b0b      	ldr	r3, [pc, #44]	; (8004c88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f023 0207 	bic.w	r2, r3, #7
 8004c60:	4909      	ldr	r1, [pc, #36]	; (8004c88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c68:	4b07      	ldr	r3, [pc, #28]	; (8004c88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d001      	beq.n	8004c7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e000      	b.n	8004c7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40021000 	.word	0x40021000
 8004c88:	40022000 	.word	0x40022000

08004c8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e049      	b.n	8004d32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d106      	bne.n	8004cb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7fd f9c6 	bl	8002044 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4610      	mov	r0, r2
 8004ccc:	f000 fab4 	bl	8005238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d001      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e04f      	b.n	8004df4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a23      	ldr	r2, [pc, #140]	; (8004e00 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d01d      	beq.n	8004db2 <HAL_TIM_Base_Start_IT+0x76>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7e:	d018      	beq.n	8004db2 <HAL_TIM_Base_Start_IT+0x76>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a1f      	ldr	r2, [pc, #124]	; (8004e04 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d013      	beq.n	8004db2 <HAL_TIM_Base_Start_IT+0x76>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a1e      	ldr	r2, [pc, #120]	; (8004e08 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00e      	beq.n	8004db2 <HAL_TIM_Base_Start_IT+0x76>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1c      	ldr	r2, [pc, #112]	; (8004e0c <HAL_TIM_Base_Start_IT+0xd0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d009      	beq.n	8004db2 <HAL_TIM_Base_Start_IT+0x76>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a1b      	ldr	r2, [pc, #108]	; (8004e10 <HAL_TIM_Base_Start_IT+0xd4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d004      	beq.n	8004db2 <HAL_TIM_Base_Start_IT+0x76>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a19      	ldr	r2, [pc, #100]	; (8004e14 <HAL_TIM_Base_Start_IT+0xd8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d115      	bne.n	8004dde <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	4b17      	ldr	r3, [pc, #92]	; (8004e18 <HAL_TIM_Base_Start_IT+0xdc>)
 8004dba:	4013      	ands	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b06      	cmp	r3, #6
 8004dc2:	d015      	beq.n	8004df0 <HAL_TIM_Base_Start_IT+0xb4>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dca:	d011      	beq.n	8004df0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0201 	orr.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ddc:	e008      	b.n	8004df0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f042 0201 	orr.w	r2, r2, #1
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	e000      	b.n	8004df2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	40012c00 	.word	0x40012c00
 8004e04:	40000400 	.word	0x40000400
 8004e08:	40000800 	.word	0x40000800
 8004e0c:	40000c00 	.word	0x40000c00
 8004e10:	40013400 	.word	0x40013400
 8004e14:	40014000 	.word	0x40014000
 8004e18:	00010007 	.word	0x00010007

08004e1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d122      	bne.n	8004e78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d11b      	bne.n	8004e78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f06f 0202 	mvn.w	r2, #2
 8004e48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	f003 0303 	and.w	r3, r3, #3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f9cb 	bl	80051fa <HAL_TIM_IC_CaptureCallback>
 8004e64:	e005      	b.n	8004e72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f9bd 	bl	80051e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f9ce 	bl	800520e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	f003 0304 	and.w	r3, r3, #4
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d122      	bne.n	8004ecc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	d11b      	bne.n	8004ecc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f06f 0204 	mvn.w	r2, #4
 8004e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f9a1 	bl	80051fa <HAL_TIM_IC_CaptureCallback>
 8004eb8:	e005      	b.n	8004ec6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f993 	bl	80051e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f9a4 	bl	800520e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	f003 0308 	and.w	r3, r3, #8
 8004ed6:	2b08      	cmp	r3, #8
 8004ed8:	d122      	bne.n	8004f20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f003 0308 	and.w	r3, r3, #8
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d11b      	bne.n	8004f20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f06f 0208 	mvn.w	r2, #8
 8004ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2204      	movs	r2, #4
 8004ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f977 	bl	80051fa <HAL_TIM_IC_CaptureCallback>
 8004f0c:	e005      	b.n	8004f1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f969 	bl	80051e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f97a 	bl	800520e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f003 0310 	and.w	r3, r3, #16
 8004f2a:	2b10      	cmp	r3, #16
 8004f2c:	d122      	bne.n	8004f74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f003 0310 	and.w	r3, r3, #16
 8004f38:	2b10      	cmp	r3, #16
 8004f3a:	d11b      	bne.n	8004f74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f06f 0210 	mvn.w	r2, #16
 8004f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2208      	movs	r2, #8
 8004f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f94d 	bl	80051fa <HAL_TIM_IC_CaptureCallback>
 8004f60:	e005      	b.n	8004f6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f93f 	bl	80051e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f950 	bl	800520e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d10e      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d107      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f06f 0201 	mvn.w	r2, #1
 8004f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7fc fb32 	bl	8001604 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004faa:	2b80      	cmp	r3, #128	; 0x80
 8004fac:	d10e      	bne.n	8004fcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb8:	2b80      	cmp	r3, #128	; 0x80
 8004fba:	d107      	bne.n	8004fcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fafc 	bl	80055c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fda:	d10e      	bne.n	8004ffa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe6:	2b80      	cmp	r3, #128	; 0x80
 8004fe8:	d107      	bne.n	8004ffa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 faef 	bl	80055d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005004:	2b40      	cmp	r3, #64	; 0x40
 8005006:	d10e      	bne.n	8005026 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005012:	2b40      	cmp	r3, #64	; 0x40
 8005014:	d107      	bne.n	8005026 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800501e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f8fe 	bl	8005222 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b20      	cmp	r3, #32
 8005032:	d10e      	bne.n	8005052 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f003 0320 	and.w	r3, r3, #32
 800503e:	2b20      	cmp	r3, #32
 8005040:	d107      	bne.n	8005052 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f06f 0220 	mvn.w	r2, #32
 800504a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 faaf 	bl	80055b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005052:	bf00      	nop
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800506a:	2b01      	cmp	r3, #1
 800506c:	d101      	bne.n	8005072 <HAL_TIM_ConfigClockSource+0x18>
 800506e:	2302      	movs	r3, #2
 8005070:	e0b5      	b.n	80051de <HAL_TIM_ConfigClockSource+0x184>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2202      	movs	r2, #2
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005090:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005094:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800509c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ae:	d03e      	beq.n	800512e <HAL_TIM_ConfigClockSource+0xd4>
 80050b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050b4:	f200 8087 	bhi.w	80051c6 <HAL_TIM_ConfigClockSource+0x16c>
 80050b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050bc:	f000 8085 	beq.w	80051ca <HAL_TIM_ConfigClockSource+0x170>
 80050c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c4:	d87f      	bhi.n	80051c6 <HAL_TIM_ConfigClockSource+0x16c>
 80050c6:	2b70      	cmp	r3, #112	; 0x70
 80050c8:	d01a      	beq.n	8005100 <HAL_TIM_ConfigClockSource+0xa6>
 80050ca:	2b70      	cmp	r3, #112	; 0x70
 80050cc:	d87b      	bhi.n	80051c6 <HAL_TIM_ConfigClockSource+0x16c>
 80050ce:	2b60      	cmp	r3, #96	; 0x60
 80050d0:	d050      	beq.n	8005174 <HAL_TIM_ConfigClockSource+0x11a>
 80050d2:	2b60      	cmp	r3, #96	; 0x60
 80050d4:	d877      	bhi.n	80051c6 <HAL_TIM_ConfigClockSource+0x16c>
 80050d6:	2b50      	cmp	r3, #80	; 0x50
 80050d8:	d03c      	beq.n	8005154 <HAL_TIM_ConfigClockSource+0xfa>
 80050da:	2b50      	cmp	r3, #80	; 0x50
 80050dc:	d873      	bhi.n	80051c6 <HAL_TIM_ConfigClockSource+0x16c>
 80050de:	2b40      	cmp	r3, #64	; 0x40
 80050e0:	d058      	beq.n	8005194 <HAL_TIM_ConfigClockSource+0x13a>
 80050e2:	2b40      	cmp	r3, #64	; 0x40
 80050e4:	d86f      	bhi.n	80051c6 <HAL_TIM_ConfigClockSource+0x16c>
 80050e6:	2b30      	cmp	r3, #48	; 0x30
 80050e8:	d064      	beq.n	80051b4 <HAL_TIM_ConfigClockSource+0x15a>
 80050ea:	2b30      	cmp	r3, #48	; 0x30
 80050ec:	d86b      	bhi.n	80051c6 <HAL_TIM_ConfigClockSource+0x16c>
 80050ee:	2b20      	cmp	r3, #32
 80050f0:	d060      	beq.n	80051b4 <HAL_TIM_ConfigClockSource+0x15a>
 80050f2:	2b20      	cmp	r3, #32
 80050f4:	d867      	bhi.n	80051c6 <HAL_TIM_ConfigClockSource+0x16c>
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d05c      	beq.n	80051b4 <HAL_TIM_ConfigClockSource+0x15a>
 80050fa:	2b10      	cmp	r3, #16
 80050fc:	d05a      	beq.n	80051b4 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80050fe:	e062      	b.n	80051c6 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6818      	ldr	r0, [r3, #0]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	6899      	ldr	r1, [r3, #8]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f000 f9a6 	bl	8005460 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005122:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	609a      	str	r2, [r3, #8]
      break;
 800512c:	e04e      	b.n	80051cc <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6818      	ldr	r0, [r3, #0]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	6899      	ldr	r1, [r3, #8]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f000 f98f 	bl	8005460 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005150:	609a      	str	r2, [r3, #8]
      break;
 8005152:	e03b      	b.n	80051cc <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	6859      	ldr	r1, [r3, #4]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	461a      	mov	r2, r3
 8005162:	f000 f903 	bl	800536c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2150      	movs	r1, #80	; 0x50
 800516c:	4618      	mov	r0, r3
 800516e:	f000 f95c 	bl	800542a <TIM_ITRx_SetConfig>
      break;
 8005172:	e02b      	b.n	80051cc <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6818      	ldr	r0, [r3, #0]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	6859      	ldr	r1, [r3, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	461a      	mov	r2, r3
 8005182:	f000 f922 	bl	80053ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2160      	movs	r1, #96	; 0x60
 800518c:	4618      	mov	r0, r3
 800518e:	f000 f94c 	bl	800542a <TIM_ITRx_SetConfig>
      break;
 8005192:	e01b      	b.n	80051cc <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6818      	ldr	r0, [r3, #0]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	6859      	ldr	r1, [r3, #4]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	461a      	mov	r2, r3
 80051a2:	f000 f8e3 	bl	800536c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2140      	movs	r1, #64	; 0x40
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 f93c 	bl	800542a <TIM_ITRx_SetConfig>
      break;
 80051b2:	e00b      	b.n	80051cc <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4619      	mov	r1, r3
 80051be:	4610      	mov	r0, r2
 80051c0:	f000 f933 	bl	800542a <TIM_ITRx_SetConfig>
        break;
 80051c4:	e002      	b.n	80051cc <HAL_TIM_ConfigClockSource+0x172>
      break;
 80051c6:	bf00      	nop
 80051c8:	e000      	b.n	80051cc <HAL_TIM_ConfigClockSource+0x172>
      break;
 80051ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b083      	sub	sp, #12
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
	...

08005238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a40      	ldr	r2, [pc, #256]	; (800534c <TIM_Base_SetConfig+0x114>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d013      	beq.n	8005278 <TIM_Base_SetConfig+0x40>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005256:	d00f      	beq.n	8005278 <TIM_Base_SetConfig+0x40>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a3d      	ldr	r2, [pc, #244]	; (8005350 <TIM_Base_SetConfig+0x118>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d00b      	beq.n	8005278 <TIM_Base_SetConfig+0x40>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a3c      	ldr	r2, [pc, #240]	; (8005354 <TIM_Base_SetConfig+0x11c>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d007      	beq.n	8005278 <TIM_Base_SetConfig+0x40>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a3b      	ldr	r2, [pc, #236]	; (8005358 <TIM_Base_SetConfig+0x120>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d003      	beq.n	8005278 <TIM_Base_SetConfig+0x40>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a3a      	ldr	r2, [pc, #232]	; (800535c <TIM_Base_SetConfig+0x124>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d108      	bne.n	800528a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800527e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a2f      	ldr	r2, [pc, #188]	; (800534c <TIM_Base_SetConfig+0x114>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d01f      	beq.n	80052d2 <TIM_Base_SetConfig+0x9a>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005298:	d01b      	beq.n	80052d2 <TIM_Base_SetConfig+0x9a>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a2c      	ldr	r2, [pc, #176]	; (8005350 <TIM_Base_SetConfig+0x118>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d017      	beq.n	80052d2 <TIM_Base_SetConfig+0x9a>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a2b      	ldr	r2, [pc, #172]	; (8005354 <TIM_Base_SetConfig+0x11c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d013      	beq.n	80052d2 <TIM_Base_SetConfig+0x9a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a2a      	ldr	r2, [pc, #168]	; (8005358 <TIM_Base_SetConfig+0x120>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d00f      	beq.n	80052d2 <TIM_Base_SetConfig+0x9a>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a29      	ldr	r2, [pc, #164]	; (800535c <TIM_Base_SetConfig+0x124>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d00b      	beq.n	80052d2 <TIM_Base_SetConfig+0x9a>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a28      	ldr	r2, [pc, #160]	; (8005360 <TIM_Base_SetConfig+0x128>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d007      	beq.n	80052d2 <TIM_Base_SetConfig+0x9a>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a27      	ldr	r2, [pc, #156]	; (8005364 <TIM_Base_SetConfig+0x12c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d003      	beq.n	80052d2 <TIM_Base_SetConfig+0x9a>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a26      	ldr	r2, [pc, #152]	; (8005368 <TIM_Base_SetConfig+0x130>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d108      	bne.n	80052e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a10      	ldr	r2, [pc, #64]	; (800534c <TIM_Base_SetConfig+0x114>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d00f      	beq.n	8005330 <TIM_Base_SetConfig+0xf8>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a12      	ldr	r2, [pc, #72]	; (800535c <TIM_Base_SetConfig+0x124>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d00b      	beq.n	8005330 <TIM_Base_SetConfig+0xf8>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a11      	ldr	r2, [pc, #68]	; (8005360 <TIM_Base_SetConfig+0x128>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d007      	beq.n	8005330 <TIM_Base_SetConfig+0xf8>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a10      	ldr	r2, [pc, #64]	; (8005364 <TIM_Base_SetConfig+0x12c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d003      	beq.n	8005330 <TIM_Base_SetConfig+0xf8>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a0f      	ldr	r2, [pc, #60]	; (8005368 <TIM_Base_SetConfig+0x130>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d103      	bne.n	8005338 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	615a      	str	r2, [r3, #20]
}
 800533e:	bf00      	nop
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	40012c00 	.word	0x40012c00
 8005350:	40000400 	.word	0x40000400
 8005354:	40000800 	.word	0x40000800
 8005358:	40000c00 	.word	0x40000c00
 800535c:	40013400 	.word	0x40013400
 8005360:	40014000 	.word	0x40014000
 8005364:	40014400 	.word	0x40014400
 8005368:	40014800 	.word	0x40014800

0800536c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	f023 0201 	bic.w	r2, r3, #1
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f023 030a 	bic.w	r3, r3, #10
 80053a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	621a      	str	r2, [r3, #32]
}
 80053be:	bf00      	nop
 80053c0:	371c      	adds	r7, #28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b087      	sub	sp, #28
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	f023 0210 	bic.w	r2, r3, #16
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	031b      	lsls	r3, r3, #12
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005406:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	011b      	lsls	r3, r3, #4
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	4313      	orrs	r3, r2
 8005410:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	621a      	str	r2, [r3, #32]
}
 800541e:	bf00      	nop
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800542a:	b480      	push	{r7}
 800542c:	b085      	sub	sp, #20
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
 8005432:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005440:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4313      	orrs	r3, r2
 8005448:	f043 0307 	orr.w	r3, r3, #7
 800544c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	609a      	str	r2, [r3, #8]
}
 8005454:	bf00      	nop
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800547a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	021a      	lsls	r2, r3, #8
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	431a      	orrs	r2, r3
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	4313      	orrs	r3, r2
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	609a      	str	r2, [r3, #8]
}
 8005494:	bf00      	nop
 8005496:	371c      	adds	r7, #28
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e068      	b.n	800558a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a2e      	ldr	r2, [pc, #184]	; (8005598 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d004      	beq.n	80054ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a2d      	ldr	r2, [pc, #180]	; (800559c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d108      	bne.n	80054fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005504:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	4313      	orrs	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a1e      	ldr	r2, [pc, #120]	; (8005598 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d01d      	beq.n	800555e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552a:	d018      	beq.n	800555e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a1b      	ldr	r2, [pc, #108]	; (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d013      	beq.n	800555e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a1a      	ldr	r2, [pc, #104]	; (80055a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d00e      	beq.n	800555e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a18      	ldr	r2, [pc, #96]	; (80055a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d009      	beq.n	800555e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a13      	ldr	r2, [pc, #76]	; (800559c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d004      	beq.n	800555e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a14      	ldr	r2, [pc, #80]	; (80055ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d10c      	bne.n	8005578 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005564:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	4313      	orrs	r3, r2
 800556e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	40012c00 	.word	0x40012c00
 800559c:	40013400 	.word	0x40013400
 80055a0:	40000400 	.word	0x40000400
 80055a4:	40000800 	.word	0x40000800
 80055a8:	40000c00 	.word	0x40000c00
 80055ac:	40014000 	.word	0x40014000

080055b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <arm_sin_f32>:
 80055ec:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800566c <arm_sin_f32+0x80>
 80055f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80055f4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80055f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055fc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005600:	d504      	bpl.n	800560c <arm_sin_f32+0x20>
 8005602:	ee17 3a90 	vmov	r3, s15
 8005606:	3b01      	subs	r3, #1
 8005608:	ee07 3a90 	vmov	s15, r3
 800560c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005610:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005670 <arm_sin_f32+0x84>
 8005614:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005618:	ee20 0a07 	vmul.f32	s0, s0, s14
 800561c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8005620:	ee17 3a90 	vmov	r3, s15
 8005624:	b29b      	uxth	r3, r3
 8005626:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800562a:	d21a      	bcs.n	8005662 <arm_sin_f32+0x76>
 800562c:	ee07 3a90 	vmov	s15, r3
 8005630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005634:	1c59      	adds	r1, r3, #1
 8005636:	ee30 0a67 	vsub.f32	s0, s0, s15
 800563a:	4a0e      	ldr	r2, [pc, #56]	; (8005674 <arm_sin_f32+0x88>)
 800563c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005640:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005644:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005648:	ed93 7a00 	vldr	s14, [r3]
 800564c:	edd2 6a00 	vldr	s13, [r2]
 8005650:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005654:	ee20 0a26 	vmul.f32	s0, s0, s13
 8005658:	ee67 7a87 	vmul.f32	s15, s15, s14
 800565c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005660:	4770      	bx	lr
 8005662:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005666:	2101      	movs	r1, #1
 8005668:	2300      	movs	r3, #0
 800566a:	e7e6      	b.n	800563a <arm_sin_f32+0x4e>
 800566c:	3e22f983 	.word	0x3e22f983
 8005670:	44000000 	.word	0x44000000
 8005674:	08006740 	.word	0x08006740

08005678 <__errno>:
 8005678:	4b01      	ldr	r3, [pc, #4]	; (8005680 <__errno+0x8>)
 800567a:	6818      	ldr	r0, [r3, #0]
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	20000014 	.word	0x20000014

08005684 <__libc_init_array>:
 8005684:	b570      	push	{r4, r5, r6, lr}
 8005686:	4d0d      	ldr	r5, [pc, #52]	; (80056bc <__libc_init_array+0x38>)
 8005688:	4c0d      	ldr	r4, [pc, #52]	; (80056c0 <__libc_init_array+0x3c>)
 800568a:	1b64      	subs	r4, r4, r5
 800568c:	10a4      	asrs	r4, r4, #2
 800568e:	2600      	movs	r6, #0
 8005690:	42a6      	cmp	r6, r4
 8005692:	d109      	bne.n	80056a8 <__libc_init_array+0x24>
 8005694:	4d0b      	ldr	r5, [pc, #44]	; (80056c4 <__libc_init_array+0x40>)
 8005696:	4c0c      	ldr	r4, [pc, #48]	; (80056c8 <__libc_init_array+0x44>)
 8005698:	f001 f822 	bl	80066e0 <_init>
 800569c:	1b64      	subs	r4, r4, r5
 800569e:	10a4      	asrs	r4, r4, #2
 80056a0:	2600      	movs	r6, #0
 80056a2:	42a6      	cmp	r6, r4
 80056a4:	d105      	bne.n	80056b2 <__libc_init_array+0x2e>
 80056a6:	bd70      	pop	{r4, r5, r6, pc}
 80056a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056ac:	4798      	blx	r3
 80056ae:	3601      	adds	r6, #1
 80056b0:	e7ee      	b.n	8005690 <__libc_init_array+0xc>
 80056b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b6:	4798      	blx	r3
 80056b8:	3601      	adds	r6, #1
 80056ba:	e7f2      	b.n	80056a2 <__libc_init_array+0x1e>
 80056bc:	08007090 	.word	0x08007090
 80056c0:	08007090 	.word	0x08007090
 80056c4:	08007090 	.word	0x08007090
 80056c8:	08007094 	.word	0x08007094

080056cc <memset>:
 80056cc:	4402      	add	r2, r0
 80056ce:	4603      	mov	r3, r0
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d100      	bne.n	80056d6 <memset+0xa>
 80056d4:	4770      	bx	lr
 80056d6:	f803 1b01 	strb.w	r1, [r3], #1
 80056da:	e7f9      	b.n	80056d0 <memset+0x4>

080056dc <rand>:
 80056dc:	4b17      	ldr	r3, [pc, #92]	; (800573c <rand+0x60>)
 80056de:	b510      	push	{r4, lr}
 80056e0:	681c      	ldr	r4, [r3, #0]
 80056e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80056e4:	b9b3      	cbnz	r3, 8005714 <rand+0x38>
 80056e6:	2018      	movs	r0, #24
 80056e8:	f000 f868 	bl	80057bc <malloc>
 80056ec:	63a0      	str	r0, [r4, #56]	; 0x38
 80056ee:	b928      	cbnz	r0, 80056fc <rand+0x20>
 80056f0:	4602      	mov	r2, r0
 80056f2:	4b13      	ldr	r3, [pc, #76]	; (8005740 <rand+0x64>)
 80056f4:	4813      	ldr	r0, [pc, #76]	; (8005744 <rand+0x68>)
 80056f6:	214e      	movs	r1, #78	; 0x4e
 80056f8:	f000 f830 	bl	800575c <__assert_func>
 80056fc:	4a12      	ldr	r2, [pc, #72]	; (8005748 <rand+0x6c>)
 80056fe:	4b13      	ldr	r3, [pc, #76]	; (800574c <rand+0x70>)
 8005700:	e9c0 2300 	strd	r2, r3, [r0]
 8005704:	4b12      	ldr	r3, [pc, #72]	; (8005750 <rand+0x74>)
 8005706:	6083      	str	r3, [r0, #8]
 8005708:	230b      	movs	r3, #11
 800570a:	8183      	strh	r3, [r0, #12]
 800570c:	2201      	movs	r2, #1
 800570e:	2300      	movs	r3, #0
 8005710:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005714:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005716:	480f      	ldr	r0, [pc, #60]	; (8005754 <rand+0x78>)
 8005718:	690a      	ldr	r2, [r1, #16]
 800571a:	694b      	ldr	r3, [r1, #20]
 800571c:	4c0e      	ldr	r4, [pc, #56]	; (8005758 <rand+0x7c>)
 800571e:	4350      	muls	r0, r2
 8005720:	fb04 0003 	mla	r0, r4, r3, r0
 8005724:	fba2 3404 	umull	r3, r4, r2, r4
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	4404      	add	r4, r0
 800572c:	f144 0000 	adc.w	r0, r4, #0
 8005730:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8005734:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005738:	bd10      	pop	{r4, pc}
 800573a:	bf00      	nop
 800573c:	20000014 	.word	0x20000014
 8005740:	08006f48 	.word	0x08006f48
 8005744:	08006f5f 	.word	0x08006f5f
 8005748:	abcd330e 	.word	0xabcd330e
 800574c:	e66d1234 	.word	0xe66d1234
 8005750:	0005deec 	.word	0x0005deec
 8005754:	5851f42d 	.word	0x5851f42d
 8005758:	4c957f2d 	.word	0x4c957f2d

0800575c <__assert_func>:
 800575c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800575e:	4614      	mov	r4, r2
 8005760:	461a      	mov	r2, r3
 8005762:	4b09      	ldr	r3, [pc, #36]	; (8005788 <__assert_func+0x2c>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4605      	mov	r5, r0
 8005768:	68d8      	ldr	r0, [r3, #12]
 800576a:	b14c      	cbz	r4, 8005780 <__assert_func+0x24>
 800576c:	4b07      	ldr	r3, [pc, #28]	; (800578c <__assert_func+0x30>)
 800576e:	9100      	str	r1, [sp, #0]
 8005770:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005774:	4906      	ldr	r1, [pc, #24]	; (8005790 <__assert_func+0x34>)
 8005776:	462b      	mov	r3, r5
 8005778:	f000 f80e 	bl	8005798 <fiprintf>
 800577c:	f000 fc8e 	bl	800609c <abort>
 8005780:	4b04      	ldr	r3, [pc, #16]	; (8005794 <__assert_func+0x38>)
 8005782:	461c      	mov	r4, r3
 8005784:	e7f3      	b.n	800576e <__assert_func+0x12>
 8005786:	bf00      	nop
 8005788:	20000014 	.word	0x20000014
 800578c:	08006fbe 	.word	0x08006fbe
 8005790:	08006fcb 	.word	0x08006fcb
 8005794:	08006ff9 	.word	0x08006ff9

08005798 <fiprintf>:
 8005798:	b40e      	push	{r1, r2, r3}
 800579a:	b503      	push	{r0, r1, lr}
 800579c:	4601      	mov	r1, r0
 800579e:	ab03      	add	r3, sp, #12
 80057a0:	4805      	ldr	r0, [pc, #20]	; (80057b8 <fiprintf+0x20>)
 80057a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80057a6:	6800      	ldr	r0, [r0, #0]
 80057a8:	9301      	str	r3, [sp, #4]
 80057aa:	f000 f8e3 	bl	8005974 <_vfiprintf_r>
 80057ae:	b002      	add	sp, #8
 80057b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80057b4:	b003      	add	sp, #12
 80057b6:	4770      	bx	lr
 80057b8:	20000014 	.word	0x20000014

080057bc <malloc>:
 80057bc:	4b02      	ldr	r3, [pc, #8]	; (80057c8 <malloc+0xc>)
 80057be:	4601      	mov	r1, r0
 80057c0:	6818      	ldr	r0, [r3, #0]
 80057c2:	f000 b853 	b.w	800586c <_malloc_r>
 80057c6:	bf00      	nop
 80057c8:	20000014 	.word	0x20000014

080057cc <_free_r>:
 80057cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057ce:	2900      	cmp	r1, #0
 80057d0:	d048      	beq.n	8005864 <_free_r+0x98>
 80057d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057d6:	9001      	str	r0, [sp, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f1a1 0404 	sub.w	r4, r1, #4
 80057de:	bfb8      	it	lt
 80057e0:	18e4      	addlt	r4, r4, r3
 80057e2:	f000 fe81 	bl	80064e8 <__malloc_lock>
 80057e6:	4a20      	ldr	r2, [pc, #128]	; (8005868 <_free_r+0x9c>)
 80057e8:	9801      	ldr	r0, [sp, #4]
 80057ea:	6813      	ldr	r3, [r2, #0]
 80057ec:	4615      	mov	r5, r2
 80057ee:	b933      	cbnz	r3, 80057fe <_free_r+0x32>
 80057f0:	6063      	str	r3, [r4, #4]
 80057f2:	6014      	str	r4, [r2, #0]
 80057f4:	b003      	add	sp, #12
 80057f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057fa:	f000 be7b 	b.w	80064f4 <__malloc_unlock>
 80057fe:	42a3      	cmp	r3, r4
 8005800:	d90b      	bls.n	800581a <_free_r+0x4e>
 8005802:	6821      	ldr	r1, [r4, #0]
 8005804:	1862      	adds	r2, r4, r1
 8005806:	4293      	cmp	r3, r2
 8005808:	bf04      	itt	eq
 800580a:	681a      	ldreq	r2, [r3, #0]
 800580c:	685b      	ldreq	r3, [r3, #4]
 800580e:	6063      	str	r3, [r4, #4]
 8005810:	bf04      	itt	eq
 8005812:	1852      	addeq	r2, r2, r1
 8005814:	6022      	streq	r2, [r4, #0]
 8005816:	602c      	str	r4, [r5, #0]
 8005818:	e7ec      	b.n	80057f4 <_free_r+0x28>
 800581a:	461a      	mov	r2, r3
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	b10b      	cbz	r3, 8005824 <_free_r+0x58>
 8005820:	42a3      	cmp	r3, r4
 8005822:	d9fa      	bls.n	800581a <_free_r+0x4e>
 8005824:	6811      	ldr	r1, [r2, #0]
 8005826:	1855      	adds	r5, r2, r1
 8005828:	42a5      	cmp	r5, r4
 800582a:	d10b      	bne.n	8005844 <_free_r+0x78>
 800582c:	6824      	ldr	r4, [r4, #0]
 800582e:	4421      	add	r1, r4
 8005830:	1854      	adds	r4, r2, r1
 8005832:	42a3      	cmp	r3, r4
 8005834:	6011      	str	r1, [r2, #0]
 8005836:	d1dd      	bne.n	80057f4 <_free_r+0x28>
 8005838:	681c      	ldr	r4, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	6053      	str	r3, [r2, #4]
 800583e:	4421      	add	r1, r4
 8005840:	6011      	str	r1, [r2, #0]
 8005842:	e7d7      	b.n	80057f4 <_free_r+0x28>
 8005844:	d902      	bls.n	800584c <_free_r+0x80>
 8005846:	230c      	movs	r3, #12
 8005848:	6003      	str	r3, [r0, #0]
 800584a:	e7d3      	b.n	80057f4 <_free_r+0x28>
 800584c:	6825      	ldr	r5, [r4, #0]
 800584e:	1961      	adds	r1, r4, r5
 8005850:	428b      	cmp	r3, r1
 8005852:	bf04      	itt	eq
 8005854:	6819      	ldreq	r1, [r3, #0]
 8005856:	685b      	ldreq	r3, [r3, #4]
 8005858:	6063      	str	r3, [r4, #4]
 800585a:	bf04      	itt	eq
 800585c:	1949      	addeq	r1, r1, r5
 800585e:	6021      	streq	r1, [r4, #0]
 8005860:	6054      	str	r4, [r2, #4]
 8005862:	e7c7      	b.n	80057f4 <_free_r+0x28>
 8005864:	b003      	add	sp, #12
 8005866:	bd30      	pop	{r4, r5, pc}
 8005868:	2000ace8 	.word	0x2000ace8

0800586c <_malloc_r>:
 800586c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800586e:	1ccd      	adds	r5, r1, #3
 8005870:	f025 0503 	bic.w	r5, r5, #3
 8005874:	3508      	adds	r5, #8
 8005876:	2d0c      	cmp	r5, #12
 8005878:	bf38      	it	cc
 800587a:	250c      	movcc	r5, #12
 800587c:	2d00      	cmp	r5, #0
 800587e:	4606      	mov	r6, r0
 8005880:	db01      	blt.n	8005886 <_malloc_r+0x1a>
 8005882:	42a9      	cmp	r1, r5
 8005884:	d903      	bls.n	800588e <_malloc_r+0x22>
 8005886:	230c      	movs	r3, #12
 8005888:	6033      	str	r3, [r6, #0]
 800588a:	2000      	movs	r0, #0
 800588c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800588e:	f000 fe2b 	bl	80064e8 <__malloc_lock>
 8005892:	4921      	ldr	r1, [pc, #132]	; (8005918 <_malloc_r+0xac>)
 8005894:	680a      	ldr	r2, [r1, #0]
 8005896:	4614      	mov	r4, r2
 8005898:	b99c      	cbnz	r4, 80058c2 <_malloc_r+0x56>
 800589a:	4f20      	ldr	r7, [pc, #128]	; (800591c <_malloc_r+0xb0>)
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	b923      	cbnz	r3, 80058aa <_malloc_r+0x3e>
 80058a0:	4621      	mov	r1, r4
 80058a2:	4630      	mov	r0, r6
 80058a4:	f000 fb2a 	bl	8005efc <_sbrk_r>
 80058a8:	6038      	str	r0, [r7, #0]
 80058aa:	4629      	mov	r1, r5
 80058ac:	4630      	mov	r0, r6
 80058ae:	f000 fb25 	bl	8005efc <_sbrk_r>
 80058b2:	1c43      	adds	r3, r0, #1
 80058b4:	d123      	bne.n	80058fe <_malloc_r+0x92>
 80058b6:	230c      	movs	r3, #12
 80058b8:	6033      	str	r3, [r6, #0]
 80058ba:	4630      	mov	r0, r6
 80058bc:	f000 fe1a 	bl	80064f4 <__malloc_unlock>
 80058c0:	e7e3      	b.n	800588a <_malloc_r+0x1e>
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	1b5b      	subs	r3, r3, r5
 80058c6:	d417      	bmi.n	80058f8 <_malloc_r+0x8c>
 80058c8:	2b0b      	cmp	r3, #11
 80058ca:	d903      	bls.n	80058d4 <_malloc_r+0x68>
 80058cc:	6023      	str	r3, [r4, #0]
 80058ce:	441c      	add	r4, r3
 80058d0:	6025      	str	r5, [r4, #0]
 80058d2:	e004      	b.n	80058de <_malloc_r+0x72>
 80058d4:	6863      	ldr	r3, [r4, #4]
 80058d6:	42a2      	cmp	r2, r4
 80058d8:	bf0c      	ite	eq
 80058da:	600b      	streq	r3, [r1, #0]
 80058dc:	6053      	strne	r3, [r2, #4]
 80058de:	4630      	mov	r0, r6
 80058e0:	f000 fe08 	bl	80064f4 <__malloc_unlock>
 80058e4:	f104 000b 	add.w	r0, r4, #11
 80058e8:	1d23      	adds	r3, r4, #4
 80058ea:	f020 0007 	bic.w	r0, r0, #7
 80058ee:	1ac2      	subs	r2, r0, r3
 80058f0:	d0cc      	beq.n	800588c <_malloc_r+0x20>
 80058f2:	1a1b      	subs	r3, r3, r0
 80058f4:	50a3      	str	r3, [r4, r2]
 80058f6:	e7c9      	b.n	800588c <_malloc_r+0x20>
 80058f8:	4622      	mov	r2, r4
 80058fa:	6864      	ldr	r4, [r4, #4]
 80058fc:	e7cc      	b.n	8005898 <_malloc_r+0x2c>
 80058fe:	1cc4      	adds	r4, r0, #3
 8005900:	f024 0403 	bic.w	r4, r4, #3
 8005904:	42a0      	cmp	r0, r4
 8005906:	d0e3      	beq.n	80058d0 <_malloc_r+0x64>
 8005908:	1a21      	subs	r1, r4, r0
 800590a:	4630      	mov	r0, r6
 800590c:	f000 faf6 	bl	8005efc <_sbrk_r>
 8005910:	3001      	adds	r0, #1
 8005912:	d1dd      	bne.n	80058d0 <_malloc_r+0x64>
 8005914:	e7cf      	b.n	80058b6 <_malloc_r+0x4a>
 8005916:	bf00      	nop
 8005918:	2000ace8 	.word	0x2000ace8
 800591c:	2000acec 	.word	0x2000acec

08005920 <__sfputc_r>:
 8005920:	6893      	ldr	r3, [r2, #8]
 8005922:	3b01      	subs	r3, #1
 8005924:	2b00      	cmp	r3, #0
 8005926:	b410      	push	{r4}
 8005928:	6093      	str	r3, [r2, #8]
 800592a:	da08      	bge.n	800593e <__sfputc_r+0x1e>
 800592c:	6994      	ldr	r4, [r2, #24]
 800592e:	42a3      	cmp	r3, r4
 8005930:	db01      	blt.n	8005936 <__sfputc_r+0x16>
 8005932:	290a      	cmp	r1, #10
 8005934:	d103      	bne.n	800593e <__sfputc_r+0x1e>
 8005936:	f85d 4b04 	ldr.w	r4, [sp], #4
 800593a:	f000 baef 	b.w	8005f1c <__swbuf_r>
 800593e:	6813      	ldr	r3, [r2, #0]
 8005940:	1c58      	adds	r0, r3, #1
 8005942:	6010      	str	r0, [r2, #0]
 8005944:	7019      	strb	r1, [r3, #0]
 8005946:	4608      	mov	r0, r1
 8005948:	f85d 4b04 	ldr.w	r4, [sp], #4
 800594c:	4770      	bx	lr

0800594e <__sfputs_r>:
 800594e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005950:	4606      	mov	r6, r0
 8005952:	460f      	mov	r7, r1
 8005954:	4614      	mov	r4, r2
 8005956:	18d5      	adds	r5, r2, r3
 8005958:	42ac      	cmp	r4, r5
 800595a:	d101      	bne.n	8005960 <__sfputs_r+0x12>
 800595c:	2000      	movs	r0, #0
 800595e:	e007      	b.n	8005970 <__sfputs_r+0x22>
 8005960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005964:	463a      	mov	r2, r7
 8005966:	4630      	mov	r0, r6
 8005968:	f7ff ffda 	bl	8005920 <__sfputc_r>
 800596c:	1c43      	adds	r3, r0, #1
 800596e:	d1f3      	bne.n	8005958 <__sfputs_r+0xa>
 8005970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005974 <_vfiprintf_r>:
 8005974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005978:	460d      	mov	r5, r1
 800597a:	b09d      	sub	sp, #116	; 0x74
 800597c:	4614      	mov	r4, r2
 800597e:	4698      	mov	r8, r3
 8005980:	4606      	mov	r6, r0
 8005982:	b118      	cbz	r0, 800598c <_vfiprintf_r+0x18>
 8005984:	6983      	ldr	r3, [r0, #24]
 8005986:	b90b      	cbnz	r3, 800598c <_vfiprintf_r+0x18>
 8005988:	f000 fcaa 	bl	80062e0 <__sinit>
 800598c:	4b89      	ldr	r3, [pc, #548]	; (8005bb4 <_vfiprintf_r+0x240>)
 800598e:	429d      	cmp	r5, r3
 8005990:	d11b      	bne.n	80059ca <_vfiprintf_r+0x56>
 8005992:	6875      	ldr	r5, [r6, #4]
 8005994:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005996:	07d9      	lsls	r1, r3, #31
 8005998:	d405      	bmi.n	80059a6 <_vfiprintf_r+0x32>
 800599a:	89ab      	ldrh	r3, [r5, #12]
 800599c:	059a      	lsls	r2, r3, #22
 800599e:	d402      	bmi.n	80059a6 <_vfiprintf_r+0x32>
 80059a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059a2:	f000 fd3b 	bl	800641c <__retarget_lock_acquire_recursive>
 80059a6:	89ab      	ldrh	r3, [r5, #12]
 80059a8:	071b      	lsls	r3, r3, #28
 80059aa:	d501      	bpl.n	80059b0 <_vfiprintf_r+0x3c>
 80059ac:	692b      	ldr	r3, [r5, #16]
 80059ae:	b9eb      	cbnz	r3, 80059ec <_vfiprintf_r+0x78>
 80059b0:	4629      	mov	r1, r5
 80059b2:	4630      	mov	r0, r6
 80059b4:	f000 fb04 	bl	8005fc0 <__swsetup_r>
 80059b8:	b1c0      	cbz	r0, 80059ec <_vfiprintf_r+0x78>
 80059ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059bc:	07dc      	lsls	r4, r3, #31
 80059be:	d50e      	bpl.n	80059de <_vfiprintf_r+0x6a>
 80059c0:	f04f 30ff 	mov.w	r0, #4294967295
 80059c4:	b01d      	add	sp, #116	; 0x74
 80059c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ca:	4b7b      	ldr	r3, [pc, #492]	; (8005bb8 <_vfiprintf_r+0x244>)
 80059cc:	429d      	cmp	r5, r3
 80059ce:	d101      	bne.n	80059d4 <_vfiprintf_r+0x60>
 80059d0:	68b5      	ldr	r5, [r6, #8]
 80059d2:	e7df      	b.n	8005994 <_vfiprintf_r+0x20>
 80059d4:	4b79      	ldr	r3, [pc, #484]	; (8005bbc <_vfiprintf_r+0x248>)
 80059d6:	429d      	cmp	r5, r3
 80059d8:	bf08      	it	eq
 80059da:	68f5      	ldreq	r5, [r6, #12]
 80059dc:	e7da      	b.n	8005994 <_vfiprintf_r+0x20>
 80059de:	89ab      	ldrh	r3, [r5, #12]
 80059e0:	0598      	lsls	r0, r3, #22
 80059e2:	d4ed      	bmi.n	80059c0 <_vfiprintf_r+0x4c>
 80059e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059e6:	f000 fd1a 	bl	800641e <__retarget_lock_release_recursive>
 80059ea:	e7e9      	b.n	80059c0 <_vfiprintf_r+0x4c>
 80059ec:	2300      	movs	r3, #0
 80059ee:	9309      	str	r3, [sp, #36]	; 0x24
 80059f0:	2320      	movs	r3, #32
 80059f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80059fa:	2330      	movs	r3, #48	; 0x30
 80059fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005bc0 <_vfiprintf_r+0x24c>
 8005a00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a04:	f04f 0901 	mov.w	r9, #1
 8005a08:	4623      	mov	r3, r4
 8005a0a:	469a      	mov	sl, r3
 8005a0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a10:	b10a      	cbz	r2, 8005a16 <_vfiprintf_r+0xa2>
 8005a12:	2a25      	cmp	r2, #37	; 0x25
 8005a14:	d1f9      	bne.n	8005a0a <_vfiprintf_r+0x96>
 8005a16:	ebba 0b04 	subs.w	fp, sl, r4
 8005a1a:	d00b      	beq.n	8005a34 <_vfiprintf_r+0xc0>
 8005a1c:	465b      	mov	r3, fp
 8005a1e:	4622      	mov	r2, r4
 8005a20:	4629      	mov	r1, r5
 8005a22:	4630      	mov	r0, r6
 8005a24:	f7ff ff93 	bl	800594e <__sfputs_r>
 8005a28:	3001      	adds	r0, #1
 8005a2a:	f000 80aa 	beq.w	8005b82 <_vfiprintf_r+0x20e>
 8005a2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a30:	445a      	add	r2, fp
 8005a32:	9209      	str	r2, [sp, #36]	; 0x24
 8005a34:	f89a 3000 	ldrb.w	r3, [sl]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 80a2 	beq.w	8005b82 <_vfiprintf_r+0x20e>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f04f 32ff 	mov.w	r2, #4294967295
 8005a44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a48:	f10a 0a01 	add.w	sl, sl, #1
 8005a4c:	9304      	str	r3, [sp, #16]
 8005a4e:	9307      	str	r3, [sp, #28]
 8005a50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a54:	931a      	str	r3, [sp, #104]	; 0x68
 8005a56:	4654      	mov	r4, sl
 8005a58:	2205      	movs	r2, #5
 8005a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a5e:	4858      	ldr	r0, [pc, #352]	; (8005bc0 <_vfiprintf_r+0x24c>)
 8005a60:	f7fa fbb6 	bl	80001d0 <memchr>
 8005a64:	9a04      	ldr	r2, [sp, #16]
 8005a66:	b9d8      	cbnz	r0, 8005aa0 <_vfiprintf_r+0x12c>
 8005a68:	06d1      	lsls	r1, r2, #27
 8005a6a:	bf44      	itt	mi
 8005a6c:	2320      	movmi	r3, #32
 8005a6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a72:	0713      	lsls	r3, r2, #28
 8005a74:	bf44      	itt	mi
 8005a76:	232b      	movmi	r3, #43	; 0x2b
 8005a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a80:	2b2a      	cmp	r3, #42	; 0x2a
 8005a82:	d015      	beq.n	8005ab0 <_vfiprintf_r+0x13c>
 8005a84:	9a07      	ldr	r2, [sp, #28]
 8005a86:	4654      	mov	r4, sl
 8005a88:	2000      	movs	r0, #0
 8005a8a:	f04f 0c0a 	mov.w	ip, #10
 8005a8e:	4621      	mov	r1, r4
 8005a90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a94:	3b30      	subs	r3, #48	; 0x30
 8005a96:	2b09      	cmp	r3, #9
 8005a98:	d94e      	bls.n	8005b38 <_vfiprintf_r+0x1c4>
 8005a9a:	b1b0      	cbz	r0, 8005aca <_vfiprintf_r+0x156>
 8005a9c:	9207      	str	r2, [sp, #28]
 8005a9e:	e014      	b.n	8005aca <_vfiprintf_r+0x156>
 8005aa0:	eba0 0308 	sub.w	r3, r0, r8
 8005aa4:	fa09 f303 	lsl.w	r3, r9, r3
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	9304      	str	r3, [sp, #16]
 8005aac:	46a2      	mov	sl, r4
 8005aae:	e7d2      	b.n	8005a56 <_vfiprintf_r+0xe2>
 8005ab0:	9b03      	ldr	r3, [sp, #12]
 8005ab2:	1d19      	adds	r1, r3, #4
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	9103      	str	r1, [sp, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	bfbb      	ittet	lt
 8005abc:	425b      	neglt	r3, r3
 8005abe:	f042 0202 	orrlt.w	r2, r2, #2
 8005ac2:	9307      	strge	r3, [sp, #28]
 8005ac4:	9307      	strlt	r3, [sp, #28]
 8005ac6:	bfb8      	it	lt
 8005ac8:	9204      	strlt	r2, [sp, #16]
 8005aca:	7823      	ldrb	r3, [r4, #0]
 8005acc:	2b2e      	cmp	r3, #46	; 0x2e
 8005ace:	d10c      	bne.n	8005aea <_vfiprintf_r+0x176>
 8005ad0:	7863      	ldrb	r3, [r4, #1]
 8005ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ad4:	d135      	bne.n	8005b42 <_vfiprintf_r+0x1ce>
 8005ad6:	9b03      	ldr	r3, [sp, #12]
 8005ad8:	1d1a      	adds	r2, r3, #4
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	9203      	str	r2, [sp, #12]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	bfb8      	it	lt
 8005ae2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ae6:	3402      	adds	r4, #2
 8005ae8:	9305      	str	r3, [sp, #20]
 8005aea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005bd0 <_vfiprintf_r+0x25c>
 8005aee:	7821      	ldrb	r1, [r4, #0]
 8005af0:	2203      	movs	r2, #3
 8005af2:	4650      	mov	r0, sl
 8005af4:	f7fa fb6c 	bl	80001d0 <memchr>
 8005af8:	b140      	cbz	r0, 8005b0c <_vfiprintf_r+0x198>
 8005afa:	2340      	movs	r3, #64	; 0x40
 8005afc:	eba0 000a 	sub.w	r0, r0, sl
 8005b00:	fa03 f000 	lsl.w	r0, r3, r0
 8005b04:	9b04      	ldr	r3, [sp, #16]
 8005b06:	4303      	orrs	r3, r0
 8005b08:	3401      	adds	r4, #1
 8005b0a:	9304      	str	r3, [sp, #16]
 8005b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b10:	482c      	ldr	r0, [pc, #176]	; (8005bc4 <_vfiprintf_r+0x250>)
 8005b12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b16:	2206      	movs	r2, #6
 8005b18:	f7fa fb5a 	bl	80001d0 <memchr>
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	d03f      	beq.n	8005ba0 <_vfiprintf_r+0x22c>
 8005b20:	4b29      	ldr	r3, [pc, #164]	; (8005bc8 <_vfiprintf_r+0x254>)
 8005b22:	bb1b      	cbnz	r3, 8005b6c <_vfiprintf_r+0x1f8>
 8005b24:	9b03      	ldr	r3, [sp, #12]
 8005b26:	3307      	adds	r3, #7
 8005b28:	f023 0307 	bic.w	r3, r3, #7
 8005b2c:	3308      	adds	r3, #8
 8005b2e:	9303      	str	r3, [sp, #12]
 8005b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b32:	443b      	add	r3, r7
 8005b34:	9309      	str	r3, [sp, #36]	; 0x24
 8005b36:	e767      	b.n	8005a08 <_vfiprintf_r+0x94>
 8005b38:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b3c:	460c      	mov	r4, r1
 8005b3e:	2001      	movs	r0, #1
 8005b40:	e7a5      	b.n	8005a8e <_vfiprintf_r+0x11a>
 8005b42:	2300      	movs	r3, #0
 8005b44:	3401      	adds	r4, #1
 8005b46:	9305      	str	r3, [sp, #20]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	f04f 0c0a 	mov.w	ip, #10
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b54:	3a30      	subs	r2, #48	; 0x30
 8005b56:	2a09      	cmp	r2, #9
 8005b58:	d903      	bls.n	8005b62 <_vfiprintf_r+0x1ee>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0c5      	beq.n	8005aea <_vfiprintf_r+0x176>
 8005b5e:	9105      	str	r1, [sp, #20]
 8005b60:	e7c3      	b.n	8005aea <_vfiprintf_r+0x176>
 8005b62:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b66:	4604      	mov	r4, r0
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e7f0      	b.n	8005b4e <_vfiprintf_r+0x1da>
 8005b6c:	ab03      	add	r3, sp, #12
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	462a      	mov	r2, r5
 8005b72:	4b16      	ldr	r3, [pc, #88]	; (8005bcc <_vfiprintf_r+0x258>)
 8005b74:	a904      	add	r1, sp, #16
 8005b76:	4630      	mov	r0, r6
 8005b78:	f3af 8000 	nop.w
 8005b7c:	4607      	mov	r7, r0
 8005b7e:	1c78      	adds	r0, r7, #1
 8005b80:	d1d6      	bne.n	8005b30 <_vfiprintf_r+0x1bc>
 8005b82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b84:	07d9      	lsls	r1, r3, #31
 8005b86:	d405      	bmi.n	8005b94 <_vfiprintf_r+0x220>
 8005b88:	89ab      	ldrh	r3, [r5, #12]
 8005b8a:	059a      	lsls	r2, r3, #22
 8005b8c:	d402      	bmi.n	8005b94 <_vfiprintf_r+0x220>
 8005b8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b90:	f000 fc45 	bl	800641e <__retarget_lock_release_recursive>
 8005b94:	89ab      	ldrh	r3, [r5, #12]
 8005b96:	065b      	lsls	r3, r3, #25
 8005b98:	f53f af12 	bmi.w	80059c0 <_vfiprintf_r+0x4c>
 8005b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b9e:	e711      	b.n	80059c4 <_vfiprintf_r+0x50>
 8005ba0:	ab03      	add	r3, sp, #12
 8005ba2:	9300      	str	r3, [sp, #0]
 8005ba4:	462a      	mov	r2, r5
 8005ba6:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <_vfiprintf_r+0x258>)
 8005ba8:	a904      	add	r1, sp, #16
 8005baa:	4630      	mov	r0, r6
 8005bac:	f000 f880 	bl	8005cb0 <_printf_i>
 8005bb0:	e7e4      	b.n	8005b7c <_vfiprintf_r+0x208>
 8005bb2:	bf00      	nop
 8005bb4:	08007050 	.word	0x08007050
 8005bb8:	08007070 	.word	0x08007070
 8005bbc:	08007030 	.word	0x08007030
 8005bc0:	08006ffa 	.word	0x08006ffa
 8005bc4:	08007004 	.word	0x08007004
 8005bc8:	00000000 	.word	0x00000000
 8005bcc:	0800594f 	.word	0x0800594f
 8005bd0:	08007000 	.word	0x08007000

08005bd4 <_printf_common>:
 8005bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd8:	4616      	mov	r6, r2
 8005bda:	4699      	mov	r9, r3
 8005bdc:	688a      	ldr	r2, [r1, #8]
 8005bde:	690b      	ldr	r3, [r1, #16]
 8005be0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005be4:	4293      	cmp	r3, r2
 8005be6:	bfb8      	it	lt
 8005be8:	4613      	movlt	r3, r2
 8005bea:	6033      	str	r3, [r6, #0]
 8005bec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bf0:	4607      	mov	r7, r0
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	b10a      	cbz	r2, 8005bfa <_printf_common+0x26>
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	6033      	str	r3, [r6, #0]
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	0699      	lsls	r1, r3, #26
 8005bfe:	bf42      	ittt	mi
 8005c00:	6833      	ldrmi	r3, [r6, #0]
 8005c02:	3302      	addmi	r3, #2
 8005c04:	6033      	strmi	r3, [r6, #0]
 8005c06:	6825      	ldr	r5, [r4, #0]
 8005c08:	f015 0506 	ands.w	r5, r5, #6
 8005c0c:	d106      	bne.n	8005c1c <_printf_common+0x48>
 8005c0e:	f104 0a19 	add.w	sl, r4, #25
 8005c12:	68e3      	ldr	r3, [r4, #12]
 8005c14:	6832      	ldr	r2, [r6, #0]
 8005c16:	1a9b      	subs	r3, r3, r2
 8005c18:	42ab      	cmp	r3, r5
 8005c1a:	dc26      	bgt.n	8005c6a <_printf_common+0x96>
 8005c1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c20:	1e13      	subs	r3, r2, #0
 8005c22:	6822      	ldr	r2, [r4, #0]
 8005c24:	bf18      	it	ne
 8005c26:	2301      	movne	r3, #1
 8005c28:	0692      	lsls	r2, r2, #26
 8005c2a:	d42b      	bmi.n	8005c84 <_printf_common+0xb0>
 8005c2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c30:	4649      	mov	r1, r9
 8005c32:	4638      	mov	r0, r7
 8005c34:	47c0      	blx	r8
 8005c36:	3001      	adds	r0, #1
 8005c38:	d01e      	beq.n	8005c78 <_printf_common+0xa4>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	68e5      	ldr	r5, [r4, #12]
 8005c3e:	6832      	ldr	r2, [r6, #0]
 8005c40:	f003 0306 	and.w	r3, r3, #6
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	bf08      	it	eq
 8005c48:	1aad      	subeq	r5, r5, r2
 8005c4a:	68a3      	ldr	r3, [r4, #8]
 8005c4c:	6922      	ldr	r2, [r4, #16]
 8005c4e:	bf0c      	ite	eq
 8005c50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c54:	2500      	movne	r5, #0
 8005c56:	4293      	cmp	r3, r2
 8005c58:	bfc4      	itt	gt
 8005c5a:	1a9b      	subgt	r3, r3, r2
 8005c5c:	18ed      	addgt	r5, r5, r3
 8005c5e:	2600      	movs	r6, #0
 8005c60:	341a      	adds	r4, #26
 8005c62:	42b5      	cmp	r5, r6
 8005c64:	d11a      	bne.n	8005c9c <_printf_common+0xc8>
 8005c66:	2000      	movs	r0, #0
 8005c68:	e008      	b.n	8005c7c <_printf_common+0xa8>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	4652      	mov	r2, sl
 8005c6e:	4649      	mov	r1, r9
 8005c70:	4638      	mov	r0, r7
 8005c72:	47c0      	blx	r8
 8005c74:	3001      	adds	r0, #1
 8005c76:	d103      	bne.n	8005c80 <_printf_common+0xac>
 8005c78:	f04f 30ff 	mov.w	r0, #4294967295
 8005c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c80:	3501      	adds	r5, #1
 8005c82:	e7c6      	b.n	8005c12 <_printf_common+0x3e>
 8005c84:	18e1      	adds	r1, r4, r3
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	2030      	movs	r0, #48	; 0x30
 8005c8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c8e:	4422      	add	r2, r4
 8005c90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c98:	3302      	adds	r3, #2
 8005c9a:	e7c7      	b.n	8005c2c <_printf_common+0x58>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	4622      	mov	r2, r4
 8005ca0:	4649      	mov	r1, r9
 8005ca2:	4638      	mov	r0, r7
 8005ca4:	47c0      	blx	r8
 8005ca6:	3001      	adds	r0, #1
 8005ca8:	d0e6      	beq.n	8005c78 <_printf_common+0xa4>
 8005caa:	3601      	adds	r6, #1
 8005cac:	e7d9      	b.n	8005c62 <_printf_common+0x8e>
	...

08005cb0 <_printf_i>:
 8005cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb4:	460c      	mov	r4, r1
 8005cb6:	4691      	mov	r9, r2
 8005cb8:	7e27      	ldrb	r7, [r4, #24]
 8005cba:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005cbc:	2f78      	cmp	r7, #120	; 0x78
 8005cbe:	4680      	mov	r8, r0
 8005cc0:	469a      	mov	sl, r3
 8005cc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cc6:	d807      	bhi.n	8005cd8 <_printf_i+0x28>
 8005cc8:	2f62      	cmp	r7, #98	; 0x62
 8005cca:	d80a      	bhi.n	8005ce2 <_printf_i+0x32>
 8005ccc:	2f00      	cmp	r7, #0
 8005cce:	f000 80d8 	beq.w	8005e82 <_printf_i+0x1d2>
 8005cd2:	2f58      	cmp	r7, #88	; 0x58
 8005cd4:	f000 80a3 	beq.w	8005e1e <_printf_i+0x16e>
 8005cd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005cdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ce0:	e03a      	b.n	8005d58 <_printf_i+0xa8>
 8005ce2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ce6:	2b15      	cmp	r3, #21
 8005ce8:	d8f6      	bhi.n	8005cd8 <_printf_i+0x28>
 8005cea:	a001      	add	r0, pc, #4	; (adr r0, 8005cf0 <_printf_i+0x40>)
 8005cec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005cf0:	08005d49 	.word	0x08005d49
 8005cf4:	08005d5d 	.word	0x08005d5d
 8005cf8:	08005cd9 	.word	0x08005cd9
 8005cfc:	08005cd9 	.word	0x08005cd9
 8005d00:	08005cd9 	.word	0x08005cd9
 8005d04:	08005cd9 	.word	0x08005cd9
 8005d08:	08005d5d 	.word	0x08005d5d
 8005d0c:	08005cd9 	.word	0x08005cd9
 8005d10:	08005cd9 	.word	0x08005cd9
 8005d14:	08005cd9 	.word	0x08005cd9
 8005d18:	08005cd9 	.word	0x08005cd9
 8005d1c:	08005e69 	.word	0x08005e69
 8005d20:	08005d8d 	.word	0x08005d8d
 8005d24:	08005e4b 	.word	0x08005e4b
 8005d28:	08005cd9 	.word	0x08005cd9
 8005d2c:	08005cd9 	.word	0x08005cd9
 8005d30:	08005e8b 	.word	0x08005e8b
 8005d34:	08005cd9 	.word	0x08005cd9
 8005d38:	08005d8d 	.word	0x08005d8d
 8005d3c:	08005cd9 	.word	0x08005cd9
 8005d40:	08005cd9 	.word	0x08005cd9
 8005d44:	08005e53 	.word	0x08005e53
 8005d48:	680b      	ldr	r3, [r1, #0]
 8005d4a:	1d1a      	adds	r2, r3, #4
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	600a      	str	r2, [r1, #0]
 8005d50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e0a3      	b.n	8005ea4 <_printf_i+0x1f4>
 8005d5c:	6825      	ldr	r5, [r4, #0]
 8005d5e:	6808      	ldr	r0, [r1, #0]
 8005d60:	062e      	lsls	r6, r5, #24
 8005d62:	f100 0304 	add.w	r3, r0, #4
 8005d66:	d50a      	bpl.n	8005d7e <_printf_i+0xce>
 8005d68:	6805      	ldr	r5, [r0, #0]
 8005d6a:	600b      	str	r3, [r1, #0]
 8005d6c:	2d00      	cmp	r5, #0
 8005d6e:	da03      	bge.n	8005d78 <_printf_i+0xc8>
 8005d70:	232d      	movs	r3, #45	; 0x2d
 8005d72:	426d      	negs	r5, r5
 8005d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d78:	485e      	ldr	r0, [pc, #376]	; (8005ef4 <_printf_i+0x244>)
 8005d7a:	230a      	movs	r3, #10
 8005d7c:	e019      	b.n	8005db2 <_printf_i+0x102>
 8005d7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005d82:	6805      	ldr	r5, [r0, #0]
 8005d84:	600b      	str	r3, [r1, #0]
 8005d86:	bf18      	it	ne
 8005d88:	b22d      	sxthne	r5, r5
 8005d8a:	e7ef      	b.n	8005d6c <_printf_i+0xbc>
 8005d8c:	680b      	ldr	r3, [r1, #0]
 8005d8e:	6825      	ldr	r5, [r4, #0]
 8005d90:	1d18      	adds	r0, r3, #4
 8005d92:	6008      	str	r0, [r1, #0]
 8005d94:	0628      	lsls	r0, r5, #24
 8005d96:	d501      	bpl.n	8005d9c <_printf_i+0xec>
 8005d98:	681d      	ldr	r5, [r3, #0]
 8005d9a:	e002      	b.n	8005da2 <_printf_i+0xf2>
 8005d9c:	0669      	lsls	r1, r5, #25
 8005d9e:	d5fb      	bpl.n	8005d98 <_printf_i+0xe8>
 8005da0:	881d      	ldrh	r5, [r3, #0]
 8005da2:	4854      	ldr	r0, [pc, #336]	; (8005ef4 <_printf_i+0x244>)
 8005da4:	2f6f      	cmp	r7, #111	; 0x6f
 8005da6:	bf0c      	ite	eq
 8005da8:	2308      	moveq	r3, #8
 8005daa:	230a      	movne	r3, #10
 8005dac:	2100      	movs	r1, #0
 8005dae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005db2:	6866      	ldr	r6, [r4, #4]
 8005db4:	60a6      	str	r6, [r4, #8]
 8005db6:	2e00      	cmp	r6, #0
 8005db8:	bfa2      	ittt	ge
 8005dba:	6821      	ldrge	r1, [r4, #0]
 8005dbc:	f021 0104 	bicge.w	r1, r1, #4
 8005dc0:	6021      	strge	r1, [r4, #0]
 8005dc2:	b90d      	cbnz	r5, 8005dc8 <_printf_i+0x118>
 8005dc4:	2e00      	cmp	r6, #0
 8005dc6:	d04d      	beq.n	8005e64 <_printf_i+0x1b4>
 8005dc8:	4616      	mov	r6, r2
 8005dca:	fbb5 f1f3 	udiv	r1, r5, r3
 8005dce:	fb03 5711 	mls	r7, r3, r1, r5
 8005dd2:	5dc7      	ldrb	r7, [r0, r7]
 8005dd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005dd8:	462f      	mov	r7, r5
 8005dda:	42bb      	cmp	r3, r7
 8005ddc:	460d      	mov	r5, r1
 8005dde:	d9f4      	bls.n	8005dca <_printf_i+0x11a>
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	d10b      	bne.n	8005dfc <_printf_i+0x14c>
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	07df      	lsls	r7, r3, #31
 8005de8:	d508      	bpl.n	8005dfc <_printf_i+0x14c>
 8005dea:	6923      	ldr	r3, [r4, #16]
 8005dec:	6861      	ldr	r1, [r4, #4]
 8005dee:	4299      	cmp	r1, r3
 8005df0:	bfde      	ittt	le
 8005df2:	2330      	movle	r3, #48	; 0x30
 8005df4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005df8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005dfc:	1b92      	subs	r2, r2, r6
 8005dfe:	6122      	str	r2, [r4, #16]
 8005e00:	f8cd a000 	str.w	sl, [sp]
 8005e04:	464b      	mov	r3, r9
 8005e06:	aa03      	add	r2, sp, #12
 8005e08:	4621      	mov	r1, r4
 8005e0a:	4640      	mov	r0, r8
 8005e0c:	f7ff fee2 	bl	8005bd4 <_printf_common>
 8005e10:	3001      	adds	r0, #1
 8005e12:	d14c      	bne.n	8005eae <_printf_i+0x1fe>
 8005e14:	f04f 30ff 	mov.w	r0, #4294967295
 8005e18:	b004      	add	sp, #16
 8005e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e1e:	4835      	ldr	r0, [pc, #212]	; (8005ef4 <_printf_i+0x244>)
 8005e20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	680e      	ldr	r6, [r1, #0]
 8005e28:	061f      	lsls	r7, r3, #24
 8005e2a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005e2e:	600e      	str	r6, [r1, #0]
 8005e30:	d514      	bpl.n	8005e5c <_printf_i+0x1ac>
 8005e32:	07d9      	lsls	r1, r3, #31
 8005e34:	bf44      	itt	mi
 8005e36:	f043 0320 	orrmi.w	r3, r3, #32
 8005e3a:	6023      	strmi	r3, [r4, #0]
 8005e3c:	b91d      	cbnz	r5, 8005e46 <_printf_i+0x196>
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	f023 0320 	bic.w	r3, r3, #32
 8005e44:	6023      	str	r3, [r4, #0]
 8005e46:	2310      	movs	r3, #16
 8005e48:	e7b0      	b.n	8005dac <_printf_i+0xfc>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	f043 0320 	orr.w	r3, r3, #32
 8005e50:	6023      	str	r3, [r4, #0]
 8005e52:	2378      	movs	r3, #120	; 0x78
 8005e54:	4828      	ldr	r0, [pc, #160]	; (8005ef8 <_printf_i+0x248>)
 8005e56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e5a:	e7e3      	b.n	8005e24 <_printf_i+0x174>
 8005e5c:	065e      	lsls	r6, r3, #25
 8005e5e:	bf48      	it	mi
 8005e60:	b2ad      	uxthmi	r5, r5
 8005e62:	e7e6      	b.n	8005e32 <_printf_i+0x182>
 8005e64:	4616      	mov	r6, r2
 8005e66:	e7bb      	b.n	8005de0 <_printf_i+0x130>
 8005e68:	680b      	ldr	r3, [r1, #0]
 8005e6a:	6826      	ldr	r6, [r4, #0]
 8005e6c:	6960      	ldr	r0, [r4, #20]
 8005e6e:	1d1d      	adds	r5, r3, #4
 8005e70:	600d      	str	r5, [r1, #0]
 8005e72:	0635      	lsls	r5, r6, #24
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	d501      	bpl.n	8005e7c <_printf_i+0x1cc>
 8005e78:	6018      	str	r0, [r3, #0]
 8005e7a:	e002      	b.n	8005e82 <_printf_i+0x1d2>
 8005e7c:	0671      	lsls	r1, r6, #25
 8005e7e:	d5fb      	bpl.n	8005e78 <_printf_i+0x1c8>
 8005e80:	8018      	strh	r0, [r3, #0]
 8005e82:	2300      	movs	r3, #0
 8005e84:	6123      	str	r3, [r4, #16]
 8005e86:	4616      	mov	r6, r2
 8005e88:	e7ba      	b.n	8005e00 <_printf_i+0x150>
 8005e8a:	680b      	ldr	r3, [r1, #0]
 8005e8c:	1d1a      	adds	r2, r3, #4
 8005e8e:	600a      	str	r2, [r1, #0]
 8005e90:	681e      	ldr	r6, [r3, #0]
 8005e92:	6862      	ldr	r2, [r4, #4]
 8005e94:	2100      	movs	r1, #0
 8005e96:	4630      	mov	r0, r6
 8005e98:	f7fa f99a 	bl	80001d0 <memchr>
 8005e9c:	b108      	cbz	r0, 8005ea2 <_printf_i+0x1f2>
 8005e9e:	1b80      	subs	r0, r0, r6
 8005ea0:	6060      	str	r0, [r4, #4]
 8005ea2:	6863      	ldr	r3, [r4, #4]
 8005ea4:	6123      	str	r3, [r4, #16]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eac:	e7a8      	b.n	8005e00 <_printf_i+0x150>
 8005eae:	6923      	ldr	r3, [r4, #16]
 8005eb0:	4632      	mov	r2, r6
 8005eb2:	4649      	mov	r1, r9
 8005eb4:	4640      	mov	r0, r8
 8005eb6:	47d0      	blx	sl
 8005eb8:	3001      	adds	r0, #1
 8005eba:	d0ab      	beq.n	8005e14 <_printf_i+0x164>
 8005ebc:	6823      	ldr	r3, [r4, #0]
 8005ebe:	079b      	lsls	r3, r3, #30
 8005ec0:	d413      	bmi.n	8005eea <_printf_i+0x23a>
 8005ec2:	68e0      	ldr	r0, [r4, #12]
 8005ec4:	9b03      	ldr	r3, [sp, #12]
 8005ec6:	4298      	cmp	r0, r3
 8005ec8:	bfb8      	it	lt
 8005eca:	4618      	movlt	r0, r3
 8005ecc:	e7a4      	b.n	8005e18 <_printf_i+0x168>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	4632      	mov	r2, r6
 8005ed2:	4649      	mov	r1, r9
 8005ed4:	4640      	mov	r0, r8
 8005ed6:	47d0      	blx	sl
 8005ed8:	3001      	adds	r0, #1
 8005eda:	d09b      	beq.n	8005e14 <_printf_i+0x164>
 8005edc:	3501      	adds	r5, #1
 8005ede:	68e3      	ldr	r3, [r4, #12]
 8005ee0:	9903      	ldr	r1, [sp, #12]
 8005ee2:	1a5b      	subs	r3, r3, r1
 8005ee4:	42ab      	cmp	r3, r5
 8005ee6:	dcf2      	bgt.n	8005ece <_printf_i+0x21e>
 8005ee8:	e7eb      	b.n	8005ec2 <_printf_i+0x212>
 8005eea:	2500      	movs	r5, #0
 8005eec:	f104 0619 	add.w	r6, r4, #25
 8005ef0:	e7f5      	b.n	8005ede <_printf_i+0x22e>
 8005ef2:	bf00      	nop
 8005ef4:	0800700b 	.word	0x0800700b
 8005ef8:	0800701c 	.word	0x0800701c

08005efc <_sbrk_r>:
 8005efc:	b538      	push	{r3, r4, r5, lr}
 8005efe:	4d06      	ldr	r5, [pc, #24]	; (8005f18 <_sbrk_r+0x1c>)
 8005f00:	2300      	movs	r3, #0
 8005f02:	4604      	mov	r4, r0
 8005f04:	4608      	mov	r0, r1
 8005f06:	602b      	str	r3, [r5, #0]
 8005f08:	f7fc f9e0 	bl	80022cc <_sbrk>
 8005f0c:	1c43      	adds	r3, r0, #1
 8005f0e:	d102      	bne.n	8005f16 <_sbrk_r+0x1a>
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	b103      	cbz	r3, 8005f16 <_sbrk_r+0x1a>
 8005f14:	6023      	str	r3, [r4, #0]
 8005f16:	bd38      	pop	{r3, r4, r5, pc}
 8005f18:	2000af4c 	.word	0x2000af4c

08005f1c <__swbuf_r>:
 8005f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1e:	460e      	mov	r6, r1
 8005f20:	4614      	mov	r4, r2
 8005f22:	4605      	mov	r5, r0
 8005f24:	b118      	cbz	r0, 8005f2e <__swbuf_r+0x12>
 8005f26:	6983      	ldr	r3, [r0, #24]
 8005f28:	b90b      	cbnz	r3, 8005f2e <__swbuf_r+0x12>
 8005f2a:	f000 f9d9 	bl	80062e0 <__sinit>
 8005f2e:	4b21      	ldr	r3, [pc, #132]	; (8005fb4 <__swbuf_r+0x98>)
 8005f30:	429c      	cmp	r4, r3
 8005f32:	d12b      	bne.n	8005f8c <__swbuf_r+0x70>
 8005f34:	686c      	ldr	r4, [r5, #4]
 8005f36:	69a3      	ldr	r3, [r4, #24]
 8005f38:	60a3      	str	r3, [r4, #8]
 8005f3a:	89a3      	ldrh	r3, [r4, #12]
 8005f3c:	071a      	lsls	r2, r3, #28
 8005f3e:	d52f      	bpl.n	8005fa0 <__swbuf_r+0x84>
 8005f40:	6923      	ldr	r3, [r4, #16]
 8005f42:	b36b      	cbz	r3, 8005fa0 <__swbuf_r+0x84>
 8005f44:	6923      	ldr	r3, [r4, #16]
 8005f46:	6820      	ldr	r0, [r4, #0]
 8005f48:	1ac0      	subs	r0, r0, r3
 8005f4a:	6963      	ldr	r3, [r4, #20]
 8005f4c:	b2f6      	uxtb	r6, r6
 8005f4e:	4283      	cmp	r3, r0
 8005f50:	4637      	mov	r7, r6
 8005f52:	dc04      	bgt.n	8005f5e <__swbuf_r+0x42>
 8005f54:	4621      	mov	r1, r4
 8005f56:	4628      	mov	r0, r5
 8005f58:	f000 f92e 	bl	80061b8 <_fflush_r>
 8005f5c:	bb30      	cbnz	r0, 8005fac <__swbuf_r+0x90>
 8005f5e:	68a3      	ldr	r3, [r4, #8]
 8005f60:	3b01      	subs	r3, #1
 8005f62:	60a3      	str	r3, [r4, #8]
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	6022      	str	r2, [r4, #0]
 8005f6a:	701e      	strb	r6, [r3, #0]
 8005f6c:	6963      	ldr	r3, [r4, #20]
 8005f6e:	3001      	adds	r0, #1
 8005f70:	4283      	cmp	r3, r0
 8005f72:	d004      	beq.n	8005f7e <__swbuf_r+0x62>
 8005f74:	89a3      	ldrh	r3, [r4, #12]
 8005f76:	07db      	lsls	r3, r3, #31
 8005f78:	d506      	bpl.n	8005f88 <__swbuf_r+0x6c>
 8005f7a:	2e0a      	cmp	r6, #10
 8005f7c:	d104      	bne.n	8005f88 <__swbuf_r+0x6c>
 8005f7e:	4621      	mov	r1, r4
 8005f80:	4628      	mov	r0, r5
 8005f82:	f000 f919 	bl	80061b8 <_fflush_r>
 8005f86:	b988      	cbnz	r0, 8005fac <__swbuf_r+0x90>
 8005f88:	4638      	mov	r0, r7
 8005f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f8c:	4b0a      	ldr	r3, [pc, #40]	; (8005fb8 <__swbuf_r+0x9c>)
 8005f8e:	429c      	cmp	r4, r3
 8005f90:	d101      	bne.n	8005f96 <__swbuf_r+0x7a>
 8005f92:	68ac      	ldr	r4, [r5, #8]
 8005f94:	e7cf      	b.n	8005f36 <__swbuf_r+0x1a>
 8005f96:	4b09      	ldr	r3, [pc, #36]	; (8005fbc <__swbuf_r+0xa0>)
 8005f98:	429c      	cmp	r4, r3
 8005f9a:	bf08      	it	eq
 8005f9c:	68ec      	ldreq	r4, [r5, #12]
 8005f9e:	e7ca      	b.n	8005f36 <__swbuf_r+0x1a>
 8005fa0:	4621      	mov	r1, r4
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	f000 f80c 	bl	8005fc0 <__swsetup_r>
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	d0cb      	beq.n	8005f44 <__swbuf_r+0x28>
 8005fac:	f04f 37ff 	mov.w	r7, #4294967295
 8005fb0:	e7ea      	b.n	8005f88 <__swbuf_r+0x6c>
 8005fb2:	bf00      	nop
 8005fb4:	08007050 	.word	0x08007050
 8005fb8:	08007070 	.word	0x08007070
 8005fbc:	08007030 	.word	0x08007030

08005fc0 <__swsetup_r>:
 8005fc0:	4b32      	ldr	r3, [pc, #200]	; (800608c <__swsetup_r+0xcc>)
 8005fc2:	b570      	push	{r4, r5, r6, lr}
 8005fc4:	681d      	ldr	r5, [r3, #0]
 8005fc6:	4606      	mov	r6, r0
 8005fc8:	460c      	mov	r4, r1
 8005fca:	b125      	cbz	r5, 8005fd6 <__swsetup_r+0x16>
 8005fcc:	69ab      	ldr	r3, [r5, #24]
 8005fce:	b913      	cbnz	r3, 8005fd6 <__swsetup_r+0x16>
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	f000 f985 	bl	80062e0 <__sinit>
 8005fd6:	4b2e      	ldr	r3, [pc, #184]	; (8006090 <__swsetup_r+0xd0>)
 8005fd8:	429c      	cmp	r4, r3
 8005fda:	d10f      	bne.n	8005ffc <__swsetup_r+0x3c>
 8005fdc:	686c      	ldr	r4, [r5, #4]
 8005fde:	89a3      	ldrh	r3, [r4, #12]
 8005fe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fe4:	0719      	lsls	r1, r3, #28
 8005fe6:	d42c      	bmi.n	8006042 <__swsetup_r+0x82>
 8005fe8:	06dd      	lsls	r5, r3, #27
 8005fea:	d411      	bmi.n	8006010 <__swsetup_r+0x50>
 8005fec:	2309      	movs	r3, #9
 8005fee:	6033      	str	r3, [r6, #0]
 8005ff0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ff4:	81a3      	strh	r3, [r4, #12]
 8005ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8005ffa:	e03e      	b.n	800607a <__swsetup_r+0xba>
 8005ffc:	4b25      	ldr	r3, [pc, #148]	; (8006094 <__swsetup_r+0xd4>)
 8005ffe:	429c      	cmp	r4, r3
 8006000:	d101      	bne.n	8006006 <__swsetup_r+0x46>
 8006002:	68ac      	ldr	r4, [r5, #8]
 8006004:	e7eb      	b.n	8005fde <__swsetup_r+0x1e>
 8006006:	4b24      	ldr	r3, [pc, #144]	; (8006098 <__swsetup_r+0xd8>)
 8006008:	429c      	cmp	r4, r3
 800600a:	bf08      	it	eq
 800600c:	68ec      	ldreq	r4, [r5, #12]
 800600e:	e7e6      	b.n	8005fde <__swsetup_r+0x1e>
 8006010:	0758      	lsls	r0, r3, #29
 8006012:	d512      	bpl.n	800603a <__swsetup_r+0x7a>
 8006014:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006016:	b141      	cbz	r1, 800602a <__swsetup_r+0x6a>
 8006018:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800601c:	4299      	cmp	r1, r3
 800601e:	d002      	beq.n	8006026 <__swsetup_r+0x66>
 8006020:	4630      	mov	r0, r6
 8006022:	f7ff fbd3 	bl	80057cc <_free_r>
 8006026:	2300      	movs	r3, #0
 8006028:	6363      	str	r3, [r4, #52]	; 0x34
 800602a:	89a3      	ldrh	r3, [r4, #12]
 800602c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006030:	81a3      	strh	r3, [r4, #12]
 8006032:	2300      	movs	r3, #0
 8006034:	6063      	str	r3, [r4, #4]
 8006036:	6923      	ldr	r3, [r4, #16]
 8006038:	6023      	str	r3, [r4, #0]
 800603a:	89a3      	ldrh	r3, [r4, #12]
 800603c:	f043 0308 	orr.w	r3, r3, #8
 8006040:	81a3      	strh	r3, [r4, #12]
 8006042:	6923      	ldr	r3, [r4, #16]
 8006044:	b94b      	cbnz	r3, 800605a <__swsetup_r+0x9a>
 8006046:	89a3      	ldrh	r3, [r4, #12]
 8006048:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800604c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006050:	d003      	beq.n	800605a <__swsetup_r+0x9a>
 8006052:	4621      	mov	r1, r4
 8006054:	4630      	mov	r0, r6
 8006056:	f000 fa07 	bl	8006468 <__smakebuf_r>
 800605a:	89a0      	ldrh	r0, [r4, #12]
 800605c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006060:	f010 0301 	ands.w	r3, r0, #1
 8006064:	d00a      	beq.n	800607c <__swsetup_r+0xbc>
 8006066:	2300      	movs	r3, #0
 8006068:	60a3      	str	r3, [r4, #8]
 800606a:	6963      	ldr	r3, [r4, #20]
 800606c:	425b      	negs	r3, r3
 800606e:	61a3      	str	r3, [r4, #24]
 8006070:	6923      	ldr	r3, [r4, #16]
 8006072:	b943      	cbnz	r3, 8006086 <__swsetup_r+0xc6>
 8006074:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006078:	d1ba      	bne.n	8005ff0 <__swsetup_r+0x30>
 800607a:	bd70      	pop	{r4, r5, r6, pc}
 800607c:	0781      	lsls	r1, r0, #30
 800607e:	bf58      	it	pl
 8006080:	6963      	ldrpl	r3, [r4, #20]
 8006082:	60a3      	str	r3, [r4, #8]
 8006084:	e7f4      	b.n	8006070 <__swsetup_r+0xb0>
 8006086:	2000      	movs	r0, #0
 8006088:	e7f7      	b.n	800607a <__swsetup_r+0xba>
 800608a:	bf00      	nop
 800608c:	20000014 	.word	0x20000014
 8006090:	08007050 	.word	0x08007050
 8006094:	08007070 	.word	0x08007070
 8006098:	08007030 	.word	0x08007030

0800609c <abort>:
 800609c:	b508      	push	{r3, lr}
 800609e:	2006      	movs	r0, #6
 80060a0:	f000 fa56 	bl	8006550 <raise>
 80060a4:	2001      	movs	r0, #1
 80060a6:	f7fc f899 	bl	80021dc <_exit>
	...

080060ac <__sflush_r>:
 80060ac:	898a      	ldrh	r2, [r1, #12]
 80060ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060b2:	4605      	mov	r5, r0
 80060b4:	0710      	lsls	r0, r2, #28
 80060b6:	460c      	mov	r4, r1
 80060b8:	d458      	bmi.n	800616c <__sflush_r+0xc0>
 80060ba:	684b      	ldr	r3, [r1, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	dc05      	bgt.n	80060cc <__sflush_r+0x20>
 80060c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	dc02      	bgt.n	80060cc <__sflush_r+0x20>
 80060c6:	2000      	movs	r0, #0
 80060c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060ce:	2e00      	cmp	r6, #0
 80060d0:	d0f9      	beq.n	80060c6 <__sflush_r+0x1a>
 80060d2:	2300      	movs	r3, #0
 80060d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80060d8:	682f      	ldr	r7, [r5, #0]
 80060da:	602b      	str	r3, [r5, #0]
 80060dc:	d032      	beq.n	8006144 <__sflush_r+0x98>
 80060de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80060e0:	89a3      	ldrh	r3, [r4, #12]
 80060e2:	075a      	lsls	r2, r3, #29
 80060e4:	d505      	bpl.n	80060f2 <__sflush_r+0x46>
 80060e6:	6863      	ldr	r3, [r4, #4]
 80060e8:	1ac0      	subs	r0, r0, r3
 80060ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060ec:	b10b      	cbz	r3, 80060f2 <__sflush_r+0x46>
 80060ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060f0:	1ac0      	subs	r0, r0, r3
 80060f2:	2300      	movs	r3, #0
 80060f4:	4602      	mov	r2, r0
 80060f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060f8:	6a21      	ldr	r1, [r4, #32]
 80060fa:	4628      	mov	r0, r5
 80060fc:	47b0      	blx	r6
 80060fe:	1c43      	adds	r3, r0, #1
 8006100:	89a3      	ldrh	r3, [r4, #12]
 8006102:	d106      	bne.n	8006112 <__sflush_r+0x66>
 8006104:	6829      	ldr	r1, [r5, #0]
 8006106:	291d      	cmp	r1, #29
 8006108:	d82c      	bhi.n	8006164 <__sflush_r+0xb8>
 800610a:	4a2a      	ldr	r2, [pc, #168]	; (80061b4 <__sflush_r+0x108>)
 800610c:	40ca      	lsrs	r2, r1
 800610e:	07d6      	lsls	r6, r2, #31
 8006110:	d528      	bpl.n	8006164 <__sflush_r+0xb8>
 8006112:	2200      	movs	r2, #0
 8006114:	6062      	str	r2, [r4, #4]
 8006116:	04d9      	lsls	r1, r3, #19
 8006118:	6922      	ldr	r2, [r4, #16]
 800611a:	6022      	str	r2, [r4, #0]
 800611c:	d504      	bpl.n	8006128 <__sflush_r+0x7c>
 800611e:	1c42      	adds	r2, r0, #1
 8006120:	d101      	bne.n	8006126 <__sflush_r+0x7a>
 8006122:	682b      	ldr	r3, [r5, #0]
 8006124:	b903      	cbnz	r3, 8006128 <__sflush_r+0x7c>
 8006126:	6560      	str	r0, [r4, #84]	; 0x54
 8006128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800612a:	602f      	str	r7, [r5, #0]
 800612c:	2900      	cmp	r1, #0
 800612e:	d0ca      	beq.n	80060c6 <__sflush_r+0x1a>
 8006130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006134:	4299      	cmp	r1, r3
 8006136:	d002      	beq.n	800613e <__sflush_r+0x92>
 8006138:	4628      	mov	r0, r5
 800613a:	f7ff fb47 	bl	80057cc <_free_r>
 800613e:	2000      	movs	r0, #0
 8006140:	6360      	str	r0, [r4, #52]	; 0x34
 8006142:	e7c1      	b.n	80060c8 <__sflush_r+0x1c>
 8006144:	6a21      	ldr	r1, [r4, #32]
 8006146:	2301      	movs	r3, #1
 8006148:	4628      	mov	r0, r5
 800614a:	47b0      	blx	r6
 800614c:	1c41      	adds	r1, r0, #1
 800614e:	d1c7      	bne.n	80060e0 <__sflush_r+0x34>
 8006150:	682b      	ldr	r3, [r5, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d0c4      	beq.n	80060e0 <__sflush_r+0x34>
 8006156:	2b1d      	cmp	r3, #29
 8006158:	d001      	beq.n	800615e <__sflush_r+0xb2>
 800615a:	2b16      	cmp	r3, #22
 800615c:	d101      	bne.n	8006162 <__sflush_r+0xb6>
 800615e:	602f      	str	r7, [r5, #0]
 8006160:	e7b1      	b.n	80060c6 <__sflush_r+0x1a>
 8006162:	89a3      	ldrh	r3, [r4, #12]
 8006164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006168:	81a3      	strh	r3, [r4, #12]
 800616a:	e7ad      	b.n	80060c8 <__sflush_r+0x1c>
 800616c:	690f      	ldr	r7, [r1, #16]
 800616e:	2f00      	cmp	r7, #0
 8006170:	d0a9      	beq.n	80060c6 <__sflush_r+0x1a>
 8006172:	0793      	lsls	r3, r2, #30
 8006174:	680e      	ldr	r6, [r1, #0]
 8006176:	bf08      	it	eq
 8006178:	694b      	ldreq	r3, [r1, #20]
 800617a:	600f      	str	r7, [r1, #0]
 800617c:	bf18      	it	ne
 800617e:	2300      	movne	r3, #0
 8006180:	eba6 0807 	sub.w	r8, r6, r7
 8006184:	608b      	str	r3, [r1, #8]
 8006186:	f1b8 0f00 	cmp.w	r8, #0
 800618a:	dd9c      	ble.n	80060c6 <__sflush_r+0x1a>
 800618c:	6a21      	ldr	r1, [r4, #32]
 800618e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006190:	4643      	mov	r3, r8
 8006192:	463a      	mov	r2, r7
 8006194:	4628      	mov	r0, r5
 8006196:	47b0      	blx	r6
 8006198:	2800      	cmp	r0, #0
 800619a:	dc06      	bgt.n	80061aa <__sflush_r+0xfe>
 800619c:	89a3      	ldrh	r3, [r4, #12]
 800619e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061a2:	81a3      	strh	r3, [r4, #12]
 80061a4:	f04f 30ff 	mov.w	r0, #4294967295
 80061a8:	e78e      	b.n	80060c8 <__sflush_r+0x1c>
 80061aa:	4407      	add	r7, r0
 80061ac:	eba8 0800 	sub.w	r8, r8, r0
 80061b0:	e7e9      	b.n	8006186 <__sflush_r+0xda>
 80061b2:	bf00      	nop
 80061b4:	20400001 	.word	0x20400001

080061b8 <_fflush_r>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	690b      	ldr	r3, [r1, #16]
 80061bc:	4605      	mov	r5, r0
 80061be:	460c      	mov	r4, r1
 80061c0:	b913      	cbnz	r3, 80061c8 <_fflush_r+0x10>
 80061c2:	2500      	movs	r5, #0
 80061c4:	4628      	mov	r0, r5
 80061c6:	bd38      	pop	{r3, r4, r5, pc}
 80061c8:	b118      	cbz	r0, 80061d2 <_fflush_r+0x1a>
 80061ca:	6983      	ldr	r3, [r0, #24]
 80061cc:	b90b      	cbnz	r3, 80061d2 <_fflush_r+0x1a>
 80061ce:	f000 f887 	bl	80062e0 <__sinit>
 80061d2:	4b14      	ldr	r3, [pc, #80]	; (8006224 <_fflush_r+0x6c>)
 80061d4:	429c      	cmp	r4, r3
 80061d6:	d11b      	bne.n	8006210 <_fflush_r+0x58>
 80061d8:	686c      	ldr	r4, [r5, #4]
 80061da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d0ef      	beq.n	80061c2 <_fflush_r+0xa>
 80061e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80061e4:	07d0      	lsls	r0, r2, #31
 80061e6:	d404      	bmi.n	80061f2 <_fflush_r+0x3a>
 80061e8:	0599      	lsls	r1, r3, #22
 80061ea:	d402      	bmi.n	80061f2 <_fflush_r+0x3a>
 80061ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061ee:	f000 f915 	bl	800641c <__retarget_lock_acquire_recursive>
 80061f2:	4628      	mov	r0, r5
 80061f4:	4621      	mov	r1, r4
 80061f6:	f7ff ff59 	bl	80060ac <__sflush_r>
 80061fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061fc:	07da      	lsls	r2, r3, #31
 80061fe:	4605      	mov	r5, r0
 8006200:	d4e0      	bmi.n	80061c4 <_fflush_r+0xc>
 8006202:	89a3      	ldrh	r3, [r4, #12]
 8006204:	059b      	lsls	r3, r3, #22
 8006206:	d4dd      	bmi.n	80061c4 <_fflush_r+0xc>
 8006208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800620a:	f000 f908 	bl	800641e <__retarget_lock_release_recursive>
 800620e:	e7d9      	b.n	80061c4 <_fflush_r+0xc>
 8006210:	4b05      	ldr	r3, [pc, #20]	; (8006228 <_fflush_r+0x70>)
 8006212:	429c      	cmp	r4, r3
 8006214:	d101      	bne.n	800621a <_fflush_r+0x62>
 8006216:	68ac      	ldr	r4, [r5, #8]
 8006218:	e7df      	b.n	80061da <_fflush_r+0x22>
 800621a:	4b04      	ldr	r3, [pc, #16]	; (800622c <_fflush_r+0x74>)
 800621c:	429c      	cmp	r4, r3
 800621e:	bf08      	it	eq
 8006220:	68ec      	ldreq	r4, [r5, #12]
 8006222:	e7da      	b.n	80061da <_fflush_r+0x22>
 8006224:	08007050 	.word	0x08007050
 8006228:	08007070 	.word	0x08007070
 800622c:	08007030 	.word	0x08007030

08006230 <std>:
 8006230:	2300      	movs	r3, #0
 8006232:	b510      	push	{r4, lr}
 8006234:	4604      	mov	r4, r0
 8006236:	e9c0 3300 	strd	r3, r3, [r0]
 800623a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800623e:	6083      	str	r3, [r0, #8]
 8006240:	8181      	strh	r1, [r0, #12]
 8006242:	6643      	str	r3, [r0, #100]	; 0x64
 8006244:	81c2      	strh	r2, [r0, #14]
 8006246:	6183      	str	r3, [r0, #24]
 8006248:	4619      	mov	r1, r3
 800624a:	2208      	movs	r2, #8
 800624c:	305c      	adds	r0, #92	; 0x5c
 800624e:	f7ff fa3d 	bl	80056cc <memset>
 8006252:	4b05      	ldr	r3, [pc, #20]	; (8006268 <std+0x38>)
 8006254:	6263      	str	r3, [r4, #36]	; 0x24
 8006256:	4b05      	ldr	r3, [pc, #20]	; (800626c <std+0x3c>)
 8006258:	62a3      	str	r3, [r4, #40]	; 0x28
 800625a:	4b05      	ldr	r3, [pc, #20]	; (8006270 <std+0x40>)
 800625c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800625e:	4b05      	ldr	r3, [pc, #20]	; (8006274 <std+0x44>)
 8006260:	6224      	str	r4, [r4, #32]
 8006262:	6323      	str	r3, [r4, #48]	; 0x30
 8006264:	bd10      	pop	{r4, pc}
 8006266:	bf00      	nop
 8006268:	08006589 	.word	0x08006589
 800626c:	080065ab 	.word	0x080065ab
 8006270:	080065e3 	.word	0x080065e3
 8006274:	08006607 	.word	0x08006607

08006278 <_cleanup_r>:
 8006278:	4901      	ldr	r1, [pc, #4]	; (8006280 <_cleanup_r+0x8>)
 800627a:	f000 b8af 	b.w	80063dc <_fwalk_reent>
 800627e:	bf00      	nop
 8006280:	080061b9 	.word	0x080061b9

08006284 <__sfmoreglue>:
 8006284:	b570      	push	{r4, r5, r6, lr}
 8006286:	1e4a      	subs	r2, r1, #1
 8006288:	2568      	movs	r5, #104	; 0x68
 800628a:	4355      	muls	r5, r2
 800628c:	460e      	mov	r6, r1
 800628e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006292:	f7ff faeb 	bl	800586c <_malloc_r>
 8006296:	4604      	mov	r4, r0
 8006298:	b140      	cbz	r0, 80062ac <__sfmoreglue+0x28>
 800629a:	2100      	movs	r1, #0
 800629c:	e9c0 1600 	strd	r1, r6, [r0]
 80062a0:	300c      	adds	r0, #12
 80062a2:	60a0      	str	r0, [r4, #8]
 80062a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80062a8:	f7ff fa10 	bl	80056cc <memset>
 80062ac:	4620      	mov	r0, r4
 80062ae:	bd70      	pop	{r4, r5, r6, pc}

080062b0 <__sfp_lock_acquire>:
 80062b0:	4801      	ldr	r0, [pc, #4]	; (80062b8 <__sfp_lock_acquire+0x8>)
 80062b2:	f000 b8b3 	b.w	800641c <__retarget_lock_acquire_recursive>
 80062b6:	bf00      	nop
 80062b8:	2000af48 	.word	0x2000af48

080062bc <__sfp_lock_release>:
 80062bc:	4801      	ldr	r0, [pc, #4]	; (80062c4 <__sfp_lock_release+0x8>)
 80062be:	f000 b8ae 	b.w	800641e <__retarget_lock_release_recursive>
 80062c2:	bf00      	nop
 80062c4:	2000af48 	.word	0x2000af48

080062c8 <__sinit_lock_acquire>:
 80062c8:	4801      	ldr	r0, [pc, #4]	; (80062d0 <__sinit_lock_acquire+0x8>)
 80062ca:	f000 b8a7 	b.w	800641c <__retarget_lock_acquire_recursive>
 80062ce:	bf00      	nop
 80062d0:	2000af43 	.word	0x2000af43

080062d4 <__sinit_lock_release>:
 80062d4:	4801      	ldr	r0, [pc, #4]	; (80062dc <__sinit_lock_release+0x8>)
 80062d6:	f000 b8a2 	b.w	800641e <__retarget_lock_release_recursive>
 80062da:	bf00      	nop
 80062dc:	2000af43 	.word	0x2000af43

080062e0 <__sinit>:
 80062e0:	b510      	push	{r4, lr}
 80062e2:	4604      	mov	r4, r0
 80062e4:	f7ff fff0 	bl	80062c8 <__sinit_lock_acquire>
 80062e8:	69a3      	ldr	r3, [r4, #24]
 80062ea:	b11b      	cbz	r3, 80062f4 <__sinit+0x14>
 80062ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062f0:	f7ff bff0 	b.w	80062d4 <__sinit_lock_release>
 80062f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80062f8:	6523      	str	r3, [r4, #80]	; 0x50
 80062fa:	4b13      	ldr	r3, [pc, #76]	; (8006348 <__sinit+0x68>)
 80062fc:	4a13      	ldr	r2, [pc, #76]	; (800634c <__sinit+0x6c>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	62a2      	str	r2, [r4, #40]	; 0x28
 8006302:	42a3      	cmp	r3, r4
 8006304:	bf04      	itt	eq
 8006306:	2301      	moveq	r3, #1
 8006308:	61a3      	streq	r3, [r4, #24]
 800630a:	4620      	mov	r0, r4
 800630c:	f000 f820 	bl	8006350 <__sfp>
 8006310:	6060      	str	r0, [r4, #4]
 8006312:	4620      	mov	r0, r4
 8006314:	f000 f81c 	bl	8006350 <__sfp>
 8006318:	60a0      	str	r0, [r4, #8]
 800631a:	4620      	mov	r0, r4
 800631c:	f000 f818 	bl	8006350 <__sfp>
 8006320:	2200      	movs	r2, #0
 8006322:	60e0      	str	r0, [r4, #12]
 8006324:	2104      	movs	r1, #4
 8006326:	6860      	ldr	r0, [r4, #4]
 8006328:	f7ff ff82 	bl	8006230 <std>
 800632c:	68a0      	ldr	r0, [r4, #8]
 800632e:	2201      	movs	r2, #1
 8006330:	2109      	movs	r1, #9
 8006332:	f7ff ff7d 	bl	8006230 <std>
 8006336:	68e0      	ldr	r0, [r4, #12]
 8006338:	2202      	movs	r2, #2
 800633a:	2112      	movs	r1, #18
 800633c:	f7ff ff78 	bl	8006230 <std>
 8006340:	2301      	movs	r3, #1
 8006342:	61a3      	str	r3, [r4, #24]
 8006344:	e7d2      	b.n	80062ec <__sinit+0xc>
 8006346:	bf00      	nop
 8006348:	08006f44 	.word	0x08006f44
 800634c:	08006279 	.word	0x08006279

08006350 <__sfp>:
 8006350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006352:	4607      	mov	r7, r0
 8006354:	f7ff ffac 	bl	80062b0 <__sfp_lock_acquire>
 8006358:	4b1e      	ldr	r3, [pc, #120]	; (80063d4 <__sfp+0x84>)
 800635a:	681e      	ldr	r6, [r3, #0]
 800635c:	69b3      	ldr	r3, [r6, #24]
 800635e:	b913      	cbnz	r3, 8006366 <__sfp+0x16>
 8006360:	4630      	mov	r0, r6
 8006362:	f7ff ffbd 	bl	80062e0 <__sinit>
 8006366:	3648      	adds	r6, #72	; 0x48
 8006368:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800636c:	3b01      	subs	r3, #1
 800636e:	d503      	bpl.n	8006378 <__sfp+0x28>
 8006370:	6833      	ldr	r3, [r6, #0]
 8006372:	b30b      	cbz	r3, 80063b8 <__sfp+0x68>
 8006374:	6836      	ldr	r6, [r6, #0]
 8006376:	e7f7      	b.n	8006368 <__sfp+0x18>
 8006378:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800637c:	b9d5      	cbnz	r5, 80063b4 <__sfp+0x64>
 800637e:	4b16      	ldr	r3, [pc, #88]	; (80063d8 <__sfp+0x88>)
 8006380:	60e3      	str	r3, [r4, #12]
 8006382:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006386:	6665      	str	r5, [r4, #100]	; 0x64
 8006388:	f000 f847 	bl	800641a <__retarget_lock_init_recursive>
 800638c:	f7ff ff96 	bl	80062bc <__sfp_lock_release>
 8006390:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006394:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006398:	6025      	str	r5, [r4, #0]
 800639a:	61a5      	str	r5, [r4, #24]
 800639c:	2208      	movs	r2, #8
 800639e:	4629      	mov	r1, r5
 80063a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80063a4:	f7ff f992 	bl	80056cc <memset>
 80063a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80063ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80063b0:	4620      	mov	r0, r4
 80063b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063b4:	3468      	adds	r4, #104	; 0x68
 80063b6:	e7d9      	b.n	800636c <__sfp+0x1c>
 80063b8:	2104      	movs	r1, #4
 80063ba:	4638      	mov	r0, r7
 80063bc:	f7ff ff62 	bl	8006284 <__sfmoreglue>
 80063c0:	4604      	mov	r4, r0
 80063c2:	6030      	str	r0, [r6, #0]
 80063c4:	2800      	cmp	r0, #0
 80063c6:	d1d5      	bne.n	8006374 <__sfp+0x24>
 80063c8:	f7ff ff78 	bl	80062bc <__sfp_lock_release>
 80063cc:	230c      	movs	r3, #12
 80063ce:	603b      	str	r3, [r7, #0]
 80063d0:	e7ee      	b.n	80063b0 <__sfp+0x60>
 80063d2:	bf00      	nop
 80063d4:	08006f44 	.word	0x08006f44
 80063d8:	ffff0001 	.word	0xffff0001

080063dc <_fwalk_reent>:
 80063dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063e0:	4606      	mov	r6, r0
 80063e2:	4688      	mov	r8, r1
 80063e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80063e8:	2700      	movs	r7, #0
 80063ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063ee:	f1b9 0901 	subs.w	r9, r9, #1
 80063f2:	d505      	bpl.n	8006400 <_fwalk_reent+0x24>
 80063f4:	6824      	ldr	r4, [r4, #0]
 80063f6:	2c00      	cmp	r4, #0
 80063f8:	d1f7      	bne.n	80063ea <_fwalk_reent+0xe>
 80063fa:	4638      	mov	r0, r7
 80063fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006400:	89ab      	ldrh	r3, [r5, #12]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d907      	bls.n	8006416 <_fwalk_reent+0x3a>
 8006406:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800640a:	3301      	adds	r3, #1
 800640c:	d003      	beq.n	8006416 <_fwalk_reent+0x3a>
 800640e:	4629      	mov	r1, r5
 8006410:	4630      	mov	r0, r6
 8006412:	47c0      	blx	r8
 8006414:	4307      	orrs	r7, r0
 8006416:	3568      	adds	r5, #104	; 0x68
 8006418:	e7e9      	b.n	80063ee <_fwalk_reent+0x12>

0800641a <__retarget_lock_init_recursive>:
 800641a:	4770      	bx	lr

0800641c <__retarget_lock_acquire_recursive>:
 800641c:	4770      	bx	lr

0800641e <__retarget_lock_release_recursive>:
 800641e:	4770      	bx	lr

08006420 <__swhatbuf_r>:
 8006420:	b570      	push	{r4, r5, r6, lr}
 8006422:	460e      	mov	r6, r1
 8006424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006428:	2900      	cmp	r1, #0
 800642a:	b096      	sub	sp, #88	; 0x58
 800642c:	4614      	mov	r4, r2
 800642e:	461d      	mov	r5, r3
 8006430:	da07      	bge.n	8006442 <__swhatbuf_r+0x22>
 8006432:	2300      	movs	r3, #0
 8006434:	602b      	str	r3, [r5, #0]
 8006436:	89b3      	ldrh	r3, [r6, #12]
 8006438:	061a      	lsls	r2, r3, #24
 800643a:	d410      	bmi.n	800645e <__swhatbuf_r+0x3e>
 800643c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006440:	e00e      	b.n	8006460 <__swhatbuf_r+0x40>
 8006442:	466a      	mov	r2, sp
 8006444:	f000 f906 	bl	8006654 <_fstat_r>
 8006448:	2800      	cmp	r0, #0
 800644a:	dbf2      	blt.n	8006432 <__swhatbuf_r+0x12>
 800644c:	9a01      	ldr	r2, [sp, #4]
 800644e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006452:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006456:	425a      	negs	r2, r3
 8006458:	415a      	adcs	r2, r3
 800645a:	602a      	str	r2, [r5, #0]
 800645c:	e7ee      	b.n	800643c <__swhatbuf_r+0x1c>
 800645e:	2340      	movs	r3, #64	; 0x40
 8006460:	2000      	movs	r0, #0
 8006462:	6023      	str	r3, [r4, #0]
 8006464:	b016      	add	sp, #88	; 0x58
 8006466:	bd70      	pop	{r4, r5, r6, pc}

08006468 <__smakebuf_r>:
 8006468:	898b      	ldrh	r3, [r1, #12]
 800646a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800646c:	079d      	lsls	r5, r3, #30
 800646e:	4606      	mov	r6, r0
 8006470:	460c      	mov	r4, r1
 8006472:	d507      	bpl.n	8006484 <__smakebuf_r+0x1c>
 8006474:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006478:	6023      	str	r3, [r4, #0]
 800647a:	6123      	str	r3, [r4, #16]
 800647c:	2301      	movs	r3, #1
 800647e:	6163      	str	r3, [r4, #20]
 8006480:	b002      	add	sp, #8
 8006482:	bd70      	pop	{r4, r5, r6, pc}
 8006484:	ab01      	add	r3, sp, #4
 8006486:	466a      	mov	r2, sp
 8006488:	f7ff ffca 	bl	8006420 <__swhatbuf_r>
 800648c:	9900      	ldr	r1, [sp, #0]
 800648e:	4605      	mov	r5, r0
 8006490:	4630      	mov	r0, r6
 8006492:	f7ff f9eb 	bl	800586c <_malloc_r>
 8006496:	b948      	cbnz	r0, 80064ac <__smakebuf_r+0x44>
 8006498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800649c:	059a      	lsls	r2, r3, #22
 800649e:	d4ef      	bmi.n	8006480 <__smakebuf_r+0x18>
 80064a0:	f023 0303 	bic.w	r3, r3, #3
 80064a4:	f043 0302 	orr.w	r3, r3, #2
 80064a8:	81a3      	strh	r3, [r4, #12]
 80064aa:	e7e3      	b.n	8006474 <__smakebuf_r+0xc>
 80064ac:	4b0d      	ldr	r3, [pc, #52]	; (80064e4 <__smakebuf_r+0x7c>)
 80064ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80064b0:	89a3      	ldrh	r3, [r4, #12]
 80064b2:	6020      	str	r0, [r4, #0]
 80064b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b8:	81a3      	strh	r3, [r4, #12]
 80064ba:	9b00      	ldr	r3, [sp, #0]
 80064bc:	6163      	str	r3, [r4, #20]
 80064be:	9b01      	ldr	r3, [sp, #4]
 80064c0:	6120      	str	r0, [r4, #16]
 80064c2:	b15b      	cbz	r3, 80064dc <__smakebuf_r+0x74>
 80064c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064c8:	4630      	mov	r0, r6
 80064ca:	f000 f8d5 	bl	8006678 <_isatty_r>
 80064ce:	b128      	cbz	r0, 80064dc <__smakebuf_r+0x74>
 80064d0:	89a3      	ldrh	r3, [r4, #12]
 80064d2:	f023 0303 	bic.w	r3, r3, #3
 80064d6:	f043 0301 	orr.w	r3, r3, #1
 80064da:	81a3      	strh	r3, [r4, #12]
 80064dc:	89a0      	ldrh	r0, [r4, #12]
 80064de:	4305      	orrs	r5, r0
 80064e0:	81a5      	strh	r5, [r4, #12]
 80064e2:	e7cd      	b.n	8006480 <__smakebuf_r+0x18>
 80064e4:	08006279 	.word	0x08006279

080064e8 <__malloc_lock>:
 80064e8:	4801      	ldr	r0, [pc, #4]	; (80064f0 <__malloc_lock+0x8>)
 80064ea:	f7ff bf97 	b.w	800641c <__retarget_lock_acquire_recursive>
 80064ee:	bf00      	nop
 80064f0:	2000af44 	.word	0x2000af44

080064f4 <__malloc_unlock>:
 80064f4:	4801      	ldr	r0, [pc, #4]	; (80064fc <__malloc_unlock+0x8>)
 80064f6:	f7ff bf92 	b.w	800641e <__retarget_lock_release_recursive>
 80064fa:	bf00      	nop
 80064fc:	2000af44 	.word	0x2000af44

08006500 <_raise_r>:
 8006500:	291f      	cmp	r1, #31
 8006502:	b538      	push	{r3, r4, r5, lr}
 8006504:	4604      	mov	r4, r0
 8006506:	460d      	mov	r5, r1
 8006508:	d904      	bls.n	8006514 <_raise_r+0x14>
 800650a:	2316      	movs	r3, #22
 800650c:	6003      	str	r3, [r0, #0]
 800650e:	f04f 30ff 	mov.w	r0, #4294967295
 8006512:	bd38      	pop	{r3, r4, r5, pc}
 8006514:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006516:	b112      	cbz	r2, 800651e <_raise_r+0x1e>
 8006518:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800651c:	b94b      	cbnz	r3, 8006532 <_raise_r+0x32>
 800651e:	4620      	mov	r0, r4
 8006520:	f000 f830 	bl	8006584 <_getpid_r>
 8006524:	462a      	mov	r2, r5
 8006526:	4601      	mov	r1, r0
 8006528:	4620      	mov	r0, r4
 800652a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800652e:	f000 b817 	b.w	8006560 <_kill_r>
 8006532:	2b01      	cmp	r3, #1
 8006534:	d00a      	beq.n	800654c <_raise_r+0x4c>
 8006536:	1c59      	adds	r1, r3, #1
 8006538:	d103      	bne.n	8006542 <_raise_r+0x42>
 800653a:	2316      	movs	r3, #22
 800653c:	6003      	str	r3, [r0, #0]
 800653e:	2001      	movs	r0, #1
 8006540:	e7e7      	b.n	8006512 <_raise_r+0x12>
 8006542:	2400      	movs	r4, #0
 8006544:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006548:	4628      	mov	r0, r5
 800654a:	4798      	blx	r3
 800654c:	2000      	movs	r0, #0
 800654e:	e7e0      	b.n	8006512 <_raise_r+0x12>

08006550 <raise>:
 8006550:	4b02      	ldr	r3, [pc, #8]	; (800655c <raise+0xc>)
 8006552:	4601      	mov	r1, r0
 8006554:	6818      	ldr	r0, [r3, #0]
 8006556:	f7ff bfd3 	b.w	8006500 <_raise_r>
 800655a:	bf00      	nop
 800655c:	20000014 	.word	0x20000014

08006560 <_kill_r>:
 8006560:	b538      	push	{r3, r4, r5, lr}
 8006562:	4d07      	ldr	r5, [pc, #28]	; (8006580 <_kill_r+0x20>)
 8006564:	2300      	movs	r3, #0
 8006566:	4604      	mov	r4, r0
 8006568:	4608      	mov	r0, r1
 800656a:	4611      	mov	r1, r2
 800656c:	602b      	str	r3, [r5, #0]
 800656e:	f7fb fe25 	bl	80021bc <_kill>
 8006572:	1c43      	adds	r3, r0, #1
 8006574:	d102      	bne.n	800657c <_kill_r+0x1c>
 8006576:	682b      	ldr	r3, [r5, #0]
 8006578:	b103      	cbz	r3, 800657c <_kill_r+0x1c>
 800657a:	6023      	str	r3, [r4, #0]
 800657c:	bd38      	pop	{r3, r4, r5, pc}
 800657e:	bf00      	nop
 8006580:	2000af4c 	.word	0x2000af4c

08006584 <_getpid_r>:
 8006584:	f7fb be12 	b.w	80021ac <_getpid>

08006588 <__sread>:
 8006588:	b510      	push	{r4, lr}
 800658a:	460c      	mov	r4, r1
 800658c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006590:	f000 f894 	bl	80066bc <_read_r>
 8006594:	2800      	cmp	r0, #0
 8006596:	bfab      	itete	ge
 8006598:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800659a:	89a3      	ldrhlt	r3, [r4, #12]
 800659c:	181b      	addge	r3, r3, r0
 800659e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065a2:	bfac      	ite	ge
 80065a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80065a6:	81a3      	strhlt	r3, [r4, #12]
 80065a8:	bd10      	pop	{r4, pc}

080065aa <__swrite>:
 80065aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ae:	461f      	mov	r7, r3
 80065b0:	898b      	ldrh	r3, [r1, #12]
 80065b2:	05db      	lsls	r3, r3, #23
 80065b4:	4605      	mov	r5, r0
 80065b6:	460c      	mov	r4, r1
 80065b8:	4616      	mov	r6, r2
 80065ba:	d505      	bpl.n	80065c8 <__swrite+0x1e>
 80065bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065c0:	2302      	movs	r3, #2
 80065c2:	2200      	movs	r2, #0
 80065c4:	f000 f868 	bl	8006698 <_lseek_r>
 80065c8:	89a3      	ldrh	r3, [r4, #12]
 80065ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065d2:	81a3      	strh	r3, [r4, #12]
 80065d4:	4632      	mov	r2, r6
 80065d6:	463b      	mov	r3, r7
 80065d8:	4628      	mov	r0, r5
 80065da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065de:	f000 b817 	b.w	8006610 <_write_r>

080065e2 <__sseek>:
 80065e2:	b510      	push	{r4, lr}
 80065e4:	460c      	mov	r4, r1
 80065e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ea:	f000 f855 	bl	8006698 <_lseek_r>
 80065ee:	1c43      	adds	r3, r0, #1
 80065f0:	89a3      	ldrh	r3, [r4, #12]
 80065f2:	bf15      	itete	ne
 80065f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80065f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065fe:	81a3      	strheq	r3, [r4, #12]
 8006600:	bf18      	it	ne
 8006602:	81a3      	strhne	r3, [r4, #12]
 8006604:	bd10      	pop	{r4, pc}

08006606 <__sclose>:
 8006606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800660a:	f000 b813 	b.w	8006634 <_close_r>
	...

08006610 <_write_r>:
 8006610:	b538      	push	{r3, r4, r5, lr}
 8006612:	4d07      	ldr	r5, [pc, #28]	; (8006630 <_write_r+0x20>)
 8006614:	4604      	mov	r4, r0
 8006616:	4608      	mov	r0, r1
 8006618:	4611      	mov	r1, r2
 800661a:	2200      	movs	r2, #0
 800661c:	602a      	str	r2, [r5, #0]
 800661e:	461a      	mov	r2, r3
 8006620:	f7fb fe03 	bl	800222a <_write>
 8006624:	1c43      	adds	r3, r0, #1
 8006626:	d102      	bne.n	800662e <_write_r+0x1e>
 8006628:	682b      	ldr	r3, [r5, #0]
 800662a:	b103      	cbz	r3, 800662e <_write_r+0x1e>
 800662c:	6023      	str	r3, [r4, #0]
 800662e:	bd38      	pop	{r3, r4, r5, pc}
 8006630:	2000af4c 	.word	0x2000af4c

08006634 <_close_r>:
 8006634:	b538      	push	{r3, r4, r5, lr}
 8006636:	4d06      	ldr	r5, [pc, #24]	; (8006650 <_close_r+0x1c>)
 8006638:	2300      	movs	r3, #0
 800663a:	4604      	mov	r4, r0
 800663c:	4608      	mov	r0, r1
 800663e:	602b      	str	r3, [r5, #0]
 8006640:	f7fb fe0f 	bl	8002262 <_close>
 8006644:	1c43      	adds	r3, r0, #1
 8006646:	d102      	bne.n	800664e <_close_r+0x1a>
 8006648:	682b      	ldr	r3, [r5, #0]
 800664a:	b103      	cbz	r3, 800664e <_close_r+0x1a>
 800664c:	6023      	str	r3, [r4, #0]
 800664e:	bd38      	pop	{r3, r4, r5, pc}
 8006650:	2000af4c 	.word	0x2000af4c

08006654 <_fstat_r>:
 8006654:	b538      	push	{r3, r4, r5, lr}
 8006656:	4d07      	ldr	r5, [pc, #28]	; (8006674 <_fstat_r+0x20>)
 8006658:	2300      	movs	r3, #0
 800665a:	4604      	mov	r4, r0
 800665c:	4608      	mov	r0, r1
 800665e:	4611      	mov	r1, r2
 8006660:	602b      	str	r3, [r5, #0]
 8006662:	f7fb fe0a 	bl	800227a <_fstat>
 8006666:	1c43      	adds	r3, r0, #1
 8006668:	d102      	bne.n	8006670 <_fstat_r+0x1c>
 800666a:	682b      	ldr	r3, [r5, #0]
 800666c:	b103      	cbz	r3, 8006670 <_fstat_r+0x1c>
 800666e:	6023      	str	r3, [r4, #0]
 8006670:	bd38      	pop	{r3, r4, r5, pc}
 8006672:	bf00      	nop
 8006674:	2000af4c 	.word	0x2000af4c

08006678 <_isatty_r>:
 8006678:	b538      	push	{r3, r4, r5, lr}
 800667a:	4d06      	ldr	r5, [pc, #24]	; (8006694 <_isatty_r+0x1c>)
 800667c:	2300      	movs	r3, #0
 800667e:	4604      	mov	r4, r0
 8006680:	4608      	mov	r0, r1
 8006682:	602b      	str	r3, [r5, #0]
 8006684:	f7fb fe09 	bl	800229a <_isatty>
 8006688:	1c43      	adds	r3, r0, #1
 800668a:	d102      	bne.n	8006692 <_isatty_r+0x1a>
 800668c:	682b      	ldr	r3, [r5, #0]
 800668e:	b103      	cbz	r3, 8006692 <_isatty_r+0x1a>
 8006690:	6023      	str	r3, [r4, #0]
 8006692:	bd38      	pop	{r3, r4, r5, pc}
 8006694:	2000af4c 	.word	0x2000af4c

08006698 <_lseek_r>:
 8006698:	b538      	push	{r3, r4, r5, lr}
 800669a:	4d07      	ldr	r5, [pc, #28]	; (80066b8 <_lseek_r+0x20>)
 800669c:	4604      	mov	r4, r0
 800669e:	4608      	mov	r0, r1
 80066a0:	4611      	mov	r1, r2
 80066a2:	2200      	movs	r2, #0
 80066a4:	602a      	str	r2, [r5, #0]
 80066a6:	461a      	mov	r2, r3
 80066a8:	f7fb fe02 	bl	80022b0 <_lseek>
 80066ac:	1c43      	adds	r3, r0, #1
 80066ae:	d102      	bne.n	80066b6 <_lseek_r+0x1e>
 80066b0:	682b      	ldr	r3, [r5, #0]
 80066b2:	b103      	cbz	r3, 80066b6 <_lseek_r+0x1e>
 80066b4:	6023      	str	r3, [r4, #0]
 80066b6:	bd38      	pop	{r3, r4, r5, pc}
 80066b8:	2000af4c 	.word	0x2000af4c

080066bc <_read_r>:
 80066bc:	b538      	push	{r3, r4, r5, lr}
 80066be:	4d07      	ldr	r5, [pc, #28]	; (80066dc <_read_r+0x20>)
 80066c0:	4604      	mov	r4, r0
 80066c2:	4608      	mov	r0, r1
 80066c4:	4611      	mov	r1, r2
 80066c6:	2200      	movs	r2, #0
 80066c8:	602a      	str	r2, [r5, #0]
 80066ca:	461a      	mov	r2, r3
 80066cc:	f7fb fd90 	bl	80021f0 <_read>
 80066d0:	1c43      	adds	r3, r0, #1
 80066d2:	d102      	bne.n	80066da <_read_r+0x1e>
 80066d4:	682b      	ldr	r3, [r5, #0]
 80066d6:	b103      	cbz	r3, 80066da <_read_r+0x1e>
 80066d8:	6023      	str	r3, [r4, #0]
 80066da:	bd38      	pop	{r3, r4, r5, pc}
 80066dc:	2000af4c 	.word	0x2000af4c

080066e0 <_init>:
 80066e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e2:	bf00      	nop
 80066e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066e6:	bc08      	pop	{r3}
 80066e8:	469e      	mov	lr, r3
 80066ea:	4770      	bx	lr

080066ec <_fini>:
 80066ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ee:	bf00      	nop
 80066f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066f2:	bc08      	pop	{r3}
 80066f4:	469e      	mov	lr, r3
 80066f6:	4770      	bx	lr
