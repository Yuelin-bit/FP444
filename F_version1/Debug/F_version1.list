
F_version1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052f0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000084c  08005478  08005478  00015478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cc4  08005cc4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005cc4  08005cc4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005cc4  08005cc4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cc4  08005cc4  00015cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cc8  08005cc8  00015cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005890  2000000c  08005cd8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000589c  08005cd8  0002589c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015327  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a00  00000000  00000000  00035363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  00037d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  00038d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027149  00000000  00000000  00039bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e5b  00000000  00000000  00060d11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2ac2  00000000  00000000  00071b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  0016462e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004260  00000000  00000000  001646f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  00168958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005460 	.word	0x08005460

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005460 	.word	0x08005460

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	0000      	movs	r0, r0
	...

08000a48 <get_C6>:

	uint8_t counter = 0;

//Tone 1 C6 1046.5 Hz
	uint8_t C6[42];
void get_C6(){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 42; i++){
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	e043      	b.n	8000adc <get_C6+0x94>
		C6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/42))*256;
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff fd09 	bl	800046c <__aeabi_i2d>
 8000a5a:	a32a      	add	r3, pc, #168	; (adr r3, 8000b04 <get_C6+0xbc>)
 8000a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a60:	f7ff fd6e 	bl	8000540 <__aeabi_dmul>
 8000a64:	4602      	mov	r2, r0
 8000a66:	460b      	mov	r3, r1
 8000a68:	4610      	mov	r0, r2
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f04f 0200 	mov.w	r2, #0
 8000a70:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <get_C6+0xb0>)
 8000a72:	f7ff fe8f 	bl	8000794 <__aeabi_ddiv>
 8000a76:	4602      	mov	r2, r0
 8000a78:	460b      	mov	r3, r1
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f7ff ff91 	bl	80009a4 <__aeabi_d2f>
 8000a82:	4603      	mov	r3, r0
 8000a84:	ee00 3a10 	vmov	s0, r3
 8000a88:	f004 fc78 	bl	800537c <arm_sin_f32>
 8000a8c:	eef0 7a40 	vmov.f32	s15, s0
 8000a90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a98:	ee17 0a90 	vmov	r0, s15
 8000a9c:	f7ff fcf8 	bl	8000490 <__aeabi_f2d>
 8000aa0:	a313      	add	r3, pc, #76	; (adr r3, 8000af0 <get_C6+0xa8>)
 8000aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aa6:	f7ff fd4b 	bl	8000540 <__aeabi_dmul>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	460b      	mov	r3, r1
 8000aae:	4610      	mov	r0, r2
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f04f 0200 	mov.w	r2, #0
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <get_C6+0xb4>)
 8000ab8:	f7ff fd42 	bl	8000540 <__aeabi_dmul>
 8000abc:	4602      	mov	r2, r0
 8000abe:	460b      	mov	r3, r1
 8000ac0:	4610      	mov	r0, r2
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	f7ff ff4e 	bl	8000964 <__aeabi_d2uiz>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	b2d9      	uxtb	r1, r3
 8000acc:	4a0c      	ldr	r2, [pc, #48]	; (8000b00 <get_C6+0xb8>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	460a      	mov	r2, r1
 8000ad4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 42; i++){
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b29      	cmp	r3, #41	; 0x29
 8000ae0:	ddb8      	ble.n	8000a54 <get_C6+0xc>
	}
}
 8000ae2:	bf00      	nop
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	f3af 8000 	nop.w
 8000af0:	51eb851f 	.word	0x51eb851f
 8000af4:	3fd51eb8 	.word	0x3fd51eb8
 8000af8:	40450000 	.word	0x40450000
 8000afc:	40700000 	.word	0x40700000
 8000b00:	20005714 	.word	0x20005714
 8000b04:	53c8d4f1 	.word	0x53c8d4f1
 8000b08:	401921fb 	.word	0x401921fb
 8000b0c:	00000000 	.word	0x00000000

08000b10 <get_E6>:

//Tone 2 E6 1318.5 Hz
	uint8_t E6[34];
void get_E6(){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
	for(int i = 0; i < 34; i++){
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	e043      	b.n	8000ba4 <get_E6+0x94>
		E6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/34))*256;
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff fca5 	bl	800046c <__aeabi_i2d>
 8000b22:	a32a      	add	r3, pc, #168	; (adr r3, 8000bcc <get_E6+0xbc>)
 8000b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b28:	f7ff fd0a 	bl	8000540 <__aeabi_dmul>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	460b      	mov	r3, r1
 8000b30:	4610      	mov	r0, r2
 8000b32:	4619      	mov	r1, r3
 8000b34:	f04f 0200 	mov.w	r2, #0
 8000b38:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <get_E6+0xb0>)
 8000b3a:	f7ff fe2b 	bl	8000794 <__aeabi_ddiv>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	460b      	mov	r3, r1
 8000b42:	4610      	mov	r0, r2
 8000b44:	4619      	mov	r1, r3
 8000b46:	f7ff ff2d 	bl	80009a4 <__aeabi_d2f>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	ee00 3a10 	vmov	s0, r3
 8000b50:	f004 fc14 	bl	800537c <arm_sin_f32>
 8000b54:	eef0 7a40 	vmov.f32	s15, s0
 8000b58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b60:	ee17 0a90 	vmov	r0, s15
 8000b64:	f7ff fc94 	bl	8000490 <__aeabi_f2d>
 8000b68:	a313      	add	r3, pc, #76	; (adr r3, 8000bb8 <get_E6+0xa8>)
 8000b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b6e:	f7ff fce7 	bl	8000540 <__aeabi_dmul>
 8000b72:	4602      	mov	r2, r0
 8000b74:	460b      	mov	r3, r1
 8000b76:	4610      	mov	r0, r2
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f04f 0200 	mov.w	r2, #0
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <get_E6+0xb4>)
 8000b80:	f7ff fcde 	bl	8000540 <__aeabi_dmul>
 8000b84:	4602      	mov	r2, r0
 8000b86:	460b      	mov	r3, r1
 8000b88:	4610      	mov	r0, r2
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f7ff feea 	bl	8000964 <__aeabi_d2uiz>
 8000b90:	4603      	mov	r3, r0
 8000b92:	b2d9      	uxtb	r1, r3
 8000b94:	4a0c      	ldr	r2, [pc, #48]	; (8000bc8 <get_E6+0xb8>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	460a      	mov	r2, r1
 8000b9c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 34; i++){
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b21      	cmp	r3, #33	; 0x21
 8000ba8:	ddb8      	ble.n	8000b1c <get_E6+0xc>
	}
}
 8000baa:	bf00      	nop
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	f3af 8000 	nop.w
 8000bb8:	51eb851f 	.word	0x51eb851f
 8000bbc:	3fd51eb8 	.word	0x3fd51eb8
 8000bc0:	40410000 	.word	0x40410000
 8000bc4:	40700000 	.word	0x40700000
 8000bc8:	20005660 	.word	0x20005660
 8000bcc:	53c8d4f1 	.word	0x53c8d4f1
 8000bd0:	401921fb 	.word	0x401921fb
 8000bd4:	00000000 	.word	0x00000000

08000bd8 <get_G6>:

//Tone 3 G6 1568.0 Hz
	uint8_t G6[28];
void get_G6(){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
	for(int i = 0; i < 28; i++){
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	e043      	b.n	8000c6c <get_G6+0x94>
		G6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/28))*256;
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff fc41 	bl	800046c <__aeabi_i2d>
 8000bea:	a32a      	add	r3, pc, #168	; (adr r3, 8000c94 <get_G6+0xbc>)
 8000bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf0:	f7ff fca6 	bl	8000540 <__aeabi_dmul>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f04f 0200 	mov.w	r2, #0
 8000c00:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <get_G6+0xb0>)
 8000c02:	f7ff fdc7 	bl	8000794 <__aeabi_ddiv>
 8000c06:	4602      	mov	r2, r0
 8000c08:	460b      	mov	r3, r1
 8000c0a:	4610      	mov	r0, r2
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f7ff fec9 	bl	80009a4 <__aeabi_d2f>
 8000c12:	4603      	mov	r3, r0
 8000c14:	ee00 3a10 	vmov	s0, r3
 8000c18:	f004 fbb0 	bl	800537c <arm_sin_f32>
 8000c1c:	eef0 7a40 	vmov.f32	s15, s0
 8000c20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c28:	ee17 0a90 	vmov	r0, s15
 8000c2c:	f7ff fc30 	bl	8000490 <__aeabi_f2d>
 8000c30:	a313      	add	r3, pc, #76	; (adr r3, 8000c80 <get_G6+0xa8>)
 8000c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c36:	f7ff fc83 	bl	8000540 <__aeabi_dmul>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	4610      	mov	r0, r2
 8000c40:	4619      	mov	r1, r3
 8000c42:	f04f 0200 	mov.w	r2, #0
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <get_G6+0xb4>)
 8000c48:	f7ff fc7a 	bl	8000540 <__aeabi_dmul>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	460b      	mov	r3, r1
 8000c50:	4610      	mov	r0, r2
 8000c52:	4619      	mov	r1, r3
 8000c54:	f7ff fe86 	bl	8000964 <__aeabi_d2uiz>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	b2d9      	uxtb	r1, r3
 8000c5c:	4a0c      	ldr	r2, [pc, #48]	; (8000c90 <get_G6+0xb8>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	460a      	mov	r2, r1
 8000c64:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 28; i++){
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b1b      	cmp	r3, #27
 8000c70:	ddb8      	ble.n	8000be4 <get_G6+0xc>
	}
}
 8000c72:	bf00      	nop
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	f3af 8000 	nop.w
 8000c80:	51eb851f 	.word	0x51eb851f
 8000c84:	3fd51eb8 	.word	0x3fd51eb8
 8000c88:	403c0000 	.word	0x403c0000
 8000c8c:	40700000 	.word	0x40700000
 8000c90:	20005740 	.word	0x20005740
 8000c94:	53c8d4f1 	.word	0x53c8d4f1
 8000c98:	401921fb 	.word	0x401921fb
 8000c9c:	00000000 	.word	0x00000000

08000ca0 <get_A6>:

//Tone 4 A6 1760.0 Hz

	uint8_t A6[25];
void get_A6(){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 25; i++){
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	e043      	b.n	8000d34 <get_A6+0x94>
		A6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/25))*256;
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff fbdd 	bl	800046c <__aeabi_i2d>
 8000cb2:	a32a      	add	r3, pc, #168	; (adr r3, 8000d5c <get_A6+0xbc>)
 8000cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb8:	f7ff fc42 	bl	8000540 <__aeabi_dmul>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4610      	mov	r0, r2
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f04f 0200 	mov.w	r2, #0
 8000cc8:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <get_A6+0xb0>)
 8000cca:	f7ff fd63 	bl	8000794 <__aeabi_ddiv>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f7ff fe65 	bl	80009a4 <__aeabi_d2f>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	ee00 3a10 	vmov	s0, r3
 8000ce0:	f004 fb4c 	bl	800537c <arm_sin_f32>
 8000ce4:	eef0 7a40 	vmov.f32	s15, s0
 8000ce8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000cec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000cf0:	ee17 0a90 	vmov	r0, s15
 8000cf4:	f7ff fbcc 	bl	8000490 <__aeabi_f2d>
 8000cf8:	a313      	add	r3, pc, #76	; (adr r3, 8000d48 <get_A6+0xa8>)
 8000cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cfe:	f7ff fc1f 	bl	8000540 <__aeabi_dmul>
 8000d02:	4602      	mov	r2, r0
 8000d04:	460b      	mov	r3, r1
 8000d06:	4610      	mov	r0, r2
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f04f 0200 	mov.w	r2, #0
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <get_A6+0xb4>)
 8000d10:	f7ff fc16 	bl	8000540 <__aeabi_dmul>
 8000d14:	4602      	mov	r2, r0
 8000d16:	460b      	mov	r3, r1
 8000d18:	4610      	mov	r0, r2
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f7ff fe22 	bl	8000964 <__aeabi_d2uiz>
 8000d20:	4603      	mov	r3, r0
 8000d22:	b2d9      	uxtb	r1, r3
 8000d24:	4a0c      	ldr	r2, [pc, #48]	; (8000d58 <get_A6+0xb8>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	460a      	mov	r2, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 25; i++){
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3301      	adds	r3, #1
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b18      	cmp	r3, #24
 8000d38:	ddb8      	ble.n	8000cac <get_A6+0xc>
	}
}
 8000d3a:	bf00      	nop
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	f3af 8000 	nop.w
 8000d48:	51eb851f 	.word	0x51eb851f
 8000d4c:	3fd51eb8 	.word	0x3fd51eb8
 8000d50:	40390000 	.word	0x40390000
 8000d54:	40700000 	.word	0x40700000
 8000d58:	200057ec 	.word	0x200057ec
 8000d5c:	53c8d4f1 	.word	0x53c8d4f1
 8000d60:	401921fb 	.word	0x401921fb
 8000d64:	00000000 	.word	0x00000000

08000d68 <get_B6>:

//Tone 5 B6 1975.53 Hz
	uint8_t B6[22];
void get_B6(){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 22; i++){
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	e043      	b.n	8000dfc <get_B6+0x94>
		B6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/22))*256;
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff fb79 	bl	800046c <__aeabi_i2d>
 8000d7a:	a32a      	add	r3, pc, #168	; (adr r3, 8000e24 <get_B6+0xbc>)
 8000d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d80:	f7ff fbde 	bl	8000540 <__aeabi_dmul>
 8000d84:	4602      	mov	r2, r0
 8000d86:	460b      	mov	r3, r1
 8000d88:	4610      	mov	r0, r2
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f04f 0200 	mov.w	r2, #0
 8000d90:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <get_B6+0xb0>)
 8000d92:	f7ff fcff 	bl	8000794 <__aeabi_ddiv>
 8000d96:	4602      	mov	r2, r0
 8000d98:	460b      	mov	r3, r1
 8000d9a:	4610      	mov	r0, r2
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f7ff fe01 	bl	80009a4 <__aeabi_d2f>
 8000da2:	4603      	mov	r3, r0
 8000da4:	ee00 3a10 	vmov	s0, r3
 8000da8:	f004 fae8 	bl	800537c <arm_sin_f32>
 8000dac:	eef0 7a40 	vmov.f32	s15, s0
 8000db0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000db4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000db8:	ee17 0a90 	vmov	r0, s15
 8000dbc:	f7ff fb68 	bl	8000490 <__aeabi_f2d>
 8000dc0:	a313      	add	r3, pc, #76	; (adr r3, 8000e10 <get_B6+0xa8>)
 8000dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc6:	f7ff fbbb 	bl	8000540 <__aeabi_dmul>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	460b      	mov	r3, r1
 8000dce:	4610      	mov	r0, r2
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f04f 0200 	mov.w	r2, #0
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <get_B6+0xb4>)
 8000dd8:	f7ff fbb2 	bl	8000540 <__aeabi_dmul>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	460b      	mov	r3, r1
 8000de0:	4610      	mov	r0, r2
 8000de2:	4619      	mov	r1, r3
 8000de4:	f7ff fdbe 	bl	8000964 <__aeabi_d2uiz>
 8000de8:	4603      	mov	r3, r0
 8000dea:	b2d9      	uxtb	r1, r3
 8000dec:	4a0c      	ldr	r2, [pc, #48]	; (8000e20 <get_B6+0xb8>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	460a      	mov	r2, r1
 8000df4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 22; i++){
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b15      	cmp	r3, #21
 8000e00:	ddb8      	ble.n	8000d74 <get_B6+0xc>
	}
}
 8000e02:	bf00      	nop
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	f3af 8000 	nop.w
 8000e10:	51eb851f 	.word	0x51eb851f
 8000e14:	3fd51eb8 	.word	0x3fd51eb8
 8000e18:	40360000 	.word	0x40360000
 8000e1c:	40700000 	.word	0x40700000
 8000e20:	20005684 	.word	0x20005684
 8000e24:	53c8d4f1 	.word	0x53c8d4f1
 8000e28:	401921fb 	.word	0x401921fb
 8000e2c:	00000000 	.word	0x00000000

08000e30 <get_B5>:

//Tone 6 B5 987.78 Hz
	uint8_t B5[45];
void get_B5(){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
	for(int i = 0; i < 45; i++){
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	e043      	b.n	8000ec4 <get_B5+0x94>
		B5[i] =  0.33*(1 + arm_sin_f32(2*pi*i/45))*256;
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff fb15 	bl	800046c <__aeabi_i2d>
 8000e42:	a32a      	add	r3, pc, #168	; (adr r3, 8000eec <get_B5+0xbc>)
 8000e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e48:	f7ff fb7a 	bl	8000540 <__aeabi_dmul>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	460b      	mov	r3, r1
 8000e50:	4610      	mov	r0, r2
 8000e52:	4619      	mov	r1, r3
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <get_B5+0xb0>)
 8000e5a:	f7ff fc9b 	bl	8000794 <__aeabi_ddiv>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	460b      	mov	r3, r1
 8000e62:	4610      	mov	r0, r2
 8000e64:	4619      	mov	r1, r3
 8000e66:	f7ff fd9d 	bl	80009a4 <__aeabi_d2f>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	ee00 3a10 	vmov	s0, r3
 8000e70:	f004 fa84 	bl	800537c <arm_sin_f32>
 8000e74:	eef0 7a40 	vmov.f32	s15, s0
 8000e78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e80:	ee17 0a90 	vmov	r0, s15
 8000e84:	f7ff fb04 	bl	8000490 <__aeabi_f2d>
 8000e88:	a313      	add	r3, pc, #76	; (adr r3, 8000ed8 <get_B5+0xa8>)
 8000e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8e:	f7ff fb57 	bl	8000540 <__aeabi_dmul>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	4610      	mov	r0, r2
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f04f 0200 	mov.w	r2, #0
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <get_B5+0xb4>)
 8000ea0:	f7ff fb4e 	bl	8000540 <__aeabi_dmul>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f7ff fd5a 	bl	8000964 <__aeabi_d2uiz>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	b2d9      	uxtb	r1, r3
 8000eb4:	4a0c      	ldr	r2, [pc, #48]	; (8000ee8 <get_B5+0xb8>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	460a      	mov	r2, r1
 8000ebc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 45; i++){
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b2c      	cmp	r3, #44	; 0x2c
 8000ec8:	ddb8      	ble.n	8000e3c <get_B5+0xc>
	}
}
 8000eca:	bf00      	nop
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	f3af 8000 	nop.w
 8000ed8:	51eb851f 	.word	0x51eb851f
 8000edc:	3fd51eb8 	.word	0x3fd51eb8
 8000ee0:	40468000 	.word	0x40468000
 8000ee4:	40700000 	.word	0x40700000
 8000ee8:	200056e4 	.word	0x200056e4
 8000eec:	53c8d4f1 	.word	0x53c8d4f1
 8000ef0:	401921fb 	.word	0x401921fb

08000ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08c      	sub	sp, #48	; 0x30
 8000ef8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efa:	f001 f958 	bl	80021ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efe:	f000 f8f1 	bl	80010e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f02:	f000 fa05 	bl	8001310 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f06:	f000 f9e5 	bl	80012d4 <MX_DMA_Init>
  MX_DAC1_Init();
 8000f0a:	f000 f93d 	bl	8001188 <MX_DAC1_Init>
  MX_QUADSPI_Init();
 8000f0e:	f000 f96d 	bl	80011ec <MX_QUADSPI_Init>
  MX_TIM2_Init();
 8000f12:	f000 f991 	bl	8001238 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  BSP_QSPI_Init();
 8000f16:	f000 fb35 	bl	8001584 <BSP_QSPI_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000f1a:	4867      	ldr	r0, [pc, #412]	; (80010b8 <main+0x1c4>)
 8000f1c:	f003 fdd6 	bl	8004acc <HAL_TIM_Base_Start_IT>




  get_B5();
 8000f20:	f7ff ff86 	bl	8000e30 <get_B5>
  get_C6();
 8000f24:	f7ff fd90 	bl	8000a48 <get_C6>
  get_E6();
 8000f28:	f7ff fdf2 	bl	8000b10 <get_E6>
  get_G6();
 8000f2c:	f7ff fe54 	bl	8000bd8 <get_G6>
  get_A6();
 8000f30:	f7ff feb6 	bl	8000ca0 <get_A6>
  get_B6();
 8000f34:	f7ff ff18 	bl	8000d68 <get_B6>
  uint32_t addr = 0x000000;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	607b      	str	r3, [r7, #4]
  for(int i = 0; i < 3; i++){
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f40:	e00f      	b.n	8000f62 <main+0x6e>
	  if(BSP_QSPI_Erase_Block(addr + i * 0x010000) != QSPI_OK){
 8000f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f44:	041b      	lsls	r3, r3, #16
 8000f46:	461a      	mov	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fc49 	bl	80017e4 <BSP_QSPI_Erase_Block>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <main+0x68>
		  Error_Handler();
 8000f58:	f000 fb0c 	bl	8001574 <Error_Handler>
  for(int i = 0; i < 3; i++){
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	3301      	adds	r3, #1
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	ddec      	ble.n	8000f42 <main+0x4e>
	  }
  }

  uint32_t tone_addr = 0x000000;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 490; i++){
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
 8000f70:	e00f      	b.n	8000f92 <main+0x9e>
	  if(BSP_QSPI_Write((uint8_t *)B5, tone_addr, 45) != QSPI_OK){
 8000f72:	222d      	movs	r2, #45	; 0x2d
 8000f74:	6a39      	ldr	r1, [r7, #32]
 8000f76:	4851      	ldr	r0, [pc, #324]	; (80010bc <main+0x1c8>)
 8000f78:	f000 fbb6 	bl	80016e8 <BSP_QSPI_Write>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <main+0x92>
		  Error_Handler();
 8000f82:	f000 faf7 	bl	8001574 <Error_Handler>
	  }
	  tone_addr += 45;
 8000f86:	6a3b      	ldr	r3, [r7, #32]
 8000f88:	332d      	adds	r3, #45	; 0x2d
 8000f8a:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 490; i++){
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 8000f98:	dbeb      	blt.n	8000f72 <main+0x7e>
  }
  for(int i = 0; i < 525; i++){
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
 8000f9e:	e00f      	b.n	8000fc0 <main+0xcc>
	  if(BSP_QSPI_Write((uint8_t *)C6, tone_addr, 42) != QSPI_OK){
 8000fa0:	222a      	movs	r2, #42	; 0x2a
 8000fa2:	6a39      	ldr	r1, [r7, #32]
 8000fa4:	4846      	ldr	r0, [pc, #280]	; (80010c0 <main+0x1cc>)
 8000fa6:	f000 fb9f 	bl	80016e8 <BSP_QSPI_Write>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <main+0xc0>
		  Error_Handler();
 8000fb0:	f000 fae0 	bl	8001574 <Error_Handler>
	  }
	  tone_addr += 42;
 8000fb4:	6a3b      	ldr	r3, [r7, #32]
 8000fb6:	332a      	adds	r3, #42	; 0x2a
 8000fb8:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 525; i++){
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	61bb      	str	r3, [r7, #24]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000fc6:	ddeb      	ble.n	8000fa0 <main+0xac>
  }
  for(int i = 0; i < 648; i++){
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	e00f      	b.n	8000fee <main+0xfa>
	  if(BSP_QSPI_Write((uint8_t *)E6, tone_addr, 34) != QSPI_OK){
 8000fce:	2222      	movs	r2, #34	; 0x22
 8000fd0:	6a39      	ldr	r1, [r7, #32]
 8000fd2:	483c      	ldr	r0, [pc, #240]	; (80010c4 <main+0x1d0>)
 8000fd4:	f000 fb88 	bl	80016e8 <BSP_QSPI_Write>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <main+0xee>
		  Error_Handler();
 8000fde:	f000 fac9 	bl	8001574 <Error_Handler>
	  }
	  tone_addr += 34;
 8000fe2:	6a3b      	ldr	r3, [r7, #32]
 8000fe4:	3322      	adds	r3, #34	; 0x22
 8000fe6:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 648; i++){
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	3301      	adds	r3, #1
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f5b3 7f22 	cmp.w	r3, #648	; 0x288
 8000ff4:	dbeb      	blt.n	8000fce <main+0xda>
  }
  tone_addr = 0x010266;
 8000ff6:	4b34      	ldr	r3, [pc, #208]	; (80010c8 <main+0x1d4>)
 8000ff8:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 787; i++){
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	e00f      	b.n	8001020 <main+0x12c>
	  if(BSP_QSPI_Write((uint8_t *)G6, tone_addr, 28) != QSPI_OK){
 8001000:	221c      	movs	r2, #28
 8001002:	6a39      	ldr	r1, [r7, #32]
 8001004:	4831      	ldr	r0, [pc, #196]	; (80010cc <main+0x1d8>)
 8001006:	f000 fb6f 	bl	80016e8 <BSP_QSPI_Write>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <main+0x120>
		  Error_Handler();
 8001010:	f000 fab0 	bl	8001574 <Error_Handler>
	  }
	  tone_addr += 28;
 8001014:	6a3b      	ldr	r3, [r7, #32]
 8001016:	331c      	adds	r3, #28
 8001018:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 787; i++){
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	3301      	adds	r3, #1
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	f240 3212 	movw	r2, #786	; 0x312
 8001026:	4293      	cmp	r3, r2
 8001028:	ddea      	ble.n	8001000 <main+0x10c>
  }
  tone_addr = 0x015888;
 800102a:	4b29      	ldr	r3, [pc, #164]	; (80010d0 <main+0x1dc>)
 800102c:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 882; i++){
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	e00f      	b.n	8001054 <main+0x160>
	  if(BSP_QSPI_Write((uint8_t *)A6, tone_addr, 25) != QSPI_OK){
 8001034:	2219      	movs	r2, #25
 8001036:	6a39      	ldr	r1, [r7, #32]
 8001038:	4826      	ldr	r0, [pc, #152]	; (80010d4 <main+0x1e0>)
 800103a:	f000 fb55 	bl	80016e8 <BSP_QSPI_Write>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <main+0x154>
		  Error_Handler();
 8001044:	f000 fa96 	bl	8001574 <Error_Handler>
	  }
	  tone_addr += 25;
 8001048:	6a3b      	ldr	r3, [r7, #32]
 800104a:	3319      	adds	r3, #25
 800104c:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 882; i++){
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	3301      	adds	r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f240 3271 	movw	r2, #881	; 0x371
 800105a:	4293      	cmp	r3, r2
 800105c:	ddea      	ble.n	8001034 <main+0x140>
  }
  for(int i = 0; i < 1002; i++){
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	e00f      	b.n	8001084 <main+0x190>
	  if(BSP_QSPI_Write((uint8_t *)B6, tone_addr, 22) != QSPI_OK){
 8001064:	2216      	movs	r2, #22
 8001066:	6a39      	ldr	r1, [r7, #32]
 8001068:	481b      	ldr	r0, [pc, #108]	; (80010d8 <main+0x1e4>)
 800106a:	f000 fb3d 	bl	80016e8 <BSP_QSPI_Write>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <main+0x184>
		  Error_Handler();
 8001074:	f000 fa7e 	bl	8001574 <Error_Handler>
	  }
	  tone_addr += 22;
 8001078:	6a3b      	ldr	r3, [r7, #32]
 800107a:	3316      	adds	r3, #22
 800107c:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 1002; i++){
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	3301      	adds	r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800108a:	4293      	cmp	r3, r2
 800108c:	ddea      	ble.n	8001064 <main+0x170>
  }

  //Read the data
  if(BSP_QSPI_Read((uint8_t *)play, 0x00000000, 22050) != QSPI_OK){
 800108e:	f245 6222 	movw	r2, #22050	; 0x5622
 8001092:	2100      	movs	r1, #0
 8001094:	4811      	ldr	r0, [pc, #68]	; (80010dc <main+0x1e8>)
 8001096:	f000 fae1 	bl	800165c <BSP_QSPI_Read>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <main+0x1b0>
	  Error_Handler();
 80010a0:	f000 fa68 	bl	8001574 <Error_Handler>
  }

  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 80010a4:	2308      	movs	r3, #8
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	f245 6322 	movw	r3, #22050	; 0x5622
 80010ac:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <main+0x1e8>)
 80010ae:	2100      	movs	r1, #0
 80010b0:	480b      	ldr	r0, [pc, #44]	; (80010e0 <main+0x1ec>)
 80010b2:	f001 f9dd 	bl	8002470 <HAL_DAC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <main+0x1c2>
 80010b8:	2000575c 	.word	0x2000575c
 80010bc:	200056e4 	.word	0x200056e4
 80010c0:	20005714 	.word	0x20005714
 80010c4:	20005660 	.word	0x20005660
 80010c8:	00010266 	.word	0x00010266
 80010cc:	20005740 	.word	0x20005740
 80010d0:	00015888 	.word	0x00015888
 80010d4:	200057ec 	.word	0x200057ec
 80010d8:	20005684 	.word	0x20005684
 80010dc:	20000028 	.word	0x20000028
 80010e0:	2000564c 	.word	0x2000564c

080010e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b096      	sub	sp, #88	; 0x58
 80010e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	2244      	movs	r2, #68	; 0x44
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f004 f9ac 	bl	8005450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f8:	463b      	mov	r3, r7
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001106:	f44f 7000 	mov.w	r0, #512	; 0x200
 800110a:	f002 f949 	bl	80033a0 <HAL_PWREx_ControlVoltageScaling>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001114:	f000 fa2e 	bl	8001574 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001118:	2310      	movs	r3, #16
 800111a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800111c:	2301      	movs	r3, #1
 800111e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001124:	2360      	movs	r3, #96	; 0x60
 8001126:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001128:	2302      	movs	r3, #2
 800112a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800112c:	2301      	movs	r3, #1
 800112e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001130:	2301      	movs	r3, #1
 8001132:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001134:	2328      	movs	r3, #40	; 0x28
 8001136:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001138:	2307      	movs	r3, #7
 800113a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800113c:	2302      	movs	r3, #2
 800113e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001140:	2302      	movs	r3, #2
 8001142:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4618      	mov	r0, r3
 800114a:	f002 fe5f 	bl	8003e0c <HAL_RCC_OscConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001154:	f000 fa0e 	bl	8001574 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001158:	230f      	movs	r3, #15
 800115a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115c:	2303      	movs	r3, #3
 800115e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800116c:	463b      	mov	r3, r7
 800116e:	2104      	movs	r1, #4
 8001170:	4618      	mov	r0, r3
 8001172:	f003 fa31 	bl	80045d8 <HAL_RCC_ClockConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800117c:	f000 f9fa 	bl	8001574 <Error_Handler>
  }
}
 8001180:	bf00      	nop
 8001182:	3758      	adds	r7, #88	; 0x58
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	2224      	movs	r2, #36	; 0x24
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f004 f95b 	bl	8005450 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <MX_DAC1_Init+0x5c>)
 800119c:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <MX_DAC1_Init+0x60>)
 800119e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80011a0:	4810      	ldr	r0, [pc, #64]	; (80011e4 <MX_DAC1_Init+0x5c>)
 80011a2:	f001 f943 	bl	800242c <HAL_DAC_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80011ac:	f000 f9e2 	bl	8001574 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80011b4:	2324      	movs	r3, #36	; 0x24
 80011b6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	2200      	movs	r2, #0
 80011c8:	4619      	mov	r1, r3
 80011ca:	4806      	ldr	r0, [pc, #24]	; (80011e4 <MX_DAC1_Init+0x5c>)
 80011cc:	f001 fa30 	bl	8002630 <HAL_DAC_ConfigChannel>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80011d6:	f000 f9cd 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	3728      	adds	r7, #40	; 0x28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2000564c 	.word	0x2000564c
 80011e8:	40007400 	.word	0x40007400

080011ec <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_QUADSPI_Init+0x44>)
 80011f2:	4a10      	ldr	r2, [pc, #64]	; (8001234 <MX_QUADSPI_Init+0x48>)
 80011f4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_QUADSPI_Init+0x44>)
 80011f8:	22ff      	movs	r2, #255	; 0xff
 80011fa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_QUADSPI_Init+0x44>)
 80011fe:	2201      	movs	r2, #1
 8001200:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <MX_QUADSPI_Init+0x44>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_QUADSPI_Init+0x44>)
 800120a:	2201      	movs	r2, #1
 800120c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <MX_QUADSPI_Init+0x44>)
 8001210:	2200      	movs	r2, #0
 8001212:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_QUADSPI_Init+0x44>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_QUADSPI_Init+0x44>)
 800121c:	f002 f916 	bl	800344c <HAL_QSPI_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001226:	f000 f9a5 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200057a8 	.word	0x200057a8
 8001234:	a0001000 	.word	0xa0001000

08001238 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123e:	f107 0310 	add.w	r3, r7, #16
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001258:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800125c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <MX_TIM2_Init+0x98>)
 800126c:	f240 7216 	movw	r2, #1814	; 0x716
 8001270:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <MX_TIM2_Init+0x98>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800127e:	4814      	ldr	r0, [pc, #80]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001280:	f003 fbcc 	bl	8004a1c <HAL_TIM_Base_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800128a:	f000 f973 	bl	8001574 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001292:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	4619      	mov	r1, r3
 800129a:	480d      	ldr	r0, [pc, #52]	; (80012d0 <MX_TIM2_Init+0x98>)
 800129c:	f003 fda5 	bl	8004dea <HAL_TIM_ConfigClockSource>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012a6:	f000 f965 	bl	8001574 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012aa:	2320      	movs	r3, #32
 80012ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4806      	ldr	r0, [pc, #24]	; (80012d0 <MX_TIM2_Init+0x98>)
 80012b8:	f003 ffba 	bl	8005230 <HAL_TIMEx_MasterConfigSynchronization>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012c2:	f000 f957 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	3720      	adds	r7, #32
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000575c 	.word	0x2000575c

080012d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_DMA_Init+0x38>)
 80012dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012de:	4a0b      	ldr	r2, [pc, #44]	; (800130c <MX_DMA_Init+0x38>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6493      	str	r3, [r2, #72]	; 0x48
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_DMA_Init+0x38>)
 80012e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	200d      	movs	r0, #13
 80012f8:	f001 f86e 	bl	80023d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80012fc:	200d      	movs	r0, #13
 80012fe:	f001 f887 	bl	8002410 <HAL_NVIC_EnableIRQ>

}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000

08001310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <MX_GPIO_Init+0xc4>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	4a2a      	ldr	r2, [pc, #168]	; (80013d4 <MX_GPIO_Init+0xc4>)
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001332:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <MX_GPIO_Init+0xc4>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <MX_GPIO_Init+0xc4>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	4a24      	ldr	r2, [pc, #144]	; (80013d4 <MX_GPIO_Init+0xc4>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134a:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <MX_GPIO_Init+0xc4>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <MX_GPIO_Init+0xc4>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	4a1e      	ldr	r2, [pc, #120]	; (80013d4 <MX_GPIO_Init+0xc4>)
 800135c:	f043 0310 	orr.w	r3, r3, #16
 8001360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <MX_GPIO_Init+0xc4>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	f003 0310 	and.w	r3, r3, #16
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <MX_GPIO_Init+0xc4>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <MX_GPIO_Init+0xc4>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <MX_GPIO_Init+0xc4>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800138c:	4812      	ldr	r0, [pc, #72]	; (80013d8 <MX_GPIO_Init+0xc8>)
 800138e:	f001 ffc7 	bl	8003320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001392:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001398:	4b10      	ldr	r3, [pc, #64]	; (80013dc <MX_GPIO_Init+0xcc>)
 800139a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	480e      	ldr	r0, [pc, #56]	; (80013e0 <MX_GPIO_Init+0xd0>)
 80013a8:	f001 fd1c 	bl	8002de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	4804      	ldr	r0, [pc, #16]	; (80013d8 <MX_GPIO_Init+0xc8>)
 80013c6:	f001 fd0d 	bl	8002de4 <HAL_GPIO_Init>

}
 80013ca:	bf00      	nop
 80013cc:	3728      	adds	r7, #40	; 0x28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40021000 	.word	0x40021000
 80013d8:	48000400 	.word	0x48000400
 80013dc:	10110000 	.word	0x10110000
 80013e0:	48000800 	.word	0x48000800

080013e4 <HAL_DAC_ConvCpltCallbackCh1>:

/* USER CODE BEGIN 4 */

void HAL_DAC_ConvCpltCallbackCh1 (DAC_HandleTypeDef * hdac){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af02      	add	r7, sp, #8
 80013ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80013ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013f0:	4850      	ldr	r0, [pc, #320]	; (8001534 <HAL_DAC_ConvCpltCallbackCh1+0x150>)
 80013f2:	f001 ffad 	bl	8003350 <HAL_GPIO_TogglePin>

	if(counter == 0){
 80013f6:	4b50      	ldr	r3, [pc, #320]	; (8001538 <HAL_DAC_ConvCpltCallbackCh1+0x154>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d113      	bne.n	8001426 <HAL_DAC_ConvCpltCallbackCh1+0x42>
		if(BSP_QSPI_Read((uint8_t *)play, 0x000000, 22050) != QSPI_OK){
 80013fe:	f245 6222 	movw	r2, #22050	; 0x5622
 8001402:	2100      	movs	r1, #0
 8001404:	484d      	ldr	r0, [pc, #308]	; (800153c <HAL_DAC_ConvCpltCallbackCh1+0x158>)
 8001406:	f000 f929 	bl	800165c <BSP_QSPI_Read>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_DAC_ConvCpltCallbackCh1+0x30>
			  Error_Handler();
 8001410:	f000 f8b0 	bl	8001574 <Error_Handler>
		  }
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 8001414:	2308      	movs	r3, #8
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	f245 6322 	movw	r3, #22050	; 0x5622
 800141c:	4a47      	ldr	r2, [pc, #284]	; (800153c <HAL_DAC_ConvCpltCallbackCh1+0x158>)
 800141e:	2100      	movs	r1, #0
 8001420:	4847      	ldr	r0, [pc, #284]	; (8001540 <HAL_DAC_ConvCpltCallbackCh1+0x15c>)
 8001422:	f001 f825 	bl	8002470 <HAL_DAC_Start_DMA>
	}
	if(counter == 1){
 8001426:	4b44      	ldr	r3, [pc, #272]	; (8001538 <HAL_DAC_ConvCpltCallbackCh1+0x154>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d114      	bne.n	8001458 <HAL_DAC_ConvCpltCallbackCh1+0x74>
		if(BSP_QSPI_Read((uint8_t *)play, 0x005622, 22050) != QSPI_OK){
 800142e:	f245 6222 	movw	r2, #22050	; 0x5622
 8001432:	f245 6122 	movw	r1, #22050	; 0x5622
 8001436:	4841      	ldr	r0, [pc, #260]	; (800153c <HAL_DAC_ConvCpltCallbackCh1+0x158>)
 8001438:	f000 f910 	bl	800165c <BSP_QSPI_Read>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_DAC_ConvCpltCallbackCh1+0x62>
			  Error_Handler();
 8001442:	f000 f897 	bl	8001574 <Error_Handler>
		  }
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 8001446:	2308      	movs	r3, #8
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	f245 6322 	movw	r3, #22050	; 0x5622
 800144e:	4a3b      	ldr	r2, [pc, #236]	; (800153c <HAL_DAC_ConvCpltCallbackCh1+0x158>)
 8001450:	2100      	movs	r1, #0
 8001452:	483b      	ldr	r0, [pc, #236]	; (8001540 <HAL_DAC_ConvCpltCallbackCh1+0x15c>)
 8001454:	f001 f80c 	bl	8002470 <HAL_DAC_Start_DMA>
	}
	if(counter == 2){
 8001458:	4b37      	ldr	r3, [pc, #220]	; (8001538 <HAL_DAC_ConvCpltCallbackCh1+0x154>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d114      	bne.n	800148a <HAL_DAC_ConvCpltCallbackCh1+0xa6>
		if(BSP_QSPI_Read((uint8_t *)play, 0x00AC44, 22050) != QSPI_OK){
 8001460:	f245 6222 	movw	r2, #22050	; 0x5622
 8001464:	f64a 4144 	movw	r1, #44100	; 0xac44
 8001468:	4834      	ldr	r0, [pc, #208]	; (800153c <HAL_DAC_ConvCpltCallbackCh1+0x158>)
 800146a:	f000 f8f7 	bl	800165c <BSP_QSPI_Read>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <HAL_DAC_ConvCpltCallbackCh1+0x94>
			  Error_Handler();
 8001474:	f000 f87e 	bl	8001574 <Error_Handler>
		  }
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 8001478:	2308      	movs	r3, #8
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	f245 6322 	movw	r3, #22050	; 0x5622
 8001480:	4a2e      	ldr	r2, [pc, #184]	; (800153c <HAL_DAC_ConvCpltCallbackCh1+0x158>)
 8001482:	2100      	movs	r1, #0
 8001484:	482e      	ldr	r0, [pc, #184]	; (8001540 <HAL_DAC_ConvCpltCallbackCh1+0x15c>)
 8001486:	f000 fff3 	bl	8002470 <HAL_DAC_Start_DMA>
	}
	if(counter == 3){
 800148a:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <HAL_DAC_ConvCpltCallbackCh1+0x154>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b03      	cmp	r3, #3
 8001490:	d113      	bne.n	80014ba <HAL_DAC_ConvCpltCallbackCh1+0xd6>
		if(BSP_QSPI_Read((uint8_t *)play, 0x010266, 22050) != QSPI_OK){
 8001492:	f245 6222 	movw	r2, #22050	; 0x5622
 8001496:	492b      	ldr	r1, [pc, #172]	; (8001544 <HAL_DAC_ConvCpltCallbackCh1+0x160>)
 8001498:	4828      	ldr	r0, [pc, #160]	; (800153c <HAL_DAC_ConvCpltCallbackCh1+0x158>)
 800149a:	f000 f8df 	bl	800165c <BSP_QSPI_Read>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <HAL_DAC_ConvCpltCallbackCh1+0xc4>
			  Error_Handler();
 80014a4:	f000 f866 	bl	8001574 <Error_Handler>
		  }
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 80014a8:	2308      	movs	r3, #8
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	f245 6322 	movw	r3, #22050	; 0x5622
 80014b0:	4a22      	ldr	r2, [pc, #136]	; (800153c <HAL_DAC_ConvCpltCallbackCh1+0x158>)
 80014b2:	2100      	movs	r1, #0
 80014b4:	4822      	ldr	r0, [pc, #136]	; (8001540 <HAL_DAC_ConvCpltCallbackCh1+0x15c>)
 80014b6:	f000 ffdb 	bl	8002470 <HAL_DAC_Start_DMA>
	}
	if(counter == 4){
 80014ba:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <HAL_DAC_ConvCpltCallbackCh1+0x154>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b04      	cmp	r3, #4
 80014c0:	d113      	bne.n	80014ea <HAL_DAC_ConvCpltCallbackCh1+0x106>
		if(BSP_QSPI_Read((uint8_t *)play, 0x015888, 22050) != QSPI_OK){
 80014c2:	f245 6222 	movw	r2, #22050	; 0x5622
 80014c6:	4920      	ldr	r1, [pc, #128]	; (8001548 <HAL_DAC_ConvCpltCallbackCh1+0x164>)
 80014c8:	481c      	ldr	r0, [pc, #112]	; (800153c <HAL_DAC_ConvCpltCallbackCh1+0x158>)
 80014ca:	f000 f8c7 	bl	800165c <BSP_QSPI_Read>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_DAC_ConvCpltCallbackCh1+0xf4>
			  Error_Handler();
 80014d4:	f000 f84e 	bl	8001574 <Error_Handler>
		  }
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 80014d8:	2308      	movs	r3, #8
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	f245 6322 	movw	r3, #22050	; 0x5622
 80014e0:	4a16      	ldr	r2, [pc, #88]	; (800153c <HAL_DAC_ConvCpltCallbackCh1+0x158>)
 80014e2:	2100      	movs	r1, #0
 80014e4:	4816      	ldr	r0, [pc, #88]	; (8001540 <HAL_DAC_ConvCpltCallbackCh1+0x15c>)
 80014e6:	f000 ffc3 	bl	8002470 <HAL_DAC_Start_DMA>
	}
	if(counter == 5){
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <HAL_DAC_ConvCpltCallbackCh1+0x154>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b05      	cmp	r3, #5
 80014f0:	d116      	bne.n	8001520 <HAL_DAC_ConvCpltCallbackCh1+0x13c>
		if(BSP_QSPI_Read((uint8_t *)play, 0x01AEAA, 22050) != QSPI_OK){
 80014f2:	f245 6222 	movw	r2, #22050	; 0x5622
 80014f6:	4915      	ldr	r1, [pc, #84]	; (800154c <HAL_DAC_ConvCpltCallbackCh1+0x168>)
 80014f8:	4810      	ldr	r0, [pc, #64]	; (800153c <HAL_DAC_ConvCpltCallbackCh1+0x158>)
 80014fa:	f000 f8af 	bl	800165c <BSP_QSPI_Read>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <HAL_DAC_ConvCpltCallbackCh1+0x124>
			  Error_Handler();
 8001504:	f000 f836 	bl	8001574 <Error_Handler>
		  }
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 8001508:	2308      	movs	r3, #8
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	f245 6322 	movw	r3, #22050	; 0x5622
 8001510:	4a0a      	ldr	r2, [pc, #40]	; (800153c <HAL_DAC_ConvCpltCallbackCh1+0x158>)
 8001512:	2100      	movs	r1, #0
 8001514:	480a      	ldr	r0, [pc, #40]	; (8001540 <HAL_DAC_ConvCpltCallbackCh1+0x15c>)
 8001516:	f000 ffab 	bl	8002470 <HAL_DAC_Start_DMA>
		counter=0;
 800151a:	4b07      	ldr	r3, [pc, #28]	; (8001538 <HAL_DAC_ConvCpltCallbackCh1+0x154>)
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
	}
	counter++;
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_DAC_ConvCpltCallbackCh1+0x154>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	3301      	adds	r3, #1
 8001526:	b2da      	uxtb	r2, r3
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <HAL_DAC_ConvCpltCallbackCh1+0x154>)
 800152a:	701a      	strb	r2, [r3, #0]
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	48000400 	.word	0x48000400
 8001538:	2000564a 	.word	0x2000564a
 800153c:	20000028 	.word	0x20000028
 8001540:	2000564c 	.word	0x2000564c
 8001544:	00010266 	.word	0x00010266
 8001548:	00015888 	.word	0x00015888
 800154c:	0001aeaa 	.word	0x0001aeaa

08001550 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d101      	bne.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001562:	f000 fe3d 	bl	80021e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40014800 	.word	0x40014800

08001574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	__BKPT();
 8001578:	be00      	bkpt	0x0000

  /* USER CODE END Error_Handler_Debug */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 800158a:	4b32      	ldr	r3, [pc, #200]	; (8001654 <BSP_QSPI_Init+0xd0>)
 800158c:	4a32      	ldr	r2, [pc, #200]	; (8001658 <BSP_QSPI_Init+0xd4>)
 800158e:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8001590:	4830      	ldr	r0, [pc, #192]	; (8001654 <BSP_QSPI_Init+0xd0>)
 8001592:	f001 ffd1 	bl	8003538 <HAL_QSPI_DeInit>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e054      	b.n	800164a <BSP_QSPI_Init+0xc6>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 80015a0:	f000 f964 	bl	800186c <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 2; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 26.67MHz */
 80015a4:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <BSP_QSPI_Init+0xd0>)
 80015a6:	2202      	movs	r2, #2
 80015a8:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 80015aa:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <BSP_QSPI_Init+0xd0>)
 80015ac:	2204      	movs	r2, #4
 80015ae:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80015b0:	4b28      	ldr	r3, [pc, #160]	; (8001654 <BSP_QSPI_Init+0xd0>)
 80015b2:	2210      	movs	r2, #16
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80015ba:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	fa93 f3a3 	rbit	r3, r3
 80015c2:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 80015ce:	2320      	movs	r3, #32
 80015d0:	e003      	b.n	80015da <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	fab3 f383 	clz	r3, r3
 80015d8:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25R6435F_FLASH_SIZE) - 1;
 80015da:	3b01      	subs	r3, #1
 80015dc:	461a      	mov	r2, r3
 80015de:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <BSP_QSPI_Init+0xd0>)
 80015e0:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80015e2:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <BSP_QSPI_Init+0xd0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <BSP_QSPI_Init+0xd0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80015ee:	4819      	ldr	r0, [pc, #100]	; (8001654 <BSP_QSPI_Init+0xd0>)
 80015f0:	f001 ff2c 	bl	800344c <HAL_QSPI_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e025      	b.n	800164a <BSP_QSPI_Init+0xc6>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 80015fe:	4815      	ldr	r0, [pc, #84]	; (8001654 <BSP_QSPI_Init+0xd0>)
 8001600:	f000 f974 	bl	80018ec <QSPI_ResetMemory>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 800160a:	2304      	movs	r3, #4
 800160c:	e01d      	b.n	800164a <BSP_QSPI_Init+0xc6>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&QSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 800160e:	2101      	movs	r1, #1
 8001610:	4810      	ldr	r0, [pc, #64]	; (8001654 <BSP_QSPI_Init+0xd0>)
 8001612:	f000 fa35 	bl	8001a80 <QSPI_QuadMode>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <BSP_QSPI_Init+0x9c>
  {
    return QSPI_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e014      	b.n	800164a <BSP_QSPI_Init+0xc6>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&QSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 8001620:	2101      	movs	r1, #1
 8001622:	480c      	ldr	r0, [pc, #48]	; (8001654 <BSP_QSPI_Init+0xd0>)
 8001624:	f000 fad4 	bl	8001bd0 <QSPI_HighPerfMode>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <BSP_QSPI_Init+0xae>
  {
    return QSPI_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e00b      	b.n	800164a <BSP_QSPI_Init+0xc6>
  }
  
  /* Re-configure the clock for the high performance mode */
  QSPIHandle.Init.ClockPrescaler = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <BSP_QSPI_Init+0xd0>)
 8001634:	2201      	movs	r2, #1
 8001636:	605a      	str	r2, [r3, #4]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8001638:	4806      	ldr	r0, [pc, #24]	; (8001654 <BSP_QSPI_Init+0xd0>)
 800163a:	f001 ff07 	bl	800344c <HAL_QSPI_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <BSP_QSPI_Init+0xc4>
  {
    return QSPI_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <BSP_QSPI_Init+0xc6>
  }

  return QSPI_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20005808 	.word	0x20005808
 8001658:	a0001000 	.word	0xa0001000

0800165c <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b092      	sub	sp, #72	; 0x48
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 8001668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction        = QUAD_INOUT_READ_CMD;
 800166e:	23eb      	movs	r3, #235	; 0xeb
 8001670:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = QSPI_ADDRESS_4_LINES;
 8001672:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = QSPI_ADDRESS_24_BITS;
 8001678:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800167c:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = ReadAddr;
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 8001682:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001686:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytes     = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 800168c:	23aa      	movs	r3, #170	; 0xaa
 800168e:	61bb      	str	r3, [r7, #24]
  sCommand.DataMode           = QSPI_DATA_4_LINES;
 8001690:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001694:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles        = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8001696:	2304      	movs	r3, #4
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData             = Size;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode            = QSPI_DDR_MODE_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 80016a2:	2300      	movs	r3, #0
 80016a4:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 80016a6:	2300      	movs	r3, #0
 80016a8:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016aa:	f107 0310 	add.w	r3, r7, #16
 80016ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b2:	4619      	mov	r1, r3
 80016b4:	480b      	ldr	r0, [pc, #44]	; (80016e4 <BSP_QSPI_Read+0x88>)
 80016b6:	f001 ff63 	bl	8003580 <HAL_QSPI_Command>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <BSP_QSPI_Read+0x68>
  {
    return QSPI_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e00b      	b.n	80016dc <BSP_QSPI_Read+0x80>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c8:	68f9      	ldr	r1, [r7, #12]
 80016ca:	4806      	ldr	r0, [pc, #24]	; (80016e4 <BSP_QSPI_Read+0x88>)
 80016cc:	f002 f84d 	bl	800376a <HAL_QSPI_Receive>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <BSP_QSPI_Read+0x80>
  }

  return QSPI_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3748      	adds	r7, #72	; 0x48
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20005808 	.word	0x20005808

080016e8 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b096      	sub	sp, #88	; 0x58
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80016fc:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 80016fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	429a      	cmp	r2, r3
 8001704:	d901      	bls.n	800170a <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4413      	add	r3, r2
 8001714:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = QUAD_PAGE_PROG_CMD;
 800171c:	2338      	movs	r3, #56	; 0x38
 800171e:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001720:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001724:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001726:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800172a:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800172c:	2300      	movs	r3, #0
 800172e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8001730:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001734:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800173e:	2300      	movs	r3, #0
 8001740:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001742:	2300      	movs	r3, #0
 8001744:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8001746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001748:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 800174a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800174c:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 800174e:	4824      	ldr	r0, [pc, #144]	; (80017e0 <BSP_QSPI_Write+0xf8>)
 8001750:	f000 f910 	bl	8001974 <QSPI_WriteEnable>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e03b      	b.n	80017d6 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	f241 3288 	movw	r2, #5000	; 0x1388
 8001766:	4619      	mov	r1, r3
 8001768:	481d      	ldr	r0, [pc, #116]	; (80017e0 <BSP_QSPI_Write+0xf8>)
 800176a:	f001 ff09 	bl	8003580 <HAL_QSPI_Command>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e02e      	b.n	80017d6 <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001778:	f241 3288 	movw	r2, #5000	; 0x1388
 800177c:	68f9      	ldr	r1, [r7, #12]
 800177e:	4818      	ldr	r0, [pc, #96]	; (80017e0 <BSP_QSPI_Write+0xf8>)
 8001780:	f001 ff5c 	bl	800363c <HAL_QSPI_Transmit>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e023      	b.n	80017d6 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800178e:	f241 3188 	movw	r1, #5000	; 0x1388
 8001792:	4813      	ldr	r0, [pc, #76]	; (80017e0 <BSP_QSPI_Write+0xf8>)
 8001794:	f000 f93a 	bl	8001a0c <QSPI_AutoPollingMemReady>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e019      	b.n	80017d6 <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 80017a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80017a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017a6:	4413      	add	r3, r2
 80017a8:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ae:	4413      	add	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 80017b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80017b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d203      	bcs.n	80017c6 <BSP_QSPI_Write+0xde>
 80017be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	e001      	b.n	80017ca <BSP_QSPI_Write+0xe2>
 80017c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ca:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 80017cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80017ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d3b8      	bcc.n	8001746 <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3758      	adds	r7, #88	; 0x58
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20005808 	.word	0x20005808

080017e4 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b090      	sub	sp, #64	; 0x40
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80017ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017f0:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = BLOCK_ERASE_CMD;
 80017f2:	23d8      	movs	r3, #216	; 0xd8
 80017f4:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 80017f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 80017fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001800:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001806:	2300      	movs	r3, #0
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 800180a:	2300      	movs	r3, #0
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001816:	2300      	movs	r3, #0
 8001818:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800181a:	2300      	movs	r3, #0
 800181c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 800181e:	4812      	ldr	r0, [pc, #72]	; (8001868 <BSP_QSPI_Erase_Block+0x84>)
 8001820:	f000 f8a8 	bl	8001974 <QSPI_WriteEnable>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e017      	b.n	800185e <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	f241 3288 	movw	r2, #5000	; 0x1388
 8001836:	4619      	mov	r1, r3
 8001838:	480b      	ldr	r0, [pc, #44]	; (8001868 <BSP_QSPI_Erase_Block+0x84>)
 800183a:	f001 fea1 	bl	8003580 <HAL_QSPI_Command>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e00a      	b.n	800185e <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 8001848:	f640 51ac 	movw	r1, #3500	; 0xdac
 800184c:	4806      	ldr	r0, [pc, #24]	; (8001868 <BSP_QSPI_Erase_Block+0x84>)
 800184e:	f000 f8dd 	bl	8001a0c <QSPI_AutoPollingMemReady>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3740      	adds	r7, #64	; 0x40
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20005808 	.word	0x20005808

0800186c <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 8001872:	4b1c      	ldr	r3, [pc, #112]	; (80018e4 <BSP_QSPI_MspInit+0x78>)
 8001874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001876:	4a1b      	ldr	r2, [pc, #108]	; (80018e4 <BSP_QSPI_MspInit+0x78>)
 8001878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187c:	6513      	str	r3, [r2, #80]	; 0x50
 800187e:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <BSP_QSPI_MspInit+0x78>)
 8001880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 800188a:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <BSP_QSPI_MspInit+0x78>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a15      	ldr	r2, [pc, #84]	; (80018e4 <BSP_QSPI_MspInit+0x78>)
 8001890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <BSP_QSPI_MspInit+0x78>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <BSP_QSPI_MspInit+0x78>)
 800189c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <BSP_QSPI_MspInit+0x78>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a6:	4a0f      	ldr	r2, [pc, #60]	; (80018e4 <BSP_QSPI_MspInit+0x78>)
 80018a8:	f043 0310 	orr.w	r3, r3, #16
 80018ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ae:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <BSP_QSPI_MspInit+0x78>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b2:	f003 0310 	and.w	r3, r3, #16
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 80018ba:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80018be:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80018cc:	230a      	movs	r3, #10
 80018ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	4619      	mov	r1, r3
 80018d6:	4804      	ldr	r0, [pc, #16]	; (80018e8 <BSP_QSPI_MspInit+0x7c>)
 80018d8:	f001 fa84 	bl	8002de4 <HAL_GPIO_Init>
}
 80018dc:	bf00      	nop
 80018de:	3720      	adds	r7, #32
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40021000 	.word	0x40021000
 80018e8:	48001000 	.word	0x48001000

080018ec <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b090      	sub	sp, #64	; 0x40
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80018f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f8:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 80018fa:	2366      	movs	r3, #102	; 0x66
 80018fc:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80018fe:	2300      	movs	r3, #0
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001902:	2300      	movs	r3, #0
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8001906:	2300      	movs	r3, #0
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001912:	2300      	movs	r3, #0
 8001914:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001916:	2300      	movs	r3, #0
 8001918:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800191a:	f107 0308 	add.w	r3, r7, #8
 800191e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001922:	4619      	mov	r1, r3
 8001924:	4812      	ldr	r0, [pc, #72]	; (8001970 <QSPI_ResetMemory+0x84>)
 8001926:	f001 fe2b 	bl	8003580 <HAL_QSPI_Command>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e019      	b.n	8001968 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8001934:	2399      	movs	r3, #153	; 0x99
 8001936:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001938:	f107 0308 	add.w	r3, r7, #8
 800193c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001940:	4619      	mov	r1, r3
 8001942:	480b      	ldr	r0, [pc, #44]	; (8001970 <QSPI_ResetMemory+0x84>)
 8001944:	f001 fe1c 	bl	8003580 <HAL_QSPI_Command>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e00a      	b.n	8001968 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001952:	f241 3188 	movw	r1, #5000	; 0x1388
 8001956:	4806      	ldr	r0, [pc, #24]	; (8001970 <QSPI_ResetMemory+0x84>)
 8001958:	f000 f858 	bl	8001a0c <QSPI_AutoPollingMemReady>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3740      	adds	r7, #64	; 0x40
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20005808 	.word	0x20005808

08001974 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b096      	sub	sp, #88	; 0x58
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800197c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001980:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8001982:	2306      	movs	r3, #6
 8001984:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001986:	2300      	movs	r3, #0
 8001988:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800198a:	2300      	movs	r3, #0
 800198c:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 800198e:	2300      	movs	r3, #0
 8001990:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001996:	2300      	movs	r3, #0
 8001998:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800199a:	2300      	movs	r3, #0
 800199c:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800199e:	2300      	movs	r3, #0
 80019a0:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80019a2:	f107 0320 	add.w	r3, r7, #32
 80019a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019aa:	4619      	mov	r1, r3
 80019ac:	4816      	ldr	r0, [pc, #88]	; (8001a08 <QSPI_WriteEnable+0x94>)
 80019ae:	f001 fde7 	bl	8003580 <HAL_QSPI_Command>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e020      	b.n	80019fe <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = MX25R6435F_SR_WEL;
 80019bc:	2302      	movs	r3, #2
 80019be:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WEL;
 80019c0:	2302      	movs	r3, #2
 80019c2:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 80019c8:	2301      	movs	r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 80019cc:	2310      	movs	r3, #16
 80019ce:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80019d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019d4:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 80019d6:	2305      	movs	r3, #5
 80019d8:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 80019da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019de:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80019e0:	f107 0208 	add.w	r2, r7, #8
 80019e4:	f107 0120 	add.w	r1, r7, #32
 80019e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80019ec:	4806      	ldr	r0, [pc, #24]	; (8001a08 <QSPI_WriteEnable+0x94>)
 80019ee:	f001 ff5e 	bl	80038ae <HAL_QSPI_AutoPolling>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e000      	b.n	80019fe <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3758      	adds	r7, #88	; 0x58
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20005808 	.word	0x20005808

08001a0c <QSPI_AutoPollingMemReady>:
  * @param  hqspi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b096      	sub	sp, #88	; 0x58
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001a16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001a1c:	2305      	movs	r3, #5
 8001a1e:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001a28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a2c:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001a36:	2300      	movs	r3, #0
 8001a38:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WIP;
 8001a42:	2301      	movs	r3, #1
 8001a44:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8001a4e:	2310      	movs	r3, #16
 8001a50:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001a52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a56:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 8001a58:	f107 0208 	add.w	r2, r7, #8
 8001a5c:	f107 0120 	add.w	r1, r7, #32
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	4806      	ldr	r0, [pc, #24]	; (8001a7c <QSPI_AutoPollingMemReady+0x70>)
 8001a64:	f001 ff23 	bl	80038ae <HAL_QSPI_AutoPolling>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3758      	adds	r7, #88	; 0x58
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20005808 	.word	0x20005808

08001a80 <QSPI_QuadMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b092      	sub	sp, #72	; 0x48
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a90:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001a92:	2305      	movs	r3, #5
 8001a94:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001a9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001aa2:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4842      	ldr	r0, [pc, #264]	; (8001bcc <QSPI_QuadMode+0x14c>)
 8001ac4:	f001 fd5c 	bl	8003580 <HAL_QSPI_Command>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <QSPI_QuadMode+0x52>
  {
    return QSPI_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e077      	b.n	8001bc2 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ad2:	f107 030f 	add.w	r3, r7, #15
 8001ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ada:	4619      	mov	r1, r3
 8001adc:	483b      	ldr	r0, [pc, #236]	; (8001bcc <QSPI_QuadMode+0x14c>)
 8001ade:	f001 fe44 	bl	800376a <HAL_QSPI_Receive>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <QSPI_QuadMode+0x6c>
  {
    return QSPI_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e06a      	b.n	8001bc2 <QSPI_QuadMode+0x142>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001aec:	4837      	ldr	r0, [pc, #220]	; (8001bcc <QSPI_QuadMode+0x14c>)
 8001aee:	f7ff ff41 	bl	8001974 <QSPI_WriteEnable>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <QSPI_QuadMode+0x7c>
  {
    return QSPI_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e062      	b.n	8001bc2 <QSPI_QuadMode+0x142>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d105      	bne.n	8001b0e <QSPI_QuadMode+0x8e>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	73fb      	strb	r3, [r7, #15]
 8001b0c:	e004      	b.n	8001b18 <QSPI_QuadMode+0x98>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b1c:	f107 0310 	add.w	r3, r7, #16
 8001b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b24:	4619      	mov	r1, r3
 8001b26:	4829      	ldr	r0, [pc, #164]	; (8001bcc <QSPI_QuadMode+0x14c>)
 8001b28:	f001 fd2a 	bl	8003580 <HAL_QSPI_Command>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <QSPI_QuadMode+0xb6>
  {
    return QSPI_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e045      	b.n	8001bc2 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b36:	f107 030f 	add.w	r3, r7, #15
 8001b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4822      	ldr	r0, [pc, #136]	; (8001bcc <QSPI_QuadMode+0x14c>)
 8001b42:	f001 fd7b 	bl	800363c <HAL_QSPI_Transmit>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <QSPI_QuadMode+0xd0>
  {
    return QSPI_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e038      	b.n	8001bc2 <QSPI_QuadMode+0x142>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001b50:	f241 3188 	movw	r1, #5000	; 0x1388
 8001b54:	481d      	ldr	r0, [pc, #116]	; (8001bcc <QSPI_QuadMode+0x14c>)
 8001b56:	f7ff ff59 	bl	8001a0c <QSPI_AutoPollingMemReady>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <QSPI_QuadMode+0xe4>
  {
    return QSPI_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e02e      	b.n	8001bc2 <QSPI_QuadMode+0x142>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8001b64:	2305      	movs	r3, #5
 8001b66:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b68:	f107 0310 	add.w	r3, r7, #16
 8001b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b70:	4619      	mov	r1, r3
 8001b72:	4816      	ldr	r0, [pc, #88]	; (8001bcc <QSPI_QuadMode+0x14c>)
 8001b74:	f001 fd04 	bl	8003580 <HAL_QSPI_Command>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <QSPI_QuadMode+0x102>
  {
    return QSPI_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e01f      	b.n	8001bc2 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b82:	f107 030f 	add.w	r3, r7, #15
 8001b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	480f      	ldr	r0, [pc, #60]	; (8001bcc <QSPI_QuadMode+0x14c>)
 8001b8e:	f001 fdec 	bl	800376a <HAL_QSPI_Receive>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <QSPI_QuadMode+0x11c>
  {
    return QSPI_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e012      	b.n	8001bc2 <QSPI_QuadMode+0x142>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d102      	bne.n	8001bac <QSPI_QuadMode+0x12c>
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d007      	beq.n	8001bbc <QSPI_QuadMode+0x13c>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d004      	beq.n	8001bc0 <QSPI_QuadMode+0x140>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <QSPI_QuadMode+0x140>
  {
    return QSPI_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e000      	b.n	8001bc2 <QSPI_QuadMode+0x142>
  }

  return QSPI_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3748      	adds	r7, #72	; 0x48
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20005808 	.word	0x20005808

08001bd0 <QSPI_HighPerfMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b092      	sub	sp, #72	; 0x48
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001be2:	2305      	movs	r3, #5
 8001be4:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001bee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bf2:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001c00:	2300      	movs	r3, #0
 8001c02:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001c04:	2300      	movs	r3, #0
 8001c06:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c08:	f107 0310 	add.w	r3, r7, #16
 8001c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c10:	4619      	mov	r1, r3
 8001c12:	4853      	ldr	r0, [pc, #332]	; (8001d60 <QSPI_HighPerfMode+0x190>)
 8001c14:	f001 fcb4 	bl	8003580 <HAL_QSPI_Command>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <QSPI_HighPerfMode+0x52>
  {
    return QSPI_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e09a      	b.n	8001d58 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c22:	f107 030c 	add.w	r3, r7, #12
 8001c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	484c      	ldr	r0, [pc, #304]	; (8001d60 <QSPI_HighPerfMode+0x190>)
 8001c2e:	f001 fd9c 	bl	800376a <HAL_QSPI_Receive>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <QSPI_HighPerfMode+0x6c>
  {
    return QSPI_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e08d      	b.n	8001d58 <QSPI_HighPerfMode+0x188>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8001c3c:	2315      	movs	r3, #21
 8001c3e:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8001c40:	2302      	movs	r3, #2
 8001c42:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c44:	f107 0310 	add.w	r3, r7, #16
 8001c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4844      	ldr	r0, [pc, #272]	; (8001d60 <QSPI_HighPerfMode+0x190>)
 8001c50:	f001 fc96 	bl	8003580 <HAL_QSPI_Command>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <QSPI_HighPerfMode+0x8e>
  {
    return QSPI_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e07c      	b.n	8001d58 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c5e:	f107 030c 	add.w	r3, r7, #12
 8001c62:	3301      	adds	r3, #1
 8001c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c68:	4619      	mov	r1, r3
 8001c6a:	483d      	ldr	r0, [pc, #244]	; (8001d60 <QSPI_HighPerfMode+0x190>)
 8001c6c:	f001 fd7d 	bl	800376a <HAL_QSPI_Receive>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <QSPI_HighPerfMode+0xaa>
  {
    return QSPI_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e06e      	b.n	8001d58 <QSPI_HighPerfMode+0x188>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001c7a:	4839      	ldr	r0, [pc, #228]	; (8001d60 <QSPI_HighPerfMode+0x190>)
 8001c7c:	f7ff fe7a 	bl	8001974 <QSPI_WriteEnable>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <QSPI_HighPerfMode+0xba>
  {
    return QSPI_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e066      	b.n	8001d58 <QSPI_HighPerfMode+0x188>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8001c8a:	78fb      	ldrb	r3, [r7, #3]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d105      	bne.n	8001c9c <QSPI_HighPerfMode+0xcc>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8001c90:	7bbb      	ldrb	r3, [r7, #14]
 8001c92:	f043 0302 	orr.w	r3, r3, #2
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	73bb      	strb	r3, [r7, #14]
 8001c9a:	e004      	b.n	8001ca6 <QSPI_HighPerfMode+0xd6>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8001c9c:	7bbb      	ldrb	r3, [r7, #14]
 8001c9e:	f023 0302 	bic.w	r3, r3, #2
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 3;
 8001caa:	2303      	movs	r3, #3
 8001cac:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001cae:	f107 0310 	add.w	r3, r7, #16
 8001cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4829      	ldr	r0, [pc, #164]	; (8001d60 <QSPI_HighPerfMode+0x190>)
 8001cba:	f001 fc61 	bl	8003580 <HAL_QSPI_Command>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <QSPI_HighPerfMode+0xf8>
  {
    return QSPI_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e047      	b.n	8001d58 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4823      	ldr	r0, [pc, #140]	; (8001d60 <QSPI_HighPerfMode+0x190>)
 8001cd4:	f001 fcb2 	bl	800363c <HAL_QSPI_Transmit>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <QSPI_HighPerfMode+0x112>
  {
    return QSPI_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e03a      	b.n	8001d58 <QSPI_HighPerfMode+0x188>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001ce2:	f241 3188 	movw	r1, #5000	; 0x1388
 8001ce6:	481e      	ldr	r0, [pc, #120]	; (8001d60 <QSPI_HighPerfMode+0x190>)
 8001ce8:	f7ff fe90 	bl	8001a0c <QSPI_AutoPollingMemReady>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <QSPI_HighPerfMode+0x126>
  {
    return QSPI_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e030      	b.n	8001d58 <QSPI_HighPerfMode+0x188>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8001cf6:	2315      	movs	r3, #21
 8001cf8:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001cfe:	f107 0310 	add.w	r3, r7, #16
 8001d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d06:	4619      	mov	r1, r3
 8001d08:	4815      	ldr	r0, [pc, #84]	; (8001d60 <QSPI_HighPerfMode+0x190>)
 8001d0a:	f001 fc39 	bl	8003580 <HAL_QSPI_Command>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <QSPI_HighPerfMode+0x148>
  {
    return QSPI_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e01f      	b.n	8001d58 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d18:	f107 030c 	add.w	r3, r7, #12
 8001d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d20:	4619      	mov	r1, r3
 8001d22:	480f      	ldr	r0, [pc, #60]	; (8001d60 <QSPI_HighPerfMode+0x190>)
 8001d24:	f001 fd21 	bl	800376a <HAL_QSPI_Receive>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <QSPI_HighPerfMode+0x162>
  {
    return QSPI_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e012      	b.n	8001d58 <QSPI_HighPerfMode+0x188>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8001d32:	7b7b      	ldrb	r3, [r7, #13]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d102      	bne.n	8001d42 <QSPI_HighPerfMode+0x172>
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d007      	beq.n	8001d52 <QSPI_HighPerfMode+0x182>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8001d42:	7b7b      	ldrb	r3, [r7, #13]
 8001d44:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d004      	beq.n	8001d56 <QSPI_HighPerfMode+0x186>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <QSPI_HighPerfMode+0x186>
  {
    return QSPI_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <QSPI_HighPerfMode+0x188>
  }

  return QSPI_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3748      	adds	r7, #72	; 0x48
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20005808 	.word	0x20005808

08001d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6a:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <HAL_MspInit+0x44>)
 8001d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6e:	4a0e      	ldr	r2, [pc, #56]	; (8001da8 <HAL_MspInit+0x44>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6613      	str	r3, [r2, #96]	; 0x60
 8001d76:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <HAL_MspInit+0x44>)
 8001d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <HAL_MspInit+0x44>)
 8001d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d86:	4a08      	ldr	r2, [pc, #32]	; (8001da8 <HAL_MspInit+0x44>)
 8001d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_MspInit+0x44>)
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	40021000 	.word	0x40021000

08001dac <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a2a      	ldr	r2, [pc, #168]	; (8001e74 <HAL_DAC_MspInit+0xc8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d14d      	bne.n	8001e6a <HAL_DAC_MspInit+0xbe>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001dce:	4b2a      	ldr	r3, [pc, #168]	; (8001e78 <HAL_DAC_MspInit+0xcc>)
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd2:	4a29      	ldr	r2, [pc, #164]	; (8001e78 <HAL_DAC_MspInit+0xcc>)
 8001dd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001dd8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dda:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <HAL_DAC_MspInit+0xcc>)
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de6:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <HAL_DAC_MspInit+0xcc>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	4a23      	ldr	r2, [pc, #140]	; (8001e78 <HAL_DAC_MspInit+0xcc>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df2:	4b21      	ldr	r3, [pc, #132]	; (8001e78 <HAL_DAC_MspInit+0xcc>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dfe:	2310      	movs	r3, #16
 8001e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e02:	2303      	movs	r3, #3
 8001e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0a:	f107 0314 	add.w	r3, r7, #20
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e14:	f000 ffe6 	bl	8002de4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001e18:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <HAL_DAC_MspInit+0xd0>)
 8001e1a:	4a19      	ldr	r2, [pc, #100]	; (8001e80 <HAL_DAC_MspInit+0xd4>)
 8001e1c:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001e1e:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <HAL_DAC_MspInit+0xd0>)
 8001e20:	2206      	movs	r2, #6
 8001e22:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e24:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <HAL_DAC_MspInit+0xd0>)
 8001e26:	2210      	movs	r2, #16
 8001e28:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e2a:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <HAL_DAC_MspInit+0xd0>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_DAC_MspInit+0xd0>)
 8001e32:	2280      	movs	r2, #128	; 0x80
 8001e34:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e36:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <HAL_DAC_MspInit+0xd0>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <HAL_DAC_MspInit+0xd0>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001e42:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <HAL_DAC_MspInit+0xd0>)
 8001e44:	2220      	movs	r2, #32
 8001e46:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <HAL_DAC_MspInit+0xd0>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001e4e:	480b      	ldr	r0, [pc, #44]	; (8001e7c <HAL_DAC_MspInit+0xd0>)
 8001e50:	f000 fd92 	bl	8002978 <HAL_DMA_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8001e5a:	f7ff fb8b 	bl	8001574 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a06      	ldr	r2, [pc, #24]	; (8001e7c <HAL_DAC_MspInit+0xd0>)
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <HAL_DAC_MspInit+0xd0>)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001e6a:	bf00      	nop
 8001e6c:	3728      	adds	r7, #40	; 0x28
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40007400 	.word	0x40007400
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	2000569c 	.word	0x2000569c
 8001e80:	40020030 	.word	0x40020030

08001e84 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	; 0x28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a26      	ldr	r2, [pc, #152]	; (8001f3c <HAL_QSPI_MspInit+0xb8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d145      	bne.n	8001f32 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001ea6:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <HAL_QSPI_MspInit+0xbc>)
 8001ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eaa:	4a25      	ldr	r2, [pc, #148]	; (8001f40 <HAL_QSPI_MspInit+0xbc>)
 8001eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb0:	6513      	str	r3, [r2, #80]	; 0x50
 8001eb2:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <HAL_QSPI_MspInit+0xbc>)
 8001eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <HAL_QSPI_MspInit+0xbc>)
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec2:	4a1f      	ldr	r2, [pc, #124]	; (8001f40 <HAL_QSPI_MspInit+0xbc>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eca:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <HAL_QSPI_MspInit+0xbc>)
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <HAL_QSPI_MspInit+0xbc>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	4a19      	ldr	r2, [pc, #100]	; (8001f40 <HAL_QSPI_MspInit+0xbc>)
 8001edc:	f043 0310 	orr.w	r3, r3, #16
 8001ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ee2:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <HAL_QSPI_MspInit+0xbc>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]
    PE10     ------> QUADSPI_CLK
    PE11     ------> QUADSPI_NCS
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eee:	23c0      	movs	r3, #192	; 0xc0
 8001ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efa:	2303      	movs	r3, #3
 8001efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001efe:	230a      	movs	r3, #10
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f02:	f107 0314 	add.w	r3, r7, #20
 8001f06:	4619      	mov	r1, r3
 8001f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f0c:	f000 ff6a 	bl	8002de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001f10:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f22:	230a      	movs	r3, #10
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4805      	ldr	r0, [pc, #20]	; (8001f44 <HAL_QSPI_MspInit+0xc0>)
 8001f2e:	f000 ff59 	bl	8002de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001f32:	bf00      	nop
 8001f34:	3728      	adds	r7, #40	; 0x28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	a0001000 	.word	0xa0001000
 8001f40:	40021000 	.word	0x40021000
 8001f44:	48001000 	.word	0x48001000

08001f48 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <HAL_QSPI_MspDeInit+0x3c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d10f      	bne.n	8001f7a <HAL_QSPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_QSPI_MspDeInit+0x40>)
 8001f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <HAL_QSPI_MspDeInit+0x40>)
 8001f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f64:	6513      	str	r3, [r2, #80]	; 0x50
    PE10     ------> QUADSPI_CLK
    PE11     ------> QUADSPI_NCS
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6|GPIO_PIN_7);
 8001f66:	21c0      	movs	r1, #192	; 0xc0
 8001f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f6c:	f001 f8e4 	bl	8003138 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13);
 8001f70:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8001f74:	4805      	ldr	r0, [pc, #20]	; (8001f8c <HAL_QSPI_MspDeInit+0x44>)
 8001f76:	f001 f8df 	bl	8003138 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	a0001000 	.word	0xa0001000
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	48001000 	.word	0x48001000

08001f90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa0:	d10b      	bne.n	8001fba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_TIM_Base_MspInit+0x38>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	4a08      	ldr	r2, [pc, #32]	; (8001fc8 <HAL_TIM_Base_MspInit+0x38>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6593      	str	r3, [r2, #88]	; 0x58
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_TIM_Base_MspInit+0x38>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001fba:	bf00      	nop
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40021000 	.word	0x40021000

08001fcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08c      	sub	sp, #48	; 0x30
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	201a      	movs	r0, #26
 8001fe2:	f000 f9f9 	bl	80023d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001fe6:	201a      	movs	r0, #26
 8001fe8:	f000 fa12 	bl	8002410 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001fec:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <HAL_InitTick+0x9c>)
 8001fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff0:	4a1d      	ldr	r2, [pc, #116]	; (8002068 <HAL_InitTick+0x9c>)
 8001ff2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff6:	6613      	str	r3, [r2, #96]	; 0x60
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_InitTick+0x9c>)
 8001ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002004:	f107 0210 	add.w	r2, r7, #16
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	4611      	mov	r1, r2
 800200e:	4618      	mov	r0, r3
 8002010:	f002 fc72 	bl	80048f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002014:	f002 fc5a 	bl	80048cc <HAL_RCC_GetPCLK2Freq>
 8002018:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800201a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800201c:	4a13      	ldr	r2, [pc, #76]	; (800206c <HAL_InitTick+0xa0>)
 800201e:	fba2 2303 	umull	r2, r3, r2, r3
 8002022:	0c9b      	lsrs	r3, r3, #18
 8002024:	3b01      	subs	r3, #1
 8002026:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <HAL_InitTick+0xa4>)
 800202a:	4a12      	ldr	r2, [pc, #72]	; (8002074 <HAL_InitTick+0xa8>)
 800202c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_InitTick+0xa4>)
 8002030:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002034:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8002036:	4a0e      	ldr	r2, [pc, #56]	; (8002070 <HAL_InitTick+0xa4>)
 8002038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203a:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <HAL_InitTick+0xa4>)
 800203e:	2200      	movs	r2, #0
 8002040:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002042:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_InitTick+0xa4>)
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8002048:	4809      	ldr	r0, [pc, #36]	; (8002070 <HAL_InitTick+0xa4>)
 800204a:	f002 fce7 	bl	8004a1c <HAL_TIM_Base_Init>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d104      	bne.n	800205e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8002054:	4806      	ldr	r0, [pc, #24]	; (8002070 <HAL_InitTick+0xa4>)
 8002056:	f002 fd39 	bl	8004acc <HAL_TIM_Base_Start_IT>
 800205a:	4603      	mov	r3, r0
 800205c:	e000      	b.n	8002060 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
}
 8002060:	4618      	mov	r0, r3
 8002062:	3730      	adds	r7, #48	; 0x30
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40021000 	.word	0x40021000
 800206c:	431bde83 	.word	0x431bde83
 8002070:	2000584c 	.word	0x2000584c
 8002074:	40014800 	.word	0x40014800

08002078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800207c:	e7fe      	b.n	800207c <NMI_Handler+0x4>

0800207e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002082:	e7fe      	b.n	8002082 <HardFault_Handler+0x4>

08002084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002088:	e7fe      	b.n	8002088 <MemManage_Handler+0x4>

0800208a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800208e:	e7fe      	b.n	800208e <BusFault_Handler+0x4>

08002090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002094:	e7fe      	b.n	8002094 <UsageFault_Handler+0x4>

08002096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
	...

080020d0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80020d4:	4802      	ldr	r0, [pc, #8]	; (80020e0 <DMA1_Channel3_IRQHandler+0x10>)
 80020d6:	f000 fda5 	bl	8002c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	2000569c 	.word	0x2000569c

080020e4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80020ea:	f002 fd5f 	bl	8004bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	2000584c 	.word	0x2000584c

080020f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020fc:	4b15      	ldr	r3, [pc, #84]	; (8002154 <SystemInit+0x5c>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002102:	4a14      	ldr	r2, [pc, #80]	; (8002154 <SystemInit+0x5c>)
 8002104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <SystemInit+0x60>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a11      	ldr	r2, [pc, #68]	; (8002158 <SystemInit+0x60>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002118:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <SystemInit+0x60>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <SystemInit+0x60>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a0d      	ldr	r2, [pc, #52]	; (8002158 <SystemInit+0x60>)
 8002124:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002128:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800212c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <SystemInit+0x60>)
 8002130:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002134:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <SystemInit+0x60>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a07      	ldr	r2, [pc, #28]	; (8002158 <SystemInit+0x60>)
 800213c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002140:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002142:	4b05      	ldr	r3, [pc, #20]	; (8002158 <SystemInit+0x60>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000ed00 	.word	0xe000ed00
 8002158:	40021000 	.word	0x40021000

0800215c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800215c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002194 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002160:	f7ff ffca 	bl	80020f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002164:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002166:	e003      	b.n	8002170 <LoopCopyDataInit>

08002168 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800216a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800216c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800216e:	3104      	adds	r1, #4

08002170 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002170:	480a      	ldr	r0, [pc, #40]	; (800219c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002174:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002176:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002178:	d3f6      	bcc.n	8002168 <CopyDataInit>
	ldr	r2, =_sbss
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800217c:	e002      	b.n	8002184 <LoopFillZerobss>

0800217e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800217e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002180:	f842 3b04 	str.w	r3, [r2], #4

08002184 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002184:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <LoopForever+0x16>)
	cmp	r2, r3
 8002186:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002188:	d3f9      	bcc.n	800217e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800218a:	f003 f93d 	bl	8005408 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800218e:	f7fe feb1 	bl	8000ef4 <main>

08002192 <LoopForever>:

LoopForever:
    b LoopForever
 8002192:	e7fe      	b.n	8002192 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002194:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002198:	08005ccc 	.word	0x08005ccc
	ldr	r0, =_sdata
 800219c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80021a0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80021a4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80021a8:	2000589c 	.word	0x2000589c

080021ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021ac:	e7fe      	b.n	80021ac <ADC1_2_IRQHandler>

080021ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b8:	2003      	movs	r0, #3
 80021ba:	f000 f902 	bl	80023c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021be:	200f      	movs	r0, #15
 80021c0:	f7ff ff04 	bl	8001fcc <HAL_InitTick>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	71fb      	strb	r3, [r7, #7]
 80021ce:	e001      	b.n	80021d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021d0:	f7ff fdc8 	bl	8001d64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021d4:	79fb      	ldrb	r3, [r7, #7]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_IncTick+0x20>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_IncTick+0x24>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	4a04      	ldr	r2, [pc, #16]	; (8002204 <HAL_IncTick+0x24>)
 80021f2:	6013      	str	r3, [r2, #0]
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20000008 	.word	0x20000008
 8002204:	20005898 	.word	0x20005898

08002208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return uwTick;
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <HAL_GetTick+0x14>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20005898 	.word	0x20005898

08002220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002228:	f7ff ffee 	bl	8002208 <HAL_GetTick>
 800222c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002238:	d005      	beq.n	8002246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <HAL_Delay+0x44>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4413      	add	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002246:	bf00      	nop
 8002248:	f7ff ffde 	bl	8002208 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	429a      	cmp	r2, r3
 8002256:	d8f7      	bhi.n	8002248 <HAL_Delay+0x28>
  {
  }
}
 8002258:	bf00      	nop
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000008 	.word	0x20000008

08002268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <__NVIC_SetPriorityGrouping+0x44>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002284:	4013      	ands	r3, r2
 8002286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229a:	4a04      	ldr	r2, [pc, #16]	; (80022ac <__NVIC_SetPriorityGrouping+0x44>)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	60d3      	str	r3, [r2, #12]
}
 80022a0:	bf00      	nop
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b4:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <__NVIC_GetPriorityGrouping+0x18>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	0a1b      	lsrs	r3, r3, #8
 80022ba:	f003 0307 	and.w	r3, r3, #7
}
 80022be:	4618      	mov	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	db0b      	blt.n	80022f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	f003 021f 	and.w	r2, r3, #31
 80022e4:	4907      	ldr	r1, [pc, #28]	; (8002304 <__NVIC_EnableIRQ+0x38>)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	2001      	movs	r0, #1
 80022ee:	fa00 f202 	lsl.w	r2, r0, r2
 80022f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000e100 	.word	0xe000e100

08002308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	6039      	str	r1, [r7, #0]
 8002312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002318:	2b00      	cmp	r3, #0
 800231a:	db0a      	blt.n	8002332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	b2da      	uxtb	r2, r3
 8002320:	490c      	ldr	r1, [pc, #48]	; (8002354 <__NVIC_SetPriority+0x4c>)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	0112      	lsls	r2, r2, #4
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	440b      	add	r3, r1
 800232c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002330:	e00a      	b.n	8002348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4908      	ldr	r1, [pc, #32]	; (8002358 <__NVIC_SetPriority+0x50>)
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	3b04      	subs	r3, #4
 8002340:	0112      	lsls	r2, r2, #4
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	440b      	add	r3, r1
 8002346:	761a      	strb	r2, [r3, #24]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000e100 	.word	0xe000e100
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f1c3 0307 	rsb	r3, r3, #7
 8002376:	2b04      	cmp	r3, #4
 8002378:	bf28      	it	cs
 800237a:	2304      	movcs	r3, #4
 800237c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3304      	adds	r3, #4
 8002382:	2b06      	cmp	r3, #6
 8002384:	d902      	bls.n	800238c <NVIC_EncodePriority+0x30>
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3b03      	subs	r3, #3
 800238a:	e000      	b.n	800238e <NVIC_EncodePriority+0x32>
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	f04f 32ff 	mov.w	r2, #4294967295
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43da      	mvns	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	401a      	ands	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a4:	f04f 31ff 	mov.w	r1, #4294967295
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	43d9      	mvns	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	4313      	orrs	r3, r2
         );
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3724      	adds	r7, #36	; 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff ff4c 	bl	8002268 <__NVIC_SetPriorityGrouping>
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023ea:	f7ff ff61 	bl	80022b0 <__NVIC_GetPriorityGrouping>
 80023ee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	68b9      	ldr	r1, [r7, #8]
 80023f4:	6978      	ldr	r0, [r7, #20]
 80023f6:	f7ff ffb1 	bl	800235c <NVIC_EncodePriority>
 80023fa:	4602      	mov	r2, r0
 80023fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002400:	4611      	mov	r1, r2
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff ff80 	bl	8002308 <__NVIC_SetPriority>
}
 8002408:	bf00      	nop
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff ff54 	bl	80022cc <__NVIC_EnableIRQ>
}
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e014      	b.n	8002468 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	791b      	ldrb	r3, [r3, #4]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d105      	bne.n	8002454 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff fcac 	bl	8001dac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	795b      	ldrb	r3, [r3, #5]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_DAC_Start_DMA+0x1e>
 800248a:	2302      	movs	r3, #2
 800248c:	e0ab      	b.n	80025e6 <HAL_DAC_Start_DMA+0x176>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2201      	movs	r2, #1
 8002492:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2202      	movs	r2, #2
 8002498:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d12f      	bne.n	8002500 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	4a52      	ldr	r2, [pc, #328]	; (80025f0 <HAL_DAC_Start_DMA+0x180>)
 80024a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	4a51      	ldr	r2, [pc, #324]	; (80025f4 <HAL_DAC_Start_DMA+0x184>)
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	4a50      	ldr	r2, [pc, #320]	; (80025f8 <HAL_DAC_Start_DMA+0x188>)
 80024b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024c6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80024c8:	6a3b      	ldr	r3, [r7, #32]
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d013      	beq.n	80024f6 <HAL_DAC_Start_DMA+0x86>
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d845      	bhi.n	8002560 <HAL_DAC_Start_DMA+0xf0>
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_DAC_Start_DMA+0x72>
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	2b04      	cmp	r3, #4
 80024de:	d005      	beq.n	80024ec <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80024e0:	e03e      	b.n	8002560 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	3308      	adds	r3, #8
 80024e8:	613b      	str	r3, [r7, #16]
        break;
 80024ea:	e03c      	b.n	8002566 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	330c      	adds	r3, #12
 80024f2:	613b      	str	r3, [r7, #16]
        break;
 80024f4:	e037      	b.n	8002566 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3310      	adds	r3, #16
 80024fc:	613b      	str	r3, [r7, #16]
        break;
 80024fe:	e032      	b.n	8002566 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	4a3d      	ldr	r2, [pc, #244]	; (80025fc <HAL_DAC_Start_DMA+0x18c>)
 8002506:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4a3c      	ldr	r2, [pc, #240]	; (8002600 <HAL_DAC_Start_DMA+0x190>)
 800250e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4a3b      	ldr	r2, [pc, #236]	; (8002604 <HAL_DAC_Start_DMA+0x194>)
 8002516:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002526:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	2b08      	cmp	r3, #8
 800252c:	d013      	beq.n	8002556 <HAL_DAC_Start_DMA+0xe6>
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	2b08      	cmp	r3, #8
 8002532:	d817      	bhi.n	8002564 <HAL_DAC_Start_DMA+0xf4>
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_DAC_Start_DMA+0xd2>
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	2b04      	cmp	r3, #4
 800253e:	d005      	beq.n	800254c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002540:	e010      	b.n	8002564 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	3314      	adds	r3, #20
 8002548:	613b      	str	r3, [r7, #16]
        break;
 800254a:	e00c      	b.n	8002566 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	3318      	adds	r3, #24
 8002552:	613b      	str	r3, [r7, #16]
        break;
 8002554:	e007      	b.n	8002566 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	331c      	adds	r3, #28
 800255c:	613b      	str	r3, [r7, #16]
        break;
 800255e:	e002      	b.n	8002566 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002560:	bf00      	nop
 8002562:	e000      	b.n	8002566 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002564:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d111      	bne.n	8002590 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800257a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6898      	ldr	r0, [r3, #8]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	f000 faaf 	bl	8002ae8 <HAL_DMA_Start_IT>
 800258a:	4603      	mov	r3, r0
 800258c:	75fb      	strb	r3, [r7, #23]
 800258e:	e010      	b.n	80025b2 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800259e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	68d8      	ldr	r0, [r3, #12]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	f000 fa9d 	bl	8002ae8 <HAL_DMA_Start_IT>
 80025ae:	4603      	mov	r3, r0
 80025b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80025b8:	7dfb      	ldrb	r3, [r7, #23]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10c      	bne.n	80025d8 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6819      	ldr	r1, [r3, #0]
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	2201      	movs	r2, #1
 80025cc:	409a      	lsls	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	e005      	b.n	80025e4 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	f043 0204 	orr.w	r2, r3, #4
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80025e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	08002865 	.word	0x08002865
 80025f4:	08002887 	.word	0x08002887
 80025f8:	080028a3 	.word	0x080028a3
 80025fc:	0800290d 	.word	0x0800290d
 8002600:	0800292f 	.word	0x0800292f
 8002604:	0800294b 	.word	0x0800294b

08002608 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	795b      	ldrb	r3, [r3, #5]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_DAC_ConfigChannel+0x1c>
 8002648:	2302      	movs	r3, #2
 800264a:	e107      	b.n	800285c <HAL_DAC_ConfigChannel+0x22c>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2201      	movs	r2, #1
 8002650:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2202      	movs	r2, #2
 8002656:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b04      	cmp	r3, #4
 800265e:	d174      	bne.n	800274a <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002660:	f7ff fdd2 	bl	8002208 <HAL_GetTick>
 8002664:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d134      	bne.n	80026d6 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800266c:	e011      	b.n	8002692 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800266e:	f7ff fdcb 	bl	8002208 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b01      	cmp	r3, #1
 800267a:	d90a      	bls.n	8002692 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	f043 0208 	orr.w	r2, r3, #8
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2203      	movs	r2, #3
 800268c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e0e4      	b.n	800285c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002698:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1e6      	bne.n	800266e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80026a0:	2001      	movs	r0, #1
 80026a2:	f7ff fdbd 	bl	8002220 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	6992      	ldr	r2, [r2, #24]
 80026ae:	641a      	str	r2, [r3, #64]	; 0x40
 80026b0:	e01e      	b.n	80026f0 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80026b2:	f7ff fda9 	bl	8002208 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d90a      	bls.n	80026d6 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	f043 0208 	orr.w	r2, r3, #8
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2203      	movs	r2, #3
 80026d0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e0c2      	b.n	800285c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026dc:	2b00      	cmp	r3, #0
 80026de:	dbe8      	blt.n	80026b2 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80026e0:	2001      	movs	r0, #1
 80026e2:	f7ff fd9d 	bl	8002220 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	6992      	ldr	r2, [r2, #24]
 80026ee:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f003 0310 	and.w	r3, r3, #16
 80026fc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002700:	fa01 f303 	lsl.w	r3, r1, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	ea02 0103 	and.w	r1, r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	69da      	ldr	r2, [r3, #28]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f003 0310 	and.w	r3, r3, #16
 8002714:	409a      	lsls	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	21ff      	movs	r1, #255	; 0xff
 800272c:	fa01 f303 	lsl.w	r3, r1, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	ea02 0103 	and.w	r1, r2, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	6a1a      	ldr	r2, [r3, #32]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f003 0310 	and.w	r3, r3, #16
 8002740:	409a      	lsls	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d11d      	bne.n	800278e <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002758:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	221f      	movs	r2, #31
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43db      	mvns	r3, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4013      	ands	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002794:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	2207      	movs	r2, #7
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	431a      	orrs	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6819      	ldr	r1, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43da      	mvns	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	400a      	ands	r2, r1
 80027f2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f003 0310 	and.w	r3, r3, #16
 8002802:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6819      	ldr	r1, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f003 0310 	and.w	r3, r3, #16
 800283e:	22c0      	movs	r2, #192	; 0xc0
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43da      	mvns	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	400a      	ands	r2, r1
 800284c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2201      	movs	r2, #1
 8002852:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3720      	adds	r7, #32
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f7fe fdb6 	bl	80013e4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2201      	movs	r2, #1
 800287c:	711a      	strb	r2, [r3, #4]
}
 800287e:	bf00      	nop
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b084      	sub	sp, #16
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f7ff feb7 	bl	8002608 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	f043 0204 	orr.w	r2, r3, #4
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f7ff fead 	bl	800261c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2201      	movs	r2, #1
 80028c6:	711a      	strb	r2, [r3, #4]
}
 80028c8:	bf00      	nop
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002918:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f7ff ffd8 	bl	80028d0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2201      	movs	r2, #1
 8002924:	711a      	strb	r2, [r3, #4]
}
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b084      	sub	sp, #16
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f7ff ffd1 	bl	80028e4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	f043 0204 	orr.w	r2, r3, #4
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f7ff ffc7 	bl	80028f8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2201      	movs	r2, #1
 800296e:	711a      	strb	r2, [r3, #4]
}
 8002970:	bf00      	nop
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e098      	b.n	8002abc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	4b4d      	ldr	r3, [pc, #308]	; (8002ac8 <HAL_DMA_Init+0x150>)
 8002992:	429a      	cmp	r2, r3
 8002994:	d80f      	bhi.n	80029b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	4b4b      	ldr	r3, [pc, #300]	; (8002acc <HAL_DMA_Init+0x154>)
 800299e:	4413      	add	r3, r2
 80029a0:	4a4b      	ldr	r2, [pc, #300]	; (8002ad0 <HAL_DMA_Init+0x158>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	091b      	lsrs	r3, r3, #4
 80029a8:	009a      	lsls	r2, r3, #2
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a48      	ldr	r2, [pc, #288]	; (8002ad4 <HAL_DMA_Init+0x15c>)
 80029b2:	641a      	str	r2, [r3, #64]	; 0x40
 80029b4:	e00e      	b.n	80029d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	4b46      	ldr	r3, [pc, #280]	; (8002ad8 <HAL_DMA_Init+0x160>)
 80029be:	4413      	add	r3, r2
 80029c0:	4a43      	ldr	r2, [pc, #268]	; (8002ad0 <HAL_DMA_Init+0x158>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	091b      	lsrs	r3, r3, #4
 80029c8:	009a      	lsls	r2, r3, #2
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a42      	ldr	r2, [pc, #264]	; (8002adc <HAL_DMA_Init+0x164>)
 80029d2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2202      	movs	r2, #2
 80029d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80029ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80029f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a2e:	d039      	beq.n	8002aa4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	4a27      	ldr	r2, [pc, #156]	; (8002ad4 <HAL_DMA_Init+0x15c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d11a      	bne.n	8002a70 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a3a:	4b29      	ldr	r3, [pc, #164]	; (8002ae0 <HAL_DMA_Init+0x168>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	f003 031c 	and.w	r3, r3, #28
 8002a46:	210f      	movs	r1, #15
 8002a48:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	4924      	ldr	r1, [pc, #144]	; (8002ae0 <HAL_DMA_Init+0x168>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a54:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <HAL_DMA_Init+0x168>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6859      	ldr	r1, [r3, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a60:	f003 031c 	and.w	r3, r3, #28
 8002a64:	fa01 f303 	lsl.w	r3, r1, r3
 8002a68:	491d      	ldr	r1, [pc, #116]	; (8002ae0 <HAL_DMA_Init+0x168>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]
 8002a6e:	e019      	b.n	8002aa4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a70:	4b1c      	ldr	r3, [pc, #112]	; (8002ae4 <HAL_DMA_Init+0x16c>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a78:	f003 031c 	and.w	r3, r3, #28
 8002a7c:	210f      	movs	r1, #15
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	4917      	ldr	r1, [pc, #92]	; (8002ae4 <HAL_DMA_Init+0x16c>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a8a:	4b16      	ldr	r3, [pc, #88]	; (8002ae4 <HAL_DMA_Init+0x16c>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6859      	ldr	r1, [r3, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	f003 031c 	and.w	r3, r3, #28
 8002a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9e:	4911      	ldr	r1, [pc, #68]	; (8002ae4 <HAL_DMA_Init+0x16c>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	40020407 	.word	0x40020407
 8002acc:	bffdfff8 	.word	0xbffdfff8
 8002ad0:	cccccccd 	.word	0xcccccccd
 8002ad4:	40020000 	.word	0x40020000
 8002ad8:	bffdfbf8 	.word	0xbffdfbf8
 8002adc:	40020400 	.word	0x40020400
 8002ae0:	400200a8 	.word	0x400200a8
 8002ae4:	400204a8 	.word	0x400204a8

08002ae8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002af6:	2300      	movs	r3, #0
 8002af8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_DMA_Start_IT+0x20>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e04b      	b.n	8002ba0 <HAL_DMA_Start_IT+0xb8>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d13a      	bne.n	8002b92 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0201 	bic.w	r2, r2, #1
 8002b38:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	68b9      	ldr	r1, [r7, #8]
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 f91e 	bl	8002d82 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d008      	beq.n	8002b60 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f042 020e 	orr.w	r2, r2, #14
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	e00f      	b.n	8002b80 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0204 	bic.w	r2, r2, #4
 8002b6e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 020a 	orr.w	r2, r2, #10
 8002b7e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0201 	orr.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	e005      	b.n	8002b9e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d008      	beq.n	8002bd2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2204      	movs	r2, #4
 8002bc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e022      	b.n	8002c18 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 020e 	bic.w	r2, r2, #14
 8002be0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0201 	bic.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	f003 021c 	and.w	r2, r3, #28
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	2101      	movs	r1, #1
 8002c00:	fa01 f202 	lsl.w	r2, r1, r2
 8002c04:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c40:	f003 031c 	and.w	r3, r3, #28
 8002c44:	2204      	movs	r2, #4
 8002c46:	409a      	lsls	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d026      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x7a>
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d021      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d107      	bne.n	8002c78 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0204 	bic.w	r2, r2, #4
 8002c76:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7c:	f003 021c 	and.w	r2, r3, #28
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	2104      	movs	r1, #4
 8002c86:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d071      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002c9c:	e06c      	b.n	8002d78 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	f003 031c 	and.w	r3, r3, #28
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	409a      	lsls	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d02e      	beq.n	8002d10 <HAL_DMA_IRQHandler+0xec>
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d029      	beq.n	8002d10 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10b      	bne.n	8002ce2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 020a 	bic.w	r2, r2, #10
 8002cd8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	f003 021c 	and.w	r2, r3, #28
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	2102      	movs	r1, #2
 8002cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d038      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d0e:	e033      	b.n	8002d78 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d14:	f003 031c 	and.w	r3, r3, #28
 8002d18:	2208      	movs	r2, #8
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d02a      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x156>
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d025      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 020e 	bic.w	r2, r2, #14
 8002d3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	f003 021c 	and.w	r2, r3, #28
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d50:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d004      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d78:	bf00      	nop
 8002d7a:	bf00      	nop
}
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b085      	sub	sp, #20
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d94:	f003 021c 	and.w	r2, r3, #28
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002da2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b10      	cmp	r3, #16
 8002db2:	d108      	bne.n	8002dc6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002dc4:	e007      	b.n	8002dd6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	60da      	str	r2, [r3, #12]
}
 8002dd6:	bf00      	nop
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
	...

08002de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002df2:	e17f      	b.n	80030f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	2101      	movs	r1, #1
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002e00:	4013      	ands	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 8171 	beq.w	80030ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d00b      	beq.n	8002e2c <HAL_GPIO_Init+0x48>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d007      	beq.n	8002e2c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e20:	2b11      	cmp	r3, #17
 8002e22:	d003      	beq.n	8002e2c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b12      	cmp	r3, #18
 8002e2a:	d130      	bne.n	8002e8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	2203      	movs	r2, #3
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4013      	ands	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e62:	2201      	movs	r2, #1
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	091b      	lsrs	r3, r3, #4
 8002e78:	f003 0201 	and.w	r2, r3, #1
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d118      	bne.n	8002ecc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4013      	ands	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	08db      	lsrs	r3, r3, #3
 8002eb6:	f003 0201 	and.w	r2, r3, #1
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	43db      	mvns	r3, r3
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d003      	beq.n	8002f0c <HAL_GPIO_Init+0x128>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b12      	cmp	r3, #18
 8002f0a:	d123      	bne.n	8002f54 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	08da      	lsrs	r2, r3, #3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3208      	adds	r2, #8
 8002f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f18:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	220f      	movs	r2, #15
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	08da      	lsrs	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3208      	adds	r2, #8
 8002f4e:	6939      	ldr	r1, [r7, #16]
 8002f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	2203      	movs	r2, #3
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 0203 	and.w	r2, r3, #3
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80ac 	beq.w	80030ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f96:	4b5f      	ldr	r3, [pc, #380]	; (8003114 <HAL_GPIO_Init+0x330>)
 8002f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9a:	4a5e      	ldr	r2, [pc, #376]	; (8003114 <HAL_GPIO_Init+0x330>)
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	6613      	str	r3, [r2, #96]	; 0x60
 8002fa2:	4b5c      	ldr	r3, [pc, #368]	; (8003114 <HAL_GPIO_Init+0x330>)
 8002fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fae:	4a5a      	ldr	r2, [pc, #360]	; (8003118 <HAL_GPIO_Init+0x334>)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	089b      	lsrs	r3, r3, #2
 8002fb4:	3302      	adds	r3, #2
 8002fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	220f      	movs	r2, #15
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fd8:	d025      	beq.n	8003026 <HAL_GPIO_Init+0x242>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a4f      	ldr	r2, [pc, #316]	; (800311c <HAL_GPIO_Init+0x338>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d01f      	beq.n	8003022 <HAL_GPIO_Init+0x23e>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a4e      	ldr	r2, [pc, #312]	; (8003120 <HAL_GPIO_Init+0x33c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d019      	beq.n	800301e <HAL_GPIO_Init+0x23a>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a4d      	ldr	r2, [pc, #308]	; (8003124 <HAL_GPIO_Init+0x340>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d013      	beq.n	800301a <HAL_GPIO_Init+0x236>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a4c      	ldr	r2, [pc, #304]	; (8003128 <HAL_GPIO_Init+0x344>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d00d      	beq.n	8003016 <HAL_GPIO_Init+0x232>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a4b      	ldr	r2, [pc, #300]	; (800312c <HAL_GPIO_Init+0x348>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d007      	beq.n	8003012 <HAL_GPIO_Init+0x22e>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a4a      	ldr	r2, [pc, #296]	; (8003130 <HAL_GPIO_Init+0x34c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d101      	bne.n	800300e <HAL_GPIO_Init+0x22a>
 800300a:	2306      	movs	r3, #6
 800300c:	e00c      	b.n	8003028 <HAL_GPIO_Init+0x244>
 800300e:	2307      	movs	r3, #7
 8003010:	e00a      	b.n	8003028 <HAL_GPIO_Init+0x244>
 8003012:	2305      	movs	r3, #5
 8003014:	e008      	b.n	8003028 <HAL_GPIO_Init+0x244>
 8003016:	2304      	movs	r3, #4
 8003018:	e006      	b.n	8003028 <HAL_GPIO_Init+0x244>
 800301a:	2303      	movs	r3, #3
 800301c:	e004      	b.n	8003028 <HAL_GPIO_Init+0x244>
 800301e:	2302      	movs	r3, #2
 8003020:	e002      	b.n	8003028 <HAL_GPIO_Init+0x244>
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <HAL_GPIO_Init+0x244>
 8003026:	2300      	movs	r3, #0
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	f002 0203 	and.w	r2, r2, #3
 800302e:	0092      	lsls	r2, r2, #2
 8003030:	4093      	lsls	r3, r2
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003038:	4937      	ldr	r1, [pc, #220]	; (8003118 <HAL_GPIO_Init+0x334>)
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	089b      	lsrs	r3, r3, #2
 800303e:	3302      	adds	r3, #2
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003046:	4b3b      	ldr	r3, [pc, #236]	; (8003134 <HAL_GPIO_Init+0x350>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	43db      	mvns	r3, r3
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4013      	ands	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800306a:	4a32      	ldr	r2, [pc, #200]	; (8003134 <HAL_GPIO_Init+0x350>)
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003070:	4b30      	ldr	r3, [pc, #192]	; (8003134 <HAL_GPIO_Init+0x350>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	43db      	mvns	r3, r3
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4013      	ands	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003094:	4a27      	ldr	r2, [pc, #156]	; (8003134 <HAL_GPIO_Init+0x350>)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800309a:	4b26      	ldr	r3, [pc, #152]	; (8003134 <HAL_GPIO_Init+0x350>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	43db      	mvns	r3, r3
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4013      	ands	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030be:	4a1d      	ldr	r2, [pc, #116]	; (8003134 <HAL_GPIO_Init+0x350>)
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030c4:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <HAL_GPIO_Init+0x350>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	43db      	mvns	r3, r3
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4013      	ands	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030e8:	4a12      	ldr	r2, [pc, #72]	; (8003134 <HAL_GPIO_Init+0x350>)
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	3301      	adds	r3, #1
 80030f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	fa22 f303 	lsr.w	r3, r2, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f47f ae78 	bne.w	8002df4 <HAL_GPIO_Init+0x10>
  }
}
 8003104:	bf00      	nop
 8003106:	bf00      	nop
 8003108:	371c      	adds	r7, #28
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000
 8003118:	40010000 	.word	0x40010000
 800311c:	48000400 	.word	0x48000400
 8003120:	48000800 	.word	0x48000800
 8003124:	48000c00 	.word	0x48000c00
 8003128:	48001000 	.word	0x48001000
 800312c:	48001400 	.word	0x48001400
 8003130:	48001800 	.word	0x48001800
 8003134:	40010400 	.word	0x40010400

08003138 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003138:	b480      	push	{r7}
 800313a:	b087      	sub	sp, #28
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003146:	e0cd      	b.n	80032e4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003148:	2201      	movs	r2, #1
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	4013      	ands	r3, r2
 8003154:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80c0 	beq.w	80032de <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800315e:	4a68      	ldr	r2, [pc, #416]	; (8003300 <HAL_GPIO_DeInit+0x1c8>)
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	089b      	lsrs	r3, r3, #2
 8003164:	3302      	adds	r3, #2
 8003166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800316a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	220f      	movs	r2, #15
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4013      	ands	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003186:	d025      	beq.n	80031d4 <HAL_GPIO_DeInit+0x9c>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a5e      	ldr	r2, [pc, #376]	; (8003304 <HAL_GPIO_DeInit+0x1cc>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d01f      	beq.n	80031d0 <HAL_GPIO_DeInit+0x98>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a5d      	ldr	r2, [pc, #372]	; (8003308 <HAL_GPIO_DeInit+0x1d0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d019      	beq.n	80031cc <HAL_GPIO_DeInit+0x94>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a5c      	ldr	r2, [pc, #368]	; (800330c <HAL_GPIO_DeInit+0x1d4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d013      	beq.n	80031c8 <HAL_GPIO_DeInit+0x90>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a5b      	ldr	r2, [pc, #364]	; (8003310 <HAL_GPIO_DeInit+0x1d8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d00d      	beq.n	80031c4 <HAL_GPIO_DeInit+0x8c>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a5a      	ldr	r2, [pc, #360]	; (8003314 <HAL_GPIO_DeInit+0x1dc>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d007      	beq.n	80031c0 <HAL_GPIO_DeInit+0x88>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a59      	ldr	r2, [pc, #356]	; (8003318 <HAL_GPIO_DeInit+0x1e0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d101      	bne.n	80031bc <HAL_GPIO_DeInit+0x84>
 80031b8:	2306      	movs	r3, #6
 80031ba:	e00c      	b.n	80031d6 <HAL_GPIO_DeInit+0x9e>
 80031bc:	2307      	movs	r3, #7
 80031be:	e00a      	b.n	80031d6 <HAL_GPIO_DeInit+0x9e>
 80031c0:	2305      	movs	r3, #5
 80031c2:	e008      	b.n	80031d6 <HAL_GPIO_DeInit+0x9e>
 80031c4:	2304      	movs	r3, #4
 80031c6:	e006      	b.n	80031d6 <HAL_GPIO_DeInit+0x9e>
 80031c8:	2303      	movs	r3, #3
 80031ca:	e004      	b.n	80031d6 <HAL_GPIO_DeInit+0x9e>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e002      	b.n	80031d6 <HAL_GPIO_DeInit+0x9e>
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <HAL_GPIO_DeInit+0x9e>
 80031d4:	2300      	movs	r3, #0
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	f002 0203 	and.w	r2, r2, #3
 80031dc:	0092      	lsls	r2, r2, #2
 80031de:	4093      	lsls	r3, r2
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d132      	bne.n	800324c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80031e6:	4b4d      	ldr	r3, [pc, #308]	; (800331c <HAL_GPIO_DeInit+0x1e4>)
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	494b      	ldr	r1, [pc, #300]	; (800331c <HAL_GPIO_DeInit+0x1e4>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80031f4:	4b49      	ldr	r3, [pc, #292]	; (800331c <HAL_GPIO_DeInit+0x1e4>)
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	43db      	mvns	r3, r3
 80031fc:	4947      	ldr	r1, [pc, #284]	; (800331c <HAL_GPIO_DeInit+0x1e4>)
 80031fe:	4013      	ands	r3, r2
 8003200:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003202:	4b46      	ldr	r3, [pc, #280]	; (800331c <HAL_GPIO_DeInit+0x1e4>)
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	43db      	mvns	r3, r3
 800320a:	4944      	ldr	r1, [pc, #272]	; (800331c <HAL_GPIO_DeInit+0x1e4>)
 800320c:	4013      	ands	r3, r2
 800320e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003210:	4b42      	ldr	r3, [pc, #264]	; (800331c <HAL_GPIO_DeInit+0x1e4>)
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	43db      	mvns	r3, r3
 8003218:	4940      	ldr	r1, [pc, #256]	; (800331c <HAL_GPIO_DeInit+0x1e4>)
 800321a:	4013      	ands	r3, r2
 800321c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	220f      	movs	r2, #15
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800322e:	4a34      	ldr	r2, [pc, #208]	; (8003300 <HAL_GPIO_DeInit+0x1c8>)
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	089b      	lsrs	r3, r3, #2
 8003234:	3302      	adds	r3, #2
 8003236:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	43da      	mvns	r2, r3
 800323e:	4830      	ldr	r0, [pc, #192]	; (8003300 <HAL_GPIO_DeInit+0x1c8>)
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	089b      	lsrs	r3, r3, #2
 8003244:	400a      	ands	r2, r1
 8003246:	3302      	adds	r3, #2
 8003248:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	2103      	movs	r1, #3
 8003256:	fa01 f303 	lsl.w	r3, r1, r3
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	08da      	lsrs	r2, r3, #3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3208      	adds	r2, #8
 8003268:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	220f      	movs	r2, #15
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43db      	mvns	r3, r3
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	08d2      	lsrs	r2, r2, #3
 8003280:	4019      	ands	r1, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3208      	adds	r2, #8
 8003286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	2103      	movs	r1, #3
 8003294:	fa01 f303 	lsl.w	r3, r1, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	401a      	ands	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	2101      	movs	r1, #1
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	401a      	ands	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	2103      	movs	r1, #3
 80032be:	fa01 f303 	lsl.w	r3, r1, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	401a      	ands	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ce:	2101      	movs	r1, #1
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	fa01 f303 	lsl.w	r3, r1, r3
 80032d6:	43db      	mvns	r3, r3
 80032d8:	401a      	ands	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	3301      	adds	r3, #1
 80032e2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	fa22 f303 	lsr.w	r3, r2, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f47f af2b 	bne.w	8003148 <HAL_GPIO_DeInit+0x10>
  }
}
 80032f2:	bf00      	nop
 80032f4:	bf00      	nop
 80032f6:	371c      	adds	r7, #28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	40010000 	.word	0x40010000
 8003304:	48000400 	.word	0x48000400
 8003308:	48000800 	.word	0x48000800
 800330c:	48000c00 	.word	0x48000c00
 8003310:	48001000 	.word	0x48001000
 8003314:	48001400 	.word	0x48001400
 8003318:	48001800 	.word	0x48001800
 800331c:	40010400 	.word	0x40010400

08003320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	807b      	strh	r3, [r7, #2]
 800332c:	4613      	mov	r3, r2
 800332e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003330:	787b      	ldrb	r3, [r7, #1]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003336:	887a      	ldrh	r2, [r7, #2]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800333c:	e002      	b.n	8003344 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800333e:	887a      	ldrh	r2, [r7, #2]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003362:	887a      	ldrh	r2, [r7, #2]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4013      	ands	r3, r2
 8003368:	041a      	lsls	r2, r3, #16
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	43d9      	mvns	r1, r3
 800336e:	887b      	ldrh	r3, [r7, #2]
 8003370:	400b      	ands	r3, r1
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	619a      	str	r2, [r3, #24]
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003388:	4b04      	ldr	r3, [pc, #16]	; (800339c <HAL_PWREx_GetVoltageRange+0x18>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003390:	4618      	mov	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40007000 	.word	0x40007000

080033a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ae:	d130      	bne.n	8003412 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80033b0:	4b23      	ldr	r3, [pc, #140]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033bc:	d038      	beq.n	8003430 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033be:	4b20      	ldr	r3, [pc, #128]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033c6:	4a1e      	ldr	r2, [pc, #120]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033ce:	4b1d      	ldr	r3, [pc, #116]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2232      	movs	r2, #50	; 0x32
 80033d4:	fb02 f303 	mul.w	r3, r2, r3
 80033d8:	4a1b      	ldr	r2, [pc, #108]	; (8003448 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033da:	fba2 2303 	umull	r2, r3, r2, r3
 80033de:	0c9b      	lsrs	r3, r3, #18
 80033e0:	3301      	adds	r3, #1
 80033e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033e4:	e002      	b.n	80033ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	3b01      	subs	r3, #1
 80033ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ec:	4b14      	ldr	r3, [pc, #80]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f8:	d102      	bne.n	8003400 <HAL_PWREx_ControlVoltageScaling+0x60>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f2      	bne.n	80033e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003400:	4b0f      	ldr	r3, [pc, #60]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800340c:	d110      	bne.n	8003430 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e00f      	b.n	8003432 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003412:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800341a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800341e:	d007      	beq.n	8003430 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003420:	4b07      	ldr	r3, [pc, #28]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003428:	4a05      	ldr	r2, [pc, #20]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800342a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800342e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40007000 	.word	0x40007000
 8003444:	20000000 	.word	0x20000000
 8003448:	431bde83 	.word	0x431bde83

0800344c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af02      	add	r7, sp, #8
 8003452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003454:	f7fe fed8 	bl	8002208 <HAL_GetTick>
 8003458:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e063      	b.n	800352c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10b      	bne.n	8003488 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7fe fd03 	bl	8001e84 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800347e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 faf7 	bl	8003a76 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	3b01      	subs	r3, #1
 8003498:	021a      	lsls	r2, r3, #8
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	2120      	movs	r1, #32
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 faef 	bl	8003a92 <QSPI_WaitFlagStateUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80034b8:	7afb      	ldrb	r3, [r7, #11]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d131      	bne.n	8003522 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80034c8:	f023 0310 	bic.w	r3, r3, #16
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6852      	ldr	r2, [r2, #4]
 80034d0:	0611      	lsls	r1, r2, #24
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	68d2      	ldr	r2, [r2, #12]
 80034d6:	4311      	orrs	r1, r2
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	430b      	orrs	r3, r1
 80034de:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	4b13      	ldr	r3, [pc, #76]	; (8003534 <HAL_QSPI_Init+0xe8>)
 80034e8:	4013      	ands	r3, r2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6912      	ldr	r2, [r2, #16]
 80034ee:	0411      	lsls	r1, r2, #16
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6952      	ldr	r2, [r2, #20]
 80034f4:	4311      	orrs	r1, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6992      	ldr	r2, [r2, #24]
 80034fa:	4311      	orrs	r1, r2
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6812      	ldr	r2, [r2, #0]
 8003500:	430b      	orrs	r3, r1
 8003502:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800352a:	7afb      	ldrb	r3, [r7, #11]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	ffe0f8fe 	.word	0xffe0f8fe

08003538 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e016      	b.n	8003578 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0201 	bic.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fe fcf4 	bl	8001f48 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800358c:	f7fe fe3c 	bl	8002208 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_QSPI_Command+0x22>
 800359e:	2302      	movs	r3, #2
 80035a0:	e048      	b.n	8003634 <HAL_QSPI_Command+0xb4>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d137      	bne.n	8003626 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	2200      	movs	r2, #0
 80035cc:	2120      	movs	r1, #32
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 fa5f 	bl	8003a92 <QSPI_WaitFlagStateUntilTimeout>
 80035d4:	4603      	mov	r3, r0
 80035d6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80035d8:	7dfb      	ldrb	r3, [r7, #23]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d125      	bne.n	800362a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80035de:	2200      	movs	r2, #0
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 fa8c 	bl	8003b00 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d115      	bne.n	800361c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	2201      	movs	r2, #1
 80035f8:	2102      	movs	r1, #2
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 fa49 	bl	8003a92 <QSPI_WaitFlagStateUntilTimeout>
 8003600:	4603      	mov	r3, r0
 8003602:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003604:	7dfb      	ldrb	r3, [r7, #23]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10f      	bne.n	800362a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2202      	movs	r2, #2
 8003610:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800361a:	e006      	b.n	800362a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003624:	e001      	b.n	800362a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003626:	2302      	movs	r3, #2
 8003628:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003632:	7dfb      	ldrb	r3, [r7, #23]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08a      	sub	sp, #40	; 0x28
 8003640:	af02      	add	r7, sp, #8
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800364c:	f7fe fddc 	bl	8002208 <HAL_GetTick>
 8003650:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3320      	adds	r3, #32
 8003658:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b01      	cmp	r3, #1
 8003664:	d101      	bne.n	800366a <HAL_QSPI_Transmit+0x2e>
 8003666:	2302      	movs	r3, #2
 8003668:	e07b      	b.n	8003762 <HAL_QSPI_Transmit+0x126>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b01      	cmp	r3, #1
 800367c:	d16a      	bne.n	8003754 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d05b      	beq.n	8003742 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2212      	movs	r2, #18
 800368e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695a      	ldr	r2, [r3, #20]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80036be:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80036c0:	e01b      	b.n	80036fa <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	2201      	movs	r2, #1
 80036ca:	2104      	movs	r1, #4
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 f9e0 	bl	8003a92 <QSPI_WaitFlagStateUntilTimeout>
 80036d2:	4603      	mov	r3, r0
 80036d4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80036d6:	7ffb      	ldrb	r3, [r7, #31]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d113      	bne.n	8003704 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	781a      	ldrb	r2, [r3, #0]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	1e5a      	subs	r2, r3, #1
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1df      	bne.n	80036c2 <HAL_QSPI_Transmit+0x86>
 8003702:	e000      	b.n	8003706 <HAL_QSPI_Transmit+0xca>
          break;
 8003704:	bf00      	nop
      }

      if (status == HAL_OK)
 8003706:	7ffb      	ldrb	r3, [r7, #31]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d115      	bne.n	8003738 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	2201      	movs	r2, #1
 8003714:	2102      	movs	r1, #2
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f9bb 	bl	8003a92 <QSPI_WaitFlagStateUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003720:	7ffb      	ldrb	r3, [r7, #31]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d108      	bne.n	8003738 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2202      	movs	r2, #2
 800372c:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 f934 	bl	800399c <HAL_QSPI_Abort>
 8003734:	4603      	mov	r3, r0
 8003736:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003740:	e00a      	b.n	8003758 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003746:	f043 0208 	orr.w	r2, r3, #8
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	77fb      	strb	r3, [r7, #31]
 8003752:	e001      	b.n	8003758 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003754:	2302      	movs	r3, #2
 8003756:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003760:	7ffb      	ldrb	r3, [r7, #31]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3720      	adds	r7, #32
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b08a      	sub	sp, #40	; 0x28
 800376e:	af02      	add	r7, sp, #8
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800377a:	f7fe fd45 	bl	8002208 <HAL_GetTick>
 800377e:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	3320      	adds	r3, #32
 800378e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b01      	cmp	r3, #1
 800379a:	d101      	bne.n	80037a0 <HAL_QSPI_Receive+0x36>
 800379c:	2302      	movs	r3, #2
 800379e:	e082      	b.n	80038a6 <HAL_QSPI_Receive+0x13c>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d171      	bne.n	8003898 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d062      	beq.n	8003886 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2222      	movs	r2, #34	; 0x22
 80037c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80037f8:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8003802:	e01c      	b.n	800383e <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	2201      	movs	r2, #1
 800380c:	2106      	movs	r1, #6
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f93f 	bl	8003a92 <QSPI_WaitFlagStateUntilTimeout>
 8003814:	4603      	mov	r3, r0
 8003816:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8003818:	7ffb      	ldrb	r3, [r7, #31]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d114      	bne.n	8003848 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	7812      	ldrb	r2, [r2, #0]
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003838:	1e5a      	subs	r2, r3, #1
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1de      	bne.n	8003804 <HAL_QSPI_Receive+0x9a>
 8003846:	e000      	b.n	800384a <HAL_QSPI_Receive+0xe0>
          break;
 8003848:	bf00      	nop
      }

      if (status == HAL_OK)
 800384a:	7ffb      	ldrb	r3, [r7, #31]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d115      	bne.n	800387c <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	2201      	movs	r2, #1
 8003858:	2102      	movs	r1, #2
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f919 	bl	8003a92 <QSPI_WaitFlagStateUntilTimeout>
 8003860:	4603      	mov	r3, r0
 8003862:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8003864:	7ffb      	ldrb	r3, [r7, #31]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d108      	bne.n	800387c <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2202      	movs	r2, #2
 8003870:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 f892 	bl	800399c <HAL_QSPI_Abort>
 8003878:	4603      	mov	r3, r0
 800387a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003884:	e00a      	b.n	800389c <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388a:	f043 0208 	orr.w	r2, r3, #8
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	77fb      	strb	r3, [r7, #31]
 8003896:	e001      	b.n	800389c <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003898:	2302      	movs	r3, #2
 800389a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80038a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3720      	adds	r7, #32
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b088      	sub	sp, #32
 80038b2:	af02      	add	r7, sp, #8
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	607a      	str	r2, [r7, #4]
 80038ba:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80038bc:	f7fe fca4 	bl	8002208 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_QSPI_AutoPolling+0x24>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e060      	b.n	8003994 <HAL_QSPI_AutoPolling+0xe6>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d14f      	bne.n	8003986 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2242      	movs	r2, #66	; 0x42
 80038f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	2200      	movs	r2, #0
 80038fc:	2120      	movs	r1, #32
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 f8c7 	bl	8003a92 <QSPI_WaitFlagStateUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003908:	7dfb      	ldrb	r3, [r7, #23]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d13d      	bne.n	800398a <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6812      	ldr	r2, [r2, #0]
 8003916:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6852      	ldr	r2, [r2, #4]
 8003920:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6892      	ldr	r2, [r2, #8]
 800392a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	431a      	orrs	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003944:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800394e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003952:	68b9      	ldr	r1, [r7, #8]
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f8d3 	bl	8003b00 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2201      	movs	r2, #1
 8003962:	2108      	movs	r1, #8
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 f894 	bl	8003a92 <QSPI_WaitFlagStateUntilTimeout>
 800396a:	4603      	mov	r3, r0
 800396c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800396e:	7dfb      	ldrb	r3, [r7, #23]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10a      	bne.n	800398a <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2208      	movs	r2, #8
 800397a:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003984:	e001      	b.n	800398a <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003986:	2302      	movs	r3, #2
 8003988:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003992:	7dfb      	ldrb	r3, [r7, #23]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80039a8:	f7fe fc2e 	bl	8002208 <HAL_GetTick>
 80039ac:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d056      	beq.n	8003a6c <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d017      	beq.n	8003a04 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0204 	bic.w	r2, r2, #4
 80039e2:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff f8dd 	bl	8002ba8 <HAL_DMA_Abort>
 80039ee:	4603      	mov	r3, r0
 80039f0:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fc:	f043 0204 	orr.w	r2, r3, #4
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0202 	orr.w	r2, r2, #2
 8003a12:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	2102      	movs	r1, #2
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f836 	bl	8003a92 <QSPI_WaitFlagStateUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10e      	bne.n	8003a4e <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2202      	movs	r2, #2
 8003a36:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2200      	movs	r2, #0
 8003a42:	2120      	movs	r1, #32
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f824 	bl	8003a92 <QSPI_WaitFlagStateUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10b      	bne.n	8003a6c <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695a      	ldr	r2, [r3, #20]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003a62:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b084      	sub	sp, #16
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	60f8      	str	r0, [r7, #12]
 8003a9a:	60b9      	str	r1, [r7, #8]
 8003a9c:	603b      	str	r3, [r7, #0]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003aa2:	e01a      	b.n	8003ada <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aaa:	d016      	beq.n	8003ada <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aac:	f7fe fbac 	bl	8002208 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d302      	bcc.n	8003ac2 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10b      	bne.n	8003ada <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ace:	f043 0201 	orr.w	r2, r3, #1
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e00e      	b.n	8003af8 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	bf14      	ite	ne
 8003ae8:	2301      	movne	r3, #1
 8003aea:	2300      	moveq	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	461a      	mov	r2, r3
 8003af0:	79fb      	ldrb	r3, [r7, #7]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d1d6      	bne.n	8003aa4 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d009      	beq.n	8003b28 <QSPI_Config+0x28>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003b1a:	d005      	beq.n	8003b28 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3a01      	subs	r2, #1
 8003b26:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 80b9 	beq.w	8003ca4 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d05f      	beq.n	8003bfa <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	6892      	ldr	r2, [r2, #8]
 8003b42:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d031      	beq.n	8003bb0 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b54:	431a      	orrs	r2, r3
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	431a      	orrs	r2, r3
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	049b      	lsls	r3, r3, #18
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	431a      	orrs	r2, r3
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	431a      	orrs	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	431a      	orrs	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	ea42 0103 	orr.w	r1, r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003ba0:	f000 812e 	beq.w	8003e00 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	6852      	ldr	r2, [r2, #4]
 8003bac:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8003bae:	e127      	b.n	8003e00 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	049b      	lsls	r3, r3, #18
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	431a      	orrs	r2, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	ea42 0103 	orr.w	r1, r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	615a      	str	r2, [r3, #20]
}
 8003bf8:	e102      	b.n	8003e00 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d02e      	beq.n	8003c60 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c10:	431a      	orrs	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	431a      	orrs	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	049b      	lsls	r3, r3, #18
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	431a      	orrs	r2, r3
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	431a      	orrs	r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	ea42 0103 	orr.w	r1, r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003c50:	f000 80d6 	beq.w	8003e00 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	6852      	ldr	r2, [r2, #4]
 8003c5c:	619a      	str	r2, [r3, #24]
}
 8003c5e:	e0cf      	b.n	8003e00 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	431a      	orrs	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	049b      	lsls	r3, r3, #18
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	ea42 0103 	orr.w	r1, r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	615a      	str	r2, [r3, #20]
}
 8003ca2:	e0ad      	b.n	8003e00 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d058      	beq.n	8003d5e <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	6892      	ldr	r2, [r2, #8]
 8003cb4:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d02d      	beq.n	8003d1a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	049b      	lsls	r3, r3, #18
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	431a      	orrs	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	ea42 0103 	orr.w	r1, r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003d0c:	d078      	beq.n	8003e00 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	6852      	ldr	r2, [r2, #4]
 8003d16:	619a      	str	r2, [r3, #24]
}
 8003d18:	e072      	b.n	8003e00 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	431a      	orrs	r2, r3
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	049b      	lsls	r3, r3, #18
 8003d36:	431a      	orrs	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	ea42 0103 	orr.w	r1, r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	615a      	str	r2, [r3, #20]
}
 8003d5c:	e050      	b.n	8003e00 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d02a      	beq.n	8003dbc <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d74:	431a      	orrs	r2, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	049b      	lsls	r3, r3, #18
 8003d82:	431a      	orrs	r2, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	431a      	orrs	r2, r3
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	ea42 0103 	orr.w	r1, r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003dae:	d027      	beq.n	8003e00 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	6852      	ldr	r2, [r2, #4]
 8003db8:	619a      	str	r2, [r3, #24]
}
 8003dba:	e021      	b.n	8003e00 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d01d      	beq.n	8003e00 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	049b      	lsls	r3, r3, #18
 8003de0:	431a      	orrs	r2, r3
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	431a      	orrs	r2, r3
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	ea42 0103 	orr.w	r1, r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	615a      	str	r2, [r3, #20]
}
 8003e00:	bf00      	nop
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e3d4      	b.n	80045c8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e1e:	4ba1      	ldr	r3, [pc, #644]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e28:	4b9e      	ldr	r3, [pc, #632]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0303 	and.w	r3, r3, #3
 8003e30:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0310 	and.w	r3, r3, #16
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 80e4 	beq.w	8004008 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d007      	beq.n	8003e56 <HAL_RCC_OscConfig+0x4a>
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	2b0c      	cmp	r3, #12
 8003e4a:	f040 808b 	bne.w	8003f64 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	f040 8087 	bne.w	8003f64 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e56:	4b93      	ldr	r3, [pc, #588]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d005      	beq.n	8003e6e <HAL_RCC_OscConfig+0x62>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e3ac      	b.n	80045c8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1a      	ldr	r2, [r3, #32]
 8003e72:	4b8c      	ldr	r3, [pc, #560]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d004      	beq.n	8003e88 <HAL_RCC_OscConfig+0x7c>
 8003e7e:	4b89      	ldr	r3, [pc, #548]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e86:	e005      	b.n	8003e94 <HAL_RCC_OscConfig+0x88>
 8003e88:	4b86      	ldr	r3, [pc, #536]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d223      	bcs.n	8003ee0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 fd5d 	bl	800495c <RCC_SetFlashLatencyFromMSIRange>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e38d      	b.n	80045c8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eac:	4b7d      	ldr	r3, [pc, #500]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a7c      	ldr	r2, [pc, #496]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003eb2:	f043 0308 	orr.w	r3, r3, #8
 8003eb6:	6013      	str	r3, [r2, #0]
 8003eb8:	4b7a      	ldr	r3, [pc, #488]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	4977      	ldr	r1, [pc, #476]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eca:	4b76      	ldr	r3, [pc, #472]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	021b      	lsls	r3, r3, #8
 8003ed8:	4972      	ldr	r1, [pc, #456]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	604b      	str	r3, [r1, #4]
 8003ede:	e025      	b.n	8003f2c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ee0:	4b70      	ldr	r3, [pc, #448]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a6f      	ldr	r2, [pc, #444]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003ee6:	f043 0308 	orr.w	r3, r3, #8
 8003eea:	6013      	str	r3, [r2, #0]
 8003eec:	4b6d      	ldr	r3, [pc, #436]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	496a      	ldr	r1, [pc, #424]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003efe:	4b69      	ldr	r3, [pc, #420]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	4965      	ldr	r1, [pc, #404]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d109      	bne.n	8003f2c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fd1d 	bl	800495c <RCC_SetFlashLatencyFromMSIRange>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e34d      	b.n	80045c8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f2c:	f000 fc36 	bl	800479c <HAL_RCC_GetSysClockFreq>
 8003f30:	4602      	mov	r2, r0
 8003f32:	4b5c      	ldr	r3, [pc, #368]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	091b      	lsrs	r3, r3, #4
 8003f38:	f003 030f 	and.w	r3, r3, #15
 8003f3c:	495a      	ldr	r1, [pc, #360]	; (80040a8 <HAL_RCC_OscConfig+0x29c>)
 8003f3e:	5ccb      	ldrb	r3, [r1, r3]
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
 8003f48:	4a58      	ldr	r2, [pc, #352]	; (80040ac <HAL_RCC_OscConfig+0x2a0>)
 8003f4a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f4c:	4b58      	ldr	r3, [pc, #352]	; (80040b0 <HAL_RCC_OscConfig+0x2a4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fe f83b 	bl	8001fcc <HAL_InitTick>
 8003f56:	4603      	mov	r3, r0
 8003f58:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d052      	beq.n	8004006 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	e331      	b.n	80045c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d032      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f6c:	4b4d      	ldr	r3, [pc, #308]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a4c      	ldr	r2, [pc, #304]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003f72:	f043 0301 	orr.w	r3, r3, #1
 8003f76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f78:	f7fe f946 	bl	8002208 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f80:	f7fe f942 	bl	8002208 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e31a      	b.n	80045c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f92:	4b44      	ldr	r3, [pc, #272]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0f0      	beq.n	8003f80 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f9e:	4b41      	ldr	r3, [pc, #260]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a40      	ldr	r2, [pc, #256]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003fa4:	f043 0308 	orr.w	r3, r3, #8
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	4b3e      	ldr	r3, [pc, #248]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	493b      	ldr	r1, [pc, #236]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fbc:	4b39      	ldr	r3, [pc, #228]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	021b      	lsls	r3, r3, #8
 8003fca:	4936      	ldr	r1, [pc, #216]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	604b      	str	r3, [r1, #4]
 8003fd0:	e01a      	b.n	8004008 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003fd2:	4b34      	ldr	r3, [pc, #208]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a33      	ldr	r2, [pc, #204]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003fd8:	f023 0301 	bic.w	r3, r3, #1
 8003fdc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fde:	f7fe f913 	bl	8002208 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fe6:	f7fe f90f 	bl	8002208 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e2e7      	b.n	80045c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ff8:	4b2a      	ldr	r3, [pc, #168]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f0      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x1da>
 8004004:	e000      	b.n	8004008 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004006:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d074      	beq.n	80040fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	2b08      	cmp	r3, #8
 8004018:	d005      	beq.n	8004026 <HAL_RCC_OscConfig+0x21a>
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	2b0c      	cmp	r3, #12
 800401e:	d10e      	bne.n	800403e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	2b03      	cmp	r3, #3
 8004024:	d10b      	bne.n	800403e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004026:	4b1f      	ldr	r3, [pc, #124]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d064      	beq.n	80040fc <HAL_RCC_OscConfig+0x2f0>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d160      	bne.n	80040fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e2c4      	b.n	80045c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004046:	d106      	bne.n	8004056 <HAL_RCC_OscConfig+0x24a>
 8004048:	4b16      	ldr	r3, [pc, #88]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a15      	ldr	r2, [pc, #84]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 800404e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	e01d      	b.n	8004092 <HAL_RCC_OscConfig+0x286>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800405e:	d10c      	bne.n	800407a <HAL_RCC_OscConfig+0x26e>
 8004060:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a0f      	ldr	r2, [pc, #60]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8004066:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	4b0d      	ldr	r3, [pc, #52]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a0c      	ldr	r2, [pc, #48]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8004072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	e00b      	b.n	8004092 <HAL_RCC_OscConfig+0x286>
 800407a:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a09      	ldr	r2, [pc, #36]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8004080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	4b07      	ldr	r3, [pc, #28]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a06      	ldr	r2, [pc, #24]	; (80040a4 <HAL_RCC_OscConfig+0x298>)
 800408c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004090:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d01c      	beq.n	80040d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409a:	f7fe f8b5 	bl	8002208 <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040a0:	e011      	b.n	80040c6 <HAL_RCC_OscConfig+0x2ba>
 80040a2:	bf00      	nop
 80040a4:	40021000 	.word	0x40021000
 80040a8:	08005478 	.word	0x08005478
 80040ac:	20000000 	.word	0x20000000
 80040b0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b4:	f7fe f8a8 	bl	8002208 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b64      	cmp	r3, #100	; 0x64
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e280      	b.n	80045c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040c6:	4baf      	ldr	r3, [pc, #700]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0f0      	beq.n	80040b4 <HAL_RCC_OscConfig+0x2a8>
 80040d2:	e014      	b.n	80040fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7fe f898 	bl	8002208 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040dc:	f7fe f894 	bl	8002208 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b64      	cmp	r3, #100	; 0x64
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e26c      	b.n	80045c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040ee:	4ba5      	ldr	r3, [pc, #660]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f0      	bne.n	80040dc <HAL_RCC_OscConfig+0x2d0>
 80040fa:	e000      	b.n	80040fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d060      	beq.n	80041cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	2b04      	cmp	r3, #4
 800410e:	d005      	beq.n	800411c <HAL_RCC_OscConfig+0x310>
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	2b0c      	cmp	r3, #12
 8004114:	d119      	bne.n	800414a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2b02      	cmp	r3, #2
 800411a:	d116      	bne.n	800414a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800411c:	4b99      	ldr	r3, [pc, #612]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <HAL_RCC_OscConfig+0x328>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e249      	b.n	80045c8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004134:	4b93      	ldr	r3, [pc, #588]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	061b      	lsls	r3, r3, #24
 8004142:	4990      	ldr	r1, [pc, #576]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 8004144:	4313      	orrs	r3, r2
 8004146:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004148:	e040      	b.n	80041cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d023      	beq.n	800419a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004152:	4b8c      	ldr	r3, [pc, #560]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a8b      	ldr	r2, [pc, #556]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 8004158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800415c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415e:	f7fe f853 	bl	8002208 <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004166:	f7fe f84f 	bl	8002208 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e227      	b.n	80045c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004178:	4b82      	ldr	r3, [pc, #520]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0f0      	beq.n	8004166 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004184:	4b7f      	ldr	r3, [pc, #508]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	061b      	lsls	r3, r3, #24
 8004192:	497c      	ldr	r1, [pc, #496]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 8004194:	4313      	orrs	r3, r2
 8004196:	604b      	str	r3, [r1, #4]
 8004198:	e018      	b.n	80041cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800419a:	4b7a      	ldr	r3, [pc, #488]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a79      	ldr	r2, [pc, #484]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 80041a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a6:	f7fe f82f 	bl	8002208 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ae:	f7fe f82b 	bl	8002208 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e203      	b.n	80045c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041c0:	4b70      	ldr	r3, [pc, #448]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f0      	bne.n	80041ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d03c      	beq.n	8004252 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d01c      	beq.n	800421a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041e0:	4b68      	ldr	r3, [pc, #416]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 80041e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e6:	4a67      	ldr	r2, [pc, #412]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f0:	f7fe f80a 	bl	8002208 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f8:	f7fe f806 	bl	8002208 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e1de      	b.n	80045c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800420a:	4b5e      	ldr	r3, [pc, #376]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 800420c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0ef      	beq.n	80041f8 <HAL_RCC_OscConfig+0x3ec>
 8004218:	e01b      	b.n	8004252 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800421a:	4b5a      	ldr	r3, [pc, #360]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 800421c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004220:	4a58      	ldr	r2, [pc, #352]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 8004222:	f023 0301 	bic.w	r3, r3, #1
 8004226:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422a:	f7fd ffed 	bl	8002208 <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004230:	e008      	b.n	8004244 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004232:	f7fd ffe9 	bl	8002208 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e1c1      	b.n	80045c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004244:	4b4f      	ldr	r3, [pc, #316]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 8004246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1ef      	bne.n	8004232 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 80a6 	beq.w	80043ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004260:	2300      	movs	r3, #0
 8004262:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004264:	4b47      	ldr	r3, [pc, #284]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 8004266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10d      	bne.n	800428c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004270:	4b44      	ldr	r3, [pc, #272]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 8004272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004274:	4a43      	ldr	r2, [pc, #268]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 8004276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800427a:	6593      	str	r3, [r2, #88]	; 0x58
 800427c:	4b41      	ldr	r3, [pc, #260]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 800427e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004284:	60bb      	str	r3, [r7, #8]
 8004286:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004288:	2301      	movs	r3, #1
 800428a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800428c:	4b3e      	ldr	r3, [pc, #248]	; (8004388 <HAL_RCC_OscConfig+0x57c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004294:	2b00      	cmp	r3, #0
 8004296:	d118      	bne.n	80042ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004298:	4b3b      	ldr	r3, [pc, #236]	; (8004388 <HAL_RCC_OscConfig+0x57c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a3a      	ldr	r2, [pc, #232]	; (8004388 <HAL_RCC_OscConfig+0x57c>)
 800429e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042a4:	f7fd ffb0 	bl	8002208 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ac:	f7fd ffac 	bl	8002208 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e184      	b.n	80045c8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042be:	4b32      	ldr	r3, [pc, #200]	; (8004388 <HAL_RCC_OscConfig+0x57c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0f0      	beq.n	80042ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d108      	bne.n	80042e4 <HAL_RCC_OscConfig+0x4d8>
 80042d2:	4b2c      	ldr	r3, [pc, #176]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 80042d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d8:	4a2a      	ldr	r2, [pc, #168]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042e2:	e024      	b.n	800432e <HAL_RCC_OscConfig+0x522>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2b05      	cmp	r3, #5
 80042ea:	d110      	bne.n	800430e <HAL_RCC_OscConfig+0x502>
 80042ec:	4b25      	ldr	r3, [pc, #148]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 80042ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f2:	4a24      	ldr	r2, [pc, #144]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 80042f4:	f043 0304 	orr.w	r3, r3, #4
 80042f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042fc:	4b21      	ldr	r3, [pc, #132]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 80042fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004302:	4a20      	ldr	r2, [pc, #128]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 8004304:	f043 0301 	orr.w	r3, r3, #1
 8004308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800430c:	e00f      	b.n	800432e <HAL_RCC_OscConfig+0x522>
 800430e:	4b1d      	ldr	r3, [pc, #116]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 8004310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004314:	4a1b      	ldr	r2, [pc, #108]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 8004316:	f023 0301 	bic.w	r3, r3, #1
 800431a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800431e:	4b19      	ldr	r3, [pc, #100]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 8004320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004324:	4a17      	ldr	r2, [pc, #92]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 8004326:	f023 0304 	bic.w	r3, r3, #4
 800432a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d016      	beq.n	8004364 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004336:	f7fd ff67 	bl	8002208 <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800433c:	e00a      	b.n	8004354 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433e:	f7fd ff63 	bl	8002208 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	f241 3288 	movw	r2, #5000	; 0x1388
 800434c:	4293      	cmp	r3, r2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e139      	b.n	80045c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004354:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <HAL_RCC_OscConfig+0x578>)
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0ed      	beq.n	800433e <HAL_RCC_OscConfig+0x532>
 8004362:	e01a      	b.n	800439a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004364:	f7fd ff50 	bl	8002208 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800436a:	e00f      	b.n	800438c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436c:	f7fd ff4c 	bl	8002208 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	f241 3288 	movw	r2, #5000	; 0x1388
 800437a:	4293      	cmp	r3, r2
 800437c:	d906      	bls.n	800438c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e122      	b.n	80045c8 <HAL_RCC_OscConfig+0x7bc>
 8004382:	bf00      	nop
 8004384:	40021000 	.word	0x40021000
 8004388:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800438c:	4b90      	ldr	r3, [pc, #576]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 800438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1e8      	bne.n	800436c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800439a:	7ffb      	ldrb	r3, [r7, #31]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d105      	bne.n	80043ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a0:	4b8b      	ldr	r3, [pc, #556]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 80043a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a4:	4a8a      	ldr	r2, [pc, #552]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 80043a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043aa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8108 	beq.w	80045c6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	f040 80d0 	bne.w	8004560 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80043c0:	4b83      	ldr	r3, [pc, #524]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f003 0203 	and.w	r2, r3, #3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d130      	bne.n	8004436 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	3b01      	subs	r3, #1
 80043e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d127      	bne.n	8004436 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d11f      	bne.n	8004436 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004400:	2a07      	cmp	r2, #7
 8004402:	bf14      	ite	ne
 8004404:	2201      	movne	r2, #1
 8004406:	2200      	moveq	r2, #0
 8004408:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800440a:	4293      	cmp	r3, r2
 800440c:	d113      	bne.n	8004436 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004418:	085b      	lsrs	r3, r3, #1
 800441a:	3b01      	subs	r3, #1
 800441c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800441e:	429a      	cmp	r2, r3
 8004420:	d109      	bne.n	8004436 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	085b      	lsrs	r3, r3, #1
 800442e:	3b01      	subs	r3, #1
 8004430:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004432:	429a      	cmp	r2, r3
 8004434:	d06e      	beq.n	8004514 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	2b0c      	cmp	r3, #12
 800443a:	d069      	beq.n	8004510 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800443c:	4b64      	ldr	r3, [pc, #400]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d105      	bne.n	8004454 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004448:	4b61      	ldr	r3, [pc, #388]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0b7      	b.n	80045c8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004458:	4b5d      	ldr	r3, [pc, #372]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a5c      	ldr	r2, [pc, #368]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 800445e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004462:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004464:	f7fd fed0 	bl	8002208 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800446c:	f7fd fecc 	bl	8002208 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e0a4      	b.n	80045c8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800447e:	4b54      	ldr	r3, [pc, #336]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f0      	bne.n	800446c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800448a:	4b51      	ldr	r3, [pc, #324]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	4b51      	ldr	r3, [pc, #324]	; (80045d4 <HAL_RCC_OscConfig+0x7c8>)
 8004490:	4013      	ands	r3, r2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800449a:	3a01      	subs	r2, #1
 800449c:	0112      	lsls	r2, r2, #4
 800449e:	4311      	orrs	r1, r2
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044a4:	0212      	lsls	r2, r2, #8
 80044a6:	4311      	orrs	r1, r2
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044ac:	0852      	lsrs	r2, r2, #1
 80044ae:	3a01      	subs	r2, #1
 80044b0:	0552      	lsls	r2, r2, #21
 80044b2:	4311      	orrs	r1, r2
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80044b8:	0852      	lsrs	r2, r2, #1
 80044ba:	3a01      	subs	r2, #1
 80044bc:	0652      	lsls	r2, r2, #25
 80044be:	4311      	orrs	r1, r2
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044c4:	0912      	lsrs	r2, r2, #4
 80044c6:	0452      	lsls	r2, r2, #17
 80044c8:	430a      	orrs	r2, r1
 80044ca:	4941      	ldr	r1, [pc, #260]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80044d0:	4b3f      	ldr	r3, [pc, #252]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a3e      	ldr	r2, [pc, #248]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 80044d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044dc:	4b3c      	ldr	r3, [pc, #240]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	4a3b      	ldr	r2, [pc, #236]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 80044e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044e8:	f7fd fe8e 	bl	8002208 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f0:	f7fd fe8a 	bl	8002208 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e062      	b.n	80045c8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004502:	4b33      	ldr	r3, [pc, #204]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0f0      	beq.n	80044f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800450e:	e05a      	b.n	80045c6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e059      	b.n	80045c8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004514:	4b2e      	ldr	r3, [pc, #184]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d152      	bne.n	80045c6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004520:	4b2b      	ldr	r3, [pc, #172]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a2a      	ldr	r2, [pc, #168]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 8004526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800452a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800452c:	4b28      	ldr	r3, [pc, #160]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	4a27      	ldr	r2, [pc, #156]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 8004532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004536:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004538:	f7fd fe66 	bl	8002208 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004540:	f7fd fe62 	bl	8002208 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e03a      	b.n	80045c8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004552:	4b1f      	ldr	r3, [pc, #124]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0f0      	beq.n	8004540 <HAL_RCC_OscConfig+0x734>
 800455e:	e032      	b.n	80045c6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2b0c      	cmp	r3, #12
 8004564:	d02d      	beq.n	80045c2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004566:	4b1a      	ldr	r3, [pc, #104]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a19      	ldr	r2, [pc, #100]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 800456c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004570:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004572:	4b17      	ldr	r3, [pc, #92]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d105      	bne.n	800458a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800457e:	4b14      	ldr	r3, [pc, #80]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	4a13      	ldr	r2, [pc, #76]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 8004584:	f023 0303 	bic.w	r3, r3, #3
 8004588:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800458a:	4b11      	ldr	r3, [pc, #68]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	4a10      	ldr	r2, [pc, #64]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 8004590:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004598:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459a:	f7fd fe35 	bl	8002208 <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a2:	f7fd fe31 	bl	8002208 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e009      	b.n	80045c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045b4:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <HAL_RCC_OscConfig+0x7c4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1f0      	bne.n	80045a2 <HAL_RCC_OscConfig+0x796>
 80045c0:	e001      	b.n	80045c6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e000      	b.n	80045c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3720      	adds	r7, #32
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40021000 	.word	0x40021000
 80045d4:	f99d808c 	.word	0xf99d808c

080045d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0c8      	b.n	800477e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045ec:	4b66      	ldr	r3, [pc, #408]	; (8004788 <HAL_RCC_ClockConfig+0x1b0>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d910      	bls.n	800461c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fa:	4b63      	ldr	r3, [pc, #396]	; (8004788 <HAL_RCC_ClockConfig+0x1b0>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f023 0207 	bic.w	r2, r3, #7
 8004602:	4961      	ldr	r1, [pc, #388]	; (8004788 <HAL_RCC_ClockConfig+0x1b0>)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	4313      	orrs	r3, r2
 8004608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800460a:	4b5f      	ldr	r3, [pc, #380]	; (8004788 <HAL_RCC_ClockConfig+0x1b0>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d001      	beq.n	800461c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0b0      	b.n	800477e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d04c      	beq.n	80046c2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b03      	cmp	r3, #3
 800462e:	d107      	bne.n	8004640 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004630:	4b56      	ldr	r3, [pc, #344]	; (800478c <HAL_RCC_ClockConfig+0x1b4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d121      	bne.n	8004680 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e09e      	b.n	800477e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b02      	cmp	r3, #2
 8004646:	d107      	bne.n	8004658 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004648:	4b50      	ldr	r3, [pc, #320]	; (800478c <HAL_RCC_ClockConfig+0x1b4>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d115      	bne.n	8004680 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e092      	b.n	800477e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d107      	bne.n	8004670 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004660:	4b4a      	ldr	r3, [pc, #296]	; (800478c <HAL_RCC_ClockConfig+0x1b4>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d109      	bne.n	8004680 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e086      	b.n	800477e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004670:	4b46      	ldr	r3, [pc, #280]	; (800478c <HAL_RCC_ClockConfig+0x1b4>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e07e      	b.n	800477e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004680:	4b42      	ldr	r3, [pc, #264]	; (800478c <HAL_RCC_ClockConfig+0x1b4>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f023 0203 	bic.w	r2, r3, #3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	493f      	ldr	r1, [pc, #252]	; (800478c <HAL_RCC_ClockConfig+0x1b4>)
 800468e:	4313      	orrs	r3, r2
 8004690:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004692:	f7fd fdb9 	bl	8002208 <HAL_GetTick>
 8004696:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004698:	e00a      	b.n	80046b0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800469a:	f7fd fdb5 	bl	8002208 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e066      	b.n	800477e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b0:	4b36      	ldr	r3, [pc, #216]	; (800478c <HAL_RCC_ClockConfig+0x1b4>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 020c 	and.w	r2, r3, #12
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	429a      	cmp	r2, r3
 80046c0:	d1eb      	bne.n	800469a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d008      	beq.n	80046e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ce:	4b2f      	ldr	r3, [pc, #188]	; (800478c <HAL_RCC_ClockConfig+0x1b4>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	492c      	ldr	r1, [pc, #176]	; (800478c <HAL_RCC_ClockConfig+0x1b4>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046e0:	4b29      	ldr	r3, [pc, #164]	; (8004788 <HAL_RCC_ClockConfig+0x1b0>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d210      	bcs.n	8004710 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ee:	4b26      	ldr	r3, [pc, #152]	; (8004788 <HAL_RCC_ClockConfig+0x1b0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f023 0207 	bic.w	r2, r3, #7
 80046f6:	4924      	ldr	r1, [pc, #144]	; (8004788 <HAL_RCC_ClockConfig+0x1b0>)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fe:	4b22      	ldr	r3, [pc, #136]	; (8004788 <HAL_RCC_ClockConfig+0x1b0>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d001      	beq.n	8004710 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e036      	b.n	800477e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d008      	beq.n	800472e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800471c:	4b1b      	ldr	r3, [pc, #108]	; (800478c <HAL_RCC_ClockConfig+0x1b4>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	4918      	ldr	r1, [pc, #96]	; (800478c <HAL_RCC_ClockConfig+0x1b4>)
 800472a:	4313      	orrs	r3, r2
 800472c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d009      	beq.n	800474e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800473a:	4b14      	ldr	r3, [pc, #80]	; (800478c <HAL_RCC_ClockConfig+0x1b4>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	4910      	ldr	r1, [pc, #64]	; (800478c <HAL_RCC_ClockConfig+0x1b4>)
 800474a:	4313      	orrs	r3, r2
 800474c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800474e:	f000 f825 	bl	800479c <HAL_RCC_GetSysClockFreq>
 8004752:	4602      	mov	r2, r0
 8004754:	4b0d      	ldr	r3, [pc, #52]	; (800478c <HAL_RCC_ClockConfig+0x1b4>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	091b      	lsrs	r3, r3, #4
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	490c      	ldr	r1, [pc, #48]	; (8004790 <HAL_RCC_ClockConfig+0x1b8>)
 8004760:	5ccb      	ldrb	r3, [r1, r3]
 8004762:	f003 031f 	and.w	r3, r3, #31
 8004766:	fa22 f303 	lsr.w	r3, r2, r3
 800476a:	4a0a      	ldr	r2, [pc, #40]	; (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 800476c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800476e:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <HAL_RCC_ClockConfig+0x1c0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f7fd fc2a 	bl	8001fcc <HAL_InitTick>
 8004778:	4603      	mov	r3, r0
 800477a:	72fb      	strb	r3, [r7, #11]

  return status;
 800477c:	7afb      	ldrb	r3, [r7, #11]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	40022000 	.word	0x40022000
 800478c:	40021000 	.word	0x40021000
 8004790:	08005478 	.word	0x08005478
 8004794:	20000000 	.word	0x20000000
 8004798:	20000004 	.word	0x20000004

0800479c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800479c:	b480      	push	{r7}
 800479e:	b089      	sub	sp, #36	; 0x24
 80047a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80047a2:	2300      	movs	r3, #0
 80047a4:	61fb      	str	r3, [r7, #28]
 80047a6:	2300      	movs	r3, #0
 80047a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047aa:	4b3e      	ldr	r3, [pc, #248]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 030c 	and.w	r3, r3, #12
 80047b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047b4:	4b3b      	ldr	r3, [pc, #236]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f003 0303 	and.w	r3, r3, #3
 80047bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_RCC_GetSysClockFreq+0x34>
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	2b0c      	cmp	r3, #12
 80047c8:	d121      	bne.n	800480e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d11e      	bne.n	800480e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80047d0:	4b34      	ldr	r3, [pc, #208]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d107      	bne.n	80047ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80047dc:	4b31      	ldr	r3, [pc, #196]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80047de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047e2:	0a1b      	lsrs	r3, r3, #8
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	61fb      	str	r3, [r7, #28]
 80047ea:	e005      	b.n	80047f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047ec:	4b2d      	ldr	r3, [pc, #180]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	091b      	lsrs	r3, r3, #4
 80047f2:	f003 030f 	and.w	r3, r3, #15
 80047f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047f8:	4a2b      	ldr	r2, [pc, #172]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004800:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10d      	bne.n	8004824 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800480c:	e00a      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	2b04      	cmp	r3, #4
 8004812:	d102      	bne.n	800481a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004814:	4b25      	ldr	r3, [pc, #148]	; (80048ac <HAL_RCC_GetSysClockFreq+0x110>)
 8004816:	61bb      	str	r3, [r7, #24]
 8004818:	e004      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	2b08      	cmp	r3, #8
 800481e:	d101      	bne.n	8004824 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004820:	4b23      	ldr	r3, [pc, #140]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004822:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	2b0c      	cmp	r3, #12
 8004828:	d134      	bne.n	8004894 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800482a:	4b1e      	ldr	r3, [pc, #120]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2b02      	cmp	r3, #2
 8004838:	d003      	beq.n	8004842 <HAL_RCC_GetSysClockFreq+0xa6>
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b03      	cmp	r3, #3
 800483e:	d003      	beq.n	8004848 <HAL_RCC_GetSysClockFreq+0xac>
 8004840:	e005      	b.n	800484e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004842:	4b1a      	ldr	r3, [pc, #104]	; (80048ac <HAL_RCC_GetSysClockFreq+0x110>)
 8004844:	617b      	str	r3, [r7, #20]
      break;
 8004846:	e005      	b.n	8004854 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004848:	4b19      	ldr	r3, [pc, #100]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800484a:	617b      	str	r3, [r7, #20]
      break;
 800484c:	e002      	b.n	8004854 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	617b      	str	r3, [r7, #20]
      break;
 8004852:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004854:	4b13      	ldr	r3, [pc, #76]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	091b      	lsrs	r3, r3, #4
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	3301      	adds	r3, #1
 8004860:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004862:	4b10      	ldr	r3, [pc, #64]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	0a1b      	lsrs	r3, r3, #8
 8004868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	fb02 f203 	mul.w	r2, r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	fbb2 f3f3 	udiv	r3, r2, r3
 8004878:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800487a:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	0e5b      	lsrs	r3, r3, #25
 8004880:	f003 0303 	and.w	r3, r3, #3
 8004884:	3301      	adds	r3, #1
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004892:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004894:	69bb      	ldr	r3, [r7, #24]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3724      	adds	r7, #36	; 0x24
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	40021000 	.word	0x40021000
 80048a8:	08005490 	.word	0x08005490
 80048ac:	00f42400 	.word	0x00f42400
 80048b0:	007a1200 	.word	0x007a1200

080048b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048b8:	4b03      	ldr	r3, [pc, #12]	; (80048c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80048ba:	681b      	ldr	r3, [r3, #0]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	20000000 	.word	0x20000000

080048cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048d0:	f7ff fff0 	bl	80048b4 <HAL_RCC_GetHCLKFreq>
 80048d4:	4602      	mov	r2, r0
 80048d6:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	0adb      	lsrs	r3, r3, #11
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	4904      	ldr	r1, [pc, #16]	; (80048f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048e2:	5ccb      	ldrb	r3, [r1, r3]
 80048e4:	f003 031f 	and.w	r3, r3, #31
 80048e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40021000 	.word	0x40021000
 80048f4:	08005488 	.word	0x08005488

080048f8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	220f      	movs	r2, #15
 8004906:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004908:	4b12      	ldr	r3, [pc, #72]	; (8004954 <HAL_RCC_GetClockConfig+0x5c>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 0203 	and.w	r2, r3, #3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004914:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <HAL_RCC_GetClockConfig+0x5c>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004920:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <HAL_RCC_GetClockConfig+0x5c>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800492c:	4b09      	ldr	r3, [pc, #36]	; (8004954 <HAL_RCC_GetClockConfig+0x5c>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	08db      	lsrs	r3, r3, #3
 8004932:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800493a:	4b07      	ldr	r3, [pc, #28]	; (8004958 <HAL_RCC_GetClockConfig+0x60>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0207 	and.w	r2, r3, #7
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	601a      	str	r2, [r3, #0]
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40021000 	.word	0x40021000
 8004958:	40022000 	.word	0x40022000

0800495c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004964:	2300      	movs	r3, #0
 8004966:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004968:	4b2a      	ldr	r3, [pc, #168]	; (8004a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800496a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d003      	beq.n	800497c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004974:	f7fe fd06 	bl	8003384 <HAL_PWREx_GetVoltageRange>
 8004978:	6178      	str	r0, [r7, #20]
 800497a:	e014      	b.n	80049a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800497c:	4b25      	ldr	r3, [pc, #148]	; (8004a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800497e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004980:	4a24      	ldr	r2, [pc, #144]	; (8004a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004986:	6593      	str	r3, [r2, #88]	; 0x58
 8004988:	4b22      	ldr	r3, [pc, #136]	; (8004a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800498a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004994:	f7fe fcf6 	bl	8003384 <HAL_PWREx_GetVoltageRange>
 8004998:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800499a:	4b1e      	ldr	r3, [pc, #120]	; (8004a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800499c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499e:	4a1d      	ldr	r2, [pc, #116]	; (8004a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ac:	d10b      	bne.n	80049c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b80      	cmp	r3, #128	; 0x80
 80049b2:	d919      	bls.n	80049e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2ba0      	cmp	r3, #160	; 0xa0
 80049b8:	d902      	bls.n	80049c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049ba:	2302      	movs	r3, #2
 80049bc:	613b      	str	r3, [r7, #16]
 80049be:	e013      	b.n	80049e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049c0:	2301      	movs	r3, #1
 80049c2:	613b      	str	r3, [r7, #16]
 80049c4:	e010      	b.n	80049e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b80      	cmp	r3, #128	; 0x80
 80049ca:	d902      	bls.n	80049d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80049cc:	2303      	movs	r3, #3
 80049ce:	613b      	str	r3, [r7, #16]
 80049d0:	e00a      	b.n	80049e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b80      	cmp	r3, #128	; 0x80
 80049d6:	d102      	bne.n	80049de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049d8:	2302      	movs	r3, #2
 80049da:	613b      	str	r3, [r7, #16]
 80049dc:	e004      	b.n	80049e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b70      	cmp	r3, #112	; 0x70
 80049e2:	d101      	bne.n	80049e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049e4:	2301      	movs	r3, #1
 80049e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049e8:	4b0b      	ldr	r3, [pc, #44]	; (8004a18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f023 0207 	bic.w	r2, r3, #7
 80049f0:	4909      	ldr	r1, [pc, #36]	; (8004a18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80049f8:	4b07      	ldr	r3, [pc, #28]	; (8004a18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d001      	beq.n	8004a0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e000      	b.n	8004a0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3718      	adds	r7, #24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40021000 	.word	0x40021000
 8004a18:	40022000 	.word	0x40022000

08004a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e049      	b.n	8004ac2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d106      	bne.n	8004a48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7fd faa4 	bl	8001f90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3304      	adds	r3, #4
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4610      	mov	r0, r2
 8004a5c:	f000 fab4 	bl	8004fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d001      	beq.n	8004ae4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e04f      	b.n	8004b84 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0201 	orr.w	r2, r2, #1
 8004afa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a23      	ldr	r2, [pc, #140]	; (8004b90 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d01d      	beq.n	8004b42 <HAL_TIM_Base_Start_IT+0x76>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b0e:	d018      	beq.n	8004b42 <HAL_TIM_Base_Start_IT+0x76>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a1f      	ldr	r2, [pc, #124]	; (8004b94 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d013      	beq.n	8004b42 <HAL_TIM_Base_Start_IT+0x76>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a1e      	ldr	r2, [pc, #120]	; (8004b98 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00e      	beq.n	8004b42 <HAL_TIM_Base_Start_IT+0x76>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a1c      	ldr	r2, [pc, #112]	; (8004b9c <HAL_TIM_Base_Start_IT+0xd0>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d009      	beq.n	8004b42 <HAL_TIM_Base_Start_IT+0x76>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a1b      	ldr	r2, [pc, #108]	; (8004ba0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d004      	beq.n	8004b42 <HAL_TIM_Base_Start_IT+0x76>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a19      	ldr	r2, [pc, #100]	; (8004ba4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d115      	bne.n	8004b6e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	4b17      	ldr	r3, [pc, #92]	; (8004ba8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2b06      	cmp	r3, #6
 8004b52:	d015      	beq.n	8004b80 <HAL_TIM_Base_Start_IT+0xb4>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b5a:	d011      	beq.n	8004b80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0201 	orr.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b6c:	e008      	b.n	8004b80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f042 0201 	orr.w	r2, r2, #1
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	e000      	b.n	8004b82 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	40012c00 	.word	0x40012c00
 8004b94:	40000400 	.word	0x40000400
 8004b98:	40000800 	.word	0x40000800
 8004b9c:	40000c00 	.word	0x40000c00
 8004ba0:	40013400 	.word	0x40013400
 8004ba4:	40014000 	.word	0x40014000
 8004ba8:	00010007 	.word	0x00010007

08004bac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d122      	bne.n	8004c08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d11b      	bne.n	8004c08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0202 	mvn.w	r2, #2
 8004bd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f9cb 	bl	8004f8a <HAL_TIM_IC_CaptureCallback>
 8004bf4:	e005      	b.n	8004c02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f9bd 	bl	8004f76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f9ce 	bl	8004f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f003 0304 	and.w	r3, r3, #4
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d122      	bne.n	8004c5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d11b      	bne.n	8004c5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0204 	mvn.w	r2, #4
 8004c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2202      	movs	r2, #2
 8004c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f9a1 	bl	8004f8a <HAL_TIM_IC_CaptureCallback>
 8004c48:	e005      	b.n	8004c56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f993 	bl	8004f76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f9a4 	bl	8004f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	d122      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d11b      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0208 	mvn.w	r2, #8
 8004c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2204      	movs	r2, #4
 8004c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f977 	bl	8004f8a <HAL_TIM_IC_CaptureCallback>
 8004c9c:	e005      	b.n	8004caa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f969 	bl	8004f76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f97a 	bl	8004f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f003 0310 	and.w	r3, r3, #16
 8004cba:	2b10      	cmp	r3, #16
 8004cbc:	d122      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0310 	and.w	r3, r3, #16
 8004cc8:	2b10      	cmp	r3, #16
 8004cca:	d11b      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0210 	mvn.w	r2, #16
 8004cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2208      	movs	r2, #8
 8004cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f94d 	bl	8004f8a <HAL_TIM_IC_CaptureCallback>
 8004cf0:	e005      	b.n	8004cfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f93f 	bl	8004f76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 f950 	bl	8004f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d10e      	bne.n	8004d30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d107      	bne.n	8004d30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0201 	mvn.w	r2, #1
 8004d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7fc fc10 	bl	8001550 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3a:	2b80      	cmp	r3, #128	; 0x80
 8004d3c:	d10e      	bne.n	8004d5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d48:	2b80      	cmp	r3, #128	; 0x80
 8004d4a:	d107      	bne.n	8004d5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 fafc 	bl	8005354 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d6a:	d10e      	bne.n	8004d8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d76:	2b80      	cmp	r3, #128	; 0x80
 8004d78:	d107      	bne.n	8004d8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 faef 	bl	8005368 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d94:	2b40      	cmp	r3, #64	; 0x40
 8004d96:	d10e      	bne.n	8004db6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da2:	2b40      	cmp	r3, #64	; 0x40
 8004da4:	d107      	bne.n	8004db6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f8fe 	bl	8004fb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	f003 0320 	and.w	r3, r3, #32
 8004dc0:	2b20      	cmp	r3, #32
 8004dc2:	d10e      	bne.n	8004de2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f003 0320 	and.w	r3, r3, #32
 8004dce:	2b20      	cmp	r3, #32
 8004dd0:	d107      	bne.n	8004de2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f06f 0220 	mvn.w	r2, #32
 8004dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 faaf 	bl	8005340 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004de2:	bf00      	nop
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b084      	sub	sp, #16
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
 8004df2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d101      	bne.n	8004e02 <HAL_TIM_ConfigClockSource+0x18>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	e0b5      	b.n	8004f6e <HAL_TIM_ConfigClockSource+0x184>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e20:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e24:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e2c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e3e:	d03e      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0xd4>
 8004e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e44:	f200 8087 	bhi.w	8004f56 <HAL_TIM_ConfigClockSource+0x16c>
 8004e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e4c:	f000 8085 	beq.w	8004f5a <HAL_TIM_ConfigClockSource+0x170>
 8004e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e54:	d87f      	bhi.n	8004f56 <HAL_TIM_ConfigClockSource+0x16c>
 8004e56:	2b70      	cmp	r3, #112	; 0x70
 8004e58:	d01a      	beq.n	8004e90 <HAL_TIM_ConfigClockSource+0xa6>
 8004e5a:	2b70      	cmp	r3, #112	; 0x70
 8004e5c:	d87b      	bhi.n	8004f56 <HAL_TIM_ConfigClockSource+0x16c>
 8004e5e:	2b60      	cmp	r3, #96	; 0x60
 8004e60:	d050      	beq.n	8004f04 <HAL_TIM_ConfigClockSource+0x11a>
 8004e62:	2b60      	cmp	r3, #96	; 0x60
 8004e64:	d877      	bhi.n	8004f56 <HAL_TIM_ConfigClockSource+0x16c>
 8004e66:	2b50      	cmp	r3, #80	; 0x50
 8004e68:	d03c      	beq.n	8004ee4 <HAL_TIM_ConfigClockSource+0xfa>
 8004e6a:	2b50      	cmp	r3, #80	; 0x50
 8004e6c:	d873      	bhi.n	8004f56 <HAL_TIM_ConfigClockSource+0x16c>
 8004e6e:	2b40      	cmp	r3, #64	; 0x40
 8004e70:	d058      	beq.n	8004f24 <HAL_TIM_ConfigClockSource+0x13a>
 8004e72:	2b40      	cmp	r3, #64	; 0x40
 8004e74:	d86f      	bhi.n	8004f56 <HAL_TIM_ConfigClockSource+0x16c>
 8004e76:	2b30      	cmp	r3, #48	; 0x30
 8004e78:	d064      	beq.n	8004f44 <HAL_TIM_ConfigClockSource+0x15a>
 8004e7a:	2b30      	cmp	r3, #48	; 0x30
 8004e7c:	d86b      	bhi.n	8004f56 <HAL_TIM_ConfigClockSource+0x16c>
 8004e7e:	2b20      	cmp	r3, #32
 8004e80:	d060      	beq.n	8004f44 <HAL_TIM_ConfigClockSource+0x15a>
 8004e82:	2b20      	cmp	r3, #32
 8004e84:	d867      	bhi.n	8004f56 <HAL_TIM_ConfigClockSource+0x16c>
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d05c      	beq.n	8004f44 <HAL_TIM_ConfigClockSource+0x15a>
 8004e8a:	2b10      	cmp	r3, #16
 8004e8c:	d05a      	beq.n	8004f44 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004e8e:	e062      	b.n	8004f56 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6818      	ldr	r0, [r3, #0]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	6899      	ldr	r1, [r3, #8]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f000 f9a6 	bl	80051f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004eb2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	609a      	str	r2, [r3, #8]
      break;
 8004ebc:	e04e      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6818      	ldr	r0, [r3, #0]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	6899      	ldr	r1, [r3, #8]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f000 f98f 	bl	80051f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ee0:	609a      	str	r2, [r3, #8]
      break;
 8004ee2:	e03b      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	6859      	ldr	r1, [r3, #4]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f000 f903 	bl	80050fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2150      	movs	r1, #80	; 0x50
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 f95c 	bl	80051ba <TIM_ITRx_SetConfig>
      break;
 8004f02:	e02b      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6818      	ldr	r0, [r3, #0]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	6859      	ldr	r1, [r3, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	461a      	mov	r2, r3
 8004f12:	f000 f922 	bl	800515a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2160      	movs	r1, #96	; 0x60
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 f94c 	bl	80051ba <TIM_ITRx_SetConfig>
      break;
 8004f22:	e01b      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6818      	ldr	r0, [r3, #0]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	6859      	ldr	r1, [r3, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	461a      	mov	r2, r3
 8004f32:	f000 f8e3 	bl	80050fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2140      	movs	r1, #64	; 0x40
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 f93c 	bl	80051ba <TIM_ITRx_SetConfig>
      break;
 8004f42:	e00b      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4610      	mov	r0, r2
 8004f50:	f000 f933 	bl	80051ba <TIM_ITRx_SetConfig>
        break;
 8004f54:	e002      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004f56:	bf00      	nop
 8004f58:	e000      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004f5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
	...

08004fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a40      	ldr	r2, [pc, #256]	; (80050dc <TIM_Base_SetConfig+0x114>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d013      	beq.n	8005008 <TIM_Base_SetConfig+0x40>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe6:	d00f      	beq.n	8005008 <TIM_Base_SetConfig+0x40>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a3d      	ldr	r2, [pc, #244]	; (80050e0 <TIM_Base_SetConfig+0x118>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d00b      	beq.n	8005008 <TIM_Base_SetConfig+0x40>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a3c      	ldr	r2, [pc, #240]	; (80050e4 <TIM_Base_SetConfig+0x11c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d007      	beq.n	8005008 <TIM_Base_SetConfig+0x40>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a3b      	ldr	r2, [pc, #236]	; (80050e8 <TIM_Base_SetConfig+0x120>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d003      	beq.n	8005008 <TIM_Base_SetConfig+0x40>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a3a      	ldr	r2, [pc, #232]	; (80050ec <TIM_Base_SetConfig+0x124>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d108      	bne.n	800501a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a2f      	ldr	r2, [pc, #188]	; (80050dc <TIM_Base_SetConfig+0x114>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d01f      	beq.n	8005062 <TIM_Base_SetConfig+0x9a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005028:	d01b      	beq.n	8005062 <TIM_Base_SetConfig+0x9a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a2c      	ldr	r2, [pc, #176]	; (80050e0 <TIM_Base_SetConfig+0x118>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d017      	beq.n	8005062 <TIM_Base_SetConfig+0x9a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a2b      	ldr	r2, [pc, #172]	; (80050e4 <TIM_Base_SetConfig+0x11c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d013      	beq.n	8005062 <TIM_Base_SetConfig+0x9a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a2a      	ldr	r2, [pc, #168]	; (80050e8 <TIM_Base_SetConfig+0x120>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00f      	beq.n	8005062 <TIM_Base_SetConfig+0x9a>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a29      	ldr	r2, [pc, #164]	; (80050ec <TIM_Base_SetConfig+0x124>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00b      	beq.n	8005062 <TIM_Base_SetConfig+0x9a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a28      	ldr	r2, [pc, #160]	; (80050f0 <TIM_Base_SetConfig+0x128>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d007      	beq.n	8005062 <TIM_Base_SetConfig+0x9a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a27      	ldr	r2, [pc, #156]	; (80050f4 <TIM_Base_SetConfig+0x12c>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d003      	beq.n	8005062 <TIM_Base_SetConfig+0x9a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a26      	ldr	r2, [pc, #152]	; (80050f8 <TIM_Base_SetConfig+0x130>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d108      	bne.n	8005074 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4313      	orrs	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	4313      	orrs	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a10      	ldr	r2, [pc, #64]	; (80050dc <TIM_Base_SetConfig+0x114>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00f      	beq.n	80050c0 <TIM_Base_SetConfig+0xf8>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a12      	ldr	r2, [pc, #72]	; (80050ec <TIM_Base_SetConfig+0x124>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d00b      	beq.n	80050c0 <TIM_Base_SetConfig+0xf8>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a11      	ldr	r2, [pc, #68]	; (80050f0 <TIM_Base_SetConfig+0x128>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d007      	beq.n	80050c0 <TIM_Base_SetConfig+0xf8>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a10      	ldr	r2, [pc, #64]	; (80050f4 <TIM_Base_SetConfig+0x12c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d003      	beq.n	80050c0 <TIM_Base_SetConfig+0xf8>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a0f      	ldr	r2, [pc, #60]	; (80050f8 <TIM_Base_SetConfig+0x130>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d103      	bne.n	80050c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	691a      	ldr	r2, [r3, #16]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	615a      	str	r2, [r3, #20]
}
 80050ce:	bf00      	nop
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40012c00 	.word	0x40012c00
 80050e0:	40000400 	.word	0x40000400
 80050e4:	40000800 	.word	0x40000800
 80050e8:	40000c00 	.word	0x40000c00
 80050ec:	40013400 	.word	0x40013400
 80050f0:	40014000 	.word	0x40014000
 80050f4:	40014400 	.word	0x40014400
 80050f8:	40014800 	.word	0x40014800

080050fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	f023 0201 	bic.w	r2, r3, #1
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	011b      	lsls	r3, r3, #4
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f023 030a 	bic.w	r3, r3, #10
 8005138:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4313      	orrs	r3, r2
 8005140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	621a      	str	r2, [r3, #32]
}
 800514e:	bf00      	nop
 8005150:	371c      	adds	r7, #28
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800515a:	b480      	push	{r7}
 800515c:	b087      	sub	sp, #28
 800515e:	af00      	add	r7, sp, #0
 8005160:	60f8      	str	r0, [r7, #12]
 8005162:	60b9      	str	r1, [r7, #8]
 8005164:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	f023 0210 	bic.w	r2, r3, #16
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005184:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	031b      	lsls	r3, r3, #12
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	4313      	orrs	r3, r2
 800518e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005196:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	4313      	orrs	r3, r2
 80051a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	621a      	str	r2, [r3, #32]
}
 80051ae:	bf00      	nop
 80051b0:	371c      	adds	r7, #28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b085      	sub	sp, #20
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
 80051c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f043 0307 	orr.w	r3, r3, #7
 80051dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	609a      	str	r2, [r3, #8]
}
 80051e4:	bf00      	nop
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800520a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	021a      	lsls	r2, r3, #8
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	431a      	orrs	r2, r3
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	4313      	orrs	r3, r2
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	4313      	orrs	r3, r2
 800521c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	609a      	str	r2, [r3, #8]
}
 8005224:	bf00      	nop
 8005226:	371c      	adds	r7, #28
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005240:	2b01      	cmp	r3, #1
 8005242:	d101      	bne.n	8005248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005244:	2302      	movs	r3, #2
 8005246:	e068      	b.n	800531a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a2e      	ldr	r2, [pc, #184]	; (8005328 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d004      	beq.n	800527c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a2d      	ldr	r2, [pc, #180]	; (800532c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d108      	bne.n	800528e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005282:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005294:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	4313      	orrs	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a1e      	ldr	r2, [pc, #120]	; (8005328 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d01d      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ba:	d018      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a1b      	ldr	r2, [pc, #108]	; (8005330 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d013      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a1a      	ldr	r2, [pc, #104]	; (8005334 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d00e      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a18      	ldr	r2, [pc, #96]	; (8005338 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d009      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a13      	ldr	r2, [pc, #76]	; (800532c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d004      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a14      	ldr	r2, [pc, #80]	; (800533c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d10c      	bne.n	8005308 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40012c00 	.word	0x40012c00
 800532c:	40013400 	.word	0x40013400
 8005330:	40000400 	.word	0x40000400
 8005334:	40000800 	.word	0x40000800
 8005338:	40000c00 	.word	0x40000c00
 800533c:	40014000 	.word	0x40014000

08005340 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <arm_sin_f32>:
 800537c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80053fc <arm_sin_f32+0x80>
 8005380:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005384:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800538c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005390:	d504      	bpl.n	800539c <arm_sin_f32+0x20>
 8005392:	ee17 3a90 	vmov	r3, s15
 8005396:	3b01      	subs	r3, #1
 8005398:	ee07 3a90 	vmov	s15, r3
 800539c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053a0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005400 <arm_sin_f32+0x84>
 80053a4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80053a8:	ee20 0a07 	vmul.f32	s0, s0, s14
 80053ac:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80053b0:	ee17 3a90 	vmov	r3, s15
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ba:	d21a      	bcs.n	80053f2 <arm_sin_f32+0x76>
 80053bc:	ee07 3a90 	vmov	s15, r3
 80053c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053c4:	1c59      	adds	r1, r3, #1
 80053c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80053ca:	4a0e      	ldr	r2, [pc, #56]	; (8005404 <arm_sin_f32+0x88>)
 80053cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80053d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80053d4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80053d8:	ed93 7a00 	vldr	s14, [r3]
 80053dc:	edd2 6a00 	vldr	s13, [r2]
 80053e0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80053e4:	ee20 0a26 	vmul.f32	s0, s0, s13
 80053e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053ec:	ee37 0a80 	vadd.f32	s0, s15, s0
 80053f0:	4770      	bx	lr
 80053f2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80053f6:	2101      	movs	r1, #1
 80053f8:	2300      	movs	r3, #0
 80053fa:	e7e6      	b.n	80053ca <arm_sin_f32+0x4e>
 80053fc:	3e22f983 	.word	0x3e22f983
 8005400:	44000000 	.word	0x44000000
 8005404:	080054c0 	.word	0x080054c0

08005408 <__libc_init_array>:
 8005408:	b570      	push	{r4, r5, r6, lr}
 800540a:	4d0d      	ldr	r5, [pc, #52]	; (8005440 <__libc_init_array+0x38>)
 800540c:	4c0d      	ldr	r4, [pc, #52]	; (8005444 <__libc_init_array+0x3c>)
 800540e:	1b64      	subs	r4, r4, r5
 8005410:	10a4      	asrs	r4, r4, #2
 8005412:	2600      	movs	r6, #0
 8005414:	42a6      	cmp	r6, r4
 8005416:	d109      	bne.n	800542c <__libc_init_array+0x24>
 8005418:	4d0b      	ldr	r5, [pc, #44]	; (8005448 <__libc_init_array+0x40>)
 800541a:	4c0c      	ldr	r4, [pc, #48]	; (800544c <__libc_init_array+0x44>)
 800541c:	f000 f820 	bl	8005460 <_init>
 8005420:	1b64      	subs	r4, r4, r5
 8005422:	10a4      	asrs	r4, r4, #2
 8005424:	2600      	movs	r6, #0
 8005426:	42a6      	cmp	r6, r4
 8005428:	d105      	bne.n	8005436 <__libc_init_array+0x2e>
 800542a:	bd70      	pop	{r4, r5, r6, pc}
 800542c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005430:	4798      	blx	r3
 8005432:	3601      	adds	r6, #1
 8005434:	e7ee      	b.n	8005414 <__libc_init_array+0xc>
 8005436:	f855 3b04 	ldr.w	r3, [r5], #4
 800543a:	4798      	blx	r3
 800543c:	3601      	adds	r6, #1
 800543e:	e7f2      	b.n	8005426 <__libc_init_array+0x1e>
 8005440:	08005cc4 	.word	0x08005cc4
 8005444:	08005cc4 	.word	0x08005cc4
 8005448:	08005cc4 	.word	0x08005cc4
 800544c:	08005cc8 	.word	0x08005cc8

08005450 <memset>:
 8005450:	4402      	add	r2, r0
 8005452:	4603      	mov	r3, r0
 8005454:	4293      	cmp	r3, r2
 8005456:	d100      	bne.n	800545a <memset+0xa>
 8005458:	4770      	bx	lr
 800545a:	f803 1b01 	strb.w	r1, [r3], #1
 800545e:	e7f9      	b.n	8005454 <memset+0x4>

08005460 <_init>:
 8005460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005462:	bf00      	nop
 8005464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005466:	bc08      	pop	{r3}
 8005468:	469e      	mov	lr, r3
 800546a:	4770      	bx	lr

0800546c <_fini>:
 800546c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800546e:	bf00      	nop
 8005470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005472:	bc08      	pop	{r3}
 8005474:	469e      	mov	lr, r3
 8005476:	4770      	bx	lr
