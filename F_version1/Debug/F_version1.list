
F_version1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008204  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c8  08008394  08008394  00018394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d5c  08008d5c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008d5c  08008d5c  00018d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d64  08008d64  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d64  08008d64  00018d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d68  08008d68  00018d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000afdc  20000078  08008de4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b054  08008de4  0002b054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2df  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000332a  00000000  00000000  0003a387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  0003d6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001248  00000000  00000000  0003ea50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002914b  00000000  00000000  0003fc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001526c  00000000  00000000  00068de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa89b  00000000  00000000  0007e04f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  001788ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e4c  00000000  00000000  001789b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  0017e800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800837c 	.word	0x0800837c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800837c 	.word	0x0800837c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b96e 	b.w	8000df0 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	468c      	mov	ip, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f040 8083 	bne.w	8000c42 <__udivmoddi4+0x116>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4617      	mov	r7, r2
 8000b40:	d947      	bls.n	8000bd2 <__udivmoddi4+0xa6>
 8000b42:	fab2 f282 	clz	r2, r2
 8000b46:	b142      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b48:	f1c2 0020 	rsb	r0, r2, #32
 8000b4c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b50:	4091      	lsls	r1, r2
 8000b52:	4097      	lsls	r7, r2
 8000b54:	ea40 0c01 	orr.w	ip, r0, r1
 8000b58:	4094      	lsls	r4, r2
 8000b5a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fbbc f6f8 	udiv	r6, ip, r8
 8000b64:	fa1f fe87 	uxth.w	lr, r7
 8000b68:	fb08 c116 	mls	r1, r8, r6, ip
 8000b6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b70:	fb06 f10e 	mul.w	r1, r6, lr
 8000b74:	4299      	cmp	r1, r3
 8000b76:	d909      	bls.n	8000b8c <__udivmoddi4+0x60>
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b7e:	f080 8119 	bcs.w	8000db4 <__udivmoddi4+0x288>
 8000b82:	4299      	cmp	r1, r3
 8000b84:	f240 8116 	bls.w	8000db4 <__udivmoddi4+0x288>
 8000b88:	3e02      	subs	r6, #2
 8000b8a:	443b      	add	r3, r7
 8000b8c:	1a5b      	subs	r3, r3, r1
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b94:	fb08 3310 	mls	r3, r8, r0, r3
 8000b98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba0:	45a6      	cmp	lr, r4
 8000ba2:	d909      	bls.n	8000bb8 <__udivmoddi4+0x8c>
 8000ba4:	193c      	adds	r4, r7, r4
 8000ba6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000baa:	f080 8105 	bcs.w	8000db8 <__udivmoddi4+0x28c>
 8000bae:	45a6      	cmp	lr, r4
 8000bb0:	f240 8102 	bls.w	8000db8 <__udivmoddi4+0x28c>
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	443c      	add	r4, r7
 8000bb8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bbc:	eba4 040e 	sub.w	r4, r4, lr
 8000bc0:	2600      	movs	r6, #0
 8000bc2:	b11d      	cbz	r5, 8000bcc <__udivmoddi4+0xa0>
 8000bc4:	40d4      	lsrs	r4, r2
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bcc:	4631      	mov	r1, r6
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	b902      	cbnz	r2, 8000bd6 <__udivmoddi4+0xaa>
 8000bd4:	deff      	udf	#255	; 0xff
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	d150      	bne.n	8000c80 <__udivmoddi4+0x154>
 8000bde:	1bcb      	subs	r3, r1, r7
 8000be0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000be4:	fa1f f887 	uxth.w	r8, r7
 8000be8:	2601      	movs	r6, #1
 8000bea:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bee:	0c21      	lsrs	r1, r4, #16
 8000bf0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bf4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bf8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bfc:	428b      	cmp	r3, r1
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0xe4>
 8000c00:	1879      	adds	r1, r7, r1
 8000c02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0xe2>
 8000c08:	428b      	cmp	r3, r1
 8000c0a:	f200 80e9 	bhi.w	8000de0 <__udivmoddi4+0x2b4>
 8000c0e:	4684      	mov	ip, r0
 8000c10:	1ac9      	subs	r1, r1, r3
 8000c12:	b2a3      	uxth	r3, r4
 8000c14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c18:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c1c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c20:	fb08 f800 	mul.w	r8, r8, r0
 8000c24:	45a0      	cmp	r8, r4
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x10c>
 8000c28:	193c      	adds	r4, r7, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x10a>
 8000c30:	45a0      	cmp	r8, r4
 8000c32:	f200 80d9 	bhi.w	8000de8 <__udivmoddi4+0x2bc>
 8000c36:	4618      	mov	r0, r3
 8000c38:	eba4 0408 	sub.w	r4, r4, r8
 8000c3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c40:	e7bf      	b.n	8000bc2 <__udivmoddi4+0x96>
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0x12e>
 8000c46:	2d00      	cmp	r5, #0
 8000c48:	f000 80b1 	beq.w	8000dae <__udivmoddi4+0x282>
 8000c4c:	2600      	movs	r6, #0
 8000c4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c52:	4630      	mov	r0, r6
 8000c54:	4631      	mov	r1, r6
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	fab3 f683 	clz	r6, r3
 8000c5e:	2e00      	cmp	r6, #0
 8000c60:	d14a      	bne.n	8000cf8 <__udivmoddi4+0x1cc>
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d302      	bcc.n	8000c6c <__udivmoddi4+0x140>
 8000c66:	4282      	cmp	r2, r0
 8000c68:	f200 80b8 	bhi.w	8000ddc <__udivmoddi4+0x2b0>
 8000c6c:	1a84      	subs	r4, r0, r2
 8000c6e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c72:	2001      	movs	r0, #1
 8000c74:	468c      	mov	ip, r1
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	d0a8      	beq.n	8000bcc <__udivmoddi4+0xa0>
 8000c7a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c7e:	e7a5      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000c80:	f1c2 0320 	rsb	r3, r2, #32
 8000c84:	fa20 f603 	lsr.w	r6, r0, r3
 8000c88:	4097      	lsls	r7, r2
 8000c8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c8e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c92:	40d9      	lsrs	r1, r3
 8000c94:	4330      	orrs	r0, r6
 8000c96:	0c03      	lsrs	r3, r0, #16
 8000c98:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c9c:	fa1f f887 	uxth.w	r8, r7
 8000ca0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ca4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca8:	fb06 f108 	mul.w	r1, r6, r8
 8000cac:	4299      	cmp	r1, r3
 8000cae:	fa04 f402 	lsl.w	r4, r4, r2
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x19c>
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cba:	f080 808d 	bcs.w	8000dd8 <__udivmoddi4+0x2ac>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 808a 	bls.w	8000dd8 <__udivmoddi4+0x2ac>
 8000cc4:	3e02      	subs	r6, #2
 8000cc6:	443b      	add	r3, r7
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b281      	uxth	r1, r0
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd8:	fb00 f308 	mul.w	r3, r0, r8
 8000cdc:	428b      	cmp	r3, r1
 8000cde:	d907      	bls.n	8000cf0 <__udivmoddi4+0x1c4>
 8000ce0:	1879      	adds	r1, r7, r1
 8000ce2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ce6:	d273      	bcs.n	8000dd0 <__udivmoddi4+0x2a4>
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d971      	bls.n	8000dd0 <__udivmoddi4+0x2a4>
 8000cec:	3802      	subs	r0, #2
 8000cee:	4439      	add	r1, r7
 8000cf0:	1acb      	subs	r3, r1, r3
 8000cf2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cf6:	e778      	b.n	8000bea <__udivmoddi4+0xbe>
 8000cf8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cfc:	fa03 f406 	lsl.w	r4, r3, r6
 8000d00:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d04:	431c      	orrs	r4, r3
 8000d06:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d0e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d12:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d16:	431f      	orrs	r7, r3
 8000d18:	0c3b      	lsrs	r3, r7, #16
 8000d1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d1e:	fa1f f884 	uxth.w	r8, r4
 8000d22:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d26:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d2a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d2e:	458a      	cmp	sl, r1
 8000d30:	fa02 f206 	lsl.w	r2, r2, r6
 8000d34:	fa00 f306 	lsl.w	r3, r0, r6
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x220>
 8000d3a:	1861      	adds	r1, r4, r1
 8000d3c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d40:	d248      	bcs.n	8000dd4 <__udivmoddi4+0x2a8>
 8000d42:	458a      	cmp	sl, r1
 8000d44:	d946      	bls.n	8000dd4 <__udivmoddi4+0x2a8>
 8000d46:	f1a9 0902 	sub.w	r9, r9, #2
 8000d4a:	4421      	add	r1, r4
 8000d4c:	eba1 010a 	sub.w	r1, r1, sl
 8000d50:	b2bf      	uxth	r7, r7
 8000d52:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d56:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d5a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d5e:	fb00 f808 	mul.w	r8, r0, r8
 8000d62:	45b8      	cmp	r8, r7
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0x24a>
 8000d66:	19e7      	adds	r7, r4, r7
 8000d68:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d6c:	d22e      	bcs.n	8000dcc <__udivmoddi4+0x2a0>
 8000d6e:	45b8      	cmp	r8, r7
 8000d70:	d92c      	bls.n	8000dcc <__udivmoddi4+0x2a0>
 8000d72:	3802      	subs	r0, #2
 8000d74:	4427      	add	r7, r4
 8000d76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d7a:	eba7 0708 	sub.w	r7, r7, r8
 8000d7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d82:	454f      	cmp	r7, r9
 8000d84:	46c6      	mov	lr, r8
 8000d86:	4649      	mov	r1, r9
 8000d88:	d31a      	bcc.n	8000dc0 <__udivmoddi4+0x294>
 8000d8a:	d017      	beq.n	8000dbc <__udivmoddi4+0x290>
 8000d8c:	b15d      	cbz	r5, 8000da6 <__udivmoddi4+0x27a>
 8000d8e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d92:	eb67 0701 	sbc.w	r7, r7, r1
 8000d96:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d9a:	40f2      	lsrs	r2, r6
 8000d9c:	ea4c 0202 	orr.w	r2, ip, r2
 8000da0:	40f7      	lsrs	r7, r6
 8000da2:	e9c5 2700 	strd	r2, r7, [r5]
 8000da6:	2600      	movs	r6, #0
 8000da8:	4631      	mov	r1, r6
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	462e      	mov	r6, r5
 8000db0:	4628      	mov	r0, r5
 8000db2:	e70b      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000db4:	4606      	mov	r6, r0
 8000db6:	e6e9      	b.n	8000b8c <__udivmoddi4+0x60>
 8000db8:	4618      	mov	r0, r3
 8000dba:	e6fd      	b.n	8000bb8 <__udivmoddi4+0x8c>
 8000dbc:	4543      	cmp	r3, r8
 8000dbe:	d2e5      	bcs.n	8000d8c <__udivmoddi4+0x260>
 8000dc0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dc4:	eb69 0104 	sbc.w	r1, r9, r4
 8000dc8:	3801      	subs	r0, #1
 8000dca:	e7df      	b.n	8000d8c <__udivmoddi4+0x260>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	e7d2      	b.n	8000d76 <__udivmoddi4+0x24a>
 8000dd0:	4660      	mov	r0, ip
 8000dd2:	e78d      	b.n	8000cf0 <__udivmoddi4+0x1c4>
 8000dd4:	4681      	mov	r9, r0
 8000dd6:	e7b9      	b.n	8000d4c <__udivmoddi4+0x220>
 8000dd8:	4666      	mov	r6, ip
 8000dda:	e775      	b.n	8000cc8 <__udivmoddi4+0x19c>
 8000ddc:	4630      	mov	r0, r6
 8000dde:	e74a      	b.n	8000c76 <__udivmoddi4+0x14a>
 8000de0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000de4:	4439      	add	r1, r7
 8000de6:	e713      	b.n	8000c10 <__udivmoddi4+0xe4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	443c      	add	r4, r7
 8000dec:	e724      	b.n	8000c38 <__udivmoddi4+0x10c>
 8000dee:	bf00      	nop

08000df0 <__aeabi_idiv0>:
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	0000      	movs	r0, r0
	...

08000df8 <get_C6>:



//Tone 1 C6 1046.5 Hz
	uint8_t C6[42];
void get_C6(){
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
	for(int i = 0; i < 42; i++){
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	e043      	b.n	8000e8c <get_C6+0x94>
		C6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/42))*256;
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff fb8d 	bl	8000524 <__aeabi_i2d>
 8000e0a:	a32a      	add	r3, pc, #168	; (adr r3, 8000eb4 <get_C6+0xbc>)
 8000e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e10:	f7ff fbf2 	bl	80005f8 <__aeabi_dmul>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	4610      	mov	r0, r2
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f04f 0200 	mov.w	r2, #0
 8000e20:	4b21      	ldr	r3, [pc, #132]	; (8000ea8 <get_C6+0xb0>)
 8000e22:	f7ff fd13 	bl	800084c <__aeabi_ddiv>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f7ff fe15 	bl	8000a5c <__aeabi_d2f>
 8000e32:	4603      	mov	r3, r0
 8000e34:	ee00 3a10 	vmov	s0, r3
 8000e38:	f006 f844 	bl	8006ec4 <arm_sin_f32>
 8000e3c:	eef0 7a40 	vmov.f32	s15, s0
 8000e40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e48:	ee17 0a90 	vmov	r0, s15
 8000e4c:	f7ff fb7c 	bl	8000548 <__aeabi_f2d>
 8000e50:	a313      	add	r3, pc, #76	; (adr r3, 8000ea0 <get_C6+0xa8>)
 8000e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e56:	f7ff fbcf 	bl	80005f8 <__aeabi_dmul>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	4610      	mov	r0, r2
 8000e60:	4619      	mov	r1, r3
 8000e62:	f04f 0200 	mov.w	r2, #0
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <get_C6+0xb4>)
 8000e68:	f7ff fbc6 	bl	80005f8 <__aeabi_dmul>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	460b      	mov	r3, r1
 8000e70:	4610      	mov	r0, r2
 8000e72:	4619      	mov	r1, r3
 8000e74:	f7ff fdd2 	bl	8000a1c <__aeabi_d2uiz>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	b2d9      	uxtb	r1, r3
 8000e7c:	4a0c      	ldr	r2, [pc, #48]	; (8000eb0 <get_C6+0xb8>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	460a      	mov	r2, r1
 8000e84:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 42; i++){
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b29      	cmp	r3, #41	; 0x29
 8000e90:	ddb8      	ble.n	8000e04 <get_C6+0xc>
	}
}
 8000e92:	bf00      	nop
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	f3af 8000 	nop.w
 8000ea0:	51eb851f 	.word	0x51eb851f
 8000ea4:	3fd51eb8 	.word	0x3fd51eb8
 8000ea8:	40450000 	.word	0x40450000
 8000eac:	40700000 	.word	0x40700000
 8000eb0:	2000ae38 	.word	0x2000ae38
 8000eb4:	53c8d4f1 	.word	0x53c8d4f1
 8000eb8:	401921fb 	.word	0x401921fb
 8000ebc:	00000000 	.word	0x00000000

08000ec0 <get_E6>:

//Tone 2 E6 1318.5 Hz
	uint8_t E6[34];
void get_E6(){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 34; i++){
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	e043      	b.n	8000f54 <get_E6+0x94>
		E6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/34))*256;
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff fb29 	bl	8000524 <__aeabi_i2d>
 8000ed2:	a32a      	add	r3, pc, #168	; (adr r3, 8000f7c <get_E6+0xbc>)
 8000ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed8:	f7ff fb8e 	bl	80005f8 <__aeabi_dmul>
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <get_E6+0xb0>)
 8000eea:	f7ff fcaf 	bl	800084c <__aeabi_ddiv>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f7ff fdb1 	bl	8000a5c <__aeabi_d2f>
 8000efa:	4603      	mov	r3, r0
 8000efc:	ee00 3a10 	vmov	s0, r3
 8000f00:	f005 ffe0 	bl	8006ec4 <arm_sin_f32>
 8000f04:	eef0 7a40 	vmov.f32	s15, s0
 8000f08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f10:	ee17 0a90 	vmov	r0, s15
 8000f14:	f7ff fb18 	bl	8000548 <__aeabi_f2d>
 8000f18:	a313      	add	r3, pc, #76	; (adr r3, 8000f68 <get_E6+0xa8>)
 8000f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1e:	f7ff fb6b 	bl	80005f8 <__aeabi_dmul>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	4610      	mov	r0, r2
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f04f 0200 	mov.w	r2, #0
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <get_E6+0xb4>)
 8000f30:	f7ff fb62 	bl	80005f8 <__aeabi_dmul>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4610      	mov	r0, r2
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f7ff fd6e 	bl	8000a1c <__aeabi_d2uiz>
 8000f40:	4603      	mov	r3, r0
 8000f42:	b2d9      	uxtb	r1, r3
 8000f44:	4a0c      	ldr	r2, [pc, #48]	; (8000f78 <get_E6+0xb8>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	460a      	mov	r2, r1
 8000f4c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 34; i++){
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3301      	adds	r3, #1
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b21      	cmp	r3, #33	; 0x21
 8000f58:	ddb8      	ble.n	8000ecc <get_E6+0xc>
	}
}
 8000f5a:	bf00      	nop
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	f3af 8000 	nop.w
 8000f68:	51eb851f 	.word	0x51eb851f
 8000f6c:	3fd51eb8 	.word	0x3fd51eb8
 8000f70:	40410000 	.word	0x40410000
 8000f74:	40700000 	.word	0x40700000
 8000f78:	2000ad84 	.word	0x2000ad84
 8000f7c:	53c8d4f1 	.word	0x53c8d4f1
 8000f80:	401921fb 	.word	0x401921fb
 8000f84:	00000000 	.word	0x00000000

08000f88 <get_G6>:

//Tone 3 G6 1568.0 Hz
	uint8_t G6[28];
void get_G6(){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 28; i++){
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	e043      	b.n	800101c <get_G6+0x94>
		G6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/28))*256;
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff fac5 	bl	8000524 <__aeabi_i2d>
 8000f9a:	a32a      	add	r3, pc, #168	; (adr r3, 8001044 <get_G6+0xbc>)
 8000f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa0:	f7ff fb2a 	bl	80005f8 <__aeabi_dmul>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4610      	mov	r0, r2
 8000faa:	4619      	mov	r1, r3
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	4b21      	ldr	r3, [pc, #132]	; (8001038 <get_G6+0xb0>)
 8000fb2:	f7ff fc4b 	bl	800084c <__aeabi_ddiv>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f7ff fd4d 	bl	8000a5c <__aeabi_d2f>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	ee00 3a10 	vmov	s0, r3
 8000fc8:	f005 ff7c 	bl	8006ec4 <arm_sin_f32>
 8000fcc:	eef0 7a40 	vmov.f32	s15, s0
 8000fd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fd8:	ee17 0a90 	vmov	r0, s15
 8000fdc:	f7ff fab4 	bl	8000548 <__aeabi_f2d>
 8000fe0:	a313      	add	r3, pc, #76	; (adr r3, 8001030 <get_G6+0xa8>)
 8000fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe6:	f7ff fb07 	bl	80005f8 <__aeabi_dmul>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	4610      	mov	r0, r2
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <get_G6+0xb4>)
 8000ff8:	f7ff fafe 	bl	80005f8 <__aeabi_dmul>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4610      	mov	r0, r2
 8001002:	4619      	mov	r1, r3
 8001004:	f7ff fd0a 	bl	8000a1c <__aeabi_d2uiz>
 8001008:	4603      	mov	r3, r0
 800100a:	b2d9      	uxtb	r1, r3
 800100c:	4a0c      	ldr	r2, [pc, #48]	; (8001040 <get_G6+0xb8>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	460a      	mov	r2, r1
 8001014:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 28; i++){
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3301      	adds	r3, #1
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b1b      	cmp	r3, #27
 8001020:	ddb8      	ble.n	8000f94 <get_G6+0xc>
	}
}
 8001022:	bf00      	nop
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	f3af 8000 	nop.w
 8001030:	51eb851f 	.word	0x51eb851f
 8001034:	3fd51eb8 	.word	0x3fd51eb8
 8001038:	403c0000 	.word	0x403c0000
 800103c:	40700000 	.word	0x40700000
 8001040:	2000aee8 	.word	0x2000aee8
 8001044:	53c8d4f1 	.word	0x53c8d4f1
 8001048:	401921fb 	.word	0x401921fb
 800104c:	00000000 	.word	0x00000000

08001050 <get_A6>:

//Tone 4 A6 1760.0 Hz

	uint8_t A6[25];
void get_A6(){
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
	for(int i = 0; i < 25; i++){
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	e043      	b.n	80010e4 <get_A6+0x94>
		A6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/25))*256;
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff fa61 	bl	8000524 <__aeabi_i2d>
 8001062:	a32a      	add	r3, pc, #168	; (adr r3, 800110c <get_A6+0xbc>)
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	f7ff fac6 	bl	80005f8 <__aeabi_dmul>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	4b21      	ldr	r3, [pc, #132]	; (8001100 <get_A6+0xb0>)
 800107a:	f7ff fbe7 	bl	800084c <__aeabi_ddiv>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4610      	mov	r0, r2
 8001084:	4619      	mov	r1, r3
 8001086:	f7ff fce9 	bl	8000a5c <__aeabi_d2f>
 800108a:	4603      	mov	r3, r0
 800108c:	ee00 3a10 	vmov	s0, r3
 8001090:	f005 ff18 	bl	8006ec4 <arm_sin_f32>
 8001094:	eef0 7a40 	vmov.f32	s15, s0
 8001098:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800109c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010a0:	ee17 0a90 	vmov	r0, s15
 80010a4:	f7ff fa50 	bl	8000548 <__aeabi_f2d>
 80010a8:	a313      	add	r3, pc, #76	; (adr r3, 80010f8 <get_A6+0xa8>)
 80010aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ae:	f7ff faa3 	bl	80005f8 <__aeabi_dmul>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4610      	mov	r0, r2
 80010b8:	4619      	mov	r1, r3
 80010ba:	f04f 0200 	mov.w	r2, #0
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <get_A6+0xb4>)
 80010c0:	f7ff fa9a 	bl	80005f8 <__aeabi_dmul>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4610      	mov	r0, r2
 80010ca:	4619      	mov	r1, r3
 80010cc:	f7ff fca6 	bl	8000a1c <__aeabi_d2uiz>
 80010d0:	4603      	mov	r3, r0
 80010d2:	b2d9      	uxtb	r1, r3
 80010d4:	4a0c      	ldr	r2, [pc, #48]	; (8001108 <get_A6+0xb8>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	460a      	mov	r2, r1
 80010dc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 25; i++){
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3301      	adds	r3, #1
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b18      	cmp	r3, #24
 80010e8:	ddb8      	ble.n	800105c <get_A6+0xc>
	}
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	f3af 8000 	nop.w
 80010f8:	51eb851f 	.word	0x51eb851f
 80010fc:	3fd51eb8 	.word	0x3fd51eb8
 8001100:	40390000 	.word	0x40390000
 8001104:	40700000 	.word	0x40700000
 8001108:	2000af94 	.word	0x2000af94
 800110c:	53c8d4f1 	.word	0x53c8d4f1
 8001110:	401921fb 	.word	0x401921fb
 8001114:	00000000 	.word	0x00000000

08001118 <get_B6>:

//Tone 5 B6 1975.53 Hz
	uint8_t B6[22];
void get_B6(){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 22; i++){
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	e043      	b.n	80011ac <get_B6+0x94>
		B6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/22))*256;
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff f9fd 	bl	8000524 <__aeabi_i2d>
 800112a:	a32a      	add	r3, pc, #168	; (adr r3, 80011d4 <get_B6+0xbc>)
 800112c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001130:	f7ff fa62 	bl	80005f8 <__aeabi_dmul>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4610      	mov	r0, r2
 800113a:	4619      	mov	r1, r3
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <get_B6+0xb0>)
 8001142:	f7ff fb83 	bl	800084c <__aeabi_ddiv>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f7ff fc85 	bl	8000a5c <__aeabi_d2f>
 8001152:	4603      	mov	r3, r0
 8001154:	ee00 3a10 	vmov	s0, r3
 8001158:	f005 feb4 	bl	8006ec4 <arm_sin_f32>
 800115c:	eef0 7a40 	vmov.f32	s15, s0
 8001160:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001164:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001168:	ee17 0a90 	vmov	r0, s15
 800116c:	f7ff f9ec 	bl	8000548 <__aeabi_f2d>
 8001170:	a313      	add	r3, pc, #76	; (adr r3, 80011c0 <get_B6+0xa8>)
 8001172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001176:	f7ff fa3f 	bl	80005f8 <__aeabi_dmul>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <get_B6+0xb4>)
 8001188:	f7ff fa36 	bl	80005f8 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fc42 	bl	8000a1c <__aeabi_d2uiz>
 8001198:	4603      	mov	r3, r0
 800119a:	b2d9      	uxtb	r1, r3
 800119c:	4a0c      	ldr	r2, [pc, #48]	; (80011d0 <get_B6+0xb8>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	460a      	mov	r2, r1
 80011a4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 22; i++){
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3301      	adds	r3, #1
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b15      	cmp	r3, #21
 80011b0:	ddb8      	ble.n	8001124 <get_B6+0xc>
	}
}
 80011b2:	bf00      	nop
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	f3af 8000 	nop.w
 80011c0:	51eb851f 	.word	0x51eb851f
 80011c4:	3fd51eb8 	.word	0x3fd51eb8
 80011c8:	40360000 	.word	0x40360000
 80011cc:	40700000 	.word	0x40700000
 80011d0:	2000ada8 	.word	0x2000ada8
 80011d4:	53c8d4f1 	.word	0x53c8d4f1
 80011d8:	401921fb 	.word	0x401921fb
 80011dc:	00000000 	.word	0x00000000

080011e0 <get_B5>:

//Tone 6 B5 987.78 Hz
	uint8_t B5[45];
void get_B5(){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 45; i++){
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	e043      	b.n	8001274 <get_B5+0x94>
		B5[i] =  0.33*(1 + arm_sin_f32(2*pi*i/45))*256;
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff f999 	bl	8000524 <__aeabi_i2d>
 80011f2:	a32a      	add	r3, pc, #168	; (adr r3, 800129c <get_B5+0xbc>)
 80011f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f8:	f7ff f9fe 	bl	80005f8 <__aeabi_dmul>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	4b21      	ldr	r3, [pc, #132]	; (8001290 <get_B5+0xb0>)
 800120a:	f7ff fb1f 	bl	800084c <__aeabi_ddiv>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff fc21 	bl	8000a5c <__aeabi_d2f>
 800121a:	4603      	mov	r3, r0
 800121c:	ee00 3a10 	vmov	s0, r3
 8001220:	f005 fe50 	bl	8006ec4 <arm_sin_f32>
 8001224:	eef0 7a40 	vmov.f32	s15, s0
 8001228:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800122c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001230:	ee17 0a90 	vmov	r0, s15
 8001234:	f7ff f988 	bl	8000548 <__aeabi_f2d>
 8001238:	a313      	add	r3, pc, #76	; (adr r3, 8001288 <get_B5+0xa8>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f7ff f9db 	bl	80005f8 <__aeabi_dmul>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <get_B5+0xb4>)
 8001250:	f7ff f9d2 	bl	80005f8 <__aeabi_dmul>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f7ff fbde 	bl	8000a1c <__aeabi_d2uiz>
 8001260:	4603      	mov	r3, r0
 8001262:	b2d9      	uxtb	r1, r3
 8001264:	4a0c      	ldr	r2, [pc, #48]	; (8001298 <get_B5+0xb8>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	460a      	mov	r2, r1
 800126c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 45; i++){
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3301      	adds	r3, #1
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b2c      	cmp	r3, #44	; 0x2c
 8001278:	ddb8      	ble.n	80011ec <get_B5+0xc>
	}
}
 800127a:	bf00      	nop
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	f3af 8000 	nop.w
 8001288:	51eb851f 	.word	0x51eb851f
 800128c:	3fd51eb8 	.word	0x3fd51eb8
 8001290:	40468000 	.word	0x40468000
 8001294:	40700000 	.word	0x40700000
 8001298:	2000ae08 	.word	0x2000ae08
 800129c:	53c8d4f1 	.word	0x53c8d4f1
 80012a0:	401921fb 	.word	0x401921fb

080012a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012aa:	f001 fb66 	bl	800297a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ae:	f000 f9c7 	bl	8001640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b2:	f000 fb0b 	bl	80018cc <MX_GPIO_Init>
  MX_DMA_Init();
 80012b6:	f000 faeb 	bl	8001890 <MX_DMA_Init>
  MX_DAC1_Init();
 80012ba:	f000 fa13 	bl	80016e4 <MX_DAC1_Init>
  MX_QUADSPI_Init();
 80012be:	f000 fa43 	bl	8001748 <MX_QUADSPI_Init>
  MX_TIM2_Init();
 80012c2:	f000 fa67 	bl	8001794 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80012c6:	f000 fab3 	bl	8001830 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_QSPI_Init();
 80012ca:	f000 fc1d 	bl	8001b08 <BSP_QSPI_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 80012ce:	48aa      	ldr	r0, [pc, #680]	; (8001578 <main+0x2d4>)
 80012d0:	f004 fccc 	bl	8005c6c <HAL_TIM_Base_Start_IT>




  get_B5();
 80012d4:	f7ff ff84 	bl	80011e0 <get_B5>
  get_C6();
 80012d8:	f7ff fd8e 	bl	8000df8 <get_C6>
  get_E6();
 80012dc:	f7ff fdf0 	bl	8000ec0 <get_E6>
  get_G6();
 80012e0:	f7ff fe52 	bl	8000f88 <get_G6>
  get_A6();
 80012e4:	f7ff feb4 	bl	8001050 <get_A6>
  get_B6();
 80012e8:	f7ff ff16 	bl	8001118 <get_B6>
  uint32_t addr = 0x000000;
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
  for(int i = 0; i < 3; i++){
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
 80012f4:	e00f      	b.n	8001316 <main+0x72>
	  if(BSP_QSPI_Erase_Block(addr + i * 0x010000) != QSPI_OK){
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	041b      	lsls	r3, r3, #16
 80012fa:	461a      	mov	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4413      	add	r3, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f000 fd31 	bl	8001d68 <BSP_QSPI_Erase_Block>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <main+0x6c>
		  Error_Handler();
 800130c:	f000 fbf4 	bl	8001af8 <Error_Handler>
  for(int i = 0; i < 3; i++){
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	3301      	adds	r3, #1
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	2b02      	cmp	r3, #2
 800131a:	ddec      	ble.n	80012f6 <main+0x52>
	  }
  }

  uint32_t tone_addr = 0x000000;
 800131c:	2300      	movs	r3, #0
 800131e:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 490; i++){
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
 8001324:	e00f      	b.n	8001346 <main+0xa2>
	  if(BSP_QSPI_Write((uint8_t *)B5, tone_addr, 45) != QSPI_OK){
 8001326:	222d      	movs	r2, #45	; 0x2d
 8001328:	6a39      	ldr	r1, [r7, #32]
 800132a:	4894      	ldr	r0, [pc, #592]	; (800157c <main+0x2d8>)
 800132c:	f000 fc9e 	bl	8001c6c <BSP_QSPI_Write>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <main+0x96>
		  Error_Handler();
 8001336:	f000 fbdf 	bl	8001af8 <Error_Handler>
	  }
	  tone_addr += 45;
 800133a:	6a3b      	ldr	r3, [r7, #32]
 800133c:	332d      	adds	r3, #45	; 0x2d
 800133e:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 490; i++){
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	3301      	adds	r3, #1
 8001344:	61fb      	str	r3, [r7, #28]
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 800134c:	dbeb      	blt.n	8001326 <main+0x82>
  }
  for(int i = 0; i < 525; i++){
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
 8001352:	e00f      	b.n	8001374 <main+0xd0>
	  if(BSP_QSPI_Write((uint8_t *)C6, tone_addr, 42) != QSPI_OK){
 8001354:	222a      	movs	r2, #42	; 0x2a
 8001356:	6a39      	ldr	r1, [r7, #32]
 8001358:	4889      	ldr	r0, [pc, #548]	; (8001580 <main+0x2dc>)
 800135a:	f000 fc87 	bl	8001c6c <BSP_QSPI_Write>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <main+0xc4>
		  Error_Handler();
 8001364:	f000 fbc8 	bl	8001af8 <Error_Handler>
	  }
	  tone_addr += 42;
 8001368:	6a3b      	ldr	r3, [r7, #32]
 800136a:	332a      	adds	r3, #42	; 0x2a
 800136c:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 525; i++){
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	3301      	adds	r3, #1
 8001372:	61bb      	str	r3, [r7, #24]
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 800137a:	ddeb      	ble.n	8001354 <main+0xb0>
  }
  for(int i = 0; i < 648; i++){
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	e00f      	b.n	80013a2 <main+0xfe>
	  if(BSP_QSPI_Write((uint8_t *)E6, tone_addr, 34) != QSPI_OK){
 8001382:	2222      	movs	r2, #34	; 0x22
 8001384:	6a39      	ldr	r1, [r7, #32]
 8001386:	487f      	ldr	r0, [pc, #508]	; (8001584 <main+0x2e0>)
 8001388:	f000 fc70 	bl	8001c6c <BSP_QSPI_Write>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <main+0xf2>
		  Error_Handler();
 8001392:	f000 fbb1 	bl	8001af8 <Error_Handler>
	  }
	  tone_addr += 34;
 8001396:	6a3b      	ldr	r3, [r7, #32]
 8001398:	3322      	adds	r3, #34	; 0x22
 800139a:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 648; i++){
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	3301      	adds	r3, #1
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f5b3 7f22 	cmp.w	r3, #648	; 0x288
 80013a8:	dbeb      	blt.n	8001382 <main+0xde>
  }
  tone_addr = 0x010266;
 80013aa:	4b77      	ldr	r3, [pc, #476]	; (8001588 <main+0x2e4>)
 80013ac:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 787; i++){
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	e00f      	b.n	80013d4 <main+0x130>
	  if(BSP_QSPI_Write((uint8_t *)G6, tone_addr, 28) != QSPI_OK){
 80013b4:	221c      	movs	r2, #28
 80013b6:	6a39      	ldr	r1, [r7, #32]
 80013b8:	4874      	ldr	r0, [pc, #464]	; (800158c <main+0x2e8>)
 80013ba:	f000 fc57 	bl	8001c6c <BSP_QSPI_Write>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <main+0x124>
		  Error_Handler();
 80013c4:	f000 fb98 	bl	8001af8 <Error_Handler>
	  }
	  tone_addr += 28;
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	331c      	adds	r3, #28
 80013cc:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 787; i++){
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	3301      	adds	r3, #1
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	f240 3212 	movw	r2, #786	; 0x312
 80013da:	4293      	cmp	r3, r2
 80013dc:	ddea      	ble.n	80013b4 <main+0x110>
  }
  tone_addr = 0x015888;
 80013de:	4b6c      	ldr	r3, [pc, #432]	; (8001590 <main+0x2ec>)
 80013e0:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 882; i++){
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	e00f      	b.n	8001408 <main+0x164>
	  if(BSP_QSPI_Write((uint8_t *)A6, tone_addr, 25) != QSPI_OK){
 80013e8:	2219      	movs	r2, #25
 80013ea:	6a39      	ldr	r1, [r7, #32]
 80013ec:	4869      	ldr	r0, [pc, #420]	; (8001594 <main+0x2f0>)
 80013ee:	f000 fc3d 	bl	8001c6c <BSP_QSPI_Write>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <main+0x158>
		  Error_Handler();
 80013f8:	f000 fb7e 	bl	8001af8 <Error_Handler>
	  }
	  tone_addr += 25;
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	3319      	adds	r3, #25
 8001400:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 882; i++){
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3301      	adds	r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f240 3271 	movw	r2, #881	; 0x371
 800140e:	4293      	cmp	r3, r2
 8001410:	ddea      	ble.n	80013e8 <main+0x144>
  }
  for(int i = 0; i < 1002; i++){
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	e00f      	b.n	8001438 <main+0x194>
	  if(BSP_QSPI_Write((uint8_t *)B6, tone_addr, 22) != QSPI_OK){
 8001418:	2216      	movs	r2, #22
 800141a:	6a39      	ldr	r1, [r7, #32]
 800141c:	485e      	ldr	r0, [pc, #376]	; (8001598 <main+0x2f4>)
 800141e:	f000 fc25 	bl	8001c6c <BSP_QSPI_Write>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <main+0x188>
		  Error_Handler();
 8001428:	f000 fb66 	bl	8001af8 <Error_Handler>
	  }
	  tone_addr += 22;
 800142c:	6a3b      	ldr	r3, [r7, #32]
 800142e:	3316      	adds	r3, #22
 8001430:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 1002; i++){
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	3301      	adds	r3, #1
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800143e:	4293      	cmp	r3, r2
 8001440:	ddea      	ble.n	8001418 <main+0x174>
  }

  //Read the data
  if(BSP_QSPI_Read((uint8_t *)play, 0x00000000, 22050) != QSPI_OK){
 8001442:	f245 6222 	movw	r2, #22050	; 0x5622
 8001446:	2100      	movs	r1, #0
 8001448:	4854      	ldr	r0, [pc, #336]	; (800159c <main+0x2f8>)
 800144a:	f000 fbc9 	bl	8001be0 <BSP_QSPI_Read>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <main+0x1b4>
	  Error_Handler();
 8001454:	f000 fb50 	bl	8001af8 <Error_Handler>
  }

  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 8001458:	2308      	movs	r3, #8
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	f245 6322 	movw	r3, #22050	; 0x5622
 8001460:	4a4e      	ldr	r2, [pc, #312]	; (800159c <main+0x2f8>)
 8001462:	2100      	movs	r1, #0
 8001464:	484e      	ldr	r0, [pc, #312]	; (80015a0 <main+0x2fc>)
 8001466:	f001 fbe9 	bl	8002c3c <HAL_DAC_Start_DMA>

    /* USER CODE BEGIN 3 */



	  int GPIO_PinState = 0;//When you press the button, status is 0
 800146a:	2300      	movs	r3, #0
 800146c:	603b      	str	r3, [r7, #0]
	  GPIO_PinState =  HAL_GPIO_ReadPin (Button_GPIO_Port, Button_Pin);
 800146e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001472:	484c      	ldr	r0, [pc, #304]	; (80015a4 <main+0x300>)
 8001474:	f002 fb3a 	bl	8003aec <HAL_GPIO_ReadPin>
 8001478:	4603      	mov	r3, r0
 800147a:	603b      	str	r3, [r7, #0]
	  if(GPIO_PinState==1){
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d0f3      	beq.n	800146a <main+0x1c6>
		  //HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
	  }
	  else
	  {

		  if(HAL_GPIO_ReadPin (LED_GPIO_Port, LED_Pin)){
 8001482:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001486:	4848      	ldr	r0, [pc, #288]	; (80015a8 <main+0x304>)
 8001488:	f002 fb30 	bl	8003aec <HAL_GPIO_ReadPin>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 80a2 	beq.w	80015d8 <main+0x334>
			  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
 8001496:	2108      	movs	r1, #8
 8001498:	4844      	ldr	r0, [pc, #272]	; (80015ac <main+0x308>)
 800149a:	f002 fb3f 	bl	8003b1c <HAL_GPIO_WritePin>
			  if(BSP_QSPI_Read((uint8_t *)play, 0x01AEAA, 22050) != QSPI_OK){
 800149e:	f245 6222 	movw	r2, #22050	; 0x5622
 80014a2:	4943      	ldr	r1, [pc, #268]	; (80015b0 <main+0x30c>)
 80014a4:	483d      	ldr	r0, [pc, #244]	; (800159c <main+0x2f8>)
 80014a6:	f000 fb9b 	bl	8001be0 <BSP_QSPI_Read>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <main+0x210>
			  			  Error_Handler();
 80014b0:	f000 fb22 	bl	8001af8 <Error_Handler>
			  		  }
			  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 80014b4:	2308      	movs	r3, #8
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	f245 6322 	movw	r3, #22050	; 0x5622
 80014bc:	4a37      	ldr	r2, [pc, #220]	; (800159c <main+0x2f8>)
 80014be:	2100      	movs	r1, #0
 80014c0:	4837      	ldr	r0, [pc, #220]	; (80015a0 <main+0x2fc>)
 80014c2:	f001 fbbb 	bl	8002c3c <HAL_DAC_Start_DMA>
			  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014cc:	4836      	ldr	r0, [pc, #216]	; (80015a8 <main+0x304>)
 80014ce:	f002 fb25 	bl	8003b1c <HAL_GPIO_WritePin>
			  LED_status2 = (LED_status2 + 1) % 2;
 80014d2:	4b38      	ldr	r3, [pc, #224]	; (80015b4 <main+0x310>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	bfb8      	it	lt
 80014e0:	425b      	neglt	r3, r3
 80014e2:	4a34      	ldr	r2, [pc, #208]	; (80015b4 <main+0x310>)
 80014e4:	6013      	str	r3, [r2, #0]
			  sprintf(tBuff, "Hit+1!  score:  %d \r", ++score);
 80014e6:	4b34      	ldr	r3, [pc, #208]	; (80015b8 <main+0x314>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	4a32      	ldr	r2, [pc, #200]	; (80015b8 <main+0x314>)
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b31      	ldr	r3, [pc, #196]	; (80015b8 <main+0x314>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	4931      	ldr	r1, [pc, #196]	; (80015bc <main+0x318>)
 80014f8:	4831      	ldr	r0, [pc, #196]	; (80015c0 <main+0x31c>)
 80014fa:	f005 fd9b 	bl	8007034 <siprintf>
			  memset(buffer, 0, strlen(buffer));
 80014fe:	4831      	ldr	r0, [pc, #196]	; (80015c4 <main+0x320>)
 8001500:	f7fe fe66 	bl	80001d0 <strlen>
 8001504:	4603      	mov	r3, r0
 8001506:	461a      	mov	r2, r3
 8001508:	2100      	movs	r1, #0
 800150a:	482e      	ldr	r0, [pc, #184]	; (80015c4 <main+0x320>)
 800150c:	f005 fd4a 	bl	8006fa4 <memset>
			  strcat(buffer, tBuff);
 8001510:	492b      	ldr	r1, [pc, #172]	; (80015c0 <main+0x31c>)
 8001512:	482c      	ldr	r0, [pc, #176]	; (80015c4 <main+0x320>)
 8001514:	f005 fdae 	bl	8007074 <strcat>
			  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8001518:	482a      	ldr	r0, [pc, #168]	; (80015c4 <main+0x320>)
 800151a:	f7fe fe59 	bl	80001d0 <strlen>
 800151e:	4603      	mov	r3, r0
 8001520:	b29a      	uxth	r2, r3
 8001522:	f247 5330 	movw	r3, #30000	; 0x7530
 8001526:	4927      	ldr	r1, [pc, #156]	; (80015c4 <main+0x320>)
 8001528:	4827      	ldr	r0, [pc, #156]	; (80015c8 <main+0x324>)
 800152a:	f005 f845 	bl	80065b8 <HAL_UART_Transmit>
			  isDelaying = 1;
 800152e:	4b27      	ldr	r3, [pc, #156]	; (80015cc <main+0x328>)
 8001530:	2201      	movs	r2, #1
 8001532:	601a      	str	r2, [r3, #0]
			  HAL_Delay(500);
 8001534:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001538:	f001 fa58 	bl	80029ec <HAL_Delay>
			  isDelaying = 0;
 800153c:	4b23      	ldr	r3, [pc, #140]	; (80015cc <main+0x328>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001542:	2201      	movs	r2, #1
 8001544:	2108      	movs	r1, #8
 8001546:	4819      	ldr	r0, [pc, #100]	; (80015ac <main+0x308>)
 8001548:	f002 fae8 	bl	8003b1c <HAL_GPIO_WritePin>
			  if(BSP_QSPI_Read((uint8_t *)play, 0x02AEAA, 22050) != QSPI_OK){
 800154c:	f245 6222 	movw	r2, #22050	; 0x5622
 8001550:	491f      	ldr	r1, [pc, #124]	; (80015d0 <main+0x32c>)
 8001552:	4812      	ldr	r0, [pc, #72]	; (800159c <main+0x2f8>)
 8001554:	f000 fb44 	bl	8001be0 <BSP_QSPI_Read>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <main+0x2be>
			  					  Error_Handler();
 800155e:	f000 facb 	bl	8001af8 <Error_Handler>
			  		}
			  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, empty, 22050, DAC_ALIGN_8B_R);
 8001562:	2308      	movs	r3, #8
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	f245 6322 	movw	r3, #22050	; 0x5622
 800156a:	4a1a      	ldr	r2, [pc, #104]	; (80015d4 <main+0x330>)
 800156c:	2100      	movs	r1, #0
 800156e:	480c      	ldr	r0, [pc, #48]	; (80015a0 <main+0x2fc>)
 8001570:	f001 fb64 	bl	8002c3c <HAL_DAC_Start_DMA>
 8001574:	e779      	b.n	800146a <main+0x1c6>
 8001576:	bf00      	nop
 8001578:	2000af04 	.word	0x2000af04
 800157c:	2000ae08 	.word	0x2000ae08
 8001580:	2000ae38 	.word	0x2000ae38
 8001584:	2000ad84 	.word	0x2000ad84
 8001588:	00010266 	.word	0x00010266
 800158c:	2000aee8 	.word	0x2000aee8
 8001590:	00015888 	.word	0x00015888
 8001594:	2000af94 	.word	0x2000af94
 8001598:	2000ada8 	.word	0x2000ada8
 800159c:	20000094 	.word	0x20000094
 80015a0:	2000ad5c 	.word	0x2000ad5c
 80015a4:	48000800 	.word	0x48000800
 80015a8:	48000400 	.word	0x48000400
 80015ac:	48001000 	.word	0x48001000
 80015b0:	0001aeaa 	.word	0x0001aeaa
 80015b4:	2000ace0 	.word	0x2000ace0
 80015b8:	2000ace4 	.word	0x2000ace4
 80015bc:	08008394 	.word	0x08008394
 80015c0:	2000ad70 	.word	0x2000ad70
 80015c4:	2000ace8 	.word	0x2000ace8
 80015c8:	2000ae64 	.word	0x2000ae64
 80015cc:	2000acdc 	.word	0x2000acdc
 80015d0:	0002aeaa 	.word	0x0002aeaa
 80015d4:	200056b8 	.word	0x200056b8
		  }else{
			 if(score > 0) score--;
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <main+0x388>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	dd04      	ble.n	80015ea <main+0x346>
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <main+0x388>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	4a11      	ldr	r2, [pc, #68]	; (800162c <main+0x388>)
 80015e8:	6013      	str	r3, [r2, #0]
			 sprintf(tBuff, "Missed! score:  %d \r", score);
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <main+0x388>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	461a      	mov	r2, r3
 80015f0:	490f      	ldr	r1, [pc, #60]	; (8001630 <main+0x38c>)
 80015f2:	4810      	ldr	r0, [pc, #64]	; (8001634 <main+0x390>)
 80015f4:	f005 fd1e 	bl	8007034 <siprintf>
			 memset(buffer, 0, strlen(buffer));
 80015f8:	480f      	ldr	r0, [pc, #60]	; (8001638 <main+0x394>)
 80015fa:	f7fe fde9 	bl	80001d0 <strlen>
 80015fe:	4603      	mov	r3, r0
 8001600:	461a      	mov	r2, r3
 8001602:	2100      	movs	r1, #0
 8001604:	480c      	ldr	r0, [pc, #48]	; (8001638 <main+0x394>)
 8001606:	f005 fccd 	bl	8006fa4 <memset>
			 strcat(buffer, tBuff);
 800160a:	490a      	ldr	r1, [pc, #40]	; (8001634 <main+0x390>)
 800160c:	480a      	ldr	r0, [pc, #40]	; (8001638 <main+0x394>)
 800160e:	f005 fd31 	bl	8007074 <strcat>
			 HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8001612:	4809      	ldr	r0, [pc, #36]	; (8001638 <main+0x394>)
 8001614:	f7fe fddc 	bl	80001d0 <strlen>
 8001618:	4603      	mov	r3, r0
 800161a:	b29a      	uxth	r2, r3
 800161c:	f247 5330 	movw	r3, #30000	; 0x7530
 8001620:	4905      	ldr	r1, [pc, #20]	; (8001638 <main+0x394>)
 8001622:	4806      	ldr	r0, [pc, #24]	; (800163c <main+0x398>)
 8001624:	f004 ffc8 	bl	80065b8 <HAL_UART_Transmit>
  {
 8001628:	e71f      	b.n	800146a <main+0x1c6>
 800162a:	bf00      	nop
 800162c:	2000ace4 	.word	0x2000ace4
 8001630:	080083ac 	.word	0x080083ac
 8001634:	2000ad70 	.word	0x2000ad70
 8001638:	2000ace8 	.word	0x2000ace8
 800163c:	2000ae64 	.word	0x2000ae64

08001640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b096      	sub	sp, #88	; 0x58
 8001644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	2244      	movs	r2, #68	; 0x44
 800164c:	2100      	movs	r1, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f005 fca8 	bl	8006fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001654:	463b      	mov	r3, r7
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001662:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001666:	f002 fa99 	bl	8003b9c <HAL_PWREx_ControlVoltageScaling>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001670:	f000 fa42 	bl	8001af8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001674:	2310      	movs	r3, #16
 8001676:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001678:	2301      	movs	r3, #1
 800167a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001680:	2360      	movs	r3, #96	; 0x60
 8001682:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001684:	2302      	movs	r3, #2
 8001686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001688:	2301      	movs	r3, #1
 800168a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800168c:	2301      	movs	r3, #1
 800168e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001690:	2328      	movs	r3, #40	; 0x28
 8001692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001694:	2307      	movs	r3, #7
 8001696:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001698:	2302      	movs	r3, #2
 800169a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800169c:	2302      	movs	r3, #2
 800169e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4618      	mov	r0, r3
 80016a6:	f002 ffaf 	bl	8004608 <HAL_RCC_OscConfig>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80016b0:	f000 fa22 	bl	8001af8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b4:	230f      	movs	r3, #15
 80016b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016b8:	2303      	movs	r3, #3
 80016ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016bc:	2300      	movs	r3, #0
 80016be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016c8:	463b      	mov	r3, r7
 80016ca:	2104      	movs	r1, #4
 80016cc:	4618      	mov	r0, r3
 80016ce:	f003 fb81 	bl	8004dd4 <HAL_RCC_ClockConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80016d8:	f000 fa0e 	bl	8001af8 <Error_Handler>
  }
}
 80016dc:	bf00      	nop
 80016de:	3758      	adds	r7, #88	; 0x58
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	; 0x28
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	2224      	movs	r2, #36	; 0x24
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f005 fc57 	bl	8006fa4 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80016f6:	4b12      	ldr	r3, [pc, #72]	; (8001740 <MX_DAC1_Init+0x5c>)
 80016f8:	4a12      	ldr	r2, [pc, #72]	; (8001744 <MX_DAC1_Init+0x60>)
 80016fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80016fc:	4810      	ldr	r0, [pc, #64]	; (8001740 <MX_DAC1_Init+0x5c>)
 80016fe:	f001 fa7b 	bl	8002bf8 <HAL_DAC_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001708:	f000 f9f6 	bl	8001af8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800170c:	2300      	movs	r3, #0
 800170e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001710:	2324      	movs	r3, #36	; 0x24
 8001712:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	2200      	movs	r2, #0
 8001724:	4619      	mov	r1, r3
 8001726:	4806      	ldr	r0, [pc, #24]	; (8001740 <MX_DAC1_Init+0x5c>)
 8001728:	f001 fb68 	bl	8002dfc <HAL_DAC_ConfigChannel>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001732:	f000 f9e1 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001736:	bf00      	nop
 8001738:	3728      	adds	r7, #40	; 0x28
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2000ad5c 	.word	0x2000ad5c
 8001744:	40007400 	.word	0x40007400

08001748 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <MX_QUADSPI_Init+0x44>)
 800174e:	4a10      	ldr	r2, [pc, #64]	; (8001790 <MX_QUADSPI_Init+0x48>)
 8001750:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_QUADSPI_Init+0x44>)
 8001754:	22ff      	movs	r2, #255	; 0xff
 8001756:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_QUADSPI_Init+0x44>)
 800175a:	2201      	movs	r2, #1
 800175c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <MX_QUADSPI_Init+0x44>)
 8001760:	2200      	movs	r2, #0
 8001762:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_QUADSPI_Init+0x44>)
 8001766:	2201      	movs	r2, #1
 8001768:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <MX_QUADSPI_Init+0x44>)
 800176c:	2200      	movs	r2, #0
 800176e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_QUADSPI_Init+0x44>)
 8001772:	2200      	movs	r2, #0
 8001774:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_QUADSPI_Init+0x44>)
 8001778:	f002 fa66 	bl	8003c48 <HAL_QSPI_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001782:	f000 f9b9 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	2000af50 	.word	0x2000af50
 8001790:	a0001000 	.word	0xa0001000

08001794 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800179a:	f107 0310 	add.w	r3, r7, #16
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017b2:	4b1e      	ldr	r3, [pc, #120]	; (800182c <MX_TIM2_Init+0x98>)
 80017b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017ba:	4b1c      	ldr	r3, [pc, #112]	; (800182c <MX_TIM2_Init+0x98>)
 80017bc:	2200      	movs	r2, #0
 80017be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c0:	4b1a      	ldr	r3, [pc, #104]	; (800182c <MX_TIM2_Init+0x98>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <MX_TIM2_Init+0x98>)
 80017c8:	f240 7216 	movw	r2, #1814	; 0x716
 80017cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	4b17      	ldr	r3, [pc, #92]	; (800182c <MX_TIM2_Init+0x98>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d4:	4b15      	ldr	r3, [pc, #84]	; (800182c <MX_TIM2_Init+0x98>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017da:	4814      	ldr	r0, [pc, #80]	; (800182c <MX_TIM2_Init+0x98>)
 80017dc:	f004 f9ee 	bl	8005bbc <HAL_TIM_Base_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017e6:	f000 f987 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	4619      	mov	r1, r3
 80017f6:	480d      	ldr	r0, [pc, #52]	; (800182c <MX_TIM2_Init+0x98>)
 80017f8:	f004 fbc7 	bl	8005f8a <HAL_TIM_ConfigClockSource>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001802:	f000 f979 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001806:	2320      	movs	r3, #32
 8001808:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	4619      	mov	r1, r3
 8001812:	4806      	ldr	r0, [pc, #24]	; (800182c <MX_TIM2_Init+0x98>)
 8001814:	f004 fddc 	bl	80063d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800181e:	f000 f96b 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	3720      	adds	r7, #32
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	2000af04 	.word	0x2000af04

08001830 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001834:	4b14      	ldr	r3, [pc, #80]	; (8001888 <MX_USART1_UART_Init+0x58>)
 8001836:	4a15      	ldr	r2, [pc, #84]	; (800188c <MX_USART1_UART_Init+0x5c>)
 8001838:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <MX_USART1_UART_Init+0x58>)
 800183c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001840:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <MX_USART1_UART_Init+0x58>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001848:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <MX_USART1_UART_Init+0x58>)
 800184a:	2200      	movs	r2, #0
 800184c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <MX_USART1_UART_Init+0x58>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_USART1_UART_Init+0x58>)
 8001856:	220c      	movs	r2, #12
 8001858:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <MX_USART1_UART_Init+0x58>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_USART1_UART_Init+0x58>)
 8001862:	2200      	movs	r2, #0
 8001864:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <MX_USART1_UART_Init+0x58>)
 8001868:	2200      	movs	r2, #0
 800186a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <MX_USART1_UART_Init+0x58>)
 800186e:	2200      	movs	r2, #0
 8001870:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <MX_USART1_UART_Init+0x58>)
 8001874:	f004 fe52 	bl	800651c <HAL_UART_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800187e:	f000 f93b 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	2000ae64 	.word	0x2000ae64
 800188c:	40013800 	.word	0x40013800

08001890 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <MX_DMA_Init+0x38>)
 8001898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800189a:	4a0b      	ldr	r2, [pc, #44]	; (80018c8 <MX_DMA_Init+0x38>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6493      	str	r3, [r2, #72]	; 0x48
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MX_DMA_Init+0x38>)
 80018a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2100      	movs	r1, #0
 80018b2:	200d      	movs	r0, #13
 80018b4:	f001 f976 	bl	8002ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80018b8:	200d      	movs	r0, #13
 80018ba:	f001 f98f 	bl	8002bdc <HAL_NVIC_EnableIRQ>

}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000

080018cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018e2:	4b34      	ldr	r3, [pc, #208]	; (80019b4 <MX_GPIO_Init+0xe8>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	4a33      	ldr	r2, [pc, #204]	; (80019b4 <MX_GPIO_Init+0xe8>)
 80018e8:	f043 0310 	orr.w	r3, r3, #16
 80018ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ee:	4b31      	ldr	r3, [pc, #196]	; (80019b4 <MX_GPIO_Init+0xe8>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	f003 0310 	and.w	r3, r3, #16
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fa:	4b2e      	ldr	r3, [pc, #184]	; (80019b4 <MX_GPIO_Init+0xe8>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	4a2d      	ldr	r2, [pc, #180]	; (80019b4 <MX_GPIO_Init+0xe8>)
 8001900:	f043 0304 	orr.w	r3, r3, #4
 8001904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001906:	4b2b      	ldr	r3, [pc, #172]	; (80019b4 <MX_GPIO_Init+0xe8>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	4b28      	ldr	r3, [pc, #160]	; (80019b4 <MX_GPIO_Init+0xe8>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	4a27      	ldr	r2, [pc, #156]	; (80019b4 <MX_GPIO_Init+0xe8>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191e:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <MX_GPIO_Init+0xe8>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <MX_GPIO_Init+0xe8>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	4a21      	ldr	r2, [pc, #132]	; (80019b4 <MX_GPIO_Init+0xe8>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001936:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <MX_GPIO_Init+0xe8>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001942:	2201      	movs	r2, #1
 8001944:	2108      	movs	r1, #8
 8001946:	481c      	ldr	r0, [pc, #112]	; (80019b8 <MX_GPIO_Init+0xec>)
 8001948:	f002 f8e8 	bl	8003b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800194c:	2200      	movs	r2, #0
 800194e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001952:	481a      	ldr	r0, [pc, #104]	; (80019bc <MX_GPIO_Init+0xf0>)
 8001954:	f002 f8e2 	bl	8003b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001958:	2308      	movs	r3, #8
 800195a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195c:	2301      	movs	r3, #1
 800195e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2300      	movs	r3, #0
 8001966:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	4619      	mov	r1, r3
 800196e:	4812      	ldr	r0, [pc, #72]	; (80019b8 <MX_GPIO_Init+0xec>)
 8001970:	f001 fe1e 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <MX_GPIO_Init+0xf4>)
 800197c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4619      	mov	r1, r3
 8001988:	480e      	ldr	r0, [pc, #56]	; (80019c4 <MX_GPIO_Init+0xf8>)
 800198a:	f001 fe11 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800198e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001994:	2301      	movs	r3, #1
 8001996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	4619      	mov	r1, r3
 80019a6:	4805      	ldr	r0, [pc, #20]	; (80019bc <MX_GPIO_Init+0xf0>)
 80019a8:	f001 fe02 	bl	80035b0 <HAL_GPIO_Init>

}
 80019ac:	bf00      	nop
 80019ae:	3728      	adds	r7, #40	; 0x28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40021000 	.word	0x40021000
 80019b8:	48001000 	.word	0x48001000
 80019bc:	48000400 	.word	0x48000400
 80019c0:	10110000 	.word	0x10110000
 80019c4:	48000800 	.word	0x48000800

080019c8 <HAL_DAC_ConvCpltCallbackCh1>:

/* USER CODE BEGIN 4 */
int lower = 1;
int upper = 3;
int DAC_status = 0;
void HAL_DAC_ConvCpltCallbackCh1 (DAC_HandleTypeDef * hdac){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af02      	add	r7, sp, #8
 80019ce:	6078      	str	r0, [r7, #4]
	if(isDelaying == 1) return;
 80019d0:	4b35      	ldr	r3, [pc, #212]	; (8001aa8 <HAL_DAC_ConvCpltCallbackCh1+0xe0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d063      	beq.n	8001aa0 <HAL_DAC_ConvCpltCallbackCh1+0xd8>
	if(DAC_status == 1){
 80019d8:	4b34      	ldr	r3, [pc, #208]	; (8001aac <HAL_DAC_ConvCpltCallbackCh1+0xe4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d116      	bne.n	8001a0e <HAL_DAC_ConvCpltCallbackCh1+0x46>
		if(BSP_QSPI_Read((uint8_t *)play, 0x02AEAA, 22050) != QSPI_OK){
 80019e0:	f245 6222 	movw	r2, #22050	; 0x5622
 80019e4:	4932      	ldr	r1, [pc, #200]	; (8001ab0 <HAL_DAC_ConvCpltCallbackCh1+0xe8>)
 80019e6:	4833      	ldr	r0, [pc, #204]	; (8001ab4 <HAL_DAC_ConvCpltCallbackCh1+0xec>)
 80019e8:	f000 f8fa 	bl	8001be0 <BSP_QSPI_Read>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_DAC_ConvCpltCallbackCh1+0x2e>
					  Error_Handler();
 80019f2:	f000 f881 	bl	8001af8 <Error_Handler>
		}
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, empty, 22050, DAC_ALIGN_8B_R);
 80019f6:	2308      	movs	r3, #8
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	f245 6322 	movw	r3, #22050	; 0x5622
 80019fe:	4a2e      	ldr	r2, [pc, #184]	; (8001ab8 <HAL_DAC_ConvCpltCallbackCh1+0xf0>)
 8001a00:	2100      	movs	r1, #0
 8001a02:	482e      	ldr	r0, [pc, #184]	; (8001abc <HAL_DAC_ConvCpltCallbackCh1+0xf4>)
 8001a04:	f001 f91a 	bl	8002c3c <HAL_DAC_Start_DMA>
		DAC_status = 0;
 8001a08:	4b28      	ldr	r3, [pc, #160]	; (8001aac <HAL_DAC_ConvCpltCallbackCh1+0xe4>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
	}
	int randomnumber = (rand() % (upper - lower + 1)) + lower;
 8001a0e:	f005 fad1 	bl	8006fb4 <rand>
 8001a12:	4602      	mov	r2, r0
 8001a14:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <HAL_DAC_ConvCpltCallbackCh1+0xf8>)
 8001a16:	6819      	ldr	r1, [r3, #0]
 8001a18:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <HAL_DAC_ConvCpltCallbackCh1+0xfc>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	1acb      	subs	r3, r1, r3
 8001a1e:	3301      	adds	r3, #1
 8001a20:	fb92 f1f3 	sdiv	r1, r2, r3
 8001a24:	fb03 f301 	mul.w	r3, r3, r1
 8001a28:	1ad2      	subs	r2, r2, r3
 8001a2a:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <HAL_DAC_ConvCpltCallbackCh1+0xfc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4413      	add	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
	if(randomnumber%3 == 0){
 8001a32:	68f9      	ldr	r1, [r7, #12]
 8001a34:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <HAL_DAC_ConvCpltCallbackCh1+0x100>)
 8001a36:	fb83 3201 	smull	r3, r2, r3, r1
 8001a3a:	17cb      	asrs	r3, r1, #31
 8001a3c:	1ad2      	subs	r2, r2, r3
 8001a3e:	4613      	mov	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	1aca      	subs	r2, r1, r3
 8001a46:	2a00      	cmp	r2, #0
 8001a48:	d12b      	bne.n	8001aa2 <HAL_DAC_ConvCpltCallbackCh1+0xda>
		LED_status2 = (LED_status2 + 1) % 2;
 8001a4a:	4b20      	ldr	r3, [pc, #128]	; (8001acc <HAL_DAC_ConvCpltCallbackCh1+0x104>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	bfb8      	it	lt
 8001a58:	425b      	neglt	r3, r3
 8001a5a:	4a1c      	ldr	r2, [pc, #112]	; (8001acc <HAL_DAC_ConvCpltCallbackCh1+0x104>)
 8001a5c:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001a5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a62:	481b      	ldr	r0, [pc, #108]	; (8001ad0 <HAL_DAC_ConvCpltCallbackCh1+0x108>)
 8001a64:	f002 f872 	bl	8003b4c <HAL_GPIO_TogglePin>
		if(LED_status2){
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <HAL_DAC_ConvCpltCallbackCh1+0x104>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d018      	beq.n	8001aa2 <HAL_DAC_ConvCpltCallbackCh1+0xda>
			DAC_status = 1;
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_DAC_ConvCpltCallbackCh1+0xe4>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	601a      	str	r2, [r3, #0]
			if(BSP_QSPI_Read((uint8_t *)play, 0x000000, 22050) != QSPI_OK){
 8001a76:	f245 6222 	movw	r2, #22050	; 0x5622
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	480d      	ldr	r0, [pc, #52]	; (8001ab4 <HAL_DAC_ConvCpltCallbackCh1+0xec>)
 8001a7e:	f000 f8af 	bl	8001be0 <BSP_QSPI_Read>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <HAL_DAC_ConvCpltCallbackCh1+0xc4>
								  Error_Handler();
 8001a88:	f000 f836 	bl	8001af8 <Error_Handler>
			}
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 8001a8c:	2308      	movs	r3, #8
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	f245 6322 	movw	r3, #22050	; 0x5622
 8001a94:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <HAL_DAC_ConvCpltCallbackCh1+0xec>)
 8001a96:	2100      	movs	r1, #0
 8001a98:	4808      	ldr	r0, [pc, #32]	; (8001abc <HAL_DAC_ConvCpltCallbackCh1+0xf4>)
 8001a9a:	f001 f8cf 	bl	8002c3c <HAL_DAC_Start_DMA>
 8001a9e:	e000      	b.n	8001aa2 <HAL_DAC_ConvCpltCallbackCh1+0xda>
	if(isDelaying == 1) return;
 8001aa0:	bf00      	nop
		  }
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
		counter=0;
	}
	counter++;*/
}
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	2000acdc 	.word	0x2000acdc
 8001aac:	2000ad4c 	.word	0x2000ad4c
 8001ab0:	0002aeaa 	.word	0x0002aeaa
 8001ab4:	20000094 	.word	0x20000094
 8001ab8:	200056b8 	.word	0x200056b8
 8001abc:	2000ad5c 	.word	0x2000ad5c
 8001ac0:	20000004 	.word	0x20000004
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	55555556 	.word	0x55555556
 8001acc:	2000ace0 	.word	0x2000ace0
 8001ad0:	48000400 	.word	0x48000400

08001ad4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d101      	bne.n	8001aea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ae6:	f000 ff61 	bl	80029ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40014800 	.word	0x40014800

08001af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	__BKPT();
 8001afc:	be00      	bkpt	0x0000

  /* USER CODE END Error_Handler_Debug */
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8001b0e:	4b32      	ldr	r3, [pc, #200]	; (8001bd8 <BSP_QSPI_Init+0xd0>)
 8001b10:	4a32      	ldr	r2, [pc, #200]	; (8001bdc <BSP_QSPI_Init+0xd4>)
 8001b12:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8001b14:	4830      	ldr	r0, [pc, #192]	; (8001bd8 <BSP_QSPI_Init+0xd0>)
 8001b16:	f002 f90d 	bl	8003d34 <HAL_QSPI_DeInit>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e054      	b.n	8001bce <BSP_QSPI_Init+0xc6>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8001b24:	f000 f964 	bl	8001df0 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 2; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 26.67MHz */
 8001b28:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <BSP_QSPI_Init+0xd0>)
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8001b2e:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <BSP_QSPI_Init+0xd0>)
 8001b30:	2204      	movs	r2, #4
 8001b32:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001b34:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <BSP_QSPI_Init+0xd0>)
 8001b36:	2210      	movs	r2, #16
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001b3e:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	fa93 f3a3 	rbit	r3, r3
 8001b46:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 8001b52:	2320      	movs	r3, #32
 8001b54:	e003      	b.n	8001b5e <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	fab3 f383 	clz	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25R6435F_FLASH_SIZE) - 1;
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <BSP_QSPI_Init+0xd0>)
 8001b64:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001b66:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <BSP_QSPI_Init+0xd0>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8001b6c:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <BSP_QSPI_Init+0xd0>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8001b72:	4819      	ldr	r0, [pc, #100]	; (8001bd8 <BSP_QSPI_Init+0xd0>)
 8001b74:	f002 f868 	bl	8003c48 <HAL_QSPI_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e025      	b.n	8001bce <BSP_QSPI_Init+0xc6>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8001b82:	4815      	ldr	r0, [pc, #84]	; (8001bd8 <BSP_QSPI_Init+0xd0>)
 8001b84:	f000 f974 	bl	8001e70 <QSPI_ResetMemory>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 8001b8e:	2304      	movs	r3, #4
 8001b90:	e01d      	b.n	8001bce <BSP_QSPI_Init+0xc6>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&QSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 8001b92:	2101      	movs	r1, #1
 8001b94:	4810      	ldr	r0, [pc, #64]	; (8001bd8 <BSP_QSPI_Init+0xd0>)
 8001b96:	f000 fa35 	bl	8002004 <QSPI_QuadMode>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <BSP_QSPI_Init+0x9c>
  {
    return QSPI_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e014      	b.n	8001bce <BSP_QSPI_Init+0xc6>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&QSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	480c      	ldr	r0, [pc, #48]	; (8001bd8 <BSP_QSPI_Init+0xd0>)
 8001ba8:	f000 fad4 	bl	8002154 <QSPI_HighPerfMode>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <BSP_QSPI_Init+0xae>
  {
    return QSPI_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00b      	b.n	8001bce <BSP_QSPI_Init+0xc6>
  }
  
  /* Re-configure the clock for the high performance mode */
  QSPIHandle.Init.ClockPrescaler = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <BSP_QSPI_Init+0xd0>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	605a      	str	r2, [r3, #4]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8001bbc:	4806      	ldr	r0, [pc, #24]	; (8001bd8 <BSP_QSPI_Init+0xd0>)
 8001bbe:	f002 f843 	bl	8003c48 <HAL_QSPI_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <BSP_QSPI_Init+0xc4>
  {
    return QSPI_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <BSP_QSPI_Init+0xc6>
  }

  return QSPI_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	2000afb0 	.word	0x2000afb0
 8001bdc:	a0001000 	.word	0xa0001000

08001be0 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b092      	sub	sp, #72	; 0x48
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 8001bec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction        = QUAD_INOUT_READ_CMD;
 8001bf2:	23eb      	movs	r3, #235	; 0xeb
 8001bf4:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = QSPI_ADDRESS_4_LINES;
 8001bf6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = QSPI_ADDRESS_24_BITS;
 8001bfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c00:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = ReadAddr;
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 8001c06:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c0a:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytes     = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8001c10:	23aa      	movs	r3, #170	; 0xaa
 8001c12:	61bb      	str	r3, [r7, #24]
  sCommand.DataMode           = QSPI_DATA_4_LINES;
 8001c14:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001c18:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles        = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData             = Size;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode            = QSPI_DDR_MODE_DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 8001c26:	2300      	movs	r3, #0
 8001c28:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c2e:	f107 0310 	add.w	r3, r7, #16
 8001c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c36:	4619      	mov	r1, r3
 8001c38:	480b      	ldr	r0, [pc, #44]	; (8001c68 <BSP_QSPI_Read+0x88>)
 8001c3a:	f002 f89f 	bl	8003d7c <HAL_QSPI_Command>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <BSP_QSPI_Read+0x68>
  {
    return QSPI_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e00b      	b.n	8001c60 <BSP_QSPI_Read+0x80>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4c:	68f9      	ldr	r1, [r7, #12]
 8001c4e:	4806      	ldr	r0, [pc, #24]	; (8001c68 <BSP_QSPI_Read+0x88>)
 8001c50:	f002 f989 	bl	8003f66 <HAL_QSPI_Receive>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <BSP_QSPI_Read+0x80>
  }

  return QSPI_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3748      	adds	r7, #72	; 0x48
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	2000afb0 	.word	0x2000afb0

08001c6c <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b096      	sub	sp, #88	; 0x58
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001c80:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8001c82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d901      	bls.n	8001c8e <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4413      	add	r3, r2
 8001c98:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = QUAD_PAGE_PROG_CMD;
 8001ca0:	2338      	movs	r3, #56	; 0x38
 8001ca2:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001ca4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ca8:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001caa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cae:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8001cb4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001cb8:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8001cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ccc:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 8001cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd0:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001cd2:	4824      	ldr	r0, [pc, #144]	; (8001d64 <BSP_QSPI_Write+0xf8>)
 8001cd4:	f000 f910 	bl	8001ef8 <QSPI_WriteEnable>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e03b      	b.n	8001d5a <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cea:	4619      	mov	r1, r3
 8001cec:	481d      	ldr	r0, [pc, #116]	; (8001d64 <BSP_QSPI_Write+0xf8>)
 8001cee:	f002 f845 	bl	8003d7c <HAL_QSPI_Command>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e02e      	b.n	8001d5a <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d00:	68f9      	ldr	r1, [r7, #12]
 8001d02:	4818      	ldr	r0, [pc, #96]	; (8001d64 <BSP_QSPI_Write+0xf8>)
 8001d04:	f002 f898 	bl	8003e38 <HAL_QSPI_Transmit>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e023      	b.n	8001d5a <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001d12:	f241 3188 	movw	r1, #5000	; 0x1388
 8001d16:	4813      	ldr	r0, [pc, #76]	; (8001d64 <BSP_QSPI_Write+0xf8>)
 8001d18:	f000 f93a 	bl	8001f90 <QSPI_AutoPollingMemReady>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e019      	b.n	8001d5a <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8001d26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2a:	4413      	add	r3, r2
 8001d2c:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d32:	4413      	add	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8001d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d38:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001d3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d203      	bcs.n	8001d4a <BSP_QSPI_Write+0xde>
 8001d42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	e001      	b.n	8001d4e <BSP_QSPI_Write+0xe2>
 8001d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d4e:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8001d50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d3b8      	bcc.n	8001cca <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3758      	adds	r7, #88	; 0x58
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	2000afb0 	.word	0x2000afb0

08001d68 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b090      	sub	sp, #64	; 0x40
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001d70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d74:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = BLOCK_ERASE_CMD;
 8001d76:	23d8      	movs	r3, #216	; 0xd8
 8001d78:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 8001d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001d80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d84:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001da2:	4812      	ldr	r0, [pc, #72]	; (8001dec <BSP_QSPI_Erase_Block+0x84>)
 8001da4:	f000 f8a8 	bl	8001ef8 <QSPI_WriteEnable>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e017      	b.n	8001de2 <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001db2:	f107 0308 	add.w	r3, r7, #8
 8001db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dba:	4619      	mov	r1, r3
 8001dbc:	480b      	ldr	r0, [pc, #44]	; (8001dec <BSP_QSPI_Erase_Block+0x84>)
 8001dbe:	f001 ffdd 	bl	8003d7c <HAL_QSPI_Command>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e00a      	b.n	8001de2 <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 8001dcc:	f640 51ac 	movw	r1, #3500	; 0xdac
 8001dd0:	4806      	ldr	r0, [pc, #24]	; (8001dec <BSP_QSPI_Erase_Block+0x84>)
 8001dd2:	f000 f8dd 	bl	8001f90 <QSPI_AutoPollingMemReady>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3740      	adds	r7, #64	; 0x40
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	2000afb0 	.word	0x2000afb0

08001df0 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 8001df6:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <BSP_QSPI_MspInit+0x78>)
 8001df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dfa:	4a1b      	ldr	r2, [pc, #108]	; (8001e68 <BSP_QSPI_MspInit+0x78>)
 8001dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e00:	6513      	str	r3, [r2, #80]	; 0x50
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <BSP_QSPI_MspInit+0x78>)
 8001e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 8001e0e:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <BSP_QSPI_MspInit+0x78>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	4a15      	ldr	r2, [pc, #84]	; (8001e68 <BSP_QSPI_MspInit+0x78>)
 8001e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e18:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 8001e1a:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <BSP_QSPI_MspInit+0x78>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <BSP_QSPI_MspInit+0x78>)
 8001e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <BSP_QSPI_MspInit+0x78>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	4a0f      	ldr	r2, [pc, #60]	; (8001e68 <BSP_QSPI_MspInit+0x78>)
 8001e2c:	f043 0310 	orr.w	r3, r3, #16
 8001e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e32:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <BSP_QSPI_MspInit+0x78>)
 8001e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8001e3e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001e42:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001e50:	230a      	movs	r3, #10
 8001e52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e54:	f107 030c 	add.w	r3, r7, #12
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4804      	ldr	r0, [pc, #16]	; (8001e6c <BSP_QSPI_MspInit+0x7c>)
 8001e5c:	f001 fba8 	bl	80035b0 <HAL_GPIO_Init>
}
 8001e60:	bf00      	nop
 8001e62:	3720      	adds	r7, #32
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	48001000 	.word	0x48001000

08001e70 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b090      	sub	sp, #64	; 0x40
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001e78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e7c:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8001e7e:	2366      	movs	r3, #102	; 0x66
 8001e80:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001e82:	2300      	movs	r3, #0
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001e86:	2300      	movs	r3, #0
 8001e88:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001e96:	2300      	movs	r3, #0
 8001e98:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e9e:	f107 0308 	add.w	r3, r7, #8
 8001ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4812      	ldr	r0, [pc, #72]	; (8001ef4 <QSPI_ResetMemory+0x84>)
 8001eaa:	f001 ff67 	bl	8003d7c <HAL_QSPI_Command>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e019      	b.n	8001eec <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8001eb8:	2399      	movs	r3, #153	; 0x99
 8001eba:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ebc:	f107 0308 	add.w	r3, r7, #8
 8001ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	480b      	ldr	r0, [pc, #44]	; (8001ef4 <QSPI_ResetMemory+0x84>)
 8001ec8:	f001 ff58 	bl	8003d7c <HAL_QSPI_Command>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e00a      	b.n	8001eec <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001ed6:	f241 3188 	movw	r1, #5000	; 0x1388
 8001eda:	4806      	ldr	r0, [pc, #24]	; (8001ef4 <QSPI_ResetMemory+0x84>)
 8001edc:	f000 f858 	bl	8001f90 <QSPI_AutoPollingMemReady>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3740      	adds	r7, #64	; 0x40
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	2000afb0 	.word	0x2000afb0

08001ef8 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b096      	sub	sp, #88	; 0x58
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001f00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f04:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8001f06:	2306      	movs	r3, #6
 8001f08:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001f22:	2300      	movs	r3, #0
 8001f24:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f26:	f107 0320 	add.w	r3, r7, #32
 8001f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4816      	ldr	r0, [pc, #88]	; (8001f8c <QSPI_WriteEnable+0x94>)
 8001f32:	f001 ff23 	bl	8003d7c <HAL_QSPI_Command>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e020      	b.n	8001f82 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = MX25R6435F_SR_WEL;
 8001f40:	2302      	movs	r3, #2
 8001f42:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WEL;
 8001f44:	2302      	movs	r3, #2
 8001f46:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8001f50:	2310      	movs	r3, #16
 8001f52:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001f54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f58:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8001f5a:	2305      	movs	r3, #5
 8001f5c:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8001f5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f62:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f64:	f107 0208 	add.w	r2, r7, #8
 8001f68:	f107 0120 	add.w	r1, r7, #32
 8001f6c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f70:	4806      	ldr	r0, [pc, #24]	; (8001f8c <QSPI_WriteEnable+0x94>)
 8001f72:	f002 f89a 	bl	80040aa <HAL_QSPI_AutoPolling>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3758      	adds	r7, #88	; 0x58
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	2000afb0 	.word	0x2000afb0

08001f90 <QSPI_AutoPollingMemReady>:
  * @param  hqspi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b096      	sub	sp, #88	; 0x58
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001fa0:	2305      	movs	r3, #5
 8001fa2:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001fac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fb0:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WIP;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8001fd2:	2310      	movs	r3, #16
 8001fd4:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001fd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fda:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 8001fdc:	f107 0208 	add.w	r2, r7, #8
 8001fe0:	f107 0120 	add.w	r1, r7, #32
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	4806      	ldr	r0, [pc, #24]	; (8002000 <QSPI_AutoPollingMemReady+0x70>)
 8001fe8:	f002 f85f 	bl	80040aa <HAL_QSPI_AutoPolling>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3758      	adds	r7, #88	; 0x58
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	2000afb0 	.word	0x2000afb0

08002004 <QSPI_QuadMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b092      	sub	sp, #72	; 0x48
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002010:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002014:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8002016:	2305      	movs	r3, #5
 8002018:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800201a:	2300      	movs	r3, #0
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800201e:	2300      	movs	r3, #0
 8002020:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8002022:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002026:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8002028:	2300      	movs	r3, #0
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 800202c:	2301      	movs	r3, #1
 800202e:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002030:	2300      	movs	r3, #0
 8002032:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002034:	2300      	movs	r3, #0
 8002036:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002038:	2300      	movs	r3, #0
 800203a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800203c:	f107 0310 	add.w	r3, r7, #16
 8002040:	f241 3288 	movw	r2, #5000	; 0x1388
 8002044:	4619      	mov	r1, r3
 8002046:	4842      	ldr	r0, [pc, #264]	; (8002150 <QSPI_QuadMode+0x14c>)
 8002048:	f001 fe98 	bl	8003d7c <HAL_QSPI_Command>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <QSPI_QuadMode+0x52>
  {
    return QSPI_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e077      	b.n	8002146 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002056:	f107 030f 	add.w	r3, r7, #15
 800205a:	f241 3288 	movw	r2, #5000	; 0x1388
 800205e:	4619      	mov	r1, r3
 8002060:	483b      	ldr	r0, [pc, #236]	; (8002150 <QSPI_QuadMode+0x14c>)
 8002062:	f001 ff80 	bl	8003f66 <HAL_QSPI_Receive>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <QSPI_QuadMode+0x6c>
  {
    return QSPI_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e06a      	b.n	8002146 <QSPI_QuadMode+0x142>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8002070:	4837      	ldr	r0, [pc, #220]	; (8002150 <QSPI_QuadMode+0x14c>)
 8002072:	f7ff ff41 	bl	8001ef8 <QSPI_WriteEnable>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <QSPI_QuadMode+0x7c>
  {
    return QSPI_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e062      	b.n	8002146 <QSPI_QuadMode+0x142>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d105      	bne.n	8002092 <QSPI_QuadMode+0x8e>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800208c:	b2db      	uxtb	r3, r3
 800208e:	73fb      	strb	r3, [r7, #15]
 8002090:	e004      	b.n	800209c <QSPI_QuadMode+0x98>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002098:	b2db      	uxtb	r3, r3
 800209a:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 800209c:	2301      	movs	r3, #1
 800209e:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80020a0:	f107 0310 	add.w	r3, r7, #16
 80020a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a8:	4619      	mov	r1, r3
 80020aa:	4829      	ldr	r0, [pc, #164]	; (8002150 <QSPI_QuadMode+0x14c>)
 80020ac:	f001 fe66 	bl	8003d7c <HAL_QSPI_Command>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <QSPI_QuadMode+0xb6>
  {
    return QSPI_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e045      	b.n	8002146 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80020ba:	f107 030f 	add.w	r3, r7, #15
 80020be:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c2:	4619      	mov	r1, r3
 80020c4:	4822      	ldr	r0, [pc, #136]	; (8002150 <QSPI_QuadMode+0x14c>)
 80020c6:	f001 feb7 	bl	8003e38 <HAL_QSPI_Transmit>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <QSPI_QuadMode+0xd0>
  {
    return QSPI_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e038      	b.n	8002146 <QSPI_QuadMode+0x142>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80020d4:	f241 3188 	movw	r1, #5000	; 0x1388
 80020d8:	481d      	ldr	r0, [pc, #116]	; (8002150 <QSPI_QuadMode+0x14c>)
 80020da:	f7ff ff59 	bl	8001f90 <QSPI_AutoPollingMemReady>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <QSPI_QuadMode+0xe4>
  {
    return QSPI_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e02e      	b.n	8002146 <QSPI_QuadMode+0x142>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 80020e8:	2305      	movs	r3, #5
 80020ea:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80020ec:	f107 0310 	add.w	r3, r7, #16
 80020f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f4:	4619      	mov	r1, r3
 80020f6:	4816      	ldr	r0, [pc, #88]	; (8002150 <QSPI_QuadMode+0x14c>)
 80020f8:	f001 fe40 	bl	8003d7c <HAL_QSPI_Command>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <QSPI_QuadMode+0x102>
  {
    return QSPI_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e01f      	b.n	8002146 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002106:	f107 030f 	add.w	r3, r7, #15
 800210a:	f241 3288 	movw	r2, #5000	; 0x1388
 800210e:	4619      	mov	r1, r3
 8002110:	480f      	ldr	r0, [pc, #60]	; (8002150 <QSPI_QuadMode+0x14c>)
 8002112:	f001 ff28 	bl	8003f66 <HAL_QSPI_Receive>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <QSPI_QuadMode+0x11c>
  {
    return QSPI_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e012      	b.n	8002146 <QSPI_QuadMode+0x142>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	d102      	bne.n	8002130 <QSPI_QuadMode+0x12c>
 800212a:	78fb      	ldrb	r3, [r7, #3]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d007      	beq.n	8002140 <QSPI_QuadMode+0x13c>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8002136:	2b00      	cmp	r3, #0
 8002138:	d004      	beq.n	8002144 <QSPI_QuadMode+0x140>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <QSPI_QuadMode+0x140>
  {
    return QSPI_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e000      	b.n	8002146 <QSPI_QuadMode+0x142>
  }

  return QSPI_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3748      	adds	r7, #72	; 0x48
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	2000afb0 	.word	0x2000afb0

08002154 <QSPI_HighPerfMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b092      	sub	sp, #72	; 0x48
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002160:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002164:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8002166:	2305      	movs	r3, #5
 8002168:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800216a:	2300      	movs	r3, #0
 800216c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800216e:	2300      	movs	r3, #0
 8002170:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8002172:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002176:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 800217c:	2301      	movs	r3, #1
 800217e:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002180:	2300      	movs	r3, #0
 8002182:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002184:	2300      	movs	r3, #0
 8002186:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002188:	2300      	movs	r3, #0
 800218a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800218c:	f107 0310 	add.w	r3, r7, #16
 8002190:	f241 3288 	movw	r2, #5000	; 0x1388
 8002194:	4619      	mov	r1, r3
 8002196:	4853      	ldr	r0, [pc, #332]	; (80022e4 <QSPI_HighPerfMode+0x190>)
 8002198:	f001 fdf0 	bl	8003d7c <HAL_QSPI_Command>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <QSPI_HighPerfMode+0x52>
  {
    return QSPI_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e09a      	b.n	80022dc <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80021a6:	f107 030c 	add.w	r3, r7, #12
 80021aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ae:	4619      	mov	r1, r3
 80021b0:	484c      	ldr	r0, [pc, #304]	; (80022e4 <QSPI_HighPerfMode+0x190>)
 80021b2:	f001 fed8 	bl	8003f66 <HAL_QSPI_Receive>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <QSPI_HighPerfMode+0x6c>
  {
    return QSPI_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e08d      	b.n	80022dc <QSPI_HighPerfMode+0x188>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 80021c0:	2315      	movs	r3, #21
 80021c2:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 80021c4:	2302      	movs	r3, #2
 80021c6:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80021c8:	f107 0310 	add.w	r3, r7, #16
 80021cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d0:	4619      	mov	r1, r3
 80021d2:	4844      	ldr	r0, [pc, #272]	; (80022e4 <QSPI_HighPerfMode+0x190>)
 80021d4:	f001 fdd2 	bl	8003d7c <HAL_QSPI_Command>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <QSPI_HighPerfMode+0x8e>
  {
    return QSPI_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e07c      	b.n	80022dc <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80021e2:	f107 030c 	add.w	r3, r7, #12
 80021e6:	3301      	adds	r3, #1
 80021e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ec:	4619      	mov	r1, r3
 80021ee:	483d      	ldr	r0, [pc, #244]	; (80022e4 <QSPI_HighPerfMode+0x190>)
 80021f0:	f001 feb9 	bl	8003f66 <HAL_QSPI_Receive>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <QSPI_HighPerfMode+0xaa>
  {
    return QSPI_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e06e      	b.n	80022dc <QSPI_HighPerfMode+0x188>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80021fe:	4839      	ldr	r0, [pc, #228]	; (80022e4 <QSPI_HighPerfMode+0x190>)
 8002200:	f7ff fe7a 	bl	8001ef8 <QSPI_WriteEnable>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <QSPI_HighPerfMode+0xba>
  {
    return QSPI_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e066      	b.n	80022dc <QSPI_HighPerfMode+0x188>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d105      	bne.n	8002220 <QSPI_HighPerfMode+0xcc>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8002214:	7bbb      	ldrb	r3, [r7, #14]
 8002216:	f043 0302 	orr.w	r3, r3, #2
 800221a:	b2db      	uxtb	r3, r3
 800221c:	73bb      	strb	r3, [r7, #14]
 800221e:	e004      	b.n	800222a <QSPI_HighPerfMode+0xd6>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8002220:	7bbb      	ldrb	r3, [r7, #14]
 8002222:	f023 0302 	bic.w	r3, r3, #2
 8002226:	b2db      	uxtb	r3, r3
 8002228:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 800222a:	2301      	movs	r3, #1
 800222c:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 3;
 800222e:	2303      	movs	r3, #3
 8002230:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002232:	f107 0310 	add.w	r3, r7, #16
 8002236:	f241 3288 	movw	r2, #5000	; 0x1388
 800223a:	4619      	mov	r1, r3
 800223c:	4829      	ldr	r0, [pc, #164]	; (80022e4 <QSPI_HighPerfMode+0x190>)
 800223e:	f001 fd9d 	bl	8003d7c <HAL_QSPI_Command>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <QSPI_HighPerfMode+0xf8>
  {
    return QSPI_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e047      	b.n	80022dc <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800224c:	f107 030c 	add.w	r3, r7, #12
 8002250:	f241 3288 	movw	r2, #5000	; 0x1388
 8002254:	4619      	mov	r1, r3
 8002256:	4823      	ldr	r0, [pc, #140]	; (80022e4 <QSPI_HighPerfMode+0x190>)
 8002258:	f001 fdee 	bl	8003e38 <HAL_QSPI_Transmit>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <QSPI_HighPerfMode+0x112>
  {
    return QSPI_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e03a      	b.n	80022dc <QSPI_HighPerfMode+0x188>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002266:	f241 3188 	movw	r1, #5000	; 0x1388
 800226a:	481e      	ldr	r0, [pc, #120]	; (80022e4 <QSPI_HighPerfMode+0x190>)
 800226c:	f7ff fe90 	bl	8001f90 <QSPI_AutoPollingMemReady>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <QSPI_HighPerfMode+0x126>
  {
    return QSPI_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e030      	b.n	80022dc <QSPI_HighPerfMode+0x188>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 800227a:	2315      	movs	r3, #21
 800227c:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 800227e:	2302      	movs	r3, #2
 8002280:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002282:	f107 0310 	add.w	r3, r7, #16
 8002286:	f241 3288 	movw	r2, #5000	; 0x1388
 800228a:	4619      	mov	r1, r3
 800228c:	4815      	ldr	r0, [pc, #84]	; (80022e4 <QSPI_HighPerfMode+0x190>)
 800228e:	f001 fd75 	bl	8003d7c <HAL_QSPI_Command>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <QSPI_HighPerfMode+0x148>
  {
    return QSPI_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e01f      	b.n	80022dc <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a4:	4619      	mov	r1, r3
 80022a6:	480f      	ldr	r0, [pc, #60]	; (80022e4 <QSPI_HighPerfMode+0x190>)
 80022a8:	f001 fe5d 	bl	8003f66 <HAL_QSPI_Receive>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <QSPI_HighPerfMode+0x162>
  {
    return QSPI_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e012      	b.n	80022dc <QSPI_HighPerfMode+0x188>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 80022b6:	7b7b      	ldrb	r3, [r7, #13]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d102      	bne.n	80022c6 <QSPI_HighPerfMode+0x172>
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d007      	beq.n	80022d6 <QSPI_HighPerfMode+0x182>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 80022c6:	7b7b      	ldrb	r3, [r7, #13]
 80022c8:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d004      	beq.n	80022da <QSPI_HighPerfMode+0x186>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <QSPI_HighPerfMode+0x186>
  {
    return QSPI_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <QSPI_HighPerfMode+0x188>
  }

  return QSPI_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3748      	adds	r7, #72	; 0x48
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	2000afb0 	.word	0x2000afb0

080022e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ee:	4b0f      	ldr	r3, [pc, #60]	; (800232c <HAL_MspInit+0x44>)
 80022f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f2:	4a0e      	ldr	r2, [pc, #56]	; (800232c <HAL_MspInit+0x44>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6613      	str	r3, [r2, #96]	; 0x60
 80022fa:	4b0c      	ldr	r3, [pc, #48]	; (800232c <HAL_MspInit+0x44>)
 80022fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	607b      	str	r3, [r7, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002306:	4b09      	ldr	r3, [pc, #36]	; (800232c <HAL_MspInit+0x44>)
 8002308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230a:	4a08      	ldr	r2, [pc, #32]	; (800232c <HAL_MspInit+0x44>)
 800230c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002310:	6593      	str	r3, [r2, #88]	; 0x58
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_MspInit+0x44>)
 8002314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000

08002330 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	; 0x28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a2a      	ldr	r2, [pc, #168]	; (80023f8 <HAL_DAC_MspInit+0xc8>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d14d      	bne.n	80023ee <HAL_DAC_MspInit+0xbe>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002352:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <HAL_DAC_MspInit+0xcc>)
 8002354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002356:	4a29      	ldr	r2, [pc, #164]	; (80023fc <HAL_DAC_MspInit+0xcc>)
 8002358:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800235c:	6593      	str	r3, [r2, #88]	; 0x58
 800235e:	4b27      	ldr	r3, [pc, #156]	; (80023fc <HAL_DAC_MspInit+0xcc>)
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002362:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800236a:	4b24      	ldr	r3, [pc, #144]	; (80023fc <HAL_DAC_MspInit+0xcc>)
 800236c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236e:	4a23      	ldr	r2, [pc, #140]	; (80023fc <HAL_DAC_MspInit+0xcc>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002376:	4b21      	ldr	r3, [pc, #132]	; (80023fc <HAL_DAC_MspInit+0xcc>)
 8002378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002382:	2310      	movs	r3, #16
 8002384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002386:	2303      	movs	r3, #3
 8002388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238e:	f107 0314 	add.w	r3, r7, #20
 8002392:	4619      	mov	r1, r3
 8002394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002398:	f001 f90a 	bl	80035b0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 800239c:	4b18      	ldr	r3, [pc, #96]	; (8002400 <HAL_DAC_MspInit+0xd0>)
 800239e:	4a19      	ldr	r2, [pc, #100]	; (8002404 <HAL_DAC_MspInit+0xd4>)
 80023a0:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80023a2:	4b17      	ldr	r3, [pc, #92]	; (8002400 <HAL_DAC_MspInit+0xd0>)
 80023a4:	2206      	movs	r2, #6
 80023a6:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023a8:	4b15      	ldr	r3, [pc, #84]	; (8002400 <HAL_DAC_MspInit+0xd0>)
 80023aa:	2210      	movs	r2, #16
 80023ac:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023ae:	4b14      	ldr	r3, [pc, #80]	; (8002400 <HAL_DAC_MspInit+0xd0>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80023b4:	4b12      	ldr	r3, [pc, #72]	; (8002400 <HAL_DAC_MspInit+0xd0>)
 80023b6:	2280      	movs	r2, #128	; 0x80
 80023b8:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_DAC_MspInit+0xd0>)
 80023bc:	2200      	movs	r2, #0
 80023be:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023c0:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <HAL_DAC_MspInit+0xd0>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <HAL_DAC_MspInit+0xd0>)
 80023c8:	2220      	movs	r2, #32
 80023ca:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80023cc:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <HAL_DAC_MspInit+0xd0>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80023d2:	480b      	ldr	r0, [pc, #44]	; (8002400 <HAL_DAC_MspInit+0xd0>)
 80023d4:	f000 feb6 	bl	8003144 <HAL_DMA_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 80023de:	f7ff fb8b 	bl	8001af8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a06      	ldr	r2, [pc, #24]	; (8002400 <HAL_DAC_MspInit+0xd0>)
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	4a05      	ldr	r2, [pc, #20]	; (8002400 <HAL_DAC_MspInit+0xd0>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80023ee:	bf00      	nop
 80023f0:	3728      	adds	r7, #40	; 0x28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40007400 	.word	0x40007400
 80023fc:	40021000 	.word	0x40021000
 8002400:	2000adc0 	.word	0x2000adc0
 8002404:	40020030 	.word	0x40020030

08002408 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	; 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a26      	ldr	r2, [pc, #152]	; (80024c0 <HAL_QSPI_MspInit+0xb8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d145      	bne.n	80024b6 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800242a:	4b26      	ldr	r3, [pc, #152]	; (80024c4 <HAL_QSPI_MspInit+0xbc>)
 800242c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800242e:	4a25      	ldr	r2, [pc, #148]	; (80024c4 <HAL_QSPI_MspInit+0xbc>)
 8002430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002434:	6513      	str	r3, [r2, #80]	; 0x50
 8002436:	4b23      	ldr	r3, [pc, #140]	; (80024c4 <HAL_QSPI_MspInit+0xbc>)
 8002438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800243a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243e:	613b      	str	r3, [r7, #16]
 8002440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002442:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <HAL_QSPI_MspInit+0xbc>)
 8002444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002446:	4a1f      	ldr	r2, [pc, #124]	; (80024c4 <HAL_QSPI_MspInit+0xbc>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800244e:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <HAL_QSPI_MspInit+0xbc>)
 8002450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800245a:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <HAL_QSPI_MspInit+0xbc>)
 800245c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245e:	4a19      	ldr	r2, [pc, #100]	; (80024c4 <HAL_QSPI_MspInit+0xbc>)
 8002460:	f043 0310 	orr.w	r3, r3, #16
 8002464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002466:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <HAL_QSPI_MspInit+0xbc>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	68bb      	ldr	r3, [r7, #8]
    PE10     ------> QUADSPI_CLK
    PE11     ------> QUADSPI_NCS
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002472:	23c0      	movs	r3, #192	; 0xc0
 8002474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002476:	2302      	movs	r3, #2
 8002478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247e:	2303      	movs	r3, #3
 8002480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002482:	230a      	movs	r3, #10
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002486:	f107 0314 	add.w	r3, r7, #20
 800248a:	4619      	mov	r1, r3
 800248c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002490:	f001 f88e 	bl	80035b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8002494:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249a:	2302      	movs	r3, #2
 800249c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a2:	2303      	movs	r3, #3
 80024a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80024a6:	230a      	movs	r3, #10
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024aa:	f107 0314 	add.w	r3, r7, #20
 80024ae:	4619      	mov	r1, r3
 80024b0:	4805      	ldr	r0, [pc, #20]	; (80024c8 <HAL_QSPI_MspInit+0xc0>)
 80024b2:	f001 f87d 	bl	80035b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80024b6:	bf00      	nop
 80024b8:	3728      	adds	r7, #40	; 0x28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	a0001000 	.word	0xa0001000
 80024c4:	40021000 	.word	0x40021000
 80024c8:	48001000 	.word	0x48001000

080024cc <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0b      	ldr	r2, [pc, #44]	; (8002508 <HAL_QSPI_MspDeInit+0x3c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d10f      	bne.n	80024fe <HAL_QSPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_QSPI_MspDeInit+0x40>)
 80024e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e2:	4a0a      	ldr	r2, [pc, #40]	; (800250c <HAL_QSPI_MspDeInit+0x40>)
 80024e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024e8:	6513      	str	r3, [r2, #80]	; 0x50
    PE10     ------> QUADSPI_CLK
    PE11     ------> QUADSPI_NCS
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6|GPIO_PIN_7);
 80024ea:	21c0      	movs	r1, #192	; 0xc0
 80024ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024f0:	f001 fa08 	bl	8003904 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13);
 80024f4:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 80024f8:	4805      	ldr	r0, [pc, #20]	; (8002510 <HAL_QSPI_MspDeInit+0x44>)
 80024fa:	f001 fa03 	bl	8003904 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	a0001000 	.word	0xa0001000
 800250c:	40021000 	.word	0x40021000
 8002510:	48001000 	.word	0x48001000

08002514 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002524:	d10b      	bne.n	800253e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_TIM_Base_MspInit+0x38>)
 8002528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252a:	4a08      	ldr	r2, [pc, #32]	; (800254c <HAL_TIM_Base_MspInit+0x38>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	6593      	str	r3, [r2, #88]	; 0x58
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_TIM_Base_MspInit+0x38>)
 8002534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800253e:	bf00      	nop
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000

08002550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b0ac      	sub	sp, #176	; 0xb0
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002558:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	60da      	str	r2, [r3, #12]
 8002566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	2288      	movs	r2, #136	; 0x88
 800256e:	2100      	movs	r1, #0
 8002570:	4618      	mov	r0, r3
 8002572:	f004 fd17 	bl	8006fa4 <memset>
  if(huart->Instance==USART1)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a21      	ldr	r2, [pc, #132]	; (8002600 <HAL_UART_MspInit+0xb0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d13a      	bne.n	80025f6 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002580:	2301      	movs	r3, #1
 8002582:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002584:	2300      	movs	r3, #0
 8002586:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	4618      	mov	r0, r3
 800258e:	f002 fe59 	bl	8005244 <HAL_RCCEx_PeriphCLKConfig>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002598:	f7ff faae 	bl	8001af8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800259c:	4b19      	ldr	r3, [pc, #100]	; (8002604 <HAL_UART_MspInit+0xb4>)
 800259e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a0:	4a18      	ldr	r2, [pc, #96]	; (8002604 <HAL_UART_MspInit+0xb4>)
 80025a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a6:	6613      	str	r3, [r2, #96]	; 0x60
 80025a8:	4b16      	ldr	r3, [pc, #88]	; (8002604 <HAL_UART_MspInit+0xb4>)
 80025aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b4:	4b13      	ldr	r3, [pc, #76]	; (8002604 <HAL_UART_MspInit+0xb4>)
 80025b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b8:	4a12      	ldr	r2, [pc, #72]	; (8002604 <HAL_UART_MspInit+0xb4>)
 80025ba:	f043 0302 	orr.w	r3, r3, #2
 80025be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025c0:	4b10      	ldr	r3, [pc, #64]	; (8002604 <HAL_UART_MspInit+0xb4>)
 80025c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025cc:	23c0      	movs	r3, #192	; 0xc0
 80025ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d2:	2302      	movs	r3, #2
 80025d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025de:	2303      	movs	r3, #3
 80025e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025e4:	2307      	movs	r3, #7
 80025e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025ee:	4619      	mov	r1, r3
 80025f0:	4805      	ldr	r0, [pc, #20]	; (8002608 <HAL_UART_MspInit+0xb8>)
 80025f2:	f000 ffdd 	bl	80035b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80025f6:	bf00      	nop
 80025f8:	37b0      	adds	r7, #176	; 0xb0
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40013800 	.word	0x40013800
 8002604:	40021000 	.word	0x40021000
 8002608:	48000400 	.word	0x48000400

0800260c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08c      	sub	sp, #48	; 0x30
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 800261c:	2200      	movs	r2, #0
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	201a      	movs	r0, #26
 8002622:	f000 fabf 	bl	8002ba4 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002626:	201a      	movs	r0, #26
 8002628:	f000 fad8 	bl	8002bdc <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800262c:	4b1e      	ldr	r3, [pc, #120]	; (80026a8 <HAL_InitTick+0x9c>)
 800262e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002630:	4a1d      	ldr	r2, [pc, #116]	; (80026a8 <HAL_InitTick+0x9c>)
 8002632:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002636:	6613      	str	r3, [r2, #96]	; 0x60
 8002638:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <HAL_InitTick+0x9c>)
 800263a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800263c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002644:	f107 0210 	add.w	r2, r7, #16
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	4611      	mov	r1, r2
 800264e:	4618      	mov	r0, r3
 8002650:	f002 fd66 	bl	8005120 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002654:	f002 fd4e 	bl	80050f4 <HAL_RCC_GetPCLK2Freq>
 8002658:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800265a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265c:	4a13      	ldr	r2, [pc, #76]	; (80026ac <HAL_InitTick+0xa0>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	0c9b      	lsrs	r3, r3, #18
 8002664:	3b01      	subs	r3, #1
 8002666:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8002668:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <HAL_InitTick+0xa4>)
 800266a:	4a12      	ldr	r2, [pc, #72]	; (80026b4 <HAL_InitTick+0xa8>)
 800266c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800266e:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <HAL_InitTick+0xa4>)
 8002670:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002674:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8002676:	4a0e      	ldr	r2, [pc, #56]	; (80026b0 <HAL_InitTick+0xa4>)
 8002678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267a:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <HAL_InitTick+0xa4>)
 800267e:	2200      	movs	r2, #0
 8002680:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002682:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_InitTick+0xa4>)
 8002684:	2200      	movs	r2, #0
 8002686:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8002688:	4809      	ldr	r0, [pc, #36]	; (80026b0 <HAL_InitTick+0xa4>)
 800268a:	f003 fa97 	bl	8005bbc <HAL_TIM_Base_Init>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d104      	bne.n	800269e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8002694:	4806      	ldr	r0, [pc, #24]	; (80026b0 <HAL_InitTick+0xa4>)
 8002696:	f003 fae9 	bl	8005c6c <HAL_TIM_Base_Start_IT>
 800269a:	4603      	mov	r3, r0
 800269c:	e000      	b.n	80026a0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3730      	adds	r7, #48	; 0x30
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40021000 	.word	0x40021000
 80026ac:	431bde83 	.word	0x431bde83
 80026b0:	2000aff4 	.word	0x2000aff4
 80026b4:	40014800 	.word	0x40014800

080026b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026bc:	e7fe      	b.n	80026bc <NMI_Handler+0x4>

080026be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026c2:	e7fe      	b.n	80026c2 <HardFault_Handler+0x4>

080026c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026c8:	e7fe      	b.n	80026c8 <MemManage_Handler+0x4>

080026ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ca:	b480      	push	{r7}
 80026cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ce:	e7fe      	b.n	80026ce <BusFault_Handler+0x4>

080026d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026d4:	e7fe      	b.n	80026d4 <UsageFault_Handler+0x4>

080026d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026f2:	b480      	push	{r7}
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
	...

08002710 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8002714:	4802      	ldr	r0, [pc, #8]	; (8002720 <DMA1_Channel3_IRQHandler+0x10>)
 8002716:	f000 fe6b 	bl	80033f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	2000adc0 	.word	0x2000adc0

08002724 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002728:	4802      	ldr	r0, [pc, #8]	; (8002734 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800272a:	f003 fb0f 	bl	8005d4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	2000aff4 	.word	0x2000aff4

08002738 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
	return 1;
 800273c:	2301      	movs	r3, #1
}
 800273e:	4618      	mov	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <_kill>:

int _kill(int pid, int sig)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002752:	f004 fbfd 	bl	8006f50 <__errno>
 8002756:	4603      	mov	r3, r0
 8002758:	2216      	movs	r2, #22
 800275a:	601a      	str	r2, [r3, #0]
	return -1;
 800275c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <_exit>:

void _exit (int status)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002770:	f04f 31ff 	mov.w	r1, #4294967295
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ffe7 	bl	8002748 <_kill>
	while (1) {}		/* Make sure we hang here */
 800277a:	e7fe      	b.n	800277a <_exit+0x12>

0800277c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	e00a      	b.n	80027a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800278e:	f3af 8000 	nop.w
 8002792:	4601      	mov	r1, r0
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	60ba      	str	r2, [r7, #8]
 800279a:	b2ca      	uxtb	r2, r1
 800279c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	3301      	adds	r3, #1
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	dbf0      	blt.n	800278e <_read+0x12>
	}

return len;
 80027ac:	687b      	ldr	r3, [r7, #4]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b086      	sub	sp, #24
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	e009      	b.n	80027dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	60ba      	str	r2, [r7, #8]
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	3301      	adds	r3, #1
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	dbf1      	blt.n	80027c8 <_write+0x12>
	}
	return len;
 80027e4:	687b      	ldr	r3, [r7, #4]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <_close>:

int _close(int file)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
	return -1;
 80027f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002816:	605a      	str	r2, [r3, #4]
	return 0;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <_isatty>:

int _isatty(int file)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
	return 1;
 800282e:	2301      	movs	r3, #1
}
 8002830:	4618      	mov	r0, r3
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
	return 0;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002860:	4a14      	ldr	r2, [pc, #80]	; (80028b4 <_sbrk+0x5c>)
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <_sbrk+0x60>)
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800286c:	4b13      	ldr	r3, [pc, #76]	; (80028bc <_sbrk+0x64>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d102      	bne.n	800287a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <_sbrk+0x64>)
 8002876:	4a12      	ldr	r2, [pc, #72]	; (80028c0 <_sbrk+0x68>)
 8002878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800287a:	4b10      	ldr	r3, [pc, #64]	; (80028bc <_sbrk+0x64>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4413      	add	r3, r2
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	429a      	cmp	r2, r3
 8002886:	d207      	bcs.n	8002898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002888:	f004 fb62 	bl	8006f50 <__errno>
 800288c:	4603      	mov	r3, r0
 800288e:	220c      	movs	r2, #12
 8002890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002892:	f04f 33ff 	mov.w	r3, #4294967295
 8002896:	e009      	b.n	80028ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002898:	4b08      	ldr	r3, [pc, #32]	; (80028bc <_sbrk+0x64>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800289e:	4b07      	ldr	r3, [pc, #28]	; (80028bc <_sbrk+0x64>)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	4a05      	ldr	r2, [pc, #20]	; (80028bc <_sbrk+0x64>)
 80028a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028aa:	68fb      	ldr	r3, [r7, #12]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20018000 	.word	0x20018000
 80028b8:	00000400 	.word	0x00000400
 80028bc:	2000ad50 	.word	0x2000ad50
 80028c0:	2000b058 	.word	0x2000b058

080028c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80028c8:	4b15      	ldr	r3, [pc, #84]	; (8002920 <SystemInit+0x5c>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ce:	4a14      	ldr	r2, [pc, #80]	; (8002920 <SystemInit+0x5c>)
 80028d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80028d8:	4b12      	ldr	r3, [pc, #72]	; (8002924 <SystemInit+0x60>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a11      	ldr	r2, [pc, #68]	; (8002924 <SystemInit+0x60>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80028e4:	4b0f      	ldr	r3, [pc, #60]	; (8002924 <SystemInit+0x60>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80028ea:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <SystemInit+0x60>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a0d      	ldr	r2, [pc, #52]	; (8002924 <SystemInit+0x60>)
 80028f0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80028f4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80028f8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <SystemInit+0x60>)
 80028fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002900:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002902:	4b08      	ldr	r3, [pc, #32]	; (8002924 <SystemInit+0x60>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a07      	ldr	r2, [pc, #28]	; (8002924 <SystemInit+0x60>)
 8002908:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800290c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800290e:	4b05      	ldr	r3, [pc, #20]	; (8002924 <SystemInit+0x60>)
 8002910:	2200      	movs	r2, #0
 8002912:	619a      	str	r2, [r3, #24]
}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	e000ed00 	.word	0xe000ed00
 8002924:	40021000 	.word	0x40021000

08002928 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002960 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800292c:	f7ff ffca 	bl	80028c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002930:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002932:	e003      	b.n	800293c <LoopCopyDataInit>

08002934 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002936:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002938:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800293a:	3104      	adds	r1, #4

0800293c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800293c:	480a      	ldr	r0, [pc, #40]	; (8002968 <LoopForever+0xa>)
	ldr	r3, =_edata
 800293e:	4b0b      	ldr	r3, [pc, #44]	; (800296c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002940:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002942:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002944:	d3f6      	bcc.n	8002934 <CopyDataInit>
	ldr	r2, =_sbss
 8002946:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002948:	e002      	b.n	8002950 <LoopFillZerobss>

0800294a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800294a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800294c:	f842 3b04 	str.w	r3, [r2], #4

08002950 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <LoopForever+0x16>)
	cmp	r2, r3
 8002952:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002954:	d3f9      	bcc.n	800294a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002956:	f004 fb01 	bl	8006f5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800295a:	f7fe fca3 	bl	80012a4 <main>

0800295e <LoopForever>:

LoopForever:
    b LoopForever
 800295e:	e7fe      	b.n	800295e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002960:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002964:	08008d6c 	.word	0x08008d6c
	ldr	r0, =_sdata
 8002968:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800296c:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8002970:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8002974:	2000b054 	.word	0x2000b054

08002978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002978:	e7fe      	b.n	8002978 <ADC1_2_IRQHandler>

0800297a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002984:	2003      	movs	r0, #3
 8002986:	f000 f902 	bl	8002b8e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800298a:	200f      	movs	r0, #15
 800298c:	f7ff fe3e 	bl	800260c <HAL_InitTick>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	71fb      	strb	r3, [r7, #7]
 800299a:	e001      	b.n	80029a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800299c:	f7ff fca4 	bl	80022e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029a0:	79fb      	ldrb	r3, [r7, #7]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_IncTick+0x20>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	461a      	mov	r2, r3
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_IncTick+0x24>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4413      	add	r3, r2
 80029bc:	4a04      	ldr	r2, [pc, #16]	; (80029d0 <HAL_IncTick+0x24>)
 80029be:	6013      	str	r3, [r2, #0]
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000010 	.word	0x20000010
 80029d0:	2000b040 	.word	0x2000b040

080029d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return uwTick;
 80029d8:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <HAL_GetTick+0x14>)
 80029da:	681b      	ldr	r3, [r3, #0]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	2000b040 	.word	0x2000b040

080029ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029f4:	f7ff ffee 	bl	80029d4 <HAL_GetTick>
 80029f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a04:	d005      	beq.n	8002a12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <HAL_Delay+0x44>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4413      	add	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a12:	bf00      	nop
 8002a14:	f7ff ffde 	bl	80029d4 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d8f7      	bhi.n	8002a14 <HAL_Delay+0x28>
  {
  }
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000010 	.word	0x20000010

08002a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a44:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <__NVIC_SetPriorityGrouping+0x44>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a50:	4013      	ands	r3, r2
 8002a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a66:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <__NVIC_SetPriorityGrouping+0x44>)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	60d3      	str	r3, [r2, #12]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a80:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <__NVIC_GetPriorityGrouping+0x18>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	0a1b      	lsrs	r3, r3, #8
 8002a86:	f003 0307 	and.w	r3, r3, #7
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	db0b      	blt.n	8002ac2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	f003 021f 	and.w	r2, r3, #31
 8002ab0:	4907      	ldr	r1, [pc, #28]	; (8002ad0 <__NVIC_EnableIRQ+0x38>)
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	2001      	movs	r0, #1
 8002aba:	fa00 f202 	lsl.w	r2, r0, r2
 8002abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	e000e100 	.word	0xe000e100

08002ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	6039      	str	r1, [r7, #0]
 8002ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	db0a      	blt.n	8002afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	490c      	ldr	r1, [pc, #48]	; (8002b20 <__NVIC_SetPriority+0x4c>)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	0112      	lsls	r2, r2, #4
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	440b      	add	r3, r1
 8002af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002afc:	e00a      	b.n	8002b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	4908      	ldr	r1, [pc, #32]	; (8002b24 <__NVIC_SetPriority+0x50>)
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	3b04      	subs	r3, #4
 8002b0c:	0112      	lsls	r2, r2, #4
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	440b      	add	r3, r1
 8002b12:	761a      	strb	r2, [r3, #24]
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	e000e100 	.word	0xe000e100
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b089      	sub	sp, #36	; 0x24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f1c3 0307 	rsb	r3, r3, #7
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	bf28      	it	cs
 8002b46:	2304      	movcs	r3, #4
 8002b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	2b06      	cmp	r3, #6
 8002b50:	d902      	bls.n	8002b58 <NVIC_EncodePriority+0x30>
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3b03      	subs	r3, #3
 8002b56:	e000      	b.n	8002b5a <NVIC_EncodePriority+0x32>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43da      	mvns	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b70:	f04f 31ff 	mov.w	r1, #4294967295
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	43d9      	mvns	r1, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b80:	4313      	orrs	r3, r2
         );
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3724      	adds	r7, #36	; 0x24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff ff4c 	bl	8002a34 <__NVIC_SetPriorityGrouping>
}
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
 8002bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb6:	f7ff ff61 	bl	8002a7c <__NVIC_GetPriorityGrouping>
 8002bba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	68b9      	ldr	r1, [r7, #8]
 8002bc0:	6978      	ldr	r0, [r7, #20]
 8002bc2:	f7ff ffb1 	bl	8002b28 <NVIC_EncodePriority>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bcc:	4611      	mov	r1, r2
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff ff80 	bl	8002ad4 <__NVIC_SetPriority>
}
 8002bd4:	bf00      	nop
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff ff54 	bl	8002a98 <__NVIC_EnableIRQ>
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e014      	b.n	8002c34 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	791b      	ldrb	r3, [r3, #4]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d105      	bne.n	8002c20 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff fb88 	bl	8002330 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	795b      	ldrb	r3, [r3, #5]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_DAC_Start_DMA+0x1e>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e0ab      	b.n	8002db2 <HAL_DAC_Start_DMA+0x176>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2202      	movs	r2, #2
 8002c64:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d12f      	bne.n	8002ccc <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	4a52      	ldr	r2, [pc, #328]	; (8002dbc <HAL_DAC_Start_DMA+0x180>)
 8002c72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	4a51      	ldr	r2, [pc, #324]	; (8002dc0 <HAL_DAC_Start_DMA+0x184>)
 8002c7a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	4a50      	ldr	r2, [pc, #320]	; (8002dc4 <HAL_DAC_Start_DMA+0x188>)
 8002c82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c92:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d013      	beq.n	8002cc2 <HAL_DAC_Start_DMA+0x86>
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d845      	bhi.n	8002d2c <HAL_DAC_Start_DMA+0xf0>
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_DAC_Start_DMA+0x72>
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d005      	beq.n	8002cb8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002cac:	e03e      	b.n	8002d2c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	3308      	adds	r3, #8
 8002cb4:	613b      	str	r3, [r7, #16]
        break;
 8002cb6:	e03c      	b.n	8002d32 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	330c      	adds	r3, #12
 8002cbe:	613b      	str	r3, [r7, #16]
        break;
 8002cc0:	e037      	b.n	8002d32 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	3310      	adds	r3, #16
 8002cc8:	613b      	str	r3, [r7, #16]
        break;
 8002cca:	e032      	b.n	8002d32 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	4a3d      	ldr	r2, [pc, #244]	; (8002dc8 <HAL_DAC_Start_DMA+0x18c>)
 8002cd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4a3c      	ldr	r2, [pc, #240]	; (8002dcc <HAL_DAC_Start_DMA+0x190>)
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	4a3b      	ldr	r2, [pc, #236]	; (8002dd0 <HAL_DAC_Start_DMA+0x194>)
 8002ce2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002cf2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d013      	beq.n	8002d22 <HAL_DAC_Start_DMA+0xe6>
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d817      	bhi.n	8002d30 <HAL_DAC_Start_DMA+0xf4>
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_DAC_Start_DMA+0xd2>
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d005      	beq.n	8002d18 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002d0c:	e010      	b.n	8002d30 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	3314      	adds	r3, #20
 8002d14:	613b      	str	r3, [r7, #16]
        break;
 8002d16:	e00c      	b.n	8002d32 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	3318      	adds	r3, #24
 8002d1e:	613b      	str	r3, [r7, #16]
        break;
 8002d20:	e007      	b.n	8002d32 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	331c      	adds	r3, #28
 8002d28:	613b      	str	r3, [r7, #16]
        break;
 8002d2a:	e002      	b.n	8002d32 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002d2c:	bf00      	nop
 8002d2e:	e000      	b.n	8002d32 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002d30:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d111      	bne.n	8002d5c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d46:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6898      	ldr	r0, [r3, #8]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	f000 faaf 	bl	80032b4 <HAL_DMA_Start_IT>
 8002d56:	4603      	mov	r3, r0
 8002d58:	75fb      	strb	r3, [r7, #23]
 8002d5a:	e010      	b.n	8002d7e <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002d6a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	68d8      	ldr	r0, [r3, #12]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	f000 fa9d 	bl	80032b4 <HAL_DMA_Start_IT>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002d84:	7dfb      	ldrb	r3, [r7, #23]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10c      	bne.n	8002da4 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6819      	ldr	r1, [r3, #0]
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2201      	movs	r2, #1
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	e005      	b.n	8002db0 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f043 0204 	orr.w	r2, r3, #4
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	08003031 	.word	0x08003031
 8002dc0:	08003053 	.word	0x08003053
 8002dc4:	0800306f 	.word	0x0800306f
 8002dc8:	080030d9 	.word	0x080030d9
 8002dcc:	080030fb 	.word	0x080030fb
 8002dd0:	08003117 	.word	0x08003117

08002dd4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	795b      	ldrb	r3, [r3, #5]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_DAC_ConfigChannel+0x1c>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e107      	b.n	8003028 <HAL_DAC_ConfigChannel+0x22c>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2202      	movs	r2, #2
 8002e22:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d174      	bne.n	8002f16 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002e2c:	f7ff fdd2 	bl	80029d4 <HAL_GetTick>
 8002e30:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d134      	bne.n	8002ea2 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e38:	e011      	b.n	8002e5e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e3a:	f7ff fdcb 	bl	80029d4 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d90a      	bls.n	8002e5e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	f043 0208 	orr.w	r2, r3, #8
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2203      	movs	r2, #3
 8002e58:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e0e4      	b.n	8003028 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1e6      	bne.n	8002e3a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	f7ff fdbd 	bl	80029ec <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	6992      	ldr	r2, [r2, #24]
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40
 8002e7c:	e01e      	b.n	8002ebc <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e7e:	f7ff fda9 	bl	80029d4 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d90a      	bls.n	8002ea2 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	f043 0208 	orr.w	r2, r3, #8
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e0c2      	b.n	8003028 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	dbe8      	blt.n	8002e7e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002eac:	2001      	movs	r0, #1
 8002eae:	f7ff fd9d 	bl	80029ec <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	6992      	ldr	r2, [r2, #24]
 8002eba:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f003 0310 	and.w	r3, r3, #16
 8002ec8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	ea02 0103 	and.w	r1, r2, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	69da      	ldr	r2, [r3, #28]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	409a      	lsls	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f003 0310 	and.w	r3, r3, #16
 8002ef6:	21ff      	movs	r1, #255	; 0xff
 8002ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	ea02 0103 	and.w	r1, r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	6a1a      	ldr	r2, [r3, #32]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f003 0310 	and.w	r3, r3, #16
 8002f0c:	409a      	lsls	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d11d      	bne.n	8002f5a <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	221f      	movs	r2, #31
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4013      	ands	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f60:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2207      	movs	r2, #7
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4013      	ands	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6819      	ldr	r1, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43da      	mvns	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	400a      	ands	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f003 0310 	and.w	r3, r3, #16
 8002fce:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6819      	ldr	r1, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f003 0310 	and.w	r3, r3, #16
 800300a:	22c0      	movs	r2, #192	; 0xc0
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	43da      	mvns	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	400a      	ands	r2, r1
 8003018:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2201      	movs	r2, #1
 800301e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3720      	adds	r7, #32
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f7fe fcc2 	bl	80019c8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2201      	movs	r2, #1
 8003048:	711a      	strb	r2, [r3, #4]
}
 800304a:	bf00      	nop
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f7ff feb7 	bl	8002dd4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003066:	bf00      	nop
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b084      	sub	sp, #16
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	f043 0204 	orr.w	r2, r3, #4
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f7ff fead 	bl	8002de8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2201      	movs	r2, #1
 8003092:	711a      	strb	r2, [r3, #4]
}
 8003094:	bf00      	nop
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f7ff ffd8 	bl	800309c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2201      	movs	r2, #1
 80030f0:	711a      	strb	r2, [r3, #4]
}
 80030f2:	bf00      	nop
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003106:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f7ff ffd1 	bl	80030b0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800310e:	bf00      	nop
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f043 0204 	orr.w	r2, r3, #4
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f7ff ffc7 	bl	80030c4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2201      	movs	r2, #1
 800313a:	711a      	strb	r2, [r3, #4]
}
 800313c:	bf00      	nop
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e098      	b.n	8003288 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	4b4d      	ldr	r3, [pc, #308]	; (8003294 <HAL_DMA_Init+0x150>)
 800315e:	429a      	cmp	r2, r3
 8003160:	d80f      	bhi.n	8003182 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	4b4b      	ldr	r3, [pc, #300]	; (8003298 <HAL_DMA_Init+0x154>)
 800316a:	4413      	add	r3, r2
 800316c:	4a4b      	ldr	r2, [pc, #300]	; (800329c <HAL_DMA_Init+0x158>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	091b      	lsrs	r3, r3, #4
 8003174:	009a      	lsls	r2, r3, #2
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a48      	ldr	r2, [pc, #288]	; (80032a0 <HAL_DMA_Init+0x15c>)
 800317e:	641a      	str	r2, [r3, #64]	; 0x40
 8003180:	e00e      	b.n	80031a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	4b46      	ldr	r3, [pc, #280]	; (80032a4 <HAL_DMA_Init+0x160>)
 800318a:	4413      	add	r3, r2
 800318c:	4a43      	ldr	r2, [pc, #268]	; (800329c <HAL_DMA_Init+0x158>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	091b      	lsrs	r3, r3, #4
 8003194:	009a      	lsls	r2, r3, #2
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a42      	ldr	r2, [pc, #264]	; (80032a8 <HAL_DMA_Init+0x164>)
 800319e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80031b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80031c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031fa:	d039      	beq.n	8003270 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	4a27      	ldr	r2, [pc, #156]	; (80032a0 <HAL_DMA_Init+0x15c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d11a      	bne.n	800323c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003206:	4b29      	ldr	r3, [pc, #164]	; (80032ac <HAL_DMA_Init+0x168>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320e:	f003 031c 	and.w	r3, r3, #28
 8003212:	210f      	movs	r1, #15
 8003214:	fa01 f303 	lsl.w	r3, r1, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	4924      	ldr	r1, [pc, #144]	; (80032ac <HAL_DMA_Init+0x168>)
 800321c:	4013      	ands	r3, r2
 800321e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003220:	4b22      	ldr	r3, [pc, #136]	; (80032ac <HAL_DMA_Init+0x168>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6859      	ldr	r1, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322c:	f003 031c 	and.w	r3, r3, #28
 8003230:	fa01 f303 	lsl.w	r3, r1, r3
 8003234:	491d      	ldr	r1, [pc, #116]	; (80032ac <HAL_DMA_Init+0x168>)
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]
 800323a:	e019      	b.n	8003270 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800323c:	4b1c      	ldr	r3, [pc, #112]	; (80032b0 <HAL_DMA_Init+0x16c>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003244:	f003 031c 	and.w	r3, r3, #28
 8003248:	210f      	movs	r1, #15
 800324a:	fa01 f303 	lsl.w	r3, r1, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	4917      	ldr	r1, [pc, #92]	; (80032b0 <HAL_DMA_Init+0x16c>)
 8003252:	4013      	ands	r3, r2
 8003254:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003256:	4b16      	ldr	r3, [pc, #88]	; (80032b0 <HAL_DMA_Init+0x16c>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6859      	ldr	r1, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003262:	f003 031c 	and.w	r3, r3, #28
 8003266:	fa01 f303 	lsl.w	r3, r1, r3
 800326a:	4911      	ldr	r1, [pc, #68]	; (80032b0 <HAL_DMA_Init+0x16c>)
 800326c:	4313      	orrs	r3, r2
 800326e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	40020407 	.word	0x40020407
 8003298:	bffdfff8 	.word	0xbffdfff8
 800329c:	cccccccd 	.word	0xcccccccd
 80032a0:	40020000 	.word	0x40020000
 80032a4:	bffdfbf8 	.word	0xbffdfbf8
 80032a8:	40020400 	.word	0x40020400
 80032ac:	400200a8 	.word	0x400200a8
 80032b0:	400204a8 	.word	0x400204a8

080032b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
 80032c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_DMA_Start_IT+0x20>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e04b      	b.n	800336c <HAL_DMA_Start_IT+0xb8>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d13a      	bne.n	800335e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0201 	bic.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	68b9      	ldr	r1, [r7, #8]
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f91e 	bl	800354e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	2b00      	cmp	r3, #0
 8003318:	d008      	beq.n	800332c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f042 020e 	orr.w	r2, r2, #14
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	e00f      	b.n	800334c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0204 	bic.w	r2, r2, #4
 800333a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 020a 	orr.w	r2, r2, #10
 800334a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	e005      	b.n	800336a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003366:	2302      	movs	r3, #2
 8003368:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800336a:	7dfb      	ldrb	r3, [r7, #23]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d008      	beq.n	800339e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2204      	movs	r2, #4
 8003390:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e022      	b.n	80033e4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 020e 	bic.w	r2, r2, #14
 80033ac:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0201 	bic.w	r2, r2, #1
 80033bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	f003 021c 	and.w	r2, r3, #28
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	2101      	movs	r1, #1
 80033cc:	fa01 f202 	lsl.w	r2, r1, r2
 80033d0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340c:	f003 031c 	and.w	r3, r3, #28
 8003410:	2204      	movs	r2, #4
 8003412:	409a      	lsls	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4013      	ands	r3, r2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d026      	beq.n	800346a <HAL_DMA_IRQHandler+0x7a>
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b00      	cmp	r3, #0
 8003424:	d021      	beq.n	800346a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b00      	cmp	r3, #0
 8003432:	d107      	bne.n	8003444 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0204 	bic.w	r2, r2, #4
 8003442:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003448:	f003 021c 	and.w	r2, r3, #28
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	2104      	movs	r1, #4
 8003452:	fa01 f202 	lsl.w	r2, r1, r2
 8003456:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	2b00      	cmp	r3, #0
 800345e:	d071      	beq.n	8003544 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003468:	e06c      	b.n	8003544 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	f003 031c 	and.w	r3, r3, #28
 8003472:	2202      	movs	r2, #2
 8003474:	409a      	lsls	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	4013      	ands	r3, r2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d02e      	beq.n	80034dc <HAL_DMA_IRQHandler+0xec>
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d029      	beq.n	80034dc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0320 	and.w	r3, r3, #32
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10b      	bne.n	80034ae <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 020a 	bic.w	r2, r2, #10
 80034a4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	f003 021c 	and.w	r2, r3, #28
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	2102      	movs	r1, #2
 80034bc:	fa01 f202 	lsl.w	r2, r1, r2
 80034c0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d038      	beq.n	8003544 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80034da:	e033      	b.n	8003544 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e0:	f003 031c 	and.w	r3, r3, #28
 80034e4:	2208      	movs	r2, #8
 80034e6:	409a      	lsls	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d02a      	beq.n	8003546 <HAL_DMA_IRQHandler+0x156>
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d025      	beq.n	8003546 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 020e 	bic.w	r2, r2, #14
 8003508:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	f003 021c 	and.w	r2, r3, #28
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	2101      	movs	r1, #1
 8003518:	fa01 f202 	lsl.w	r2, r1, r2
 800351c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003538:	2b00      	cmp	r3, #0
 800353a:	d004      	beq.n	8003546 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003544:	bf00      	nop
 8003546:	bf00      	nop
}
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800354e:	b480      	push	{r7}
 8003550:	b085      	sub	sp, #20
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
 800355a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003560:	f003 021c 	and.w	r2, r3, #28
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	2101      	movs	r1, #1
 800356a:	fa01 f202 	lsl.w	r2, r1, r2
 800356e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b10      	cmp	r3, #16
 800357e:	d108      	bne.n	8003592 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003590:	e007      	b.n	80035a2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	60da      	str	r2, [r3, #12]
}
 80035a2:	bf00      	nop
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035be:	e17f      	b.n	80038c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	2101      	movs	r1, #1
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	fa01 f303 	lsl.w	r3, r1, r3
 80035cc:	4013      	ands	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 8171 	beq.w	80038ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d00b      	beq.n	80035f8 <HAL_GPIO_Init+0x48>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d007      	beq.n	80035f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035ec:	2b11      	cmp	r3, #17
 80035ee:	d003      	beq.n	80035f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b12      	cmp	r3, #18
 80035f6:	d130      	bne.n	800365a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	2203      	movs	r2, #3
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4013      	ands	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800362e:	2201      	movs	r2, #1
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43db      	mvns	r3, r3
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4013      	ands	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	091b      	lsrs	r3, r3, #4
 8003644:	f003 0201 	and.w	r2, r3, #1
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b03      	cmp	r3, #3
 8003664:	d118      	bne.n	8003698 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800366c:	2201      	movs	r2, #1
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	43db      	mvns	r3, r3
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4013      	ands	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	08db      	lsrs	r3, r3, #3
 8003682:	f003 0201 	and.w	r2, r3, #1
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	2203      	movs	r2, #3
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	43db      	mvns	r3, r3
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4013      	ands	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d003      	beq.n	80036d8 <HAL_GPIO_Init+0x128>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	2b12      	cmp	r3, #18
 80036d6:	d123      	bne.n	8003720 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	08da      	lsrs	r2, r3, #3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3208      	adds	r2, #8
 80036e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	220f      	movs	r2, #15
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	43db      	mvns	r3, r3
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4013      	ands	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4313      	orrs	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	08da      	lsrs	r2, r3, #3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3208      	adds	r2, #8
 800371a:	6939      	ldr	r1, [r7, #16]
 800371c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	2203      	movs	r2, #3
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	4013      	ands	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 0203 	and.w	r2, r3, #3
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4313      	orrs	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 80ac 	beq.w	80038ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003762:	4b5f      	ldr	r3, [pc, #380]	; (80038e0 <HAL_GPIO_Init+0x330>)
 8003764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003766:	4a5e      	ldr	r2, [pc, #376]	; (80038e0 <HAL_GPIO_Init+0x330>)
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	6613      	str	r3, [r2, #96]	; 0x60
 800376e:	4b5c      	ldr	r3, [pc, #368]	; (80038e0 <HAL_GPIO_Init+0x330>)
 8003770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	60bb      	str	r3, [r7, #8]
 8003778:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800377a:	4a5a      	ldr	r2, [pc, #360]	; (80038e4 <HAL_GPIO_Init+0x334>)
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	089b      	lsrs	r3, r3, #2
 8003780:	3302      	adds	r3, #2
 8003782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003786:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	220f      	movs	r2, #15
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43db      	mvns	r3, r3
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4013      	ands	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037a4:	d025      	beq.n	80037f2 <HAL_GPIO_Init+0x242>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a4f      	ldr	r2, [pc, #316]	; (80038e8 <HAL_GPIO_Init+0x338>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d01f      	beq.n	80037ee <HAL_GPIO_Init+0x23e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a4e      	ldr	r2, [pc, #312]	; (80038ec <HAL_GPIO_Init+0x33c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d019      	beq.n	80037ea <HAL_GPIO_Init+0x23a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a4d      	ldr	r2, [pc, #308]	; (80038f0 <HAL_GPIO_Init+0x340>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d013      	beq.n	80037e6 <HAL_GPIO_Init+0x236>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a4c      	ldr	r2, [pc, #304]	; (80038f4 <HAL_GPIO_Init+0x344>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00d      	beq.n	80037e2 <HAL_GPIO_Init+0x232>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a4b      	ldr	r2, [pc, #300]	; (80038f8 <HAL_GPIO_Init+0x348>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d007      	beq.n	80037de <HAL_GPIO_Init+0x22e>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a4a      	ldr	r2, [pc, #296]	; (80038fc <HAL_GPIO_Init+0x34c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d101      	bne.n	80037da <HAL_GPIO_Init+0x22a>
 80037d6:	2306      	movs	r3, #6
 80037d8:	e00c      	b.n	80037f4 <HAL_GPIO_Init+0x244>
 80037da:	2307      	movs	r3, #7
 80037dc:	e00a      	b.n	80037f4 <HAL_GPIO_Init+0x244>
 80037de:	2305      	movs	r3, #5
 80037e0:	e008      	b.n	80037f4 <HAL_GPIO_Init+0x244>
 80037e2:	2304      	movs	r3, #4
 80037e4:	e006      	b.n	80037f4 <HAL_GPIO_Init+0x244>
 80037e6:	2303      	movs	r3, #3
 80037e8:	e004      	b.n	80037f4 <HAL_GPIO_Init+0x244>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e002      	b.n	80037f4 <HAL_GPIO_Init+0x244>
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <HAL_GPIO_Init+0x244>
 80037f2:	2300      	movs	r3, #0
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	f002 0203 	and.w	r2, r2, #3
 80037fa:	0092      	lsls	r2, r2, #2
 80037fc:	4093      	lsls	r3, r2
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003804:	4937      	ldr	r1, [pc, #220]	; (80038e4 <HAL_GPIO_Init+0x334>)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	089b      	lsrs	r3, r3, #2
 800380a:	3302      	adds	r3, #2
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003812:	4b3b      	ldr	r3, [pc, #236]	; (8003900 <HAL_GPIO_Init+0x350>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	43db      	mvns	r3, r3
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	4013      	ands	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003836:	4a32      	ldr	r2, [pc, #200]	; (8003900 <HAL_GPIO_Init+0x350>)
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800383c:	4b30      	ldr	r3, [pc, #192]	; (8003900 <HAL_GPIO_Init+0x350>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	43db      	mvns	r3, r3
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4013      	ands	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003860:	4a27      	ldr	r2, [pc, #156]	; (8003900 <HAL_GPIO_Init+0x350>)
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003866:	4b26      	ldr	r3, [pc, #152]	; (8003900 <HAL_GPIO_Init+0x350>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	43db      	mvns	r3, r3
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4013      	ands	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4313      	orrs	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800388a:	4a1d      	ldr	r2, [pc, #116]	; (8003900 <HAL_GPIO_Init+0x350>)
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003890:	4b1b      	ldr	r3, [pc, #108]	; (8003900 <HAL_GPIO_Init+0x350>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	43db      	mvns	r3, r3
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4013      	ands	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038b4:	4a12      	ldr	r2, [pc, #72]	; (8003900 <HAL_GPIO_Init+0x350>)
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	3301      	adds	r3, #1
 80038be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f47f ae78 	bne.w	80035c0 <HAL_GPIO_Init+0x10>
  }
}
 80038d0:	bf00      	nop
 80038d2:	bf00      	nop
 80038d4:	371c      	adds	r7, #28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40021000 	.word	0x40021000
 80038e4:	40010000 	.word	0x40010000
 80038e8:	48000400 	.word	0x48000400
 80038ec:	48000800 	.word	0x48000800
 80038f0:	48000c00 	.word	0x48000c00
 80038f4:	48001000 	.word	0x48001000
 80038f8:	48001400 	.word	0x48001400
 80038fc:	48001800 	.word	0x48001800
 8003900:	40010400 	.word	0x40010400

08003904 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003904:	b480      	push	{r7}
 8003906:	b087      	sub	sp, #28
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003912:	e0cd      	b.n	8003ab0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003914:	2201      	movs	r2, #1
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 80c0 	beq.w	8003aaa <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800392a:	4a68      	ldr	r2, [pc, #416]	; (8003acc <HAL_GPIO_DeInit+0x1c8>)
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	089b      	lsrs	r3, r3, #2
 8003930:	3302      	adds	r3, #2
 8003932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003936:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	220f      	movs	r2, #15
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4013      	ands	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003952:	d025      	beq.n	80039a0 <HAL_GPIO_DeInit+0x9c>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a5e      	ldr	r2, [pc, #376]	; (8003ad0 <HAL_GPIO_DeInit+0x1cc>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d01f      	beq.n	800399c <HAL_GPIO_DeInit+0x98>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a5d      	ldr	r2, [pc, #372]	; (8003ad4 <HAL_GPIO_DeInit+0x1d0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d019      	beq.n	8003998 <HAL_GPIO_DeInit+0x94>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a5c      	ldr	r2, [pc, #368]	; (8003ad8 <HAL_GPIO_DeInit+0x1d4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d013      	beq.n	8003994 <HAL_GPIO_DeInit+0x90>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a5b      	ldr	r2, [pc, #364]	; (8003adc <HAL_GPIO_DeInit+0x1d8>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00d      	beq.n	8003990 <HAL_GPIO_DeInit+0x8c>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a5a      	ldr	r2, [pc, #360]	; (8003ae0 <HAL_GPIO_DeInit+0x1dc>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d007      	beq.n	800398c <HAL_GPIO_DeInit+0x88>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a59      	ldr	r2, [pc, #356]	; (8003ae4 <HAL_GPIO_DeInit+0x1e0>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d101      	bne.n	8003988 <HAL_GPIO_DeInit+0x84>
 8003984:	2306      	movs	r3, #6
 8003986:	e00c      	b.n	80039a2 <HAL_GPIO_DeInit+0x9e>
 8003988:	2307      	movs	r3, #7
 800398a:	e00a      	b.n	80039a2 <HAL_GPIO_DeInit+0x9e>
 800398c:	2305      	movs	r3, #5
 800398e:	e008      	b.n	80039a2 <HAL_GPIO_DeInit+0x9e>
 8003990:	2304      	movs	r3, #4
 8003992:	e006      	b.n	80039a2 <HAL_GPIO_DeInit+0x9e>
 8003994:	2303      	movs	r3, #3
 8003996:	e004      	b.n	80039a2 <HAL_GPIO_DeInit+0x9e>
 8003998:	2302      	movs	r3, #2
 800399a:	e002      	b.n	80039a2 <HAL_GPIO_DeInit+0x9e>
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <HAL_GPIO_DeInit+0x9e>
 80039a0:	2300      	movs	r3, #0
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	f002 0203 	and.w	r2, r2, #3
 80039a8:	0092      	lsls	r2, r2, #2
 80039aa:	4093      	lsls	r3, r2
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d132      	bne.n	8003a18 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80039b2:	4b4d      	ldr	r3, [pc, #308]	; (8003ae8 <HAL_GPIO_DeInit+0x1e4>)
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	43db      	mvns	r3, r3
 80039ba:	494b      	ldr	r1, [pc, #300]	; (8003ae8 <HAL_GPIO_DeInit+0x1e4>)
 80039bc:	4013      	ands	r3, r2
 80039be:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80039c0:	4b49      	ldr	r3, [pc, #292]	; (8003ae8 <HAL_GPIO_DeInit+0x1e4>)
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	43db      	mvns	r3, r3
 80039c8:	4947      	ldr	r1, [pc, #284]	; (8003ae8 <HAL_GPIO_DeInit+0x1e4>)
 80039ca:	4013      	ands	r3, r2
 80039cc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80039ce:	4b46      	ldr	r3, [pc, #280]	; (8003ae8 <HAL_GPIO_DeInit+0x1e4>)
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	43db      	mvns	r3, r3
 80039d6:	4944      	ldr	r1, [pc, #272]	; (8003ae8 <HAL_GPIO_DeInit+0x1e4>)
 80039d8:	4013      	ands	r3, r2
 80039da:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80039dc:	4b42      	ldr	r3, [pc, #264]	; (8003ae8 <HAL_GPIO_DeInit+0x1e4>)
 80039de:	68da      	ldr	r2, [r3, #12]
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	43db      	mvns	r3, r3
 80039e4:	4940      	ldr	r1, [pc, #256]	; (8003ae8 <HAL_GPIO_DeInit+0x1e4>)
 80039e6:	4013      	ands	r3, r2
 80039e8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	220f      	movs	r2, #15
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80039fa:	4a34      	ldr	r2, [pc, #208]	; (8003acc <HAL_GPIO_DeInit+0x1c8>)
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	089b      	lsrs	r3, r3, #2
 8003a00:	3302      	adds	r3, #2
 8003a02:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	43da      	mvns	r2, r3
 8003a0a:	4830      	ldr	r0, [pc, #192]	; (8003acc <HAL_GPIO_DeInit+0x1c8>)
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	089b      	lsrs	r3, r3, #2
 8003a10:	400a      	ands	r2, r1
 8003a12:	3302      	adds	r3, #2
 8003a14:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	2103      	movs	r1, #3
 8003a22:	fa01 f303 	lsl.w	r3, r1, r3
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	08da      	lsrs	r2, r3, #3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3208      	adds	r2, #8
 8003a34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	220f      	movs	r2, #15
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	43db      	mvns	r3, r3
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	08d2      	lsrs	r2, r2, #3
 8003a4c:	4019      	ands	r1, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3208      	adds	r2, #8
 8003a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	2103      	movs	r1, #3
 8003a60:	fa01 f303 	lsl.w	r3, r1, r3
 8003a64:	43db      	mvns	r3, r3
 8003a66:	401a      	ands	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	2101      	movs	r1, #1
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	fa01 f303 	lsl.w	r3, r1, r3
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	401a      	ands	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68da      	ldr	r2, [r3, #12]
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	2103      	movs	r1, #3
 8003a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	401a      	ands	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	401a      	ands	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	3301      	adds	r3, #1
 8003aae:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f47f af2b 	bne.w	8003914 <HAL_GPIO_DeInit+0x10>
  }
}
 8003abe:	bf00      	nop
 8003ac0:	bf00      	nop
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	40010000 	.word	0x40010000
 8003ad0:	48000400 	.word	0x48000400
 8003ad4:	48000800 	.word	0x48000800
 8003ad8:	48000c00 	.word	0x48000c00
 8003adc:	48001000 	.word	0x48001000
 8003ae0:	48001400 	.word	0x48001400
 8003ae4:	48001800 	.word	0x48001800
 8003ae8:	40010400 	.word	0x40010400

08003aec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	887b      	ldrh	r3, [r7, #2]
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b04:	2301      	movs	r3, #1
 8003b06:	73fb      	strb	r3, [r7, #15]
 8003b08:	e001      	b.n	8003b0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	807b      	strh	r3, [r7, #2]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b2c:	787b      	ldrb	r3, [r7, #1]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b32:	887a      	ldrh	r2, [r7, #2]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b38:	e002      	b.n	8003b40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b3a:	887a      	ldrh	r2, [r7, #2]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	460b      	mov	r3, r1
 8003b56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b5e:	887a      	ldrh	r2, [r7, #2]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4013      	ands	r3, r2
 8003b64:	041a      	lsls	r2, r3, #16
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	43d9      	mvns	r1, r3
 8003b6a:	887b      	ldrh	r3, [r7, #2]
 8003b6c:	400b      	ands	r3, r1
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	619a      	str	r2, [r3, #24]
}
 8003b74:	bf00      	nop
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b84:	4b04      	ldr	r3, [pc, #16]	; (8003b98 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40007000 	.word	0x40007000

08003b9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003baa:	d130      	bne.n	8003c0e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bac:	4b23      	ldr	r3, [pc, #140]	; (8003c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bb8:	d038      	beq.n	8003c2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bba:	4b20      	ldr	r3, [pc, #128]	; (8003c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bc2:	4a1e      	ldr	r2, [pc, #120]	; (8003c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bc8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bca:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2232      	movs	r2, #50	; 0x32
 8003bd0:	fb02 f303 	mul.w	r3, r2, r3
 8003bd4:	4a1b      	ldr	r2, [pc, #108]	; (8003c44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bda:	0c9b      	lsrs	r3, r3, #18
 8003bdc:	3301      	adds	r3, #1
 8003bde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003be0:	e002      	b.n	8003be8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	3b01      	subs	r3, #1
 8003be6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003be8:	4b14      	ldr	r3, [pc, #80]	; (8003c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf4:	d102      	bne.n	8003bfc <HAL_PWREx_ControlVoltageScaling+0x60>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f2      	bne.n	8003be2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bfc:	4b0f      	ldr	r3, [pc, #60]	; (8003c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c08:	d110      	bne.n	8003c2c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e00f      	b.n	8003c2e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c1a:	d007      	beq.n	8003c2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c1c:	4b07      	ldr	r3, [pc, #28]	; (8003c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c24:	4a05      	ldr	r2, [pc, #20]	; (8003c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c2a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40007000 	.word	0x40007000
 8003c40:	20000008 	.word	0x20000008
 8003c44:	431bde83 	.word	0x431bde83

08003c48 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af02      	add	r7, sp, #8
 8003c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003c50:	f7fe fec0 	bl	80029d4 <HAL_GetTick>
 8003c54:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e063      	b.n	8003d28 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10b      	bne.n	8003c84 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7fe fbc7 	bl	8002408 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003c7a:	f241 3188 	movw	r1, #5000	; 0x1388
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 faf7 	bl	8004272 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	021a      	lsls	r2, r3, #8
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	2120      	movs	r1, #32
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 faef 	bl	800428e <QSPI_WaitFlagStateUntilTimeout>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003cb4:	7afb      	ldrb	r3, [r7, #11]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d131      	bne.n	8003d1e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003cc4:	f023 0310 	bic.w	r3, r3, #16
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6852      	ldr	r2, [r2, #4]
 8003ccc:	0611      	lsls	r1, r2, #24
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	68d2      	ldr	r2, [r2, #12]
 8003cd2:	4311      	orrs	r1, r2
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	4b13      	ldr	r3, [pc, #76]	; (8003d30 <HAL_QSPI_Init+0xe8>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6912      	ldr	r2, [r2, #16]
 8003cea:	0411      	lsls	r1, r2, #16
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6952      	ldr	r2, [r2, #20]
 8003cf0:	4311      	orrs	r1, r2
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6992      	ldr	r2, [r2, #24]
 8003cf6:	4311      	orrs	r1, r2
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6812      	ldr	r2, [r2, #0]
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003d26:	7afb      	ldrb	r3, [r7, #11]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	ffe0f8fe 	.word	0xffe0f8fe

08003d34 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e016      	b.n	8003d74 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0201 	bic.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fe fbb8 	bl	80024cc <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003d88:	f7fe fe24 	bl	80029d4 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_QSPI_Command+0x22>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e048      	b.n	8003e30 <HAL_QSPI_Command+0xb4>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d137      	bne.n	8003e22 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	2120      	movs	r1, #32
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 fa5f 	bl	800428e <QSPI_WaitFlagStateUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003dd4:	7dfb      	ldrb	r3, [r7, #23]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d125      	bne.n	8003e26 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003dda:	2200      	movs	r2, #0
 8003ddc:	68b9      	ldr	r1, [r7, #8]
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 fa8c 	bl	80042fc <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d115      	bne.n	8003e18 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	2201      	movs	r2, #1
 8003df4:	2102      	movs	r1, #2
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 fa49 	bl	800428e <QSPI_WaitFlagStateUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10f      	bne.n	8003e26 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003e16:	e006      	b.n	8003e26 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003e20:	e001      	b.n	8003e26 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003e22:	2302      	movs	r3, #2
 8003e24:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b08a      	sub	sp, #40	; 0x28
 8003e3c:	af02      	add	r7, sp, #8
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003e48:	f7fe fdc4 	bl	80029d4 <HAL_GetTick>
 8003e4c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3320      	adds	r3, #32
 8003e54:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d101      	bne.n	8003e66 <HAL_QSPI_Transmit+0x2e>
 8003e62:	2302      	movs	r3, #2
 8003e64:	e07b      	b.n	8003f5e <HAL_QSPI_Transmit+0x126>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d16a      	bne.n	8003f50 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d05b      	beq.n	8003f3e <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2212      	movs	r2, #18
 8003e8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695a      	ldr	r2, [r3, #20]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003eba:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8003ebc:	e01b      	b.n	8003ef6 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	2104      	movs	r1, #4
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 f9e0 	bl	800428e <QSPI_WaitFlagStateUntilTimeout>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003ed2:	7ffb      	ldrb	r3, [r7, #31]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d113      	bne.n	8003f00 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	781a      	ldrb	r2, [r3, #0]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	1e5a      	subs	r2, r3, #1
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1df      	bne.n	8003ebe <HAL_QSPI_Transmit+0x86>
 8003efe:	e000      	b.n	8003f02 <HAL_QSPI_Transmit+0xca>
          break;
 8003f00:	bf00      	nop
      }

      if (status == HAL_OK)
 8003f02:	7ffb      	ldrb	r3, [r7, #31]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d115      	bne.n	8003f34 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	2102      	movs	r1, #2
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 f9bb 	bl	800428e <QSPI_WaitFlagStateUntilTimeout>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003f1c:	7ffb      	ldrb	r3, [r7, #31]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d108      	bne.n	8003f34 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2202      	movs	r2, #2
 8003f28:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 f934 	bl	8004198 <HAL_QSPI_Abort>
 8003f30:	4603      	mov	r3, r0
 8003f32:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003f3c:	e00a      	b.n	8003f54 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f42:	f043 0208 	orr.w	r2, r3, #8
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	77fb      	strb	r3, [r7, #31]
 8003f4e:	e001      	b.n	8003f54 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003f50:	2302      	movs	r3, #2
 8003f52:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003f5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3720      	adds	r7, #32
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b08a      	sub	sp, #40	; 0x28
 8003f6a:	af02      	add	r7, sp, #8
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003f76:	f7fe fd2d 	bl	80029d4 <HAL_GetTick>
 8003f7a:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3320      	adds	r3, #32
 8003f8a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_QSPI_Receive+0x36>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e082      	b.n	80040a2 <HAL_QSPI_Receive+0x13c>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d171      	bne.n	8004094 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d062      	beq.n	8004082 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2222      	movs	r2, #34	; 0x22
 8003fc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003ff4:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8003ffe:	e01c      	b.n	800403a <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	2201      	movs	r2, #1
 8004008:	2106      	movs	r1, #6
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 f93f 	bl	800428e <QSPI_WaitFlagStateUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8004014:	7ffb      	ldrb	r3, [r7, #31]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d114      	bne.n	8004044 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	7812      	ldrb	r2, [r2, #0]
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004034:	1e5a      	subs	r2, r3, #1
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1de      	bne.n	8004000 <HAL_QSPI_Receive+0x9a>
 8004042:	e000      	b.n	8004046 <HAL_QSPI_Receive+0xe0>
          break;
 8004044:	bf00      	nop
      }

      if (status == HAL_OK)
 8004046:	7ffb      	ldrb	r3, [r7, #31]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d115      	bne.n	8004078 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2201      	movs	r2, #1
 8004054:	2102      	movs	r1, #2
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 f919 	bl	800428e <QSPI_WaitFlagStateUntilTimeout>
 800405c:	4603      	mov	r3, r0
 800405e:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8004060:	7ffb      	ldrb	r3, [r7, #31]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d108      	bne.n	8004078 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2202      	movs	r2, #2
 800406c:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 f892 	bl	8004198 <HAL_QSPI_Abort>
 8004074:	4603      	mov	r3, r0
 8004076:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004080:	e00a      	b.n	8004098 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004086:	f043 0208 	orr.w	r2, r3, #8
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	77fb      	strb	r3, [r7, #31]
 8004092:	e001      	b.n	8004098 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004094:	2302      	movs	r3, #2
 8004096:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80040a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3720      	adds	r7, #32
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b088      	sub	sp, #32
 80040ae:	af02      	add	r7, sp, #8
 80040b0:	60f8      	str	r0, [r7, #12]
 80040b2:	60b9      	str	r1, [r7, #8]
 80040b4:	607a      	str	r2, [r7, #4]
 80040b6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80040b8:	f7fe fc8c 	bl	80029d4 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_QSPI_AutoPolling+0x24>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e060      	b.n	8004190 <HAL_QSPI_AutoPolling+0xe6>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d14f      	bne.n	8004182 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2242      	movs	r2, #66	; 0x42
 80040ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	2200      	movs	r2, #0
 80040f8:	2120      	movs	r1, #32
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 f8c7 	bl	800428e <QSPI_WaitFlagStateUntilTimeout>
 8004100:	4603      	mov	r3, r0
 8004102:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004104:	7dfb      	ldrb	r3, [r7, #23]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d13d      	bne.n	8004186 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6812      	ldr	r2, [r2, #0]
 8004112:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6852      	ldr	r2, [r2, #4]
 800411c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6892      	ldr	r2, [r2, #8]
 8004126:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	431a      	orrs	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004140:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800414a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800414e:	68b9      	ldr	r1, [r7, #8]
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 f8d3 	bl	80042fc <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	2201      	movs	r2, #1
 800415e:	2108      	movs	r1, #8
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f894 	bl	800428e <QSPI_WaitFlagStateUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800416a:	7dfb      	ldrb	r3, [r7, #23]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10a      	bne.n	8004186 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2208      	movs	r2, #8
 8004176:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004180:	e001      	b.n	8004186 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8004182:	2302      	movs	r3, #2
 8004184:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800418e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af02      	add	r7, sp, #8
 800419e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80041a4:	f7fe fc16 	bl	80029d4 <HAL_GetTick>
 80041a8:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d056      	beq.n	8004268 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d017      	beq.n	8004200 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0204 	bic.w	r2, r2, #4
 80041de:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff f8c5 	bl	8003374 <HAL_DMA_Abort>
 80041ea:	4603      	mov	r3, r0
 80041ec:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d005      	beq.n	8004200 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f8:	f043 0204 	orr.w	r2, r3, #4
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0202 	orr.w	r2, r2, #2
 800420e:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2201      	movs	r2, #1
 800421a:	2102      	movs	r1, #2
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f836 	bl	800428e <QSPI_WaitFlagStateUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10e      	bne.n	800424a <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2202      	movs	r2, #2
 8004232:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2200      	movs	r2, #0
 800423e:	2120      	movs	r1, #32
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f824 	bl	800428e <QSPI_WaitFlagStateUntilTimeout>
 8004246:	4603      	mov	r3, r0
 8004248:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800424a:	7bfb      	ldrb	r3, [r7, #15]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10b      	bne.n	8004268 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695a      	ldr	r2, [r3, #20]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800425e:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8004268:	7bfb      	ldrb	r3, [r7, #15]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
 800427a:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	603b      	str	r3, [r7, #0]
 800429a:	4613      	mov	r3, r2
 800429c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800429e:	e01a      	b.n	80042d6 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a6:	d016      	beq.n	80042d6 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a8:	f7fe fb94 	bl	80029d4 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d302      	bcc.n	80042be <QSPI_WaitFlagStateUntilTimeout+0x30>
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10b      	bne.n	80042d6 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2204      	movs	r2, #4
 80042c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ca:	f043 0201 	orr.w	r2, r3, #1
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e00e      	b.n	80042f4 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4013      	ands	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	bf14      	ite	ne
 80042e4:	2301      	movne	r3, #1
 80042e6:	2300      	moveq	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	461a      	mov	r2, r3
 80042ec:	79fb      	ldrb	r3, [r7, #7]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d1d6      	bne.n	80042a0 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	2b00      	cmp	r3, #0
 800430e:	d009      	beq.n	8004324 <QSPI_Config+0x28>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004316:	d005      	beq.n	8004324 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3a01      	subs	r2, #1
 8004322:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 80b9 	beq.w	80044a0 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d05f      	beq.n	80043f6 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	6892      	ldr	r2, [r2, #8]
 800433e:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d031      	beq.n	80043ac <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004350:	431a      	orrs	r2, r3
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004356:	431a      	orrs	r2, r3
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	431a      	orrs	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	049b      	lsls	r3, r3, #18
 8004364:	431a      	orrs	r2, r3
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	431a      	orrs	r2, r3
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	431a      	orrs	r2, r3
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	431a      	orrs	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	431a      	orrs	r2, r3
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	431a      	orrs	r2, r3
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	ea42 0103 	orr.w	r1, r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	430a      	orrs	r2, r1
 8004394:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800439c:	f000 812e 	beq.w	80045fc <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	6852      	ldr	r2, [r2, #4]
 80043a8:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80043aa:	e127      	b.n	80045fc <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b4:	431a      	orrs	r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ba:	431a      	orrs	r2, r3
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	431a      	orrs	r2, r3
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	049b      	lsls	r3, r3, #18
 80043c8:	431a      	orrs	r2, r3
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	431a      	orrs	r2, r3
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	431a      	orrs	r2, r3
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	431a      	orrs	r2, r3
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	431a      	orrs	r2, r3
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	ea42 0103 	orr.w	r1, r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	615a      	str	r2, [r3, #20]
}
 80043f4:	e102      	b.n	80045fc <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d02e      	beq.n	800445c <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	431a      	orrs	r2, r3
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440c:	431a      	orrs	r2, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	431a      	orrs	r2, r3
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	049b      	lsls	r3, r3, #18
 800441a:	431a      	orrs	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	431a      	orrs	r2, r3
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	431a      	orrs	r2, r3
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	431a      	orrs	r2, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	431a      	orrs	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	ea42 0103 	orr.w	r1, r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	430a      	orrs	r2, r1
 8004444:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800444c:	f000 80d6 	beq.w	80045fc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	6852      	ldr	r2, [r2, #4]
 8004458:	619a      	str	r2, [r3, #24]
}
 800445a:	e0cf      	b.n	80045fc <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004464:	431a      	orrs	r2, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446a:	431a      	orrs	r2, r3
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	431a      	orrs	r2, r3
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	049b      	lsls	r3, r3, #18
 8004478:	431a      	orrs	r2, r3
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	431a      	orrs	r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	431a      	orrs	r2, r3
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	431a      	orrs	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	ea42 0103 	orr.w	r1, r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	430a      	orrs	r2, r1
 800449c:	615a      	str	r2, [r3, #20]
}
 800449e:	e0ad      	b.n	80045fc <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d058      	beq.n	800455a <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	6892      	ldr	r2, [r2, #8]
 80044b0:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d02d      	beq.n	8004516 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	431a      	orrs	r2, r3
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c8:	431a      	orrs	r2, r3
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	431a      	orrs	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	049b      	lsls	r3, r3, #18
 80044d6:	431a      	orrs	r2, r3
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	431a      	orrs	r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	431a      	orrs	r2, r3
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	431a      	orrs	r2, r3
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	ea42 0103 	orr.w	r1, r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	430a      	orrs	r2, r1
 8004500:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004508:	d078      	beq.n	80045fc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	6852      	ldr	r2, [r2, #4]
 8004512:	619a      	str	r2, [r3, #24]
}
 8004514:	e072      	b.n	80045fc <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	431a      	orrs	r2, r3
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004524:	431a      	orrs	r2, r3
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	431a      	orrs	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	049b      	lsls	r3, r3, #18
 8004532:	431a      	orrs	r2, r3
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	431a      	orrs	r2, r3
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	431a      	orrs	r2, r3
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	431a      	orrs	r2, r3
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	ea42 0103 	orr.w	r1, r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	430a      	orrs	r2, r1
 8004556:	615a      	str	r2, [r3, #20]
}
 8004558:	e050      	b.n	80045fc <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d02a      	beq.n	80045b8 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456a:	431a      	orrs	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004570:	431a      	orrs	r2, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	431a      	orrs	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	049b      	lsls	r3, r3, #18
 800457e:	431a      	orrs	r2, r3
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	431a      	orrs	r2, r3
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	431a      	orrs	r2, r3
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	431a      	orrs	r2, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	ea42 0103 	orr.w	r1, r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80045aa:	d027      	beq.n	80045fc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	6852      	ldr	r2, [r2, #4]
 80045b4:	619a      	str	r2, [r3, #24]
}
 80045b6:	e021      	b.n	80045fc <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d01d      	beq.n	80045fc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	431a      	orrs	r2, r3
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ce:	431a      	orrs	r2, r3
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	431a      	orrs	r2, r3
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	049b      	lsls	r3, r3, #18
 80045dc:	431a      	orrs	r2, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	431a      	orrs	r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	431a      	orrs	r2, r3
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	ea42 0103 	orr.w	r1, r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	615a      	str	r2, [r3, #20]
}
 80045fc:	bf00      	nop
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e3d4      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800461a:	4ba1      	ldr	r3, [pc, #644]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 030c 	and.w	r3, r3, #12
 8004622:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004624:	4b9e      	ldr	r3, [pc, #632]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f003 0303 	and.w	r3, r3, #3
 800462c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0310 	and.w	r3, r3, #16
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 80e4 	beq.w	8004804 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d007      	beq.n	8004652 <HAL_RCC_OscConfig+0x4a>
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	2b0c      	cmp	r3, #12
 8004646:	f040 808b 	bne.w	8004760 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2b01      	cmp	r3, #1
 800464e:	f040 8087 	bne.w	8004760 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004652:	4b93      	ldr	r3, [pc, #588]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d005      	beq.n	800466a <HAL_RCC_OscConfig+0x62>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e3ac      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1a      	ldr	r2, [r3, #32]
 800466e:	4b8c      	ldr	r3, [pc, #560]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d004      	beq.n	8004684 <HAL_RCC_OscConfig+0x7c>
 800467a:	4b89      	ldr	r3, [pc, #548]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004682:	e005      	b.n	8004690 <HAL_RCC_OscConfig+0x88>
 8004684:	4b86      	ldr	r3, [pc, #536]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 8004686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800468a:	091b      	lsrs	r3, r3, #4
 800468c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004690:	4293      	cmp	r3, r2
 8004692:	d223      	bcs.n	80046dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fd73 	bl	8005184 <RCC_SetFlashLatencyFromMSIRange>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e38d      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046a8:	4b7d      	ldr	r3, [pc, #500]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a7c      	ldr	r2, [pc, #496]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 80046ae:	f043 0308 	orr.w	r3, r3, #8
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	4b7a      	ldr	r3, [pc, #488]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	4977      	ldr	r1, [pc, #476]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046c6:	4b76      	ldr	r3, [pc, #472]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	021b      	lsls	r3, r3, #8
 80046d4:	4972      	ldr	r1, [pc, #456]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	604b      	str	r3, [r1, #4]
 80046da:	e025      	b.n	8004728 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046dc:	4b70      	ldr	r3, [pc, #448]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a6f      	ldr	r2, [pc, #444]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 80046e2:	f043 0308 	orr.w	r3, r3, #8
 80046e6:	6013      	str	r3, [r2, #0]
 80046e8:	4b6d      	ldr	r3, [pc, #436]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	496a      	ldr	r1, [pc, #424]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046fa:	4b69      	ldr	r3, [pc, #420]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	021b      	lsls	r3, r3, #8
 8004708:	4965      	ldr	r1, [pc, #404]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 800470a:	4313      	orrs	r3, r2
 800470c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d109      	bne.n	8004728 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	4618      	mov	r0, r3
 800471a:	f000 fd33 	bl	8005184 <RCC_SetFlashLatencyFromMSIRange>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e34d      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004728:	f000 fc36 	bl	8004f98 <HAL_RCC_GetSysClockFreq>
 800472c:	4602      	mov	r2, r0
 800472e:	4b5c      	ldr	r3, [pc, #368]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	091b      	lsrs	r3, r3, #4
 8004734:	f003 030f 	and.w	r3, r3, #15
 8004738:	495a      	ldr	r1, [pc, #360]	; (80048a4 <HAL_RCC_OscConfig+0x29c>)
 800473a:	5ccb      	ldrb	r3, [r1, r3]
 800473c:	f003 031f 	and.w	r3, r3, #31
 8004740:	fa22 f303 	lsr.w	r3, r2, r3
 8004744:	4a58      	ldr	r2, [pc, #352]	; (80048a8 <HAL_RCC_OscConfig+0x2a0>)
 8004746:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004748:	4b58      	ldr	r3, [pc, #352]	; (80048ac <HAL_RCC_OscConfig+0x2a4>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f7fd ff5d 	bl	800260c <HAL_InitTick>
 8004752:	4603      	mov	r3, r0
 8004754:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004756:	7bfb      	ldrb	r3, [r7, #15]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d052      	beq.n	8004802 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800475c:	7bfb      	ldrb	r3, [r7, #15]
 800475e:	e331      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d032      	beq.n	80047ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004768:	4b4d      	ldr	r3, [pc, #308]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a4c      	ldr	r2, [pc, #304]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 800476e:	f043 0301 	orr.w	r3, r3, #1
 8004772:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004774:	f7fe f92e 	bl	80029d4 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800477c:	f7fe f92a 	bl	80029d4 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e31a      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800478e:	4b44      	ldr	r3, [pc, #272]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0f0      	beq.n	800477c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800479a:	4b41      	ldr	r3, [pc, #260]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a40      	ldr	r2, [pc, #256]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 80047a0:	f043 0308 	orr.w	r3, r3, #8
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	4b3e      	ldr	r3, [pc, #248]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	493b      	ldr	r1, [pc, #236]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047b8:	4b39      	ldr	r3, [pc, #228]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	021b      	lsls	r3, r3, #8
 80047c6:	4936      	ldr	r1, [pc, #216]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	604b      	str	r3, [r1, #4]
 80047cc:	e01a      	b.n	8004804 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80047ce:	4b34      	ldr	r3, [pc, #208]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a33      	ldr	r2, [pc, #204]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 80047d4:	f023 0301 	bic.w	r3, r3, #1
 80047d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047da:	f7fe f8fb 	bl	80029d4 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047e2:	f7fe f8f7 	bl	80029d4 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e2e7      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047f4:	4b2a      	ldr	r3, [pc, #168]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1f0      	bne.n	80047e2 <HAL_RCC_OscConfig+0x1da>
 8004800:	e000      	b.n	8004804 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004802:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d074      	beq.n	80048fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	2b08      	cmp	r3, #8
 8004814:	d005      	beq.n	8004822 <HAL_RCC_OscConfig+0x21a>
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	2b0c      	cmp	r3, #12
 800481a:	d10e      	bne.n	800483a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2b03      	cmp	r3, #3
 8004820:	d10b      	bne.n	800483a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004822:	4b1f      	ldr	r3, [pc, #124]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d064      	beq.n	80048f8 <HAL_RCC_OscConfig+0x2f0>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d160      	bne.n	80048f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e2c4      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004842:	d106      	bne.n	8004852 <HAL_RCC_OscConfig+0x24a>
 8004844:	4b16      	ldr	r3, [pc, #88]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a15      	ldr	r2, [pc, #84]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 800484a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800484e:	6013      	str	r3, [r2, #0]
 8004850:	e01d      	b.n	800488e <HAL_RCC_OscConfig+0x286>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800485a:	d10c      	bne.n	8004876 <HAL_RCC_OscConfig+0x26e>
 800485c:	4b10      	ldr	r3, [pc, #64]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a0f      	ldr	r2, [pc, #60]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 8004862:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004866:	6013      	str	r3, [r2, #0]
 8004868:	4b0d      	ldr	r3, [pc, #52]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a0c      	ldr	r2, [pc, #48]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 800486e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	e00b      	b.n	800488e <HAL_RCC_OscConfig+0x286>
 8004876:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a09      	ldr	r2, [pc, #36]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 800487c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004880:	6013      	str	r3, [r2, #0]
 8004882:	4b07      	ldr	r3, [pc, #28]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a06      	ldr	r2, [pc, #24]	; (80048a0 <HAL_RCC_OscConfig+0x298>)
 8004888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800488c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d01c      	beq.n	80048d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004896:	f7fe f89d 	bl	80029d4 <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800489c:	e011      	b.n	80048c2 <HAL_RCC_OscConfig+0x2ba>
 800489e:	bf00      	nop
 80048a0:	40021000 	.word	0x40021000
 80048a4:	080083c4 	.word	0x080083c4
 80048a8:	20000008 	.word	0x20000008
 80048ac:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048b0:	f7fe f890 	bl	80029d4 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b64      	cmp	r3, #100	; 0x64
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e280      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048c2:	4baf      	ldr	r3, [pc, #700]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0f0      	beq.n	80048b0 <HAL_RCC_OscConfig+0x2a8>
 80048ce:	e014      	b.n	80048fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d0:	f7fe f880 	bl	80029d4 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048d8:	f7fe f87c 	bl	80029d4 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b64      	cmp	r3, #100	; 0x64
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e26c      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048ea:	4ba5      	ldr	r3, [pc, #660]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCC_OscConfig+0x2d0>
 80048f6:	e000      	b.n	80048fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d060      	beq.n	80049c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	2b04      	cmp	r3, #4
 800490a:	d005      	beq.n	8004918 <HAL_RCC_OscConfig+0x310>
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	2b0c      	cmp	r3, #12
 8004910:	d119      	bne.n	8004946 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2b02      	cmp	r3, #2
 8004916:	d116      	bne.n	8004946 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004918:	4b99      	ldr	r3, [pc, #612]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004920:	2b00      	cmp	r3, #0
 8004922:	d005      	beq.n	8004930 <HAL_RCC_OscConfig+0x328>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e249      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004930:	4b93      	ldr	r3, [pc, #588]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	061b      	lsls	r3, r3, #24
 800493e:	4990      	ldr	r1, [pc, #576]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004940:	4313      	orrs	r3, r2
 8004942:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004944:	e040      	b.n	80049c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d023      	beq.n	8004996 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800494e:	4b8c      	ldr	r3, [pc, #560]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a8b      	ldr	r2, [pc, #556]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495a:	f7fe f83b 	bl	80029d4 <HAL_GetTick>
 800495e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004960:	e008      	b.n	8004974 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004962:	f7fe f837 	bl	80029d4 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d901      	bls.n	8004974 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e227      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004974:	4b82      	ldr	r3, [pc, #520]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0f0      	beq.n	8004962 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004980:	4b7f      	ldr	r3, [pc, #508]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	061b      	lsls	r3, r3, #24
 800498e:	497c      	ldr	r1, [pc, #496]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004990:	4313      	orrs	r3, r2
 8004992:	604b      	str	r3, [r1, #4]
 8004994:	e018      	b.n	80049c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004996:	4b7a      	ldr	r3, [pc, #488]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a79      	ldr	r2, [pc, #484]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 800499c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a2:	f7fe f817 	bl	80029d4 <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049a8:	e008      	b.n	80049bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049aa:	f7fe f813 	bl	80029d4 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e203      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049bc:	4b70      	ldr	r3, [pc, #448]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1f0      	bne.n	80049aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0308 	and.w	r3, r3, #8
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d03c      	beq.n	8004a4e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d01c      	beq.n	8004a16 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049dc:	4b68      	ldr	r3, [pc, #416]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 80049de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049e2:	4a67      	ldr	r2, [pc, #412]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 80049e4:	f043 0301 	orr.w	r3, r3, #1
 80049e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ec:	f7fd fff2 	bl	80029d4 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049f4:	f7fd ffee 	bl	80029d4 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e1de      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a06:	4b5e      	ldr	r3, [pc, #376]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0ef      	beq.n	80049f4 <HAL_RCC_OscConfig+0x3ec>
 8004a14:	e01b      	b.n	8004a4e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a16:	4b5a      	ldr	r3, [pc, #360]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a1c:	4a58      	ldr	r2, [pc, #352]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004a1e:	f023 0301 	bic.w	r3, r3, #1
 8004a22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a26:	f7fd ffd5 	bl	80029d4 <HAL_GetTick>
 8004a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a2c:	e008      	b.n	8004a40 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a2e:	f7fd ffd1 	bl	80029d4 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e1c1      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a40:	4b4f      	ldr	r3, [pc, #316]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1ef      	bne.n	8004a2e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 80a6 	beq.w	8004ba8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a60:	4b47      	ldr	r3, [pc, #284]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10d      	bne.n	8004a88 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a6c:	4b44      	ldr	r3, [pc, #272]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a70:	4a43      	ldr	r2, [pc, #268]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a76:	6593      	str	r3, [r2, #88]	; 0x58
 8004a78:	4b41      	ldr	r3, [pc, #260]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a80:	60bb      	str	r3, [r7, #8]
 8004a82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a84:	2301      	movs	r3, #1
 8004a86:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a88:	4b3e      	ldr	r3, [pc, #248]	; (8004b84 <HAL_RCC_OscConfig+0x57c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d118      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a94:	4b3b      	ldr	r3, [pc, #236]	; (8004b84 <HAL_RCC_OscConfig+0x57c>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a3a      	ldr	r2, [pc, #232]	; (8004b84 <HAL_RCC_OscConfig+0x57c>)
 8004a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aa0:	f7fd ff98 	bl	80029d4 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aa8:	f7fd ff94 	bl	80029d4 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e184      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aba:	4b32      	ldr	r3, [pc, #200]	; (8004b84 <HAL_RCC_OscConfig+0x57c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0f0      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d108      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x4d8>
 8004ace:	4b2c      	ldr	r3, [pc, #176]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad4:	4a2a      	ldr	r2, [pc, #168]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004ad6:	f043 0301 	orr.w	r3, r3, #1
 8004ada:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ade:	e024      	b.n	8004b2a <HAL_RCC_OscConfig+0x522>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	2b05      	cmp	r3, #5
 8004ae6:	d110      	bne.n	8004b0a <HAL_RCC_OscConfig+0x502>
 8004ae8:	4b25      	ldr	r3, [pc, #148]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aee:	4a24      	ldr	r2, [pc, #144]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004af0:	f043 0304 	orr.w	r3, r3, #4
 8004af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004af8:	4b21      	ldr	r3, [pc, #132]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afe:	4a20      	ldr	r2, [pc, #128]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004b00:	f043 0301 	orr.w	r3, r3, #1
 8004b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b08:	e00f      	b.n	8004b2a <HAL_RCC_OscConfig+0x522>
 8004b0a:	4b1d      	ldr	r3, [pc, #116]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b10:	4a1b      	ldr	r2, [pc, #108]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004b12:	f023 0301 	bic.w	r3, r3, #1
 8004b16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b1a:	4b19      	ldr	r3, [pc, #100]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b20:	4a17      	ldr	r2, [pc, #92]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004b22:	f023 0304 	bic.w	r3, r3, #4
 8004b26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d016      	beq.n	8004b60 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b32:	f7fd ff4f 	bl	80029d4 <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b38:	e00a      	b.n	8004b50 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b3a:	f7fd ff4b 	bl	80029d4 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e139      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b50:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <HAL_RCC_OscConfig+0x578>)
 8004b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0ed      	beq.n	8004b3a <HAL_RCC_OscConfig+0x532>
 8004b5e:	e01a      	b.n	8004b96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b60:	f7fd ff38 	bl	80029d4 <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b66:	e00f      	b.n	8004b88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b68:	f7fd ff34 	bl	80029d4 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d906      	bls.n	8004b88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e122      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7bc>
 8004b7e:	bf00      	nop
 8004b80:	40021000 	.word	0x40021000
 8004b84:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b88:	4b90      	ldr	r3, [pc, #576]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1e8      	bne.n	8004b68 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b96:	7ffb      	ldrb	r3, [r7, #31]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d105      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b9c:	4b8b      	ldr	r3, [pc, #556]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba0:	4a8a      	ldr	r2, [pc, #552]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ba6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 8108 	beq.w	8004dc2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	f040 80d0 	bne.w	8004d5c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004bbc:	4b83      	ldr	r3, [pc, #524]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f003 0203 	and.w	r2, r3, #3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d130      	bne.n	8004c32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d127      	bne.n	8004c32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d11f      	bne.n	8004c32 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bfc:	2a07      	cmp	r2, #7
 8004bfe:	bf14      	ite	ne
 8004c00:	2201      	movne	r2, #1
 8004c02:	2200      	moveq	r2, #0
 8004c04:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d113      	bne.n	8004c32 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c14:	085b      	lsrs	r3, r3, #1
 8004c16:	3b01      	subs	r3, #1
 8004c18:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d109      	bne.n	8004c32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	085b      	lsrs	r3, r3, #1
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d06e      	beq.n	8004d10 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	2b0c      	cmp	r3, #12
 8004c36:	d069      	beq.n	8004d0c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c38:	4b64      	ldr	r3, [pc, #400]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d105      	bne.n	8004c50 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004c44:	4b61      	ldr	r3, [pc, #388]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e0b7      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c54:	4b5d      	ldr	r3, [pc, #372]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a5c      	ldr	r2, [pc, #368]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004c5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c5e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c60:	f7fd feb8 	bl	80029d4 <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c68:	f7fd feb4 	bl	80029d4 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e0a4      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c7a:	4b54      	ldr	r3, [pc, #336]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1f0      	bne.n	8004c68 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c86:	4b51      	ldr	r3, [pc, #324]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	4b51      	ldr	r3, [pc, #324]	; (8004dd0 <HAL_RCC_OscConfig+0x7c8>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c96:	3a01      	subs	r2, #1
 8004c98:	0112      	lsls	r2, r2, #4
 8004c9a:	4311      	orrs	r1, r2
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ca0:	0212      	lsls	r2, r2, #8
 8004ca2:	4311      	orrs	r1, r2
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ca8:	0852      	lsrs	r2, r2, #1
 8004caa:	3a01      	subs	r2, #1
 8004cac:	0552      	lsls	r2, r2, #21
 8004cae:	4311      	orrs	r1, r2
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004cb4:	0852      	lsrs	r2, r2, #1
 8004cb6:	3a01      	subs	r2, #1
 8004cb8:	0652      	lsls	r2, r2, #25
 8004cba:	4311      	orrs	r1, r2
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cc0:	0912      	lsrs	r2, r2, #4
 8004cc2:	0452      	lsls	r2, r2, #17
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	4941      	ldr	r1, [pc, #260]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ccc:	4b3f      	ldr	r3, [pc, #252]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a3e      	ldr	r2, [pc, #248]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cd8:	4b3c      	ldr	r3, [pc, #240]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	4a3b      	ldr	r2, [pc, #236]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ce2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ce4:	f7fd fe76 	bl	80029d4 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cec:	f7fd fe72 	bl	80029d4 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e062      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cfe:	4b33      	ldr	r3, [pc, #204]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0f0      	beq.n	8004cec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d0a:	e05a      	b.n	8004dc2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e059      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d10:	4b2e      	ldr	r3, [pc, #184]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d152      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d1c:	4b2b      	ldr	r3, [pc, #172]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a2a      	ldr	r2, [pc, #168]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d28:	4b28      	ldr	r3, [pc, #160]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	4a27      	ldr	r2, [pc, #156]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d34:	f7fd fe4e 	bl	80029d4 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d3c:	f7fd fe4a 	bl	80029d4 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e03a      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d4e:	4b1f      	ldr	r3, [pc, #124]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0f0      	beq.n	8004d3c <HAL_RCC_OscConfig+0x734>
 8004d5a:	e032      	b.n	8004dc2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	2b0c      	cmp	r3, #12
 8004d60:	d02d      	beq.n	8004dbe <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d62:	4b1a      	ldr	r3, [pc, #104]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a19      	ldr	r2, [pc, #100]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004d68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d6c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004d6e:	4b17      	ldr	r3, [pc, #92]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d105      	bne.n	8004d86 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004d7a:	4b14      	ldr	r3, [pc, #80]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	4a13      	ldr	r2, [pc, #76]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004d80:	f023 0303 	bic.w	r3, r3, #3
 8004d84:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004d86:	4b11      	ldr	r3, [pc, #68]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	4a10      	ldr	r2, [pc, #64]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004d8c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d94:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d96:	f7fd fe1d 	bl	80029d4 <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d9c:	e008      	b.n	8004db0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d9e:	f7fd fe19 	bl	80029d4 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e009      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004db0:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <HAL_RCC_OscConfig+0x7c4>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1f0      	bne.n	8004d9e <HAL_RCC_OscConfig+0x796>
 8004dbc:	e001      	b.n	8004dc2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e000      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3720      	adds	r7, #32
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	f99d808c 	.word	0xf99d808c

08004dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e0c8      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004de8:	4b66      	ldr	r3, [pc, #408]	; (8004f84 <HAL_RCC_ClockConfig+0x1b0>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d910      	bls.n	8004e18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004df6:	4b63      	ldr	r3, [pc, #396]	; (8004f84 <HAL_RCC_ClockConfig+0x1b0>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f023 0207 	bic.w	r2, r3, #7
 8004dfe:	4961      	ldr	r1, [pc, #388]	; (8004f84 <HAL_RCC_ClockConfig+0x1b0>)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e06:	4b5f      	ldr	r3, [pc, #380]	; (8004f84 <HAL_RCC_ClockConfig+0x1b0>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d001      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e0b0      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d04c      	beq.n	8004ebe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2b03      	cmp	r3, #3
 8004e2a:	d107      	bne.n	8004e3c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e2c:	4b56      	ldr	r3, [pc, #344]	; (8004f88 <HAL_RCC_ClockConfig+0x1b4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d121      	bne.n	8004e7c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e09e      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d107      	bne.n	8004e54 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e44:	4b50      	ldr	r3, [pc, #320]	; (8004f88 <HAL_RCC_ClockConfig+0x1b4>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d115      	bne.n	8004e7c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e092      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d107      	bne.n	8004e6c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e5c:	4b4a      	ldr	r3, [pc, #296]	; (8004f88 <HAL_RCC_ClockConfig+0x1b4>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d109      	bne.n	8004e7c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e086      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e6c:	4b46      	ldr	r3, [pc, #280]	; (8004f88 <HAL_RCC_ClockConfig+0x1b4>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e07e      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e7c:	4b42      	ldr	r3, [pc, #264]	; (8004f88 <HAL_RCC_ClockConfig+0x1b4>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f023 0203 	bic.w	r2, r3, #3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	493f      	ldr	r1, [pc, #252]	; (8004f88 <HAL_RCC_ClockConfig+0x1b4>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8e:	f7fd fda1 	bl	80029d4 <HAL_GetTick>
 8004e92:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e94:	e00a      	b.n	8004eac <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e96:	f7fd fd9d 	bl	80029d4 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e066      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eac:	4b36      	ldr	r3, [pc, #216]	; (8004f88 <HAL_RCC_ClockConfig+0x1b4>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f003 020c 	and.w	r2, r3, #12
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d1eb      	bne.n	8004e96 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d008      	beq.n	8004edc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eca:	4b2f      	ldr	r3, [pc, #188]	; (8004f88 <HAL_RCC_ClockConfig+0x1b4>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	492c      	ldr	r1, [pc, #176]	; (8004f88 <HAL_RCC_ClockConfig+0x1b4>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004edc:	4b29      	ldr	r3, [pc, #164]	; (8004f84 <HAL_RCC_ClockConfig+0x1b0>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d210      	bcs.n	8004f0c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eea:	4b26      	ldr	r3, [pc, #152]	; (8004f84 <HAL_RCC_ClockConfig+0x1b0>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f023 0207 	bic.w	r2, r3, #7
 8004ef2:	4924      	ldr	r1, [pc, #144]	; (8004f84 <HAL_RCC_ClockConfig+0x1b0>)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efa:	4b22      	ldr	r3, [pc, #136]	; (8004f84 <HAL_RCC_ClockConfig+0x1b0>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d001      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e036      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d008      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f18:	4b1b      	ldr	r3, [pc, #108]	; (8004f88 <HAL_RCC_ClockConfig+0x1b4>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	4918      	ldr	r1, [pc, #96]	; (8004f88 <HAL_RCC_ClockConfig+0x1b4>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d009      	beq.n	8004f4a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f36:	4b14      	ldr	r3, [pc, #80]	; (8004f88 <HAL_RCC_ClockConfig+0x1b4>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	4910      	ldr	r1, [pc, #64]	; (8004f88 <HAL_RCC_ClockConfig+0x1b4>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f4a:	f000 f825 	bl	8004f98 <HAL_RCC_GetSysClockFreq>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	4b0d      	ldr	r3, [pc, #52]	; (8004f88 <HAL_RCC_ClockConfig+0x1b4>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	091b      	lsrs	r3, r3, #4
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	490c      	ldr	r1, [pc, #48]	; (8004f8c <HAL_RCC_ClockConfig+0x1b8>)
 8004f5c:	5ccb      	ldrb	r3, [r1, r3]
 8004f5e:	f003 031f 	and.w	r3, r3, #31
 8004f62:	fa22 f303 	lsr.w	r3, r2, r3
 8004f66:	4a0a      	ldr	r2, [pc, #40]	; (8004f90 <HAL_RCC_ClockConfig+0x1bc>)
 8004f68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f6a:	4b0a      	ldr	r3, [pc, #40]	; (8004f94 <HAL_RCC_ClockConfig+0x1c0>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fd fb4c 	bl	800260c <HAL_InitTick>
 8004f74:	4603      	mov	r3, r0
 8004f76:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f78:	7afb      	ldrb	r3, [r7, #11]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	40022000 	.word	0x40022000
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	080083c4 	.word	0x080083c4
 8004f90:	20000008 	.word	0x20000008
 8004f94:	2000000c 	.word	0x2000000c

08004f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b089      	sub	sp, #36	; 0x24
 8004f9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61fb      	str	r3, [r7, #28]
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fa6:	4b3e      	ldr	r3, [pc, #248]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 030c 	and.w	r3, r3, #12
 8004fae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fb0:	4b3b      	ldr	r3, [pc, #236]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f003 0303 	and.w	r3, r3, #3
 8004fb8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d005      	beq.n	8004fcc <HAL_RCC_GetSysClockFreq+0x34>
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	2b0c      	cmp	r3, #12
 8004fc4:	d121      	bne.n	800500a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d11e      	bne.n	800500a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004fcc:	4b34      	ldr	r3, [pc, #208]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0308 	and.w	r3, r3, #8
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d107      	bne.n	8004fe8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004fd8:	4b31      	ldr	r3, [pc, #196]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fde:	0a1b      	lsrs	r3, r3, #8
 8004fe0:	f003 030f 	and.w	r3, r3, #15
 8004fe4:	61fb      	str	r3, [r7, #28]
 8004fe6:	e005      	b.n	8004ff4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004fe8:	4b2d      	ldr	r3, [pc, #180]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	091b      	lsrs	r3, r3, #4
 8004fee:	f003 030f 	and.w	r3, r3, #15
 8004ff2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ff4:	4a2b      	ldr	r2, [pc, #172]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ffc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10d      	bne.n	8005020 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005008:	e00a      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2b04      	cmp	r3, #4
 800500e:	d102      	bne.n	8005016 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005010:	4b25      	ldr	r3, [pc, #148]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005012:	61bb      	str	r3, [r7, #24]
 8005014:	e004      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	2b08      	cmp	r3, #8
 800501a:	d101      	bne.n	8005020 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800501c:	4b23      	ldr	r3, [pc, #140]	; (80050ac <HAL_RCC_GetSysClockFreq+0x114>)
 800501e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	2b0c      	cmp	r3, #12
 8005024:	d134      	bne.n	8005090 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005026:	4b1e      	ldr	r3, [pc, #120]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2b02      	cmp	r3, #2
 8005034:	d003      	beq.n	800503e <HAL_RCC_GetSysClockFreq+0xa6>
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b03      	cmp	r3, #3
 800503a:	d003      	beq.n	8005044 <HAL_RCC_GetSysClockFreq+0xac>
 800503c:	e005      	b.n	800504a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800503e:	4b1a      	ldr	r3, [pc, #104]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005040:	617b      	str	r3, [r7, #20]
      break;
 8005042:	e005      	b.n	8005050 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005044:	4b19      	ldr	r3, [pc, #100]	; (80050ac <HAL_RCC_GetSysClockFreq+0x114>)
 8005046:	617b      	str	r3, [r7, #20]
      break;
 8005048:	e002      	b.n	8005050 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	617b      	str	r3, [r7, #20]
      break;
 800504e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005050:	4b13      	ldr	r3, [pc, #76]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	091b      	lsrs	r3, r3, #4
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	3301      	adds	r3, #1
 800505c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800505e:	4b10      	ldr	r3, [pc, #64]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	0a1b      	lsrs	r3, r3, #8
 8005064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	fb02 f203 	mul.w	r2, r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	fbb2 f3f3 	udiv	r3, r2, r3
 8005074:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005076:	4b0a      	ldr	r3, [pc, #40]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	0e5b      	lsrs	r3, r3, #25
 800507c:	f003 0303 	and.w	r3, r3, #3
 8005080:	3301      	adds	r3, #1
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	fbb2 f3f3 	udiv	r3, r2, r3
 800508e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005090:	69bb      	ldr	r3, [r7, #24]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3724      	adds	r7, #36	; 0x24
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	40021000 	.word	0x40021000
 80050a4:	080083dc 	.word	0x080083dc
 80050a8:	00f42400 	.word	0x00f42400
 80050ac:	007a1200 	.word	0x007a1200

080050b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050b4:	4b03      	ldr	r3, [pc, #12]	; (80050c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050b6:	681b      	ldr	r3, [r3, #0]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	20000008 	.word	0x20000008

080050c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80050cc:	f7ff fff0 	bl	80050b0 <HAL_RCC_GetHCLKFreq>
 80050d0:	4602      	mov	r2, r0
 80050d2:	4b06      	ldr	r3, [pc, #24]	; (80050ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	0a1b      	lsrs	r3, r3, #8
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	4904      	ldr	r1, [pc, #16]	; (80050f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80050de:	5ccb      	ldrb	r3, [r1, r3]
 80050e0:	f003 031f 	and.w	r3, r3, #31
 80050e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40021000 	.word	0x40021000
 80050f0:	080083d4 	.word	0x080083d4

080050f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80050f8:	f7ff ffda 	bl	80050b0 <HAL_RCC_GetHCLKFreq>
 80050fc:	4602      	mov	r2, r0
 80050fe:	4b06      	ldr	r3, [pc, #24]	; (8005118 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	0adb      	lsrs	r3, r3, #11
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	4904      	ldr	r1, [pc, #16]	; (800511c <HAL_RCC_GetPCLK2Freq+0x28>)
 800510a:	5ccb      	ldrb	r3, [r1, r3]
 800510c:	f003 031f 	and.w	r3, r3, #31
 8005110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005114:	4618      	mov	r0, r3
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40021000 	.word	0x40021000
 800511c:	080083d4 	.word	0x080083d4

08005120 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	220f      	movs	r2, #15
 800512e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005130:	4b12      	ldr	r3, [pc, #72]	; (800517c <HAL_RCC_GetClockConfig+0x5c>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f003 0203 	and.w	r2, r3, #3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800513c:	4b0f      	ldr	r3, [pc, #60]	; (800517c <HAL_RCC_GetClockConfig+0x5c>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005148:	4b0c      	ldr	r3, [pc, #48]	; (800517c <HAL_RCC_GetClockConfig+0x5c>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005154:	4b09      	ldr	r3, [pc, #36]	; (800517c <HAL_RCC_GetClockConfig+0x5c>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	08db      	lsrs	r3, r3, #3
 800515a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005162:	4b07      	ldr	r3, [pc, #28]	; (8005180 <HAL_RCC_GetClockConfig+0x60>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0207 	and.w	r2, r3, #7
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	601a      	str	r2, [r3, #0]
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40021000 	.word	0x40021000
 8005180:	40022000 	.word	0x40022000

08005184 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800518c:	2300      	movs	r3, #0
 800518e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005190:	4b2a      	ldr	r3, [pc, #168]	; (800523c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800519c:	f7fe fcf0 	bl	8003b80 <HAL_PWREx_GetVoltageRange>
 80051a0:	6178      	str	r0, [r7, #20]
 80051a2:	e014      	b.n	80051ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80051a4:	4b25      	ldr	r3, [pc, #148]	; (800523c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a8:	4a24      	ldr	r2, [pc, #144]	; (800523c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ae:	6593      	str	r3, [r2, #88]	; 0x58
 80051b0:	4b22      	ldr	r3, [pc, #136]	; (800523c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b8:	60fb      	str	r3, [r7, #12]
 80051ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80051bc:	f7fe fce0 	bl	8003b80 <HAL_PWREx_GetVoltageRange>
 80051c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80051c2:	4b1e      	ldr	r3, [pc, #120]	; (800523c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c6:	4a1d      	ldr	r2, [pc, #116]	; (800523c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051d4:	d10b      	bne.n	80051ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b80      	cmp	r3, #128	; 0x80
 80051da:	d919      	bls.n	8005210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2ba0      	cmp	r3, #160	; 0xa0
 80051e0:	d902      	bls.n	80051e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051e2:	2302      	movs	r3, #2
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	e013      	b.n	8005210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051e8:	2301      	movs	r3, #1
 80051ea:	613b      	str	r3, [r7, #16]
 80051ec:	e010      	b.n	8005210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b80      	cmp	r3, #128	; 0x80
 80051f2:	d902      	bls.n	80051fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80051f4:	2303      	movs	r3, #3
 80051f6:	613b      	str	r3, [r7, #16]
 80051f8:	e00a      	b.n	8005210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b80      	cmp	r3, #128	; 0x80
 80051fe:	d102      	bne.n	8005206 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005200:	2302      	movs	r3, #2
 8005202:	613b      	str	r3, [r7, #16]
 8005204:	e004      	b.n	8005210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b70      	cmp	r3, #112	; 0x70
 800520a:	d101      	bne.n	8005210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800520c:	2301      	movs	r3, #1
 800520e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005210:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f023 0207 	bic.w	r2, r3, #7
 8005218:	4909      	ldr	r1, [pc, #36]	; (8005240 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005220:	4b07      	ldr	r3, [pc, #28]	; (8005240 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	429a      	cmp	r2, r3
 800522c:	d001      	beq.n	8005232 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e000      	b.n	8005234 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	40021000 	.word	0x40021000
 8005240:	40022000 	.word	0x40022000

08005244 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800524c:	2300      	movs	r3, #0
 800524e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005250:	2300      	movs	r3, #0
 8005252:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800525c:	2b00      	cmp	r3, #0
 800525e:	d041      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005264:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005268:	d02a      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800526a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800526e:	d824      	bhi.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005270:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005274:	d008      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005276:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800527a:	d81e      	bhi.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00a      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005284:	d010      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005286:	e018      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005288:	4b86      	ldr	r3, [pc, #536]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	4a85      	ldr	r2, [pc, #532]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800528e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005292:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005294:	e015      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3304      	adds	r3, #4
 800529a:	2100      	movs	r1, #0
 800529c:	4618      	mov	r0, r3
 800529e:	f000 fabb 	bl	8005818 <RCCEx_PLLSAI1_Config>
 80052a2:	4603      	mov	r3, r0
 80052a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052a6:	e00c      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3320      	adds	r3, #32
 80052ac:	2100      	movs	r1, #0
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 fba6 	bl	8005a00 <RCCEx_PLLSAI2_Config>
 80052b4:	4603      	mov	r3, r0
 80052b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052b8:	e003      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	74fb      	strb	r3, [r7, #19]
      break;
 80052be:	e000      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80052c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052c2:	7cfb      	ldrb	r3, [r7, #19]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10b      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052c8:	4b76      	ldr	r3, [pc, #472]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052d6:	4973      	ldr	r1, [pc, #460]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80052de:	e001      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052e0:	7cfb      	ldrb	r3, [r7, #19]
 80052e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d041      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80052f8:	d02a      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80052fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80052fe:	d824      	bhi.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005300:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005304:	d008      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005306:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800530a:	d81e      	bhi.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00a      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005314:	d010      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005316:	e018      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005318:	4b62      	ldr	r3, [pc, #392]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	4a61      	ldr	r2, [pc, #388]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800531e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005322:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005324:	e015      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	3304      	adds	r3, #4
 800532a:	2100      	movs	r1, #0
 800532c:	4618      	mov	r0, r3
 800532e:	f000 fa73 	bl	8005818 <RCCEx_PLLSAI1_Config>
 8005332:	4603      	mov	r3, r0
 8005334:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005336:	e00c      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3320      	adds	r3, #32
 800533c:	2100      	movs	r1, #0
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fb5e 	bl	8005a00 <RCCEx_PLLSAI2_Config>
 8005344:	4603      	mov	r3, r0
 8005346:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005348:	e003      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	74fb      	strb	r3, [r7, #19]
      break;
 800534e:	e000      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005350:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005352:	7cfb      	ldrb	r3, [r7, #19]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10b      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005358:	4b52      	ldr	r3, [pc, #328]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800535a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005366:	494f      	ldr	r1, [pc, #316]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005368:	4313      	orrs	r3, r2
 800536a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800536e:	e001      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005370:	7cfb      	ldrb	r3, [r7, #19]
 8005372:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 80a0 	beq.w	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005382:	2300      	movs	r3, #0
 8005384:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005386:	4b47      	ldr	r3, [pc, #284]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005392:	2301      	movs	r3, #1
 8005394:	e000      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005396:	2300      	movs	r3, #0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00d      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800539c:	4b41      	ldr	r3, [pc, #260]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800539e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a0:	4a40      	ldr	r2, [pc, #256]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053a6:	6593      	str	r3, [r2, #88]	; 0x58
 80053a8:	4b3e      	ldr	r3, [pc, #248]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053b0:	60bb      	str	r3, [r7, #8]
 80053b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053b4:	2301      	movs	r3, #1
 80053b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053b8:	4b3b      	ldr	r3, [pc, #236]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a3a      	ldr	r2, [pc, #232]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80053be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053c4:	f7fd fb06 	bl	80029d4 <HAL_GetTick>
 80053c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80053ca:	e009      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053cc:	f7fd fb02 	bl	80029d4 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d902      	bls.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	74fb      	strb	r3, [r7, #19]
        break;
 80053de:	e005      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80053e0:	4b31      	ldr	r3, [pc, #196]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d0ef      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80053ec:	7cfb      	ldrb	r3, [r7, #19]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d15c      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053f2:	4b2c      	ldr	r3, [pc, #176]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d01f      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	429a      	cmp	r2, r3
 800540e:	d019      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005410:	4b24      	ldr	r3, [pc, #144]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800541a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800541c:	4b21      	ldr	r3, [pc, #132]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800541e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005422:	4a20      	ldr	r2, [pc, #128]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800542c:	4b1d      	ldr	r3, [pc, #116]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800542e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005432:	4a1c      	ldr	r2, [pc, #112]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800543c:	4a19      	ldr	r2, [pc, #100]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d016      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800544e:	f7fd fac1 	bl	80029d4 <HAL_GetTick>
 8005452:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005454:	e00b      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005456:	f7fd fabd 	bl	80029d4 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	f241 3288 	movw	r2, #5000	; 0x1388
 8005464:	4293      	cmp	r3, r2
 8005466:	d902      	bls.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	74fb      	strb	r3, [r7, #19]
            break;
 800546c:	e006      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800546e:	4b0d      	ldr	r3, [pc, #52]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d0ec      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800547c:	7cfb      	ldrb	r3, [r7, #19]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10c      	bne.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005482:	4b08      	ldr	r3, [pc, #32]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005488:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005492:	4904      	ldr	r1, [pc, #16]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800549a:	e009      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800549c:	7cfb      	ldrb	r3, [r7, #19]
 800549e:	74bb      	strb	r3, [r7, #18]
 80054a0:	e006      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80054a2:	bf00      	nop
 80054a4:	40021000 	.word	0x40021000
 80054a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ac:	7cfb      	ldrb	r3, [r7, #19]
 80054ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054b0:	7c7b      	ldrb	r3, [r7, #17]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d105      	bne.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054b6:	4b9e      	ldr	r3, [pc, #632]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ba:	4a9d      	ldr	r2, [pc, #628]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054ce:	4b98      	ldr	r3, [pc, #608]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d4:	f023 0203 	bic.w	r2, r3, #3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054dc:	4994      	ldr	r1, [pc, #592]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00a      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054f0:	4b8f      	ldr	r3, [pc, #572]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f6:	f023 020c 	bic.w	r2, r3, #12
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054fe:	498c      	ldr	r1, [pc, #560]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005500:	4313      	orrs	r3, r2
 8005502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0304 	and.w	r3, r3, #4
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005512:	4b87      	ldr	r3, [pc, #540]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005518:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005520:	4983      	ldr	r1, [pc, #524]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0308 	and.w	r3, r3, #8
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00a      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005534:	4b7e      	ldr	r3, [pc, #504]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005542:	497b      	ldr	r1, [pc, #492]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005544:	4313      	orrs	r3, r2
 8005546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0310 	and.w	r3, r3, #16
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005556:	4b76      	ldr	r3, [pc, #472]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005564:	4972      	ldr	r1, [pc, #456]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005566:	4313      	orrs	r3, r2
 8005568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0320 	and.w	r3, r3, #32
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00a      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005578:	4b6d      	ldr	r3, [pc, #436]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800557a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005586:	496a      	ldr	r1, [pc, #424]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005588:	4313      	orrs	r3, r2
 800558a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00a      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800559a:	4b65      	ldr	r3, [pc, #404]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800559c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a8:	4961      	ldr	r1, [pc, #388]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00a      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055bc:	4b5c      	ldr	r3, [pc, #368]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ca:	4959      	ldr	r1, [pc, #356]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00a      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055de:	4b54      	ldr	r3, [pc, #336]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ec:	4950      	ldr	r1, [pc, #320]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00a      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005600:	4b4b      	ldr	r3, [pc, #300]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005606:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560e:	4948      	ldr	r1, [pc, #288]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005610:	4313      	orrs	r3, r2
 8005612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005622:	4b43      	ldr	r3, [pc, #268]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005628:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005630:	493f      	ldr	r1, [pc, #252]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005632:	4313      	orrs	r3, r2
 8005634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d028      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005644:	4b3a      	ldr	r3, [pc, #232]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800564a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005652:	4937      	ldr	r1, [pc, #220]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005654:	4313      	orrs	r3, r2
 8005656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800565e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005662:	d106      	bne.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005664:	4b32      	ldr	r3, [pc, #200]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	4a31      	ldr	r2, [pc, #196]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800566a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800566e:	60d3      	str	r3, [r2, #12]
 8005670:	e011      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005676:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800567a:	d10c      	bne.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3304      	adds	r3, #4
 8005680:	2101      	movs	r1, #1
 8005682:	4618      	mov	r0, r3
 8005684:	f000 f8c8 	bl	8005818 <RCCEx_PLLSAI1_Config>
 8005688:	4603      	mov	r3, r0
 800568a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800568c:	7cfb      	ldrb	r3, [r7, #19]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005692:	7cfb      	ldrb	r3, [r7, #19]
 8005694:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d028      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80056a2:	4b23      	ldr	r3, [pc, #140]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b0:	491f      	ldr	r1, [pc, #124]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056c0:	d106      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056c2:	4b1b      	ldr	r3, [pc, #108]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	4a1a      	ldr	r2, [pc, #104]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056cc:	60d3      	str	r3, [r2, #12]
 80056ce:	e011      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056d8:	d10c      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3304      	adds	r3, #4
 80056de:	2101      	movs	r1, #1
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 f899 	bl	8005818 <RCCEx_PLLSAI1_Config>
 80056e6:	4603      	mov	r3, r0
 80056e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056ea:	7cfb      	ldrb	r3, [r7, #19]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80056f0:	7cfb      	ldrb	r3, [r7, #19]
 80056f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d02b      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005700:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005706:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800570e:	4908      	ldr	r1, [pc, #32]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800571a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800571e:	d109      	bne.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005720:	4b03      	ldr	r3, [pc, #12]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	4a02      	ldr	r2, [pc, #8]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005726:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800572a:	60d3      	str	r3, [r2, #12]
 800572c:	e014      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800572e:	bf00      	nop
 8005730:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005738:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800573c:	d10c      	bne.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3304      	adds	r3, #4
 8005742:	2101      	movs	r1, #1
 8005744:	4618      	mov	r0, r3
 8005746:	f000 f867 	bl	8005818 <RCCEx_PLLSAI1_Config>
 800574a:	4603      	mov	r3, r0
 800574c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800574e:	7cfb      	ldrb	r3, [r7, #19]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005754:	7cfb      	ldrb	r3, [r7, #19]
 8005756:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d02f      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005764:	4b2b      	ldr	r3, [pc, #172]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005772:	4928      	ldr	r1, [pc, #160]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005774:	4313      	orrs	r3, r2
 8005776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800577e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005782:	d10d      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	3304      	adds	r3, #4
 8005788:	2102      	movs	r1, #2
 800578a:	4618      	mov	r0, r3
 800578c:	f000 f844 	bl	8005818 <RCCEx_PLLSAI1_Config>
 8005790:	4603      	mov	r3, r0
 8005792:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005794:	7cfb      	ldrb	r3, [r7, #19]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d014      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800579a:	7cfb      	ldrb	r3, [r7, #19]
 800579c:	74bb      	strb	r3, [r7, #18]
 800579e:	e011      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057a8:	d10c      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	3320      	adds	r3, #32
 80057ae:	2102      	movs	r1, #2
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 f925 	bl	8005a00 <RCCEx_PLLSAI2_Config>
 80057b6:	4603      	mov	r3, r0
 80057b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057ba:	7cfb      	ldrb	r3, [r7, #19]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80057c0:	7cfb      	ldrb	r3, [r7, #19]
 80057c2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00a      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80057d0:	4b10      	ldr	r3, [pc, #64]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057de:	490d      	ldr	r1, [pc, #52]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00b      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057f2:	4b08      	ldr	r3, [pc, #32]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005802:	4904      	ldr	r1, [pc, #16]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005804:	4313      	orrs	r3, r2
 8005806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800580a:	7cbb      	ldrb	r3, [r7, #18]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40021000 	.word	0x40021000

08005818 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005826:	4b75      	ldr	r3, [pc, #468]	; (80059fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d018      	beq.n	8005864 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005832:	4b72      	ldr	r3, [pc, #456]	; (80059fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f003 0203 	and.w	r2, r3, #3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	429a      	cmp	r2, r3
 8005840:	d10d      	bne.n	800585e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
       ||
 8005846:	2b00      	cmp	r3, #0
 8005848:	d009      	beq.n	800585e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800584a:	4b6c      	ldr	r3, [pc, #432]	; (80059fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	091b      	lsrs	r3, r3, #4
 8005850:	f003 0307 	and.w	r3, r3, #7
 8005854:	1c5a      	adds	r2, r3, #1
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
       ||
 800585a:	429a      	cmp	r2, r3
 800585c:	d047      	beq.n	80058ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	73fb      	strb	r3, [r7, #15]
 8005862:	e044      	b.n	80058ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b03      	cmp	r3, #3
 800586a:	d018      	beq.n	800589e <RCCEx_PLLSAI1_Config+0x86>
 800586c:	2b03      	cmp	r3, #3
 800586e:	d825      	bhi.n	80058bc <RCCEx_PLLSAI1_Config+0xa4>
 8005870:	2b01      	cmp	r3, #1
 8005872:	d002      	beq.n	800587a <RCCEx_PLLSAI1_Config+0x62>
 8005874:	2b02      	cmp	r3, #2
 8005876:	d009      	beq.n	800588c <RCCEx_PLLSAI1_Config+0x74>
 8005878:	e020      	b.n	80058bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800587a:	4b60      	ldr	r3, [pc, #384]	; (80059fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d11d      	bne.n	80058c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800588a:	e01a      	b.n	80058c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800588c:	4b5b      	ldr	r3, [pc, #364]	; (80059fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005894:	2b00      	cmp	r3, #0
 8005896:	d116      	bne.n	80058c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800589c:	e013      	b.n	80058c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800589e:	4b57      	ldr	r3, [pc, #348]	; (80059fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10f      	bne.n	80058ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058aa:	4b54      	ldr	r3, [pc, #336]	; (80059fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d109      	bne.n	80058ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058ba:	e006      	b.n	80058ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	73fb      	strb	r3, [r7, #15]
      break;
 80058c0:	e004      	b.n	80058cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058c2:	bf00      	nop
 80058c4:	e002      	b.n	80058cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058c6:	bf00      	nop
 80058c8:	e000      	b.n	80058cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10d      	bne.n	80058ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80058d2:	4b4a      	ldr	r3, [pc, #296]	; (80059fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6819      	ldr	r1, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	011b      	lsls	r3, r3, #4
 80058e6:	430b      	orrs	r3, r1
 80058e8:	4944      	ldr	r1, [pc, #272]	; (80059fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d17d      	bne.n	80059f0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80058f4:	4b41      	ldr	r3, [pc, #260]	; (80059fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a40      	ldr	r2, [pc, #256]	; (80059fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80058fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005900:	f7fd f868 	bl	80029d4 <HAL_GetTick>
 8005904:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005906:	e009      	b.n	800591c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005908:	f7fd f864 	bl	80029d4 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d902      	bls.n	800591c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	73fb      	strb	r3, [r7, #15]
        break;
 800591a:	e005      	b.n	8005928 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800591c:	4b37      	ldr	r3, [pc, #220]	; (80059fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1ef      	bne.n	8005908 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d160      	bne.n	80059f0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d111      	bne.n	8005958 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005934:	4b31      	ldr	r3, [pc, #196]	; (80059fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800593c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6892      	ldr	r2, [r2, #8]
 8005944:	0211      	lsls	r1, r2, #8
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	68d2      	ldr	r2, [r2, #12]
 800594a:	0912      	lsrs	r2, r2, #4
 800594c:	0452      	lsls	r2, r2, #17
 800594e:	430a      	orrs	r2, r1
 8005950:	492a      	ldr	r1, [pc, #168]	; (80059fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005952:	4313      	orrs	r3, r2
 8005954:	610b      	str	r3, [r1, #16]
 8005956:	e027      	b.n	80059a8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d112      	bne.n	8005984 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800595e:	4b27      	ldr	r3, [pc, #156]	; (80059fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005966:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	6892      	ldr	r2, [r2, #8]
 800596e:	0211      	lsls	r1, r2, #8
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6912      	ldr	r2, [r2, #16]
 8005974:	0852      	lsrs	r2, r2, #1
 8005976:	3a01      	subs	r2, #1
 8005978:	0552      	lsls	r2, r2, #21
 800597a:	430a      	orrs	r2, r1
 800597c:	491f      	ldr	r1, [pc, #124]	; (80059fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800597e:	4313      	orrs	r3, r2
 8005980:	610b      	str	r3, [r1, #16]
 8005982:	e011      	b.n	80059a8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005984:	4b1d      	ldr	r3, [pc, #116]	; (80059fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800598c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	6892      	ldr	r2, [r2, #8]
 8005994:	0211      	lsls	r1, r2, #8
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6952      	ldr	r2, [r2, #20]
 800599a:	0852      	lsrs	r2, r2, #1
 800599c:	3a01      	subs	r2, #1
 800599e:	0652      	lsls	r2, r2, #25
 80059a0:	430a      	orrs	r2, r1
 80059a2:	4916      	ldr	r1, [pc, #88]	; (80059fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80059a8:	4b14      	ldr	r3, [pc, #80]	; (80059fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a13      	ldr	r2, [pc, #76]	; (80059fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b4:	f7fd f80e 	bl	80029d4 <HAL_GetTick>
 80059b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059ba:	e009      	b.n	80059d0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059bc:	f7fd f80a 	bl	80029d4 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d902      	bls.n	80059d0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	73fb      	strb	r3, [r7, #15]
          break;
 80059ce:	e005      	b.n	80059dc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059d0:	4b0a      	ldr	r3, [pc, #40]	; (80059fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0ef      	beq.n	80059bc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d106      	bne.n	80059f0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80059e2:	4b06      	ldr	r3, [pc, #24]	; (80059fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80059e4:	691a      	ldr	r2, [r3, #16]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	4904      	ldr	r1, [pc, #16]	; (80059fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	40021000 	.word	0x40021000

08005a00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a0e:	4b6a      	ldr	r3, [pc, #424]	; (8005bb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d018      	beq.n	8005a4c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005a1a:	4b67      	ldr	r3, [pc, #412]	; (8005bb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	f003 0203 	and.w	r2, r3, #3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d10d      	bne.n	8005a46 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
       ||
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d009      	beq.n	8005a46 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005a32:	4b61      	ldr	r3, [pc, #388]	; (8005bb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	091b      	lsrs	r3, r3, #4
 8005a38:	f003 0307 	and.w	r3, r3, #7
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
       ||
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d047      	beq.n	8005ad6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	73fb      	strb	r3, [r7, #15]
 8005a4a:	e044      	b.n	8005ad6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b03      	cmp	r3, #3
 8005a52:	d018      	beq.n	8005a86 <RCCEx_PLLSAI2_Config+0x86>
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d825      	bhi.n	8005aa4 <RCCEx_PLLSAI2_Config+0xa4>
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d002      	beq.n	8005a62 <RCCEx_PLLSAI2_Config+0x62>
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d009      	beq.n	8005a74 <RCCEx_PLLSAI2_Config+0x74>
 8005a60:	e020      	b.n	8005aa4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a62:	4b55      	ldr	r3, [pc, #340]	; (8005bb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d11d      	bne.n	8005aaa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a72:	e01a      	b.n	8005aaa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a74:	4b50      	ldr	r3, [pc, #320]	; (8005bb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d116      	bne.n	8005aae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a84:	e013      	b.n	8005aae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a86:	4b4c      	ldr	r3, [pc, #304]	; (8005bb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10f      	bne.n	8005ab2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a92:	4b49      	ldr	r3, [pc, #292]	; (8005bb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d109      	bne.n	8005ab2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005aa2:	e006      	b.n	8005ab2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8005aa8:	e004      	b.n	8005ab4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005aaa:	bf00      	nop
 8005aac:	e002      	b.n	8005ab4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005aae:	bf00      	nop
 8005ab0:	e000      	b.n	8005ab4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ab2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ab4:	7bfb      	ldrb	r3, [r7, #15]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10d      	bne.n	8005ad6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005aba:	4b3f      	ldr	r3, [pc, #252]	; (8005bb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6819      	ldr	r1, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	011b      	lsls	r3, r3, #4
 8005ace:	430b      	orrs	r3, r1
 8005ad0:	4939      	ldr	r1, [pc, #228]	; (8005bb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ad6:	7bfb      	ldrb	r3, [r7, #15]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d167      	bne.n	8005bac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005adc:	4b36      	ldr	r3, [pc, #216]	; (8005bb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a35      	ldr	r2, [pc, #212]	; (8005bb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ae6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ae8:	f7fc ff74 	bl	80029d4 <HAL_GetTick>
 8005aec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005aee:	e009      	b.n	8005b04 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005af0:	f7fc ff70 	bl	80029d4 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d902      	bls.n	8005b04 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	73fb      	strb	r3, [r7, #15]
        break;
 8005b02:	e005      	b.n	8005b10 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b04:	4b2c      	ldr	r3, [pc, #176]	; (8005bb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1ef      	bne.n	8005af0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d14a      	bne.n	8005bac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d111      	bne.n	8005b40 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b1c:	4b26      	ldr	r3, [pc, #152]	; (8005bb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	6892      	ldr	r2, [r2, #8]
 8005b2c:	0211      	lsls	r1, r2, #8
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	68d2      	ldr	r2, [r2, #12]
 8005b32:	0912      	lsrs	r2, r2, #4
 8005b34:	0452      	lsls	r2, r2, #17
 8005b36:	430a      	orrs	r2, r1
 8005b38:	491f      	ldr	r1, [pc, #124]	; (8005bb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	614b      	str	r3, [r1, #20]
 8005b3e:	e011      	b.n	8005b64 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b40:	4b1d      	ldr	r3, [pc, #116]	; (8005bb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005b48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6892      	ldr	r2, [r2, #8]
 8005b50:	0211      	lsls	r1, r2, #8
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	6912      	ldr	r2, [r2, #16]
 8005b56:	0852      	lsrs	r2, r2, #1
 8005b58:	3a01      	subs	r2, #1
 8005b5a:	0652      	lsls	r2, r2, #25
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	4916      	ldr	r1, [pc, #88]	; (8005bb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005b64:	4b14      	ldr	r3, [pc, #80]	; (8005bb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a13      	ldr	r2, [pc, #76]	; (8005bb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b70:	f7fc ff30 	bl	80029d4 <HAL_GetTick>
 8005b74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b76:	e009      	b.n	8005b8c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b78:	f7fc ff2c 	bl	80029d4 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d902      	bls.n	8005b8c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	73fb      	strb	r3, [r7, #15]
          break;
 8005b8a:	e005      	b.n	8005b98 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b8c:	4b0a      	ldr	r3, [pc, #40]	; (8005bb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0ef      	beq.n	8005b78 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d106      	bne.n	8005bac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005b9e:	4b06      	ldr	r3, [pc, #24]	; (8005bb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ba0:	695a      	ldr	r2, [r3, #20]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	4904      	ldr	r1, [pc, #16]	; (8005bb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	40021000 	.word	0x40021000

08005bbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e049      	b.n	8005c62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d106      	bne.n	8005be8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7fc fc96 	bl	8002514 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	f000 fab4 	bl	8006168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
	...

08005c6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d001      	beq.n	8005c84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e04f      	b.n	8005d24 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f042 0201 	orr.w	r2, r2, #1
 8005c9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a23      	ldr	r2, [pc, #140]	; (8005d30 <HAL_TIM_Base_Start_IT+0xc4>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d01d      	beq.n	8005ce2 <HAL_TIM_Base_Start_IT+0x76>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cae:	d018      	beq.n	8005ce2 <HAL_TIM_Base_Start_IT+0x76>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a1f      	ldr	r2, [pc, #124]	; (8005d34 <HAL_TIM_Base_Start_IT+0xc8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d013      	beq.n	8005ce2 <HAL_TIM_Base_Start_IT+0x76>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a1e      	ldr	r2, [pc, #120]	; (8005d38 <HAL_TIM_Base_Start_IT+0xcc>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d00e      	beq.n	8005ce2 <HAL_TIM_Base_Start_IT+0x76>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a1c      	ldr	r2, [pc, #112]	; (8005d3c <HAL_TIM_Base_Start_IT+0xd0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d009      	beq.n	8005ce2 <HAL_TIM_Base_Start_IT+0x76>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a1b      	ldr	r2, [pc, #108]	; (8005d40 <HAL_TIM_Base_Start_IT+0xd4>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d004      	beq.n	8005ce2 <HAL_TIM_Base_Start_IT+0x76>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a19      	ldr	r2, [pc, #100]	; (8005d44 <HAL_TIM_Base_Start_IT+0xd8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d115      	bne.n	8005d0e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	4b17      	ldr	r3, [pc, #92]	; (8005d48 <HAL_TIM_Base_Start_IT+0xdc>)
 8005cea:	4013      	ands	r3, r2
 8005cec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2b06      	cmp	r3, #6
 8005cf2:	d015      	beq.n	8005d20 <HAL_TIM_Base_Start_IT+0xb4>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cfa:	d011      	beq.n	8005d20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0201 	orr.w	r2, r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d0c:	e008      	b.n	8005d20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f042 0201 	orr.w	r2, r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	e000      	b.n	8005d22 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	40012c00 	.word	0x40012c00
 8005d34:	40000400 	.word	0x40000400
 8005d38:	40000800 	.word	0x40000800
 8005d3c:	40000c00 	.word	0x40000c00
 8005d40:	40013400 	.word	0x40013400
 8005d44:	40014000 	.word	0x40014000
 8005d48:	00010007 	.word	0x00010007

08005d4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d122      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d11b      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f06f 0202 	mvn.w	r2, #2
 8005d78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f9cb 	bl	800612a <HAL_TIM_IC_CaptureCallback>
 8005d94:	e005      	b.n	8005da2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f9bd 	bl	8006116 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f9ce 	bl	800613e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f003 0304 	and.w	r3, r3, #4
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d122      	bne.n	8005dfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d11b      	bne.n	8005dfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f06f 0204 	mvn.w	r2, #4
 8005dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f9a1 	bl	800612a <HAL_TIM_IC_CaptureCallback>
 8005de8:	e005      	b.n	8005df6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f993 	bl	8006116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f9a4 	bl	800613e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	2b08      	cmp	r3, #8
 8005e08:	d122      	bne.n	8005e50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d11b      	bne.n	8005e50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f06f 0208 	mvn.w	r2, #8
 8005e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2204      	movs	r2, #4
 8005e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	f003 0303 	and.w	r3, r3, #3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f977 	bl	800612a <HAL_TIM_IC_CaptureCallback>
 8005e3c:	e005      	b.n	8005e4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f969 	bl	8006116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f97a 	bl	800613e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f003 0310 	and.w	r3, r3, #16
 8005e5a:	2b10      	cmp	r3, #16
 8005e5c:	d122      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f003 0310 	and.w	r3, r3, #16
 8005e68:	2b10      	cmp	r3, #16
 8005e6a:	d11b      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f06f 0210 	mvn.w	r2, #16
 8005e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2208      	movs	r2, #8
 8005e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f94d 	bl	800612a <HAL_TIM_IC_CaptureCallback>
 8005e90:	e005      	b.n	8005e9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f93f 	bl	8006116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f950 	bl	800613e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d10e      	bne.n	8005ed0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d107      	bne.n	8005ed0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f06f 0201 	mvn.w	r2, #1
 8005ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7fb fe02 	bl	8001ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eda:	2b80      	cmp	r3, #128	; 0x80
 8005edc:	d10e      	bne.n	8005efc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee8:	2b80      	cmp	r3, #128	; 0x80
 8005eea:	d107      	bne.n	8005efc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fafc 	bl	80064f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f0a:	d10e      	bne.n	8005f2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f16:	2b80      	cmp	r3, #128	; 0x80
 8005f18:	d107      	bne.n	8005f2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 faef 	bl	8006508 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f34:	2b40      	cmp	r3, #64	; 0x40
 8005f36:	d10e      	bne.n	8005f56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f42:	2b40      	cmp	r3, #64	; 0x40
 8005f44:	d107      	bne.n	8005f56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f8fe 	bl	8006152 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	f003 0320 	and.w	r3, r3, #32
 8005f60:	2b20      	cmp	r3, #32
 8005f62:	d10e      	bne.n	8005f82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f003 0320 	and.w	r3, r3, #32
 8005f6e:	2b20      	cmp	r3, #32
 8005f70:	d107      	bne.n	8005f82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f06f 0220 	mvn.w	r2, #32
 8005f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 faaf 	bl	80064e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f82:	bf00      	nop
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d101      	bne.n	8005fa2 <HAL_TIM_ConfigClockSource+0x18>
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	e0b5      	b.n	800610e <HAL_TIM_ConfigClockSource+0x184>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2202      	movs	r2, #2
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fc0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fc4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fcc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fde:	d03e      	beq.n	800605e <HAL_TIM_ConfigClockSource+0xd4>
 8005fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe4:	f200 8087 	bhi.w	80060f6 <HAL_TIM_ConfigClockSource+0x16c>
 8005fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fec:	f000 8085 	beq.w	80060fa <HAL_TIM_ConfigClockSource+0x170>
 8005ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff4:	d87f      	bhi.n	80060f6 <HAL_TIM_ConfigClockSource+0x16c>
 8005ff6:	2b70      	cmp	r3, #112	; 0x70
 8005ff8:	d01a      	beq.n	8006030 <HAL_TIM_ConfigClockSource+0xa6>
 8005ffa:	2b70      	cmp	r3, #112	; 0x70
 8005ffc:	d87b      	bhi.n	80060f6 <HAL_TIM_ConfigClockSource+0x16c>
 8005ffe:	2b60      	cmp	r3, #96	; 0x60
 8006000:	d050      	beq.n	80060a4 <HAL_TIM_ConfigClockSource+0x11a>
 8006002:	2b60      	cmp	r3, #96	; 0x60
 8006004:	d877      	bhi.n	80060f6 <HAL_TIM_ConfigClockSource+0x16c>
 8006006:	2b50      	cmp	r3, #80	; 0x50
 8006008:	d03c      	beq.n	8006084 <HAL_TIM_ConfigClockSource+0xfa>
 800600a:	2b50      	cmp	r3, #80	; 0x50
 800600c:	d873      	bhi.n	80060f6 <HAL_TIM_ConfigClockSource+0x16c>
 800600e:	2b40      	cmp	r3, #64	; 0x40
 8006010:	d058      	beq.n	80060c4 <HAL_TIM_ConfigClockSource+0x13a>
 8006012:	2b40      	cmp	r3, #64	; 0x40
 8006014:	d86f      	bhi.n	80060f6 <HAL_TIM_ConfigClockSource+0x16c>
 8006016:	2b30      	cmp	r3, #48	; 0x30
 8006018:	d064      	beq.n	80060e4 <HAL_TIM_ConfigClockSource+0x15a>
 800601a:	2b30      	cmp	r3, #48	; 0x30
 800601c:	d86b      	bhi.n	80060f6 <HAL_TIM_ConfigClockSource+0x16c>
 800601e:	2b20      	cmp	r3, #32
 8006020:	d060      	beq.n	80060e4 <HAL_TIM_ConfigClockSource+0x15a>
 8006022:	2b20      	cmp	r3, #32
 8006024:	d867      	bhi.n	80060f6 <HAL_TIM_ConfigClockSource+0x16c>
 8006026:	2b00      	cmp	r3, #0
 8006028:	d05c      	beq.n	80060e4 <HAL_TIM_ConfigClockSource+0x15a>
 800602a:	2b10      	cmp	r3, #16
 800602c:	d05a      	beq.n	80060e4 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800602e:	e062      	b.n	80060f6 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6818      	ldr	r0, [r3, #0]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	6899      	ldr	r1, [r3, #8]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f000 f9a6 	bl	8006390 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006052:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	609a      	str	r2, [r3, #8]
      break;
 800605c:	e04e      	b.n	80060fc <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6818      	ldr	r0, [r3, #0]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	6899      	ldr	r1, [r3, #8]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f000 f98f 	bl	8006390 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006080:	609a      	str	r2, [r3, #8]
      break;
 8006082:	e03b      	b.n	80060fc <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6818      	ldr	r0, [r3, #0]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	6859      	ldr	r1, [r3, #4]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	461a      	mov	r2, r3
 8006092:	f000 f903 	bl	800629c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2150      	movs	r1, #80	; 0x50
 800609c:	4618      	mov	r0, r3
 800609e:	f000 f95c 	bl	800635a <TIM_ITRx_SetConfig>
      break;
 80060a2:	e02b      	b.n	80060fc <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6818      	ldr	r0, [r3, #0]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	6859      	ldr	r1, [r3, #4]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	461a      	mov	r2, r3
 80060b2:	f000 f922 	bl	80062fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2160      	movs	r1, #96	; 0x60
 80060bc:	4618      	mov	r0, r3
 80060be:	f000 f94c 	bl	800635a <TIM_ITRx_SetConfig>
      break;
 80060c2:	e01b      	b.n	80060fc <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6818      	ldr	r0, [r3, #0]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	6859      	ldr	r1, [r3, #4]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	461a      	mov	r2, r3
 80060d2:	f000 f8e3 	bl	800629c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2140      	movs	r1, #64	; 0x40
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 f93c 	bl	800635a <TIM_ITRx_SetConfig>
      break;
 80060e2:	e00b      	b.n	80060fc <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4619      	mov	r1, r3
 80060ee:	4610      	mov	r0, r2
 80060f0:	f000 f933 	bl	800635a <TIM_ITRx_SetConfig>
        break;
 80060f4:	e002      	b.n	80060fc <HAL_TIM_ConfigClockSource+0x172>
      break;
 80060f6:	bf00      	nop
 80060f8:	e000      	b.n	80060fc <HAL_TIM_ConfigClockSource+0x172>
      break;
 80060fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006116:	b480      	push	{r7}
 8006118:	b083      	sub	sp, #12
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006132:	bf00      	nop
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800613e:	b480      	push	{r7}
 8006140:	b083      	sub	sp, #12
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006146:	bf00      	nop
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006152:	b480      	push	{r7}
 8006154:	b083      	sub	sp, #12
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800615a:	bf00      	nop
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
	...

08006168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a40      	ldr	r2, [pc, #256]	; (800627c <TIM_Base_SetConfig+0x114>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d013      	beq.n	80061a8 <TIM_Base_SetConfig+0x40>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006186:	d00f      	beq.n	80061a8 <TIM_Base_SetConfig+0x40>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a3d      	ldr	r2, [pc, #244]	; (8006280 <TIM_Base_SetConfig+0x118>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d00b      	beq.n	80061a8 <TIM_Base_SetConfig+0x40>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a3c      	ldr	r2, [pc, #240]	; (8006284 <TIM_Base_SetConfig+0x11c>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d007      	beq.n	80061a8 <TIM_Base_SetConfig+0x40>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a3b      	ldr	r2, [pc, #236]	; (8006288 <TIM_Base_SetConfig+0x120>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d003      	beq.n	80061a8 <TIM_Base_SetConfig+0x40>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a3a      	ldr	r2, [pc, #232]	; (800628c <TIM_Base_SetConfig+0x124>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d108      	bne.n	80061ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a2f      	ldr	r2, [pc, #188]	; (800627c <TIM_Base_SetConfig+0x114>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d01f      	beq.n	8006202 <TIM_Base_SetConfig+0x9a>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c8:	d01b      	beq.n	8006202 <TIM_Base_SetConfig+0x9a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a2c      	ldr	r2, [pc, #176]	; (8006280 <TIM_Base_SetConfig+0x118>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d017      	beq.n	8006202 <TIM_Base_SetConfig+0x9a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a2b      	ldr	r2, [pc, #172]	; (8006284 <TIM_Base_SetConfig+0x11c>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d013      	beq.n	8006202 <TIM_Base_SetConfig+0x9a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a2a      	ldr	r2, [pc, #168]	; (8006288 <TIM_Base_SetConfig+0x120>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00f      	beq.n	8006202 <TIM_Base_SetConfig+0x9a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a29      	ldr	r2, [pc, #164]	; (800628c <TIM_Base_SetConfig+0x124>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d00b      	beq.n	8006202 <TIM_Base_SetConfig+0x9a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a28      	ldr	r2, [pc, #160]	; (8006290 <TIM_Base_SetConfig+0x128>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d007      	beq.n	8006202 <TIM_Base_SetConfig+0x9a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a27      	ldr	r2, [pc, #156]	; (8006294 <TIM_Base_SetConfig+0x12c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d003      	beq.n	8006202 <TIM_Base_SetConfig+0x9a>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a26      	ldr	r2, [pc, #152]	; (8006298 <TIM_Base_SetConfig+0x130>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d108      	bne.n	8006214 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4313      	orrs	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a10      	ldr	r2, [pc, #64]	; (800627c <TIM_Base_SetConfig+0x114>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d00f      	beq.n	8006260 <TIM_Base_SetConfig+0xf8>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a12      	ldr	r2, [pc, #72]	; (800628c <TIM_Base_SetConfig+0x124>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d00b      	beq.n	8006260 <TIM_Base_SetConfig+0xf8>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a11      	ldr	r2, [pc, #68]	; (8006290 <TIM_Base_SetConfig+0x128>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d007      	beq.n	8006260 <TIM_Base_SetConfig+0xf8>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a10      	ldr	r2, [pc, #64]	; (8006294 <TIM_Base_SetConfig+0x12c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d003      	beq.n	8006260 <TIM_Base_SetConfig+0xf8>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a0f      	ldr	r2, [pc, #60]	; (8006298 <TIM_Base_SetConfig+0x130>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d103      	bne.n	8006268 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	691a      	ldr	r2, [r3, #16]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	615a      	str	r2, [r3, #20]
}
 800626e:	bf00      	nop
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	40012c00 	.word	0x40012c00
 8006280:	40000400 	.word	0x40000400
 8006284:	40000800 	.word	0x40000800
 8006288:	40000c00 	.word	0x40000c00
 800628c:	40013400 	.word	0x40013400
 8006290:	40014000 	.word	0x40014000
 8006294:	40014400 	.word	0x40014400
 8006298:	40014800 	.word	0x40014800

0800629c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800629c:	b480      	push	{r7}
 800629e:	b087      	sub	sp, #28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	f023 0201 	bic.w	r2, r3, #1
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	011b      	lsls	r3, r3, #4
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f023 030a 	bic.w	r3, r3, #10
 80062d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	4313      	orrs	r3, r2
 80062e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	621a      	str	r2, [r3, #32]
}
 80062ee:	bf00      	nop
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b087      	sub	sp, #28
 80062fe:	af00      	add	r7, sp, #0
 8006300:	60f8      	str	r0, [r7, #12]
 8006302:	60b9      	str	r1, [r7, #8]
 8006304:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	f023 0210 	bic.w	r2, r3, #16
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6a1b      	ldr	r3, [r3, #32]
 800631c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006324:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	031b      	lsls	r3, r3, #12
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	4313      	orrs	r3, r2
 800632e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006336:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	011b      	lsls	r3, r3, #4
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	4313      	orrs	r3, r2
 8006340:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	621a      	str	r2, [r3, #32]
}
 800634e:	bf00      	nop
 8006350:	371c      	adds	r7, #28
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800635a:	b480      	push	{r7}
 800635c:	b085      	sub	sp, #20
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006370:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4313      	orrs	r3, r2
 8006378:	f043 0307 	orr.w	r3, r3, #7
 800637c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	609a      	str	r2, [r3, #8]
}
 8006384:	bf00      	nop
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	021a      	lsls	r2, r3, #8
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	431a      	orrs	r2, r3
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	609a      	str	r2, [r3, #8]
}
 80063c4:	bf00      	nop
 80063c6:	371c      	adds	r7, #28
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d101      	bne.n	80063e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063e4:	2302      	movs	r3, #2
 80063e6:	e068      	b.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a2e      	ldr	r2, [pc, #184]	; (80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d004      	beq.n	800641c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a2d      	ldr	r2, [pc, #180]	; (80064cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d108      	bne.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006422:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	4313      	orrs	r3, r2
 800642c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006434:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	4313      	orrs	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a1e      	ldr	r2, [pc, #120]	; (80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d01d      	beq.n	800648e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800645a:	d018      	beq.n	800648e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a1b      	ldr	r2, [pc, #108]	; (80064d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d013      	beq.n	800648e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a1a      	ldr	r2, [pc, #104]	; (80064d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d00e      	beq.n	800648e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a18      	ldr	r2, [pc, #96]	; (80064d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d009      	beq.n	800648e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a13      	ldr	r2, [pc, #76]	; (80064cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d004      	beq.n	800648e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a14      	ldr	r2, [pc, #80]	; (80064dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d10c      	bne.n	80064a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006494:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	4313      	orrs	r3, r2
 800649e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3714      	adds	r7, #20
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	40012c00 	.word	0x40012c00
 80064cc:	40013400 	.word	0x40013400
 80064d0:	40000400 	.word	0x40000400
 80064d4:	40000800 	.word	0x40000800
 80064d8:	40000c00 	.word	0x40000c00
 80064dc:	40014000 	.word	0x40014000

080064e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e040      	b.n	80065b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006532:	2b00      	cmp	r3, #0
 8006534:	d106      	bne.n	8006544 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7fc f806 	bl	8002550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2224      	movs	r2, #36	; 0x24
 8006548:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f022 0201 	bic.w	r2, r2, #1
 8006558:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f8c0 	bl	80066e0 <UART_SetConfig>
 8006560:	4603      	mov	r3, r0
 8006562:	2b01      	cmp	r3, #1
 8006564:	d101      	bne.n	800656a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e022      	b.n	80065b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fb3e 	bl	8006bf4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006586:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689a      	ldr	r2, [r3, #8]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006596:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f042 0201 	orr.w	r2, r2, #1
 80065a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fbc5 	bl	8006d38 <UART_CheckIdleState>
 80065ae:	4603      	mov	r3, r0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b08a      	sub	sp, #40	; 0x28
 80065bc:	af02      	add	r7, sp, #8
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	603b      	str	r3, [r7, #0]
 80065c4:	4613      	mov	r3, r2
 80065c6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065cc:	2b20      	cmp	r3, #32
 80065ce:	f040 8082 	bne.w	80066d6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <HAL_UART_Transmit+0x26>
 80065d8:	88fb      	ldrh	r3, [r7, #6]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e07a      	b.n	80066d8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d101      	bne.n	80065f0 <HAL_UART_Transmit+0x38>
 80065ec:	2302      	movs	r3, #2
 80065ee:	e073      	b.n	80066d8 <HAL_UART_Transmit+0x120>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2221      	movs	r2, #33	; 0x21
 8006604:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006606:	f7fc f9e5 	bl	80029d4 <HAL_GetTick>
 800660a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	88fa      	ldrh	r2, [r7, #6]
 8006610:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	88fa      	ldrh	r2, [r7, #6]
 8006618:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006624:	d108      	bne.n	8006638 <HAL_UART_Transmit+0x80>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d104      	bne.n	8006638 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800662e:	2300      	movs	r3, #0
 8006630:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	61bb      	str	r3, [r7, #24]
 8006636:	e003      	b.n	8006640 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800663c:	2300      	movs	r3, #0
 800663e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006648:	e02d      	b.n	80066a6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2200      	movs	r2, #0
 8006652:	2180      	movs	r1, #128	; 0x80
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 fbb8 	bl	8006dca <UART_WaitOnFlagUntilTimeout>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e039      	b.n	80066d8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10b      	bne.n	8006682 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	881a      	ldrh	r2, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006676:	b292      	uxth	r2, r2
 8006678:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	3302      	adds	r3, #2
 800667e:	61bb      	str	r3, [r7, #24]
 8006680:	e008      	b.n	8006694 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	781a      	ldrb	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	b292      	uxth	r2, r2
 800668c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	3301      	adds	r3, #1
 8006692:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800669a:	b29b      	uxth	r3, r3
 800669c:	3b01      	subs	r3, #1
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1cb      	bne.n	800664a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	2200      	movs	r2, #0
 80066ba:	2140      	movs	r1, #64	; 0x40
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f000 fb84 	bl	8006dca <UART_WaitOnFlagUntilTimeout>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e005      	b.n	80066d8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2220      	movs	r2, #32
 80066d0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	e000      	b.n	80066d8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80066d6:	2302      	movs	r3, #2
  }
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3720      	adds	r7, #32
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066e0:	b5b0      	push	{r4, r5, r7, lr}
 80066e2:	b088      	sub	sp, #32
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066e8:	2300      	movs	r3, #0
 80066ea:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689a      	ldr	r2, [r3, #8]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	431a      	orrs	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	431a      	orrs	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	4313      	orrs	r3, r2
 8006702:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	4bad      	ldr	r3, [pc, #692]	; (80069c0 <UART_SetConfig+0x2e0>)
 800670c:	4013      	ands	r3, r2
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	6812      	ldr	r2, [r2, #0]
 8006712:	69f9      	ldr	r1, [r7, #28]
 8006714:	430b      	orrs	r3, r1
 8006716:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68da      	ldr	r2, [r3, #12]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4aa2      	ldr	r2, [pc, #648]	; (80069c4 <UART_SetConfig+0x2e4>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d004      	beq.n	8006748 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	69fa      	ldr	r2, [r7, #28]
 8006744:	4313      	orrs	r3, r2
 8006746:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	69fa      	ldr	r2, [r7, #28]
 8006758:	430a      	orrs	r2, r1
 800675a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a99      	ldr	r2, [pc, #612]	; (80069c8 <UART_SetConfig+0x2e8>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d121      	bne.n	80067aa <UART_SetConfig+0xca>
 8006766:	4b99      	ldr	r3, [pc, #612]	; (80069cc <UART_SetConfig+0x2ec>)
 8006768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800676c:	f003 0303 	and.w	r3, r3, #3
 8006770:	2b03      	cmp	r3, #3
 8006772:	d817      	bhi.n	80067a4 <UART_SetConfig+0xc4>
 8006774:	a201      	add	r2, pc, #4	; (adr r2, 800677c <UART_SetConfig+0x9c>)
 8006776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677a:	bf00      	nop
 800677c:	0800678d 	.word	0x0800678d
 8006780:	08006799 	.word	0x08006799
 8006784:	08006793 	.word	0x08006793
 8006788:	0800679f 	.word	0x0800679f
 800678c:	2301      	movs	r3, #1
 800678e:	76fb      	strb	r3, [r7, #27]
 8006790:	e0e7      	b.n	8006962 <UART_SetConfig+0x282>
 8006792:	2302      	movs	r3, #2
 8006794:	76fb      	strb	r3, [r7, #27]
 8006796:	e0e4      	b.n	8006962 <UART_SetConfig+0x282>
 8006798:	2304      	movs	r3, #4
 800679a:	76fb      	strb	r3, [r7, #27]
 800679c:	e0e1      	b.n	8006962 <UART_SetConfig+0x282>
 800679e:	2308      	movs	r3, #8
 80067a0:	76fb      	strb	r3, [r7, #27]
 80067a2:	e0de      	b.n	8006962 <UART_SetConfig+0x282>
 80067a4:	2310      	movs	r3, #16
 80067a6:	76fb      	strb	r3, [r7, #27]
 80067a8:	e0db      	b.n	8006962 <UART_SetConfig+0x282>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a88      	ldr	r2, [pc, #544]	; (80069d0 <UART_SetConfig+0x2f0>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d132      	bne.n	800681a <UART_SetConfig+0x13a>
 80067b4:	4b85      	ldr	r3, [pc, #532]	; (80069cc <UART_SetConfig+0x2ec>)
 80067b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ba:	f003 030c 	and.w	r3, r3, #12
 80067be:	2b0c      	cmp	r3, #12
 80067c0:	d828      	bhi.n	8006814 <UART_SetConfig+0x134>
 80067c2:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <UART_SetConfig+0xe8>)
 80067c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c8:	080067fd 	.word	0x080067fd
 80067cc:	08006815 	.word	0x08006815
 80067d0:	08006815 	.word	0x08006815
 80067d4:	08006815 	.word	0x08006815
 80067d8:	08006809 	.word	0x08006809
 80067dc:	08006815 	.word	0x08006815
 80067e0:	08006815 	.word	0x08006815
 80067e4:	08006815 	.word	0x08006815
 80067e8:	08006803 	.word	0x08006803
 80067ec:	08006815 	.word	0x08006815
 80067f0:	08006815 	.word	0x08006815
 80067f4:	08006815 	.word	0x08006815
 80067f8:	0800680f 	.word	0x0800680f
 80067fc:	2300      	movs	r3, #0
 80067fe:	76fb      	strb	r3, [r7, #27]
 8006800:	e0af      	b.n	8006962 <UART_SetConfig+0x282>
 8006802:	2302      	movs	r3, #2
 8006804:	76fb      	strb	r3, [r7, #27]
 8006806:	e0ac      	b.n	8006962 <UART_SetConfig+0x282>
 8006808:	2304      	movs	r3, #4
 800680a:	76fb      	strb	r3, [r7, #27]
 800680c:	e0a9      	b.n	8006962 <UART_SetConfig+0x282>
 800680e:	2308      	movs	r3, #8
 8006810:	76fb      	strb	r3, [r7, #27]
 8006812:	e0a6      	b.n	8006962 <UART_SetConfig+0x282>
 8006814:	2310      	movs	r3, #16
 8006816:	76fb      	strb	r3, [r7, #27]
 8006818:	e0a3      	b.n	8006962 <UART_SetConfig+0x282>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a6d      	ldr	r2, [pc, #436]	; (80069d4 <UART_SetConfig+0x2f4>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d120      	bne.n	8006866 <UART_SetConfig+0x186>
 8006824:	4b69      	ldr	r3, [pc, #420]	; (80069cc <UART_SetConfig+0x2ec>)
 8006826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800682a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800682e:	2b30      	cmp	r3, #48	; 0x30
 8006830:	d013      	beq.n	800685a <UART_SetConfig+0x17a>
 8006832:	2b30      	cmp	r3, #48	; 0x30
 8006834:	d814      	bhi.n	8006860 <UART_SetConfig+0x180>
 8006836:	2b20      	cmp	r3, #32
 8006838:	d009      	beq.n	800684e <UART_SetConfig+0x16e>
 800683a:	2b20      	cmp	r3, #32
 800683c:	d810      	bhi.n	8006860 <UART_SetConfig+0x180>
 800683e:	2b00      	cmp	r3, #0
 8006840:	d002      	beq.n	8006848 <UART_SetConfig+0x168>
 8006842:	2b10      	cmp	r3, #16
 8006844:	d006      	beq.n	8006854 <UART_SetConfig+0x174>
 8006846:	e00b      	b.n	8006860 <UART_SetConfig+0x180>
 8006848:	2300      	movs	r3, #0
 800684a:	76fb      	strb	r3, [r7, #27]
 800684c:	e089      	b.n	8006962 <UART_SetConfig+0x282>
 800684e:	2302      	movs	r3, #2
 8006850:	76fb      	strb	r3, [r7, #27]
 8006852:	e086      	b.n	8006962 <UART_SetConfig+0x282>
 8006854:	2304      	movs	r3, #4
 8006856:	76fb      	strb	r3, [r7, #27]
 8006858:	e083      	b.n	8006962 <UART_SetConfig+0x282>
 800685a:	2308      	movs	r3, #8
 800685c:	76fb      	strb	r3, [r7, #27]
 800685e:	e080      	b.n	8006962 <UART_SetConfig+0x282>
 8006860:	2310      	movs	r3, #16
 8006862:	76fb      	strb	r3, [r7, #27]
 8006864:	e07d      	b.n	8006962 <UART_SetConfig+0x282>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a5b      	ldr	r2, [pc, #364]	; (80069d8 <UART_SetConfig+0x2f8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d120      	bne.n	80068b2 <UART_SetConfig+0x1d2>
 8006870:	4b56      	ldr	r3, [pc, #344]	; (80069cc <UART_SetConfig+0x2ec>)
 8006872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006876:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800687a:	2bc0      	cmp	r3, #192	; 0xc0
 800687c:	d013      	beq.n	80068a6 <UART_SetConfig+0x1c6>
 800687e:	2bc0      	cmp	r3, #192	; 0xc0
 8006880:	d814      	bhi.n	80068ac <UART_SetConfig+0x1cc>
 8006882:	2b80      	cmp	r3, #128	; 0x80
 8006884:	d009      	beq.n	800689a <UART_SetConfig+0x1ba>
 8006886:	2b80      	cmp	r3, #128	; 0x80
 8006888:	d810      	bhi.n	80068ac <UART_SetConfig+0x1cc>
 800688a:	2b00      	cmp	r3, #0
 800688c:	d002      	beq.n	8006894 <UART_SetConfig+0x1b4>
 800688e:	2b40      	cmp	r3, #64	; 0x40
 8006890:	d006      	beq.n	80068a0 <UART_SetConfig+0x1c0>
 8006892:	e00b      	b.n	80068ac <UART_SetConfig+0x1cc>
 8006894:	2300      	movs	r3, #0
 8006896:	76fb      	strb	r3, [r7, #27]
 8006898:	e063      	b.n	8006962 <UART_SetConfig+0x282>
 800689a:	2302      	movs	r3, #2
 800689c:	76fb      	strb	r3, [r7, #27]
 800689e:	e060      	b.n	8006962 <UART_SetConfig+0x282>
 80068a0:	2304      	movs	r3, #4
 80068a2:	76fb      	strb	r3, [r7, #27]
 80068a4:	e05d      	b.n	8006962 <UART_SetConfig+0x282>
 80068a6:	2308      	movs	r3, #8
 80068a8:	76fb      	strb	r3, [r7, #27]
 80068aa:	e05a      	b.n	8006962 <UART_SetConfig+0x282>
 80068ac:	2310      	movs	r3, #16
 80068ae:	76fb      	strb	r3, [r7, #27]
 80068b0:	e057      	b.n	8006962 <UART_SetConfig+0x282>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a49      	ldr	r2, [pc, #292]	; (80069dc <UART_SetConfig+0x2fc>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d125      	bne.n	8006908 <UART_SetConfig+0x228>
 80068bc:	4b43      	ldr	r3, [pc, #268]	; (80069cc <UART_SetConfig+0x2ec>)
 80068be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068ca:	d017      	beq.n	80068fc <UART_SetConfig+0x21c>
 80068cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068d0:	d817      	bhi.n	8006902 <UART_SetConfig+0x222>
 80068d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068d6:	d00b      	beq.n	80068f0 <UART_SetConfig+0x210>
 80068d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068dc:	d811      	bhi.n	8006902 <UART_SetConfig+0x222>
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <UART_SetConfig+0x20a>
 80068e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068e6:	d006      	beq.n	80068f6 <UART_SetConfig+0x216>
 80068e8:	e00b      	b.n	8006902 <UART_SetConfig+0x222>
 80068ea:	2300      	movs	r3, #0
 80068ec:	76fb      	strb	r3, [r7, #27]
 80068ee:	e038      	b.n	8006962 <UART_SetConfig+0x282>
 80068f0:	2302      	movs	r3, #2
 80068f2:	76fb      	strb	r3, [r7, #27]
 80068f4:	e035      	b.n	8006962 <UART_SetConfig+0x282>
 80068f6:	2304      	movs	r3, #4
 80068f8:	76fb      	strb	r3, [r7, #27]
 80068fa:	e032      	b.n	8006962 <UART_SetConfig+0x282>
 80068fc:	2308      	movs	r3, #8
 80068fe:	76fb      	strb	r3, [r7, #27]
 8006900:	e02f      	b.n	8006962 <UART_SetConfig+0x282>
 8006902:	2310      	movs	r3, #16
 8006904:	76fb      	strb	r3, [r7, #27]
 8006906:	e02c      	b.n	8006962 <UART_SetConfig+0x282>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a2d      	ldr	r2, [pc, #180]	; (80069c4 <UART_SetConfig+0x2e4>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d125      	bne.n	800695e <UART_SetConfig+0x27e>
 8006912:	4b2e      	ldr	r3, [pc, #184]	; (80069cc <UART_SetConfig+0x2ec>)
 8006914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006918:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800691c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006920:	d017      	beq.n	8006952 <UART_SetConfig+0x272>
 8006922:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006926:	d817      	bhi.n	8006958 <UART_SetConfig+0x278>
 8006928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800692c:	d00b      	beq.n	8006946 <UART_SetConfig+0x266>
 800692e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006932:	d811      	bhi.n	8006958 <UART_SetConfig+0x278>
 8006934:	2b00      	cmp	r3, #0
 8006936:	d003      	beq.n	8006940 <UART_SetConfig+0x260>
 8006938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800693c:	d006      	beq.n	800694c <UART_SetConfig+0x26c>
 800693e:	e00b      	b.n	8006958 <UART_SetConfig+0x278>
 8006940:	2300      	movs	r3, #0
 8006942:	76fb      	strb	r3, [r7, #27]
 8006944:	e00d      	b.n	8006962 <UART_SetConfig+0x282>
 8006946:	2302      	movs	r3, #2
 8006948:	76fb      	strb	r3, [r7, #27]
 800694a:	e00a      	b.n	8006962 <UART_SetConfig+0x282>
 800694c:	2304      	movs	r3, #4
 800694e:	76fb      	strb	r3, [r7, #27]
 8006950:	e007      	b.n	8006962 <UART_SetConfig+0x282>
 8006952:	2308      	movs	r3, #8
 8006954:	76fb      	strb	r3, [r7, #27]
 8006956:	e004      	b.n	8006962 <UART_SetConfig+0x282>
 8006958:	2310      	movs	r3, #16
 800695a:	76fb      	strb	r3, [r7, #27]
 800695c:	e001      	b.n	8006962 <UART_SetConfig+0x282>
 800695e:	2310      	movs	r3, #16
 8006960:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a17      	ldr	r2, [pc, #92]	; (80069c4 <UART_SetConfig+0x2e4>)
 8006968:	4293      	cmp	r3, r2
 800696a:	f040 8087 	bne.w	8006a7c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800696e:	7efb      	ldrb	r3, [r7, #27]
 8006970:	2b08      	cmp	r3, #8
 8006972:	d837      	bhi.n	80069e4 <UART_SetConfig+0x304>
 8006974:	a201      	add	r2, pc, #4	; (adr r2, 800697c <UART_SetConfig+0x29c>)
 8006976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697a:	bf00      	nop
 800697c:	080069a1 	.word	0x080069a1
 8006980:	080069e5 	.word	0x080069e5
 8006984:	080069a9 	.word	0x080069a9
 8006988:	080069e5 	.word	0x080069e5
 800698c:	080069af 	.word	0x080069af
 8006990:	080069e5 	.word	0x080069e5
 8006994:	080069e5 	.word	0x080069e5
 8006998:	080069e5 	.word	0x080069e5
 800699c:	080069b7 	.word	0x080069b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069a0:	f7fe fb92 	bl	80050c8 <HAL_RCC_GetPCLK1Freq>
 80069a4:	6178      	str	r0, [r7, #20]
        break;
 80069a6:	e022      	b.n	80069ee <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069a8:	4b0d      	ldr	r3, [pc, #52]	; (80069e0 <UART_SetConfig+0x300>)
 80069aa:	617b      	str	r3, [r7, #20]
        break;
 80069ac:	e01f      	b.n	80069ee <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069ae:	f7fe faf3 	bl	8004f98 <HAL_RCC_GetSysClockFreq>
 80069b2:	6178      	str	r0, [r7, #20]
        break;
 80069b4:	e01b      	b.n	80069ee <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ba:	617b      	str	r3, [r7, #20]
        break;
 80069bc:	e017      	b.n	80069ee <UART_SetConfig+0x30e>
 80069be:	bf00      	nop
 80069c0:	efff69f3 	.word	0xefff69f3
 80069c4:	40008000 	.word	0x40008000
 80069c8:	40013800 	.word	0x40013800
 80069cc:	40021000 	.word	0x40021000
 80069d0:	40004400 	.word	0x40004400
 80069d4:	40004800 	.word	0x40004800
 80069d8:	40004c00 	.word	0x40004c00
 80069dc:	40005000 	.word	0x40005000
 80069e0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	76bb      	strb	r3, [r7, #26]
        break;
 80069ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 80f1 	beq.w	8006bd8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	4613      	mov	r3, r2
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	4413      	add	r3, r2
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d305      	bcc.n	8006a12 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d902      	bls.n	8006a18 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	76bb      	strb	r3, [r7, #26]
 8006a16:	e0df      	b.n	8006bd8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f04f 0100 	mov.w	r1, #0
 8006a20:	f04f 0200 	mov.w	r2, #0
 8006a24:	f04f 0300 	mov.w	r3, #0
 8006a28:	020b      	lsls	r3, r1, #8
 8006a2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a2e:	0202      	lsls	r2, r0, #8
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	6849      	ldr	r1, [r1, #4]
 8006a34:	0849      	lsrs	r1, r1, #1
 8006a36:	4608      	mov	r0, r1
 8006a38:	f04f 0100 	mov.w	r1, #0
 8006a3c:	1814      	adds	r4, r2, r0
 8006a3e:	eb43 0501 	adc.w	r5, r3, r1
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	461a      	mov	r2, r3
 8006a48:	f04f 0300 	mov.w	r3, #0
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	4629      	mov	r1, r5
 8006a50:	f7fa f854 	bl	8000afc <__aeabi_uldivmod>
 8006a54:	4602      	mov	r2, r0
 8006a56:	460b      	mov	r3, r1
 8006a58:	4613      	mov	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a62:	d308      	bcc.n	8006a76 <UART_SetConfig+0x396>
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a6a:	d204      	bcs.n	8006a76 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	60da      	str	r2, [r3, #12]
 8006a74:	e0b0      	b.n	8006bd8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	76bb      	strb	r3, [r7, #26]
 8006a7a:	e0ad      	b.n	8006bd8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	69db      	ldr	r3, [r3, #28]
 8006a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a84:	d15c      	bne.n	8006b40 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006a86:	7efb      	ldrb	r3, [r7, #27]
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	d828      	bhi.n	8006ade <UART_SetConfig+0x3fe>
 8006a8c:	a201      	add	r2, pc, #4	; (adr r2, 8006a94 <UART_SetConfig+0x3b4>)
 8006a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a92:	bf00      	nop
 8006a94:	08006ab9 	.word	0x08006ab9
 8006a98:	08006ac1 	.word	0x08006ac1
 8006a9c:	08006ac9 	.word	0x08006ac9
 8006aa0:	08006adf 	.word	0x08006adf
 8006aa4:	08006acf 	.word	0x08006acf
 8006aa8:	08006adf 	.word	0x08006adf
 8006aac:	08006adf 	.word	0x08006adf
 8006ab0:	08006adf 	.word	0x08006adf
 8006ab4:	08006ad7 	.word	0x08006ad7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ab8:	f7fe fb06 	bl	80050c8 <HAL_RCC_GetPCLK1Freq>
 8006abc:	6178      	str	r0, [r7, #20]
        break;
 8006abe:	e013      	b.n	8006ae8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ac0:	f7fe fb18 	bl	80050f4 <HAL_RCC_GetPCLK2Freq>
 8006ac4:	6178      	str	r0, [r7, #20]
        break;
 8006ac6:	e00f      	b.n	8006ae8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ac8:	4b49      	ldr	r3, [pc, #292]	; (8006bf0 <UART_SetConfig+0x510>)
 8006aca:	617b      	str	r3, [r7, #20]
        break;
 8006acc:	e00c      	b.n	8006ae8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ace:	f7fe fa63 	bl	8004f98 <HAL_RCC_GetSysClockFreq>
 8006ad2:	6178      	str	r0, [r7, #20]
        break;
 8006ad4:	e008      	b.n	8006ae8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ada:	617b      	str	r3, [r7, #20]
        break;
 8006adc:	e004      	b.n	8006ae8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	76bb      	strb	r3, [r7, #26]
        break;
 8006ae6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d074      	beq.n	8006bd8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	005a      	lsls	r2, r3, #1
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	085b      	lsrs	r3, r3, #1
 8006af8:	441a      	add	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	2b0f      	cmp	r3, #15
 8006b0a:	d916      	bls.n	8006b3a <UART_SetConfig+0x45a>
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b12:	d212      	bcs.n	8006b3a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	f023 030f 	bic.w	r3, r3, #15
 8006b1c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	085b      	lsrs	r3, r3, #1
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	f003 0307 	and.w	r3, r3, #7
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	89fb      	ldrh	r3, [r7, #14]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	89fa      	ldrh	r2, [r7, #14]
 8006b36:	60da      	str	r2, [r3, #12]
 8006b38:	e04e      	b.n	8006bd8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	76bb      	strb	r3, [r7, #26]
 8006b3e:	e04b      	b.n	8006bd8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b40:	7efb      	ldrb	r3, [r7, #27]
 8006b42:	2b08      	cmp	r3, #8
 8006b44:	d827      	bhi.n	8006b96 <UART_SetConfig+0x4b6>
 8006b46:	a201      	add	r2, pc, #4	; (adr r2, 8006b4c <UART_SetConfig+0x46c>)
 8006b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4c:	08006b71 	.word	0x08006b71
 8006b50:	08006b79 	.word	0x08006b79
 8006b54:	08006b81 	.word	0x08006b81
 8006b58:	08006b97 	.word	0x08006b97
 8006b5c:	08006b87 	.word	0x08006b87
 8006b60:	08006b97 	.word	0x08006b97
 8006b64:	08006b97 	.word	0x08006b97
 8006b68:	08006b97 	.word	0x08006b97
 8006b6c:	08006b8f 	.word	0x08006b8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b70:	f7fe faaa 	bl	80050c8 <HAL_RCC_GetPCLK1Freq>
 8006b74:	6178      	str	r0, [r7, #20]
        break;
 8006b76:	e013      	b.n	8006ba0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b78:	f7fe fabc 	bl	80050f4 <HAL_RCC_GetPCLK2Freq>
 8006b7c:	6178      	str	r0, [r7, #20]
        break;
 8006b7e:	e00f      	b.n	8006ba0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b80:	4b1b      	ldr	r3, [pc, #108]	; (8006bf0 <UART_SetConfig+0x510>)
 8006b82:	617b      	str	r3, [r7, #20]
        break;
 8006b84:	e00c      	b.n	8006ba0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b86:	f7fe fa07 	bl	8004f98 <HAL_RCC_GetSysClockFreq>
 8006b8a:	6178      	str	r0, [r7, #20]
        break;
 8006b8c:	e008      	b.n	8006ba0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b92:	617b      	str	r3, [r7, #20]
        break;
 8006b94:	e004      	b.n	8006ba0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	76bb      	strb	r3, [r7, #26]
        break;
 8006b9e:	bf00      	nop
    }

    if (pclk != 0U)
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d018      	beq.n	8006bd8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	085a      	lsrs	r2, r3, #1
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	441a      	add	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	2b0f      	cmp	r3, #15
 8006bc0:	d908      	bls.n	8006bd4 <UART_SetConfig+0x4f4>
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bc8:	d204      	bcs.n	8006bd4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	60da      	str	r2, [r3, #12]
 8006bd2:	e001      	b.n	8006bd8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006be4:	7ebb      	ldrb	r3, [r7, #26]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3720      	adds	r7, #32
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bdb0      	pop	{r4, r5, r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	00f42400 	.word	0x00f42400

08006bf4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00a      	beq.n	8006c1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00a      	beq.n	8006c40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	f003 0304 	and.w	r3, r3, #4
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00a      	beq.n	8006c62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	f003 0308 	and.w	r3, r3, #8
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00a      	beq.n	8006c84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	430a      	orrs	r2, r1
 8006c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	f003 0310 	and.w	r3, r3, #16
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00a      	beq.n	8006ca6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006caa:	f003 0320 	and.w	r3, r3, #32
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00a      	beq.n	8006cc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d01a      	beq.n	8006d0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cf2:	d10a      	bne.n	8006d0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00a      	beq.n	8006d2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	605a      	str	r2, [r3, #4]
  }
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af02      	add	r7, sp, #8
 8006d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d48:	f7fb fe44 	bl	80029d4 <HAL_GetTick>
 8006d4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0308 	and.w	r3, r3, #8
 8006d58:	2b08      	cmp	r3, #8
 8006d5a:	d10e      	bne.n	8006d7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f82d 	bl	8006dca <UART_WaitOnFlagUntilTimeout>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d001      	beq.n	8006d7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e023      	b.n	8006dc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0304 	and.w	r3, r3, #4
 8006d84:	2b04      	cmp	r3, #4
 8006d86:	d10e      	bne.n	8006da6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f817 	bl	8006dca <UART_WaitOnFlagUntilTimeout>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e00d      	b.n	8006dc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2220      	movs	r2, #32
 8006daa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2220      	movs	r2, #32
 8006db0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	60f8      	str	r0, [r7, #12]
 8006dd2:	60b9      	str	r1, [r7, #8]
 8006dd4:	603b      	str	r3, [r7, #0]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dda:	e05e      	b.n	8006e9a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de2:	d05a      	beq.n	8006e9a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006de4:	f7fb fdf6 	bl	80029d4 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	69ba      	ldr	r2, [r7, #24]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d302      	bcc.n	8006dfa <UART_WaitOnFlagUntilTimeout+0x30>
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d11b      	bne.n	8006e32 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e08:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 0201 	bic.w	r2, r2, #1
 8006e18:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2220      	movs	r2, #32
 8006e24:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e043      	b.n	8006eba <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0304 	and.w	r3, r3, #4
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d02c      	beq.n	8006e9a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e4e:	d124      	bne.n	8006e9a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e58:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e68:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	689a      	ldr	r2, [r3, #8]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 0201 	bic.w	r2, r2, #1
 8006e78:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2220      	movs	r2, #32
 8006e7e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2220      	movs	r2, #32
 8006e84:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2220      	movs	r2, #32
 8006e8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e00f      	b.n	8006eba <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	69da      	ldr	r2, [r3, #28]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	bf0c      	ite	eq
 8006eaa:	2301      	moveq	r3, #1
 8006eac:	2300      	movne	r3, #0
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	79fb      	ldrb	r3, [r7, #7]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d091      	beq.n	8006ddc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
	...

08006ec4 <arm_sin_f32>:
 8006ec4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006f44 <arm_sin_f32+0x80>
 8006ec8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006ecc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006ed8:	d504      	bpl.n	8006ee4 <arm_sin_f32+0x20>
 8006eda:	ee17 3a90 	vmov	r3, s15
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	ee07 3a90 	vmov	s15, r3
 8006ee4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ee8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006f48 <arm_sin_f32+0x84>
 8006eec:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006ef0:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006ef4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006ef8:	ee17 3a90 	vmov	r3, s15
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f02:	d21a      	bcs.n	8006f3a <arm_sin_f32+0x76>
 8006f04:	ee07 3a90 	vmov	s15, r3
 8006f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f0c:	1c59      	adds	r1, r3, #1
 8006f0e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006f12:	4a0e      	ldr	r2, [pc, #56]	; (8006f4c <arm_sin_f32+0x88>)
 8006f14:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006f18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006f1c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006f20:	ed93 7a00 	vldr	s14, [r3]
 8006f24:	edd2 6a00 	vldr	s13, [r2]
 8006f28:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006f2c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8006f30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f34:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006f38:	4770      	bx	lr
 8006f3a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006f3e:	2101      	movs	r1, #1
 8006f40:	2300      	movs	r3, #0
 8006f42:	e7e6      	b.n	8006f12 <arm_sin_f32+0x4e>
 8006f44:	3e22f983 	.word	0x3e22f983
 8006f48:	44000000 	.word	0x44000000
 8006f4c:	0800840c 	.word	0x0800840c

08006f50 <__errno>:
 8006f50:	4b01      	ldr	r3, [pc, #4]	; (8006f58 <__errno+0x8>)
 8006f52:	6818      	ldr	r0, [r3, #0]
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	20000014 	.word	0x20000014

08006f5c <__libc_init_array>:
 8006f5c:	b570      	push	{r4, r5, r6, lr}
 8006f5e:	4d0d      	ldr	r5, [pc, #52]	; (8006f94 <__libc_init_array+0x38>)
 8006f60:	4c0d      	ldr	r4, [pc, #52]	; (8006f98 <__libc_init_array+0x3c>)
 8006f62:	1b64      	subs	r4, r4, r5
 8006f64:	10a4      	asrs	r4, r4, #2
 8006f66:	2600      	movs	r6, #0
 8006f68:	42a6      	cmp	r6, r4
 8006f6a:	d109      	bne.n	8006f80 <__libc_init_array+0x24>
 8006f6c:	4d0b      	ldr	r5, [pc, #44]	; (8006f9c <__libc_init_array+0x40>)
 8006f6e:	4c0c      	ldr	r4, [pc, #48]	; (8006fa0 <__libc_init_array+0x44>)
 8006f70:	f001 fa04 	bl	800837c <_init>
 8006f74:	1b64      	subs	r4, r4, r5
 8006f76:	10a4      	asrs	r4, r4, #2
 8006f78:	2600      	movs	r6, #0
 8006f7a:	42a6      	cmp	r6, r4
 8006f7c:	d105      	bne.n	8006f8a <__libc_init_array+0x2e>
 8006f7e:	bd70      	pop	{r4, r5, r6, pc}
 8006f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f84:	4798      	blx	r3
 8006f86:	3601      	adds	r6, #1
 8006f88:	e7ee      	b.n	8006f68 <__libc_init_array+0xc>
 8006f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f8e:	4798      	blx	r3
 8006f90:	3601      	adds	r6, #1
 8006f92:	e7f2      	b.n	8006f7a <__libc_init_array+0x1e>
 8006f94:	08008d64 	.word	0x08008d64
 8006f98:	08008d64 	.word	0x08008d64
 8006f9c:	08008d64 	.word	0x08008d64
 8006fa0:	08008d68 	.word	0x08008d68

08006fa4 <memset>:
 8006fa4:	4402      	add	r2, r0
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d100      	bne.n	8006fae <memset+0xa>
 8006fac:	4770      	bx	lr
 8006fae:	f803 1b01 	strb.w	r1, [r3], #1
 8006fb2:	e7f9      	b.n	8006fa8 <memset+0x4>

08006fb4 <rand>:
 8006fb4:	4b17      	ldr	r3, [pc, #92]	; (8007014 <rand+0x60>)
 8006fb6:	b510      	push	{r4, lr}
 8006fb8:	681c      	ldr	r4, [r3, #0]
 8006fba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006fbc:	b9b3      	cbnz	r3, 8006fec <rand+0x38>
 8006fbe:	2018      	movs	r0, #24
 8006fc0:	f000 f898 	bl	80070f4 <malloc>
 8006fc4:	63a0      	str	r0, [r4, #56]	; 0x38
 8006fc6:	b928      	cbnz	r0, 8006fd4 <rand+0x20>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	4b13      	ldr	r3, [pc, #76]	; (8007018 <rand+0x64>)
 8006fcc:	4813      	ldr	r0, [pc, #76]	; (800701c <rand+0x68>)
 8006fce:	214e      	movs	r1, #78	; 0x4e
 8006fd0:	f000 f860 	bl	8007094 <__assert_func>
 8006fd4:	4a12      	ldr	r2, [pc, #72]	; (8007020 <rand+0x6c>)
 8006fd6:	4b13      	ldr	r3, [pc, #76]	; (8007024 <rand+0x70>)
 8006fd8:	e9c0 2300 	strd	r2, r3, [r0]
 8006fdc:	4b12      	ldr	r3, [pc, #72]	; (8007028 <rand+0x74>)
 8006fde:	6083      	str	r3, [r0, #8]
 8006fe0:	230b      	movs	r3, #11
 8006fe2:	8183      	strh	r3, [r0, #12]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006fec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006fee:	480f      	ldr	r0, [pc, #60]	; (800702c <rand+0x78>)
 8006ff0:	690a      	ldr	r2, [r1, #16]
 8006ff2:	694b      	ldr	r3, [r1, #20]
 8006ff4:	4c0e      	ldr	r4, [pc, #56]	; (8007030 <rand+0x7c>)
 8006ff6:	4350      	muls	r0, r2
 8006ff8:	fb04 0003 	mla	r0, r4, r3, r0
 8006ffc:	fba2 3404 	umull	r3, r4, r2, r4
 8007000:	1c5a      	adds	r2, r3, #1
 8007002:	4404      	add	r4, r0
 8007004:	f144 0000 	adc.w	r0, r4, #0
 8007008:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800700c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007010:	bd10      	pop	{r4, pc}
 8007012:	bf00      	nop
 8007014:	20000014 	.word	0x20000014
 8007018:	08008c14 	.word	0x08008c14
 800701c:	08008c2b 	.word	0x08008c2b
 8007020:	abcd330e 	.word	0xabcd330e
 8007024:	e66d1234 	.word	0xe66d1234
 8007028:	0005deec 	.word	0x0005deec
 800702c:	5851f42d 	.word	0x5851f42d
 8007030:	4c957f2d 	.word	0x4c957f2d

08007034 <siprintf>:
 8007034:	b40e      	push	{r1, r2, r3}
 8007036:	b500      	push	{lr}
 8007038:	b09c      	sub	sp, #112	; 0x70
 800703a:	ab1d      	add	r3, sp, #116	; 0x74
 800703c:	9002      	str	r0, [sp, #8]
 800703e:	9006      	str	r0, [sp, #24]
 8007040:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007044:	4809      	ldr	r0, [pc, #36]	; (800706c <siprintf+0x38>)
 8007046:	9107      	str	r1, [sp, #28]
 8007048:	9104      	str	r1, [sp, #16]
 800704a:	4909      	ldr	r1, [pc, #36]	; (8007070 <siprintf+0x3c>)
 800704c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007050:	9105      	str	r1, [sp, #20]
 8007052:	6800      	ldr	r0, [r0, #0]
 8007054:	9301      	str	r3, [sp, #4]
 8007056:	a902      	add	r1, sp, #8
 8007058:	f000 f95a 	bl	8007310 <_svfiprintf_r>
 800705c:	9b02      	ldr	r3, [sp, #8]
 800705e:	2200      	movs	r2, #0
 8007060:	701a      	strb	r2, [r3, #0]
 8007062:	b01c      	add	sp, #112	; 0x70
 8007064:	f85d eb04 	ldr.w	lr, [sp], #4
 8007068:	b003      	add	sp, #12
 800706a:	4770      	bx	lr
 800706c:	20000014 	.word	0x20000014
 8007070:	ffff0208 	.word	0xffff0208

08007074 <strcat>:
 8007074:	b510      	push	{r4, lr}
 8007076:	4602      	mov	r2, r0
 8007078:	7814      	ldrb	r4, [r2, #0]
 800707a:	4613      	mov	r3, r2
 800707c:	3201      	adds	r2, #1
 800707e:	2c00      	cmp	r4, #0
 8007080:	d1fa      	bne.n	8007078 <strcat+0x4>
 8007082:	3b01      	subs	r3, #1
 8007084:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007088:	f803 2f01 	strb.w	r2, [r3, #1]!
 800708c:	2a00      	cmp	r2, #0
 800708e:	d1f9      	bne.n	8007084 <strcat+0x10>
 8007090:	bd10      	pop	{r4, pc}
	...

08007094 <__assert_func>:
 8007094:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007096:	4614      	mov	r4, r2
 8007098:	461a      	mov	r2, r3
 800709a:	4b09      	ldr	r3, [pc, #36]	; (80070c0 <__assert_func+0x2c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4605      	mov	r5, r0
 80070a0:	68d8      	ldr	r0, [r3, #12]
 80070a2:	b14c      	cbz	r4, 80070b8 <__assert_func+0x24>
 80070a4:	4b07      	ldr	r3, [pc, #28]	; (80070c4 <__assert_func+0x30>)
 80070a6:	9100      	str	r1, [sp, #0]
 80070a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070ac:	4906      	ldr	r1, [pc, #24]	; (80070c8 <__assert_func+0x34>)
 80070ae:	462b      	mov	r3, r5
 80070b0:	f000 f80e 	bl	80070d0 <fiprintf>
 80070b4:	f000 fdea 	bl	8007c8c <abort>
 80070b8:	4b04      	ldr	r3, [pc, #16]	; (80070cc <__assert_func+0x38>)
 80070ba:	461c      	mov	r4, r3
 80070bc:	e7f3      	b.n	80070a6 <__assert_func+0x12>
 80070be:	bf00      	nop
 80070c0:	20000014 	.word	0x20000014
 80070c4:	08008c8a 	.word	0x08008c8a
 80070c8:	08008c97 	.word	0x08008c97
 80070cc:	08008cc5 	.word	0x08008cc5

080070d0 <fiprintf>:
 80070d0:	b40e      	push	{r1, r2, r3}
 80070d2:	b503      	push	{r0, r1, lr}
 80070d4:	4601      	mov	r1, r0
 80070d6:	ab03      	add	r3, sp, #12
 80070d8:	4805      	ldr	r0, [pc, #20]	; (80070f0 <fiprintf+0x20>)
 80070da:	f853 2b04 	ldr.w	r2, [r3], #4
 80070de:	6800      	ldr	r0, [r0, #0]
 80070e0:	9301      	str	r3, [sp, #4]
 80070e2:	f000 fa3f 	bl	8007564 <_vfiprintf_r>
 80070e6:	b002      	add	sp, #8
 80070e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80070ec:	b003      	add	sp, #12
 80070ee:	4770      	bx	lr
 80070f0:	20000014 	.word	0x20000014

080070f4 <malloc>:
 80070f4:	4b02      	ldr	r3, [pc, #8]	; (8007100 <malloc+0xc>)
 80070f6:	4601      	mov	r1, r0
 80070f8:	6818      	ldr	r0, [r3, #0]
 80070fa:	f000 b853 	b.w	80071a4 <_malloc_r>
 80070fe:	bf00      	nop
 8007100:	20000014 	.word	0x20000014

08007104 <_free_r>:
 8007104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007106:	2900      	cmp	r1, #0
 8007108:	d048      	beq.n	800719c <_free_r+0x98>
 800710a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800710e:	9001      	str	r0, [sp, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	f1a1 0404 	sub.w	r4, r1, #4
 8007116:	bfb8      	it	lt
 8007118:	18e4      	addlt	r4, r4, r3
 800711a:	f001 f805 	bl	8008128 <__malloc_lock>
 800711e:	4a20      	ldr	r2, [pc, #128]	; (80071a0 <_free_r+0x9c>)
 8007120:	9801      	ldr	r0, [sp, #4]
 8007122:	6813      	ldr	r3, [r2, #0]
 8007124:	4615      	mov	r5, r2
 8007126:	b933      	cbnz	r3, 8007136 <_free_r+0x32>
 8007128:	6063      	str	r3, [r4, #4]
 800712a:	6014      	str	r4, [r2, #0]
 800712c:	b003      	add	sp, #12
 800712e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007132:	f000 bfff 	b.w	8008134 <__malloc_unlock>
 8007136:	42a3      	cmp	r3, r4
 8007138:	d90b      	bls.n	8007152 <_free_r+0x4e>
 800713a:	6821      	ldr	r1, [r4, #0]
 800713c:	1862      	adds	r2, r4, r1
 800713e:	4293      	cmp	r3, r2
 8007140:	bf04      	itt	eq
 8007142:	681a      	ldreq	r2, [r3, #0]
 8007144:	685b      	ldreq	r3, [r3, #4]
 8007146:	6063      	str	r3, [r4, #4]
 8007148:	bf04      	itt	eq
 800714a:	1852      	addeq	r2, r2, r1
 800714c:	6022      	streq	r2, [r4, #0]
 800714e:	602c      	str	r4, [r5, #0]
 8007150:	e7ec      	b.n	800712c <_free_r+0x28>
 8007152:	461a      	mov	r2, r3
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	b10b      	cbz	r3, 800715c <_free_r+0x58>
 8007158:	42a3      	cmp	r3, r4
 800715a:	d9fa      	bls.n	8007152 <_free_r+0x4e>
 800715c:	6811      	ldr	r1, [r2, #0]
 800715e:	1855      	adds	r5, r2, r1
 8007160:	42a5      	cmp	r5, r4
 8007162:	d10b      	bne.n	800717c <_free_r+0x78>
 8007164:	6824      	ldr	r4, [r4, #0]
 8007166:	4421      	add	r1, r4
 8007168:	1854      	adds	r4, r2, r1
 800716a:	42a3      	cmp	r3, r4
 800716c:	6011      	str	r1, [r2, #0]
 800716e:	d1dd      	bne.n	800712c <_free_r+0x28>
 8007170:	681c      	ldr	r4, [r3, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	6053      	str	r3, [r2, #4]
 8007176:	4421      	add	r1, r4
 8007178:	6011      	str	r1, [r2, #0]
 800717a:	e7d7      	b.n	800712c <_free_r+0x28>
 800717c:	d902      	bls.n	8007184 <_free_r+0x80>
 800717e:	230c      	movs	r3, #12
 8007180:	6003      	str	r3, [r0, #0]
 8007182:	e7d3      	b.n	800712c <_free_r+0x28>
 8007184:	6825      	ldr	r5, [r4, #0]
 8007186:	1961      	adds	r1, r4, r5
 8007188:	428b      	cmp	r3, r1
 800718a:	bf04      	itt	eq
 800718c:	6819      	ldreq	r1, [r3, #0]
 800718e:	685b      	ldreq	r3, [r3, #4]
 8007190:	6063      	str	r3, [r4, #4]
 8007192:	bf04      	itt	eq
 8007194:	1949      	addeq	r1, r1, r5
 8007196:	6021      	streq	r1, [r4, #0]
 8007198:	6054      	str	r4, [r2, #4]
 800719a:	e7c7      	b.n	800712c <_free_r+0x28>
 800719c:	b003      	add	sp, #12
 800719e:	bd30      	pop	{r4, r5, pc}
 80071a0:	2000ad54 	.word	0x2000ad54

080071a4 <_malloc_r>:
 80071a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071a6:	1ccd      	adds	r5, r1, #3
 80071a8:	f025 0503 	bic.w	r5, r5, #3
 80071ac:	3508      	adds	r5, #8
 80071ae:	2d0c      	cmp	r5, #12
 80071b0:	bf38      	it	cc
 80071b2:	250c      	movcc	r5, #12
 80071b4:	2d00      	cmp	r5, #0
 80071b6:	4606      	mov	r6, r0
 80071b8:	db01      	blt.n	80071be <_malloc_r+0x1a>
 80071ba:	42a9      	cmp	r1, r5
 80071bc:	d903      	bls.n	80071c6 <_malloc_r+0x22>
 80071be:	230c      	movs	r3, #12
 80071c0:	6033      	str	r3, [r6, #0]
 80071c2:	2000      	movs	r0, #0
 80071c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071c6:	f000 ffaf 	bl	8008128 <__malloc_lock>
 80071ca:	4921      	ldr	r1, [pc, #132]	; (8007250 <_malloc_r+0xac>)
 80071cc:	680a      	ldr	r2, [r1, #0]
 80071ce:	4614      	mov	r4, r2
 80071d0:	b99c      	cbnz	r4, 80071fa <_malloc_r+0x56>
 80071d2:	4f20      	ldr	r7, [pc, #128]	; (8007254 <_malloc_r+0xb0>)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	b923      	cbnz	r3, 80071e2 <_malloc_r+0x3e>
 80071d8:	4621      	mov	r1, r4
 80071da:	4630      	mov	r0, r6
 80071dc:	f000 fc86 	bl	8007aec <_sbrk_r>
 80071e0:	6038      	str	r0, [r7, #0]
 80071e2:	4629      	mov	r1, r5
 80071e4:	4630      	mov	r0, r6
 80071e6:	f000 fc81 	bl	8007aec <_sbrk_r>
 80071ea:	1c43      	adds	r3, r0, #1
 80071ec:	d123      	bne.n	8007236 <_malloc_r+0x92>
 80071ee:	230c      	movs	r3, #12
 80071f0:	6033      	str	r3, [r6, #0]
 80071f2:	4630      	mov	r0, r6
 80071f4:	f000 ff9e 	bl	8008134 <__malloc_unlock>
 80071f8:	e7e3      	b.n	80071c2 <_malloc_r+0x1e>
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	1b5b      	subs	r3, r3, r5
 80071fe:	d417      	bmi.n	8007230 <_malloc_r+0x8c>
 8007200:	2b0b      	cmp	r3, #11
 8007202:	d903      	bls.n	800720c <_malloc_r+0x68>
 8007204:	6023      	str	r3, [r4, #0]
 8007206:	441c      	add	r4, r3
 8007208:	6025      	str	r5, [r4, #0]
 800720a:	e004      	b.n	8007216 <_malloc_r+0x72>
 800720c:	6863      	ldr	r3, [r4, #4]
 800720e:	42a2      	cmp	r2, r4
 8007210:	bf0c      	ite	eq
 8007212:	600b      	streq	r3, [r1, #0]
 8007214:	6053      	strne	r3, [r2, #4]
 8007216:	4630      	mov	r0, r6
 8007218:	f000 ff8c 	bl	8008134 <__malloc_unlock>
 800721c:	f104 000b 	add.w	r0, r4, #11
 8007220:	1d23      	adds	r3, r4, #4
 8007222:	f020 0007 	bic.w	r0, r0, #7
 8007226:	1ac2      	subs	r2, r0, r3
 8007228:	d0cc      	beq.n	80071c4 <_malloc_r+0x20>
 800722a:	1a1b      	subs	r3, r3, r0
 800722c:	50a3      	str	r3, [r4, r2]
 800722e:	e7c9      	b.n	80071c4 <_malloc_r+0x20>
 8007230:	4622      	mov	r2, r4
 8007232:	6864      	ldr	r4, [r4, #4]
 8007234:	e7cc      	b.n	80071d0 <_malloc_r+0x2c>
 8007236:	1cc4      	adds	r4, r0, #3
 8007238:	f024 0403 	bic.w	r4, r4, #3
 800723c:	42a0      	cmp	r0, r4
 800723e:	d0e3      	beq.n	8007208 <_malloc_r+0x64>
 8007240:	1a21      	subs	r1, r4, r0
 8007242:	4630      	mov	r0, r6
 8007244:	f000 fc52 	bl	8007aec <_sbrk_r>
 8007248:	3001      	adds	r0, #1
 800724a:	d1dd      	bne.n	8007208 <_malloc_r+0x64>
 800724c:	e7cf      	b.n	80071ee <_malloc_r+0x4a>
 800724e:	bf00      	nop
 8007250:	2000ad54 	.word	0x2000ad54
 8007254:	2000ad58 	.word	0x2000ad58

08007258 <__ssputs_r>:
 8007258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800725c:	688e      	ldr	r6, [r1, #8]
 800725e:	429e      	cmp	r6, r3
 8007260:	4682      	mov	sl, r0
 8007262:	460c      	mov	r4, r1
 8007264:	4690      	mov	r8, r2
 8007266:	461f      	mov	r7, r3
 8007268:	d838      	bhi.n	80072dc <__ssputs_r+0x84>
 800726a:	898a      	ldrh	r2, [r1, #12]
 800726c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007270:	d032      	beq.n	80072d8 <__ssputs_r+0x80>
 8007272:	6825      	ldr	r5, [r4, #0]
 8007274:	6909      	ldr	r1, [r1, #16]
 8007276:	eba5 0901 	sub.w	r9, r5, r1
 800727a:	6965      	ldr	r5, [r4, #20]
 800727c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007280:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007284:	3301      	adds	r3, #1
 8007286:	444b      	add	r3, r9
 8007288:	106d      	asrs	r5, r5, #1
 800728a:	429d      	cmp	r5, r3
 800728c:	bf38      	it	cc
 800728e:	461d      	movcc	r5, r3
 8007290:	0553      	lsls	r3, r2, #21
 8007292:	d531      	bpl.n	80072f8 <__ssputs_r+0xa0>
 8007294:	4629      	mov	r1, r5
 8007296:	f7ff ff85 	bl	80071a4 <_malloc_r>
 800729a:	4606      	mov	r6, r0
 800729c:	b950      	cbnz	r0, 80072b4 <__ssputs_r+0x5c>
 800729e:	230c      	movs	r3, #12
 80072a0:	f8ca 3000 	str.w	r3, [sl]
 80072a4:	89a3      	ldrh	r3, [r4, #12]
 80072a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072aa:	81a3      	strh	r3, [r4, #12]
 80072ac:	f04f 30ff 	mov.w	r0, #4294967295
 80072b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b4:	6921      	ldr	r1, [r4, #16]
 80072b6:	464a      	mov	r2, r9
 80072b8:	f000 ff0e 	bl	80080d8 <memcpy>
 80072bc:	89a3      	ldrh	r3, [r4, #12]
 80072be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072c6:	81a3      	strh	r3, [r4, #12]
 80072c8:	6126      	str	r6, [r4, #16]
 80072ca:	6165      	str	r5, [r4, #20]
 80072cc:	444e      	add	r6, r9
 80072ce:	eba5 0509 	sub.w	r5, r5, r9
 80072d2:	6026      	str	r6, [r4, #0]
 80072d4:	60a5      	str	r5, [r4, #8]
 80072d6:	463e      	mov	r6, r7
 80072d8:	42be      	cmp	r6, r7
 80072da:	d900      	bls.n	80072de <__ssputs_r+0x86>
 80072dc:	463e      	mov	r6, r7
 80072de:	4632      	mov	r2, r6
 80072e0:	6820      	ldr	r0, [r4, #0]
 80072e2:	4641      	mov	r1, r8
 80072e4:	f000 ff06 	bl	80080f4 <memmove>
 80072e8:	68a3      	ldr	r3, [r4, #8]
 80072ea:	6822      	ldr	r2, [r4, #0]
 80072ec:	1b9b      	subs	r3, r3, r6
 80072ee:	4432      	add	r2, r6
 80072f0:	60a3      	str	r3, [r4, #8]
 80072f2:	6022      	str	r2, [r4, #0]
 80072f4:	2000      	movs	r0, #0
 80072f6:	e7db      	b.n	80072b0 <__ssputs_r+0x58>
 80072f8:	462a      	mov	r2, r5
 80072fa:	f000 ff21 	bl	8008140 <_realloc_r>
 80072fe:	4606      	mov	r6, r0
 8007300:	2800      	cmp	r0, #0
 8007302:	d1e1      	bne.n	80072c8 <__ssputs_r+0x70>
 8007304:	6921      	ldr	r1, [r4, #16]
 8007306:	4650      	mov	r0, sl
 8007308:	f7ff fefc 	bl	8007104 <_free_r>
 800730c:	e7c7      	b.n	800729e <__ssputs_r+0x46>
	...

08007310 <_svfiprintf_r>:
 8007310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007314:	4698      	mov	r8, r3
 8007316:	898b      	ldrh	r3, [r1, #12]
 8007318:	061b      	lsls	r3, r3, #24
 800731a:	b09d      	sub	sp, #116	; 0x74
 800731c:	4607      	mov	r7, r0
 800731e:	460d      	mov	r5, r1
 8007320:	4614      	mov	r4, r2
 8007322:	d50e      	bpl.n	8007342 <_svfiprintf_r+0x32>
 8007324:	690b      	ldr	r3, [r1, #16]
 8007326:	b963      	cbnz	r3, 8007342 <_svfiprintf_r+0x32>
 8007328:	2140      	movs	r1, #64	; 0x40
 800732a:	f7ff ff3b 	bl	80071a4 <_malloc_r>
 800732e:	6028      	str	r0, [r5, #0]
 8007330:	6128      	str	r0, [r5, #16]
 8007332:	b920      	cbnz	r0, 800733e <_svfiprintf_r+0x2e>
 8007334:	230c      	movs	r3, #12
 8007336:	603b      	str	r3, [r7, #0]
 8007338:	f04f 30ff 	mov.w	r0, #4294967295
 800733c:	e0d1      	b.n	80074e2 <_svfiprintf_r+0x1d2>
 800733e:	2340      	movs	r3, #64	; 0x40
 8007340:	616b      	str	r3, [r5, #20]
 8007342:	2300      	movs	r3, #0
 8007344:	9309      	str	r3, [sp, #36]	; 0x24
 8007346:	2320      	movs	r3, #32
 8007348:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800734c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007350:	2330      	movs	r3, #48	; 0x30
 8007352:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80074fc <_svfiprintf_r+0x1ec>
 8007356:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800735a:	f04f 0901 	mov.w	r9, #1
 800735e:	4623      	mov	r3, r4
 8007360:	469a      	mov	sl, r3
 8007362:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007366:	b10a      	cbz	r2, 800736c <_svfiprintf_r+0x5c>
 8007368:	2a25      	cmp	r2, #37	; 0x25
 800736a:	d1f9      	bne.n	8007360 <_svfiprintf_r+0x50>
 800736c:	ebba 0b04 	subs.w	fp, sl, r4
 8007370:	d00b      	beq.n	800738a <_svfiprintf_r+0x7a>
 8007372:	465b      	mov	r3, fp
 8007374:	4622      	mov	r2, r4
 8007376:	4629      	mov	r1, r5
 8007378:	4638      	mov	r0, r7
 800737a:	f7ff ff6d 	bl	8007258 <__ssputs_r>
 800737e:	3001      	adds	r0, #1
 8007380:	f000 80aa 	beq.w	80074d8 <_svfiprintf_r+0x1c8>
 8007384:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007386:	445a      	add	r2, fp
 8007388:	9209      	str	r2, [sp, #36]	; 0x24
 800738a:	f89a 3000 	ldrb.w	r3, [sl]
 800738e:	2b00      	cmp	r3, #0
 8007390:	f000 80a2 	beq.w	80074d8 <_svfiprintf_r+0x1c8>
 8007394:	2300      	movs	r3, #0
 8007396:	f04f 32ff 	mov.w	r2, #4294967295
 800739a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800739e:	f10a 0a01 	add.w	sl, sl, #1
 80073a2:	9304      	str	r3, [sp, #16]
 80073a4:	9307      	str	r3, [sp, #28]
 80073a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073aa:	931a      	str	r3, [sp, #104]	; 0x68
 80073ac:	4654      	mov	r4, sl
 80073ae:	2205      	movs	r2, #5
 80073b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073b4:	4851      	ldr	r0, [pc, #324]	; (80074fc <_svfiprintf_r+0x1ec>)
 80073b6:	f7f8 ff13 	bl	80001e0 <memchr>
 80073ba:	9a04      	ldr	r2, [sp, #16]
 80073bc:	b9d8      	cbnz	r0, 80073f6 <_svfiprintf_r+0xe6>
 80073be:	06d0      	lsls	r0, r2, #27
 80073c0:	bf44      	itt	mi
 80073c2:	2320      	movmi	r3, #32
 80073c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073c8:	0711      	lsls	r1, r2, #28
 80073ca:	bf44      	itt	mi
 80073cc:	232b      	movmi	r3, #43	; 0x2b
 80073ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073d2:	f89a 3000 	ldrb.w	r3, [sl]
 80073d6:	2b2a      	cmp	r3, #42	; 0x2a
 80073d8:	d015      	beq.n	8007406 <_svfiprintf_r+0xf6>
 80073da:	9a07      	ldr	r2, [sp, #28]
 80073dc:	4654      	mov	r4, sl
 80073de:	2000      	movs	r0, #0
 80073e0:	f04f 0c0a 	mov.w	ip, #10
 80073e4:	4621      	mov	r1, r4
 80073e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073ea:	3b30      	subs	r3, #48	; 0x30
 80073ec:	2b09      	cmp	r3, #9
 80073ee:	d94e      	bls.n	800748e <_svfiprintf_r+0x17e>
 80073f0:	b1b0      	cbz	r0, 8007420 <_svfiprintf_r+0x110>
 80073f2:	9207      	str	r2, [sp, #28]
 80073f4:	e014      	b.n	8007420 <_svfiprintf_r+0x110>
 80073f6:	eba0 0308 	sub.w	r3, r0, r8
 80073fa:	fa09 f303 	lsl.w	r3, r9, r3
 80073fe:	4313      	orrs	r3, r2
 8007400:	9304      	str	r3, [sp, #16]
 8007402:	46a2      	mov	sl, r4
 8007404:	e7d2      	b.n	80073ac <_svfiprintf_r+0x9c>
 8007406:	9b03      	ldr	r3, [sp, #12]
 8007408:	1d19      	adds	r1, r3, #4
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	9103      	str	r1, [sp, #12]
 800740e:	2b00      	cmp	r3, #0
 8007410:	bfbb      	ittet	lt
 8007412:	425b      	neglt	r3, r3
 8007414:	f042 0202 	orrlt.w	r2, r2, #2
 8007418:	9307      	strge	r3, [sp, #28]
 800741a:	9307      	strlt	r3, [sp, #28]
 800741c:	bfb8      	it	lt
 800741e:	9204      	strlt	r2, [sp, #16]
 8007420:	7823      	ldrb	r3, [r4, #0]
 8007422:	2b2e      	cmp	r3, #46	; 0x2e
 8007424:	d10c      	bne.n	8007440 <_svfiprintf_r+0x130>
 8007426:	7863      	ldrb	r3, [r4, #1]
 8007428:	2b2a      	cmp	r3, #42	; 0x2a
 800742a:	d135      	bne.n	8007498 <_svfiprintf_r+0x188>
 800742c:	9b03      	ldr	r3, [sp, #12]
 800742e:	1d1a      	adds	r2, r3, #4
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	9203      	str	r2, [sp, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	bfb8      	it	lt
 8007438:	f04f 33ff 	movlt.w	r3, #4294967295
 800743c:	3402      	adds	r4, #2
 800743e:	9305      	str	r3, [sp, #20]
 8007440:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800750c <_svfiprintf_r+0x1fc>
 8007444:	7821      	ldrb	r1, [r4, #0]
 8007446:	2203      	movs	r2, #3
 8007448:	4650      	mov	r0, sl
 800744a:	f7f8 fec9 	bl	80001e0 <memchr>
 800744e:	b140      	cbz	r0, 8007462 <_svfiprintf_r+0x152>
 8007450:	2340      	movs	r3, #64	; 0x40
 8007452:	eba0 000a 	sub.w	r0, r0, sl
 8007456:	fa03 f000 	lsl.w	r0, r3, r0
 800745a:	9b04      	ldr	r3, [sp, #16]
 800745c:	4303      	orrs	r3, r0
 800745e:	3401      	adds	r4, #1
 8007460:	9304      	str	r3, [sp, #16]
 8007462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007466:	4826      	ldr	r0, [pc, #152]	; (8007500 <_svfiprintf_r+0x1f0>)
 8007468:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800746c:	2206      	movs	r2, #6
 800746e:	f7f8 feb7 	bl	80001e0 <memchr>
 8007472:	2800      	cmp	r0, #0
 8007474:	d038      	beq.n	80074e8 <_svfiprintf_r+0x1d8>
 8007476:	4b23      	ldr	r3, [pc, #140]	; (8007504 <_svfiprintf_r+0x1f4>)
 8007478:	bb1b      	cbnz	r3, 80074c2 <_svfiprintf_r+0x1b2>
 800747a:	9b03      	ldr	r3, [sp, #12]
 800747c:	3307      	adds	r3, #7
 800747e:	f023 0307 	bic.w	r3, r3, #7
 8007482:	3308      	adds	r3, #8
 8007484:	9303      	str	r3, [sp, #12]
 8007486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007488:	4433      	add	r3, r6
 800748a:	9309      	str	r3, [sp, #36]	; 0x24
 800748c:	e767      	b.n	800735e <_svfiprintf_r+0x4e>
 800748e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007492:	460c      	mov	r4, r1
 8007494:	2001      	movs	r0, #1
 8007496:	e7a5      	b.n	80073e4 <_svfiprintf_r+0xd4>
 8007498:	2300      	movs	r3, #0
 800749a:	3401      	adds	r4, #1
 800749c:	9305      	str	r3, [sp, #20]
 800749e:	4619      	mov	r1, r3
 80074a0:	f04f 0c0a 	mov.w	ip, #10
 80074a4:	4620      	mov	r0, r4
 80074a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074aa:	3a30      	subs	r2, #48	; 0x30
 80074ac:	2a09      	cmp	r2, #9
 80074ae:	d903      	bls.n	80074b8 <_svfiprintf_r+0x1a8>
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0c5      	beq.n	8007440 <_svfiprintf_r+0x130>
 80074b4:	9105      	str	r1, [sp, #20]
 80074b6:	e7c3      	b.n	8007440 <_svfiprintf_r+0x130>
 80074b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80074bc:	4604      	mov	r4, r0
 80074be:	2301      	movs	r3, #1
 80074c0:	e7f0      	b.n	80074a4 <_svfiprintf_r+0x194>
 80074c2:	ab03      	add	r3, sp, #12
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	462a      	mov	r2, r5
 80074c8:	4b0f      	ldr	r3, [pc, #60]	; (8007508 <_svfiprintf_r+0x1f8>)
 80074ca:	a904      	add	r1, sp, #16
 80074cc:	4638      	mov	r0, r7
 80074ce:	f3af 8000 	nop.w
 80074d2:	1c42      	adds	r2, r0, #1
 80074d4:	4606      	mov	r6, r0
 80074d6:	d1d6      	bne.n	8007486 <_svfiprintf_r+0x176>
 80074d8:	89ab      	ldrh	r3, [r5, #12]
 80074da:	065b      	lsls	r3, r3, #25
 80074dc:	f53f af2c 	bmi.w	8007338 <_svfiprintf_r+0x28>
 80074e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074e2:	b01d      	add	sp, #116	; 0x74
 80074e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e8:	ab03      	add	r3, sp, #12
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	462a      	mov	r2, r5
 80074ee:	4b06      	ldr	r3, [pc, #24]	; (8007508 <_svfiprintf_r+0x1f8>)
 80074f0:	a904      	add	r1, sp, #16
 80074f2:	4638      	mov	r0, r7
 80074f4:	f000 f9d4 	bl	80078a0 <_printf_i>
 80074f8:	e7eb      	b.n	80074d2 <_svfiprintf_r+0x1c2>
 80074fa:	bf00      	nop
 80074fc:	08008cc6 	.word	0x08008cc6
 8007500:	08008cd0 	.word	0x08008cd0
 8007504:	00000000 	.word	0x00000000
 8007508:	08007259 	.word	0x08007259
 800750c:	08008ccc 	.word	0x08008ccc

08007510 <__sfputc_r>:
 8007510:	6893      	ldr	r3, [r2, #8]
 8007512:	3b01      	subs	r3, #1
 8007514:	2b00      	cmp	r3, #0
 8007516:	b410      	push	{r4}
 8007518:	6093      	str	r3, [r2, #8]
 800751a:	da08      	bge.n	800752e <__sfputc_r+0x1e>
 800751c:	6994      	ldr	r4, [r2, #24]
 800751e:	42a3      	cmp	r3, r4
 8007520:	db01      	blt.n	8007526 <__sfputc_r+0x16>
 8007522:	290a      	cmp	r1, #10
 8007524:	d103      	bne.n	800752e <__sfputc_r+0x1e>
 8007526:	f85d 4b04 	ldr.w	r4, [sp], #4
 800752a:	f000 baef 	b.w	8007b0c <__swbuf_r>
 800752e:	6813      	ldr	r3, [r2, #0]
 8007530:	1c58      	adds	r0, r3, #1
 8007532:	6010      	str	r0, [r2, #0]
 8007534:	7019      	strb	r1, [r3, #0]
 8007536:	4608      	mov	r0, r1
 8007538:	f85d 4b04 	ldr.w	r4, [sp], #4
 800753c:	4770      	bx	lr

0800753e <__sfputs_r>:
 800753e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007540:	4606      	mov	r6, r0
 8007542:	460f      	mov	r7, r1
 8007544:	4614      	mov	r4, r2
 8007546:	18d5      	adds	r5, r2, r3
 8007548:	42ac      	cmp	r4, r5
 800754a:	d101      	bne.n	8007550 <__sfputs_r+0x12>
 800754c:	2000      	movs	r0, #0
 800754e:	e007      	b.n	8007560 <__sfputs_r+0x22>
 8007550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007554:	463a      	mov	r2, r7
 8007556:	4630      	mov	r0, r6
 8007558:	f7ff ffda 	bl	8007510 <__sfputc_r>
 800755c:	1c43      	adds	r3, r0, #1
 800755e:	d1f3      	bne.n	8007548 <__sfputs_r+0xa>
 8007560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007564 <_vfiprintf_r>:
 8007564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007568:	460d      	mov	r5, r1
 800756a:	b09d      	sub	sp, #116	; 0x74
 800756c:	4614      	mov	r4, r2
 800756e:	4698      	mov	r8, r3
 8007570:	4606      	mov	r6, r0
 8007572:	b118      	cbz	r0, 800757c <_vfiprintf_r+0x18>
 8007574:	6983      	ldr	r3, [r0, #24]
 8007576:	b90b      	cbnz	r3, 800757c <_vfiprintf_r+0x18>
 8007578:	f000 fcaa 	bl	8007ed0 <__sinit>
 800757c:	4b89      	ldr	r3, [pc, #548]	; (80077a4 <_vfiprintf_r+0x240>)
 800757e:	429d      	cmp	r5, r3
 8007580:	d11b      	bne.n	80075ba <_vfiprintf_r+0x56>
 8007582:	6875      	ldr	r5, [r6, #4]
 8007584:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007586:	07d9      	lsls	r1, r3, #31
 8007588:	d405      	bmi.n	8007596 <_vfiprintf_r+0x32>
 800758a:	89ab      	ldrh	r3, [r5, #12]
 800758c:	059a      	lsls	r2, r3, #22
 800758e:	d402      	bmi.n	8007596 <_vfiprintf_r+0x32>
 8007590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007592:	f000 fd3b 	bl	800800c <__retarget_lock_acquire_recursive>
 8007596:	89ab      	ldrh	r3, [r5, #12]
 8007598:	071b      	lsls	r3, r3, #28
 800759a:	d501      	bpl.n	80075a0 <_vfiprintf_r+0x3c>
 800759c:	692b      	ldr	r3, [r5, #16]
 800759e:	b9eb      	cbnz	r3, 80075dc <_vfiprintf_r+0x78>
 80075a0:	4629      	mov	r1, r5
 80075a2:	4630      	mov	r0, r6
 80075a4:	f000 fb04 	bl	8007bb0 <__swsetup_r>
 80075a8:	b1c0      	cbz	r0, 80075dc <_vfiprintf_r+0x78>
 80075aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075ac:	07dc      	lsls	r4, r3, #31
 80075ae:	d50e      	bpl.n	80075ce <_vfiprintf_r+0x6a>
 80075b0:	f04f 30ff 	mov.w	r0, #4294967295
 80075b4:	b01d      	add	sp, #116	; 0x74
 80075b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ba:	4b7b      	ldr	r3, [pc, #492]	; (80077a8 <_vfiprintf_r+0x244>)
 80075bc:	429d      	cmp	r5, r3
 80075be:	d101      	bne.n	80075c4 <_vfiprintf_r+0x60>
 80075c0:	68b5      	ldr	r5, [r6, #8]
 80075c2:	e7df      	b.n	8007584 <_vfiprintf_r+0x20>
 80075c4:	4b79      	ldr	r3, [pc, #484]	; (80077ac <_vfiprintf_r+0x248>)
 80075c6:	429d      	cmp	r5, r3
 80075c8:	bf08      	it	eq
 80075ca:	68f5      	ldreq	r5, [r6, #12]
 80075cc:	e7da      	b.n	8007584 <_vfiprintf_r+0x20>
 80075ce:	89ab      	ldrh	r3, [r5, #12]
 80075d0:	0598      	lsls	r0, r3, #22
 80075d2:	d4ed      	bmi.n	80075b0 <_vfiprintf_r+0x4c>
 80075d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075d6:	f000 fd1a 	bl	800800e <__retarget_lock_release_recursive>
 80075da:	e7e9      	b.n	80075b0 <_vfiprintf_r+0x4c>
 80075dc:	2300      	movs	r3, #0
 80075de:	9309      	str	r3, [sp, #36]	; 0x24
 80075e0:	2320      	movs	r3, #32
 80075e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80075ea:	2330      	movs	r3, #48	; 0x30
 80075ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80077b0 <_vfiprintf_r+0x24c>
 80075f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075f4:	f04f 0901 	mov.w	r9, #1
 80075f8:	4623      	mov	r3, r4
 80075fa:	469a      	mov	sl, r3
 80075fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007600:	b10a      	cbz	r2, 8007606 <_vfiprintf_r+0xa2>
 8007602:	2a25      	cmp	r2, #37	; 0x25
 8007604:	d1f9      	bne.n	80075fa <_vfiprintf_r+0x96>
 8007606:	ebba 0b04 	subs.w	fp, sl, r4
 800760a:	d00b      	beq.n	8007624 <_vfiprintf_r+0xc0>
 800760c:	465b      	mov	r3, fp
 800760e:	4622      	mov	r2, r4
 8007610:	4629      	mov	r1, r5
 8007612:	4630      	mov	r0, r6
 8007614:	f7ff ff93 	bl	800753e <__sfputs_r>
 8007618:	3001      	adds	r0, #1
 800761a:	f000 80aa 	beq.w	8007772 <_vfiprintf_r+0x20e>
 800761e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007620:	445a      	add	r2, fp
 8007622:	9209      	str	r2, [sp, #36]	; 0x24
 8007624:	f89a 3000 	ldrb.w	r3, [sl]
 8007628:	2b00      	cmp	r3, #0
 800762a:	f000 80a2 	beq.w	8007772 <_vfiprintf_r+0x20e>
 800762e:	2300      	movs	r3, #0
 8007630:	f04f 32ff 	mov.w	r2, #4294967295
 8007634:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007638:	f10a 0a01 	add.w	sl, sl, #1
 800763c:	9304      	str	r3, [sp, #16]
 800763e:	9307      	str	r3, [sp, #28]
 8007640:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007644:	931a      	str	r3, [sp, #104]	; 0x68
 8007646:	4654      	mov	r4, sl
 8007648:	2205      	movs	r2, #5
 800764a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800764e:	4858      	ldr	r0, [pc, #352]	; (80077b0 <_vfiprintf_r+0x24c>)
 8007650:	f7f8 fdc6 	bl	80001e0 <memchr>
 8007654:	9a04      	ldr	r2, [sp, #16]
 8007656:	b9d8      	cbnz	r0, 8007690 <_vfiprintf_r+0x12c>
 8007658:	06d1      	lsls	r1, r2, #27
 800765a:	bf44      	itt	mi
 800765c:	2320      	movmi	r3, #32
 800765e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007662:	0713      	lsls	r3, r2, #28
 8007664:	bf44      	itt	mi
 8007666:	232b      	movmi	r3, #43	; 0x2b
 8007668:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800766c:	f89a 3000 	ldrb.w	r3, [sl]
 8007670:	2b2a      	cmp	r3, #42	; 0x2a
 8007672:	d015      	beq.n	80076a0 <_vfiprintf_r+0x13c>
 8007674:	9a07      	ldr	r2, [sp, #28]
 8007676:	4654      	mov	r4, sl
 8007678:	2000      	movs	r0, #0
 800767a:	f04f 0c0a 	mov.w	ip, #10
 800767e:	4621      	mov	r1, r4
 8007680:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007684:	3b30      	subs	r3, #48	; 0x30
 8007686:	2b09      	cmp	r3, #9
 8007688:	d94e      	bls.n	8007728 <_vfiprintf_r+0x1c4>
 800768a:	b1b0      	cbz	r0, 80076ba <_vfiprintf_r+0x156>
 800768c:	9207      	str	r2, [sp, #28]
 800768e:	e014      	b.n	80076ba <_vfiprintf_r+0x156>
 8007690:	eba0 0308 	sub.w	r3, r0, r8
 8007694:	fa09 f303 	lsl.w	r3, r9, r3
 8007698:	4313      	orrs	r3, r2
 800769a:	9304      	str	r3, [sp, #16]
 800769c:	46a2      	mov	sl, r4
 800769e:	e7d2      	b.n	8007646 <_vfiprintf_r+0xe2>
 80076a0:	9b03      	ldr	r3, [sp, #12]
 80076a2:	1d19      	adds	r1, r3, #4
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	9103      	str	r1, [sp, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	bfbb      	ittet	lt
 80076ac:	425b      	neglt	r3, r3
 80076ae:	f042 0202 	orrlt.w	r2, r2, #2
 80076b2:	9307      	strge	r3, [sp, #28]
 80076b4:	9307      	strlt	r3, [sp, #28]
 80076b6:	bfb8      	it	lt
 80076b8:	9204      	strlt	r2, [sp, #16]
 80076ba:	7823      	ldrb	r3, [r4, #0]
 80076bc:	2b2e      	cmp	r3, #46	; 0x2e
 80076be:	d10c      	bne.n	80076da <_vfiprintf_r+0x176>
 80076c0:	7863      	ldrb	r3, [r4, #1]
 80076c2:	2b2a      	cmp	r3, #42	; 0x2a
 80076c4:	d135      	bne.n	8007732 <_vfiprintf_r+0x1ce>
 80076c6:	9b03      	ldr	r3, [sp, #12]
 80076c8:	1d1a      	adds	r2, r3, #4
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	9203      	str	r2, [sp, #12]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	bfb8      	it	lt
 80076d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80076d6:	3402      	adds	r4, #2
 80076d8:	9305      	str	r3, [sp, #20]
 80076da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80077c0 <_vfiprintf_r+0x25c>
 80076de:	7821      	ldrb	r1, [r4, #0]
 80076e0:	2203      	movs	r2, #3
 80076e2:	4650      	mov	r0, sl
 80076e4:	f7f8 fd7c 	bl	80001e0 <memchr>
 80076e8:	b140      	cbz	r0, 80076fc <_vfiprintf_r+0x198>
 80076ea:	2340      	movs	r3, #64	; 0x40
 80076ec:	eba0 000a 	sub.w	r0, r0, sl
 80076f0:	fa03 f000 	lsl.w	r0, r3, r0
 80076f4:	9b04      	ldr	r3, [sp, #16]
 80076f6:	4303      	orrs	r3, r0
 80076f8:	3401      	adds	r4, #1
 80076fa:	9304      	str	r3, [sp, #16]
 80076fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007700:	482c      	ldr	r0, [pc, #176]	; (80077b4 <_vfiprintf_r+0x250>)
 8007702:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007706:	2206      	movs	r2, #6
 8007708:	f7f8 fd6a 	bl	80001e0 <memchr>
 800770c:	2800      	cmp	r0, #0
 800770e:	d03f      	beq.n	8007790 <_vfiprintf_r+0x22c>
 8007710:	4b29      	ldr	r3, [pc, #164]	; (80077b8 <_vfiprintf_r+0x254>)
 8007712:	bb1b      	cbnz	r3, 800775c <_vfiprintf_r+0x1f8>
 8007714:	9b03      	ldr	r3, [sp, #12]
 8007716:	3307      	adds	r3, #7
 8007718:	f023 0307 	bic.w	r3, r3, #7
 800771c:	3308      	adds	r3, #8
 800771e:	9303      	str	r3, [sp, #12]
 8007720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007722:	443b      	add	r3, r7
 8007724:	9309      	str	r3, [sp, #36]	; 0x24
 8007726:	e767      	b.n	80075f8 <_vfiprintf_r+0x94>
 8007728:	fb0c 3202 	mla	r2, ip, r2, r3
 800772c:	460c      	mov	r4, r1
 800772e:	2001      	movs	r0, #1
 8007730:	e7a5      	b.n	800767e <_vfiprintf_r+0x11a>
 8007732:	2300      	movs	r3, #0
 8007734:	3401      	adds	r4, #1
 8007736:	9305      	str	r3, [sp, #20]
 8007738:	4619      	mov	r1, r3
 800773a:	f04f 0c0a 	mov.w	ip, #10
 800773e:	4620      	mov	r0, r4
 8007740:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007744:	3a30      	subs	r2, #48	; 0x30
 8007746:	2a09      	cmp	r2, #9
 8007748:	d903      	bls.n	8007752 <_vfiprintf_r+0x1ee>
 800774a:	2b00      	cmp	r3, #0
 800774c:	d0c5      	beq.n	80076da <_vfiprintf_r+0x176>
 800774e:	9105      	str	r1, [sp, #20]
 8007750:	e7c3      	b.n	80076da <_vfiprintf_r+0x176>
 8007752:	fb0c 2101 	mla	r1, ip, r1, r2
 8007756:	4604      	mov	r4, r0
 8007758:	2301      	movs	r3, #1
 800775a:	e7f0      	b.n	800773e <_vfiprintf_r+0x1da>
 800775c:	ab03      	add	r3, sp, #12
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	462a      	mov	r2, r5
 8007762:	4b16      	ldr	r3, [pc, #88]	; (80077bc <_vfiprintf_r+0x258>)
 8007764:	a904      	add	r1, sp, #16
 8007766:	4630      	mov	r0, r6
 8007768:	f3af 8000 	nop.w
 800776c:	4607      	mov	r7, r0
 800776e:	1c78      	adds	r0, r7, #1
 8007770:	d1d6      	bne.n	8007720 <_vfiprintf_r+0x1bc>
 8007772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007774:	07d9      	lsls	r1, r3, #31
 8007776:	d405      	bmi.n	8007784 <_vfiprintf_r+0x220>
 8007778:	89ab      	ldrh	r3, [r5, #12]
 800777a:	059a      	lsls	r2, r3, #22
 800777c:	d402      	bmi.n	8007784 <_vfiprintf_r+0x220>
 800777e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007780:	f000 fc45 	bl	800800e <__retarget_lock_release_recursive>
 8007784:	89ab      	ldrh	r3, [r5, #12]
 8007786:	065b      	lsls	r3, r3, #25
 8007788:	f53f af12 	bmi.w	80075b0 <_vfiprintf_r+0x4c>
 800778c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800778e:	e711      	b.n	80075b4 <_vfiprintf_r+0x50>
 8007790:	ab03      	add	r3, sp, #12
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	462a      	mov	r2, r5
 8007796:	4b09      	ldr	r3, [pc, #36]	; (80077bc <_vfiprintf_r+0x258>)
 8007798:	a904      	add	r1, sp, #16
 800779a:	4630      	mov	r0, r6
 800779c:	f000 f880 	bl	80078a0 <_printf_i>
 80077a0:	e7e4      	b.n	800776c <_vfiprintf_r+0x208>
 80077a2:	bf00      	nop
 80077a4:	08008d1c 	.word	0x08008d1c
 80077a8:	08008d3c 	.word	0x08008d3c
 80077ac:	08008cfc 	.word	0x08008cfc
 80077b0:	08008cc6 	.word	0x08008cc6
 80077b4:	08008cd0 	.word	0x08008cd0
 80077b8:	00000000 	.word	0x00000000
 80077bc:	0800753f 	.word	0x0800753f
 80077c0:	08008ccc 	.word	0x08008ccc

080077c4 <_printf_common>:
 80077c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077c8:	4616      	mov	r6, r2
 80077ca:	4699      	mov	r9, r3
 80077cc:	688a      	ldr	r2, [r1, #8]
 80077ce:	690b      	ldr	r3, [r1, #16]
 80077d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077d4:	4293      	cmp	r3, r2
 80077d6:	bfb8      	it	lt
 80077d8:	4613      	movlt	r3, r2
 80077da:	6033      	str	r3, [r6, #0]
 80077dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077e0:	4607      	mov	r7, r0
 80077e2:	460c      	mov	r4, r1
 80077e4:	b10a      	cbz	r2, 80077ea <_printf_common+0x26>
 80077e6:	3301      	adds	r3, #1
 80077e8:	6033      	str	r3, [r6, #0]
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	0699      	lsls	r1, r3, #26
 80077ee:	bf42      	ittt	mi
 80077f0:	6833      	ldrmi	r3, [r6, #0]
 80077f2:	3302      	addmi	r3, #2
 80077f4:	6033      	strmi	r3, [r6, #0]
 80077f6:	6825      	ldr	r5, [r4, #0]
 80077f8:	f015 0506 	ands.w	r5, r5, #6
 80077fc:	d106      	bne.n	800780c <_printf_common+0x48>
 80077fe:	f104 0a19 	add.w	sl, r4, #25
 8007802:	68e3      	ldr	r3, [r4, #12]
 8007804:	6832      	ldr	r2, [r6, #0]
 8007806:	1a9b      	subs	r3, r3, r2
 8007808:	42ab      	cmp	r3, r5
 800780a:	dc26      	bgt.n	800785a <_printf_common+0x96>
 800780c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007810:	1e13      	subs	r3, r2, #0
 8007812:	6822      	ldr	r2, [r4, #0]
 8007814:	bf18      	it	ne
 8007816:	2301      	movne	r3, #1
 8007818:	0692      	lsls	r2, r2, #26
 800781a:	d42b      	bmi.n	8007874 <_printf_common+0xb0>
 800781c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007820:	4649      	mov	r1, r9
 8007822:	4638      	mov	r0, r7
 8007824:	47c0      	blx	r8
 8007826:	3001      	adds	r0, #1
 8007828:	d01e      	beq.n	8007868 <_printf_common+0xa4>
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	68e5      	ldr	r5, [r4, #12]
 800782e:	6832      	ldr	r2, [r6, #0]
 8007830:	f003 0306 	and.w	r3, r3, #6
 8007834:	2b04      	cmp	r3, #4
 8007836:	bf08      	it	eq
 8007838:	1aad      	subeq	r5, r5, r2
 800783a:	68a3      	ldr	r3, [r4, #8]
 800783c:	6922      	ldr	r2, [r4, #16]
 800783e:	bf0c      	ite	eq
 8007840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007844:	2500      	movne	r5, #0
 8007846:	4293      	cmp	r3, r2
 8007848:	bfc4      	itt	gt
 800784a:	1a9b      	subgt	r3, r3, r2
 800784c:	18ed      	addgt	r5, r5, r3
 800784e:	2600      	movs	r6, #0
 8007850:	341a      	adds	r4, #26
 8007852:	42b5      	cmp	r5, r6
 8007854:	d11a      	bne.n	800788c <_printf_common+0xc8>
 8007856:	2000      	movs	r0, #0
 8007858:	e008      	b.n	800786c <_printf_common+0xa8>
 800785a:	2301      	movs	r3, #1
 800785c:	4652      	mov	r2, sl
 800785e:	4649      	mov	r1, r9
 8007860:	4638      	mov	r0, r7
 8007862:	47c0      	blx	r8
 8007864:	3001      	adds	r0, #1
 8007866:	d103      	bne.n	8007870 <_printf_common+0xac>
 8007868:	f04f 30ff 	mov.w	r0, #4294967295
 800786c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007870:	3501      	adds	r5, #1
 8007872:	e7c6      	b.n	8007802 <_printf_common+0x3e>
 8007874:	18e1      	adds	r1, r4, r3
 8007876:	1c5a      	adds	r2, r3, #1
 8007878:	2030      	movs	r0, #48	; 0x30
 800787a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800787e:	4422      	add	r2, r4
 8007880:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007884:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007888:	3302      	adds	r3, #2
 800788a:	e7c7      	b.n	800781c <_printf_common+0x58>
 800788c:	2301      	movs	r3, #1
 800788e:	4622      	mov	r2, r4
 8007890:	4649      	mov	r1, r9
 8007892:	4638      	mov	r0, r7
 8007894:	47c0      	blx	r8
 8007896:	3001      	adds	r0, #1
 8007898:	d0e6      	beq.n	8007868 <_printf_common+0xa4>
 800789a:	3601      	adds	r6, #1
 800789c:	e7d9      	b.n	8007852 <_printf_common+0x8e>
	...

080078a0 <_printf_i>:
 80078a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078a4:	460c      	mov	r4, r1
 80078a6:	4691      	mov	r9, r2
 80078a8:	7e27      	ldrb	r7, [r4, #24]
 80078aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80078ac:	2f78      	cmp	r7, #120	; 0x78
 80078ae:	4680      	mov	r8, r0
 80078b0:	469a      	mov	sl, r3
 80078b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078b6:	d807      	bhi.n	80078c8 <_printf_i+0x28>
 80078b8:	2f62      	cmp	r7, #98	; 0x62
 80078ba:	d80a      	bhi.n	80078d2 <_printf_i+0x32>
 80078bc:	2f00      	cmp	r7, #0
 80078be:	f000 80d8 	beq.w	8007a72 <_printf_i+0x1d2>
 80078c2:	2f58      	cmp	r7, #88	; 0x58
 80078c4:	f000 80a3 	beq.w	8007a0e <_printf_i+0x16e>
 80078c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80078cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078d0:	e03a      	b.n	8007948 <_printf_i+0xa8>
 80078d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078d6:	2b15      	cmp	r3, #21
 80078d8:	d8f6      	bhi.n	80078c8 <_printf_i+0x28>
 80078da:	a001      	add	r0, pc, #4	; (adr r0, 80078e0 <_printf_i+0x40>)
 80078dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80078e0:	08007939 	.word	0x08007939
 80078e4:	0800794d 	.word	0x0800794d
 80078e8:	080078c9 	.word	0x080078c9
 80078ec:	080078c9 	.word	0x080078c9
 80078f0:	080078c9 	.word	0x080078c9
 80078f4:	080078c9 	.word	0x080078c9
 80078f8:	0800794d 	.word	0x0800794d
 80078fc:	080078c9 	.word	0x080078c9
 8007900:	080078c9 	.word	0x080078c9
 8007904:	080078c9 	.word	0x080078c9
 8007908:	080078c9 	.word	0x080078c9
 800790c:	08007a59 	.word	0x08007a59
 8007910:	0800797d 	.word	0x0800797d
 8007914:	08007a3b 	.word	0x08007a3b
 8007918:	080078c9 	.word	0x080078c9
 800791c:	080078c9 	.word	0x080078c9
 8007920:	08007a7b 	.word	0x08007a7b
 8007924:	080078c9 	.word	0x080078c9
 8007928:	0800797d 	.word	0x0800797d
 800792c:	080078c9 	.word	0x080078c9
 8007930:	080078c9 	.word	0x080078c9
 8007934:	08007a43 	.word	0x08007a43
 8007938:	680b      	ldr	r3, [r1, #0]
 800793a:	1d1a      	adds	r2, r3, #4
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	600a      	str	r2, [r1, #0]
 8007940:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007948:	2301      	movs	r3, #1
 800794a:	e0a3      	b.n	8007a94 <_printf_i+0x1f4>
 800794c:	6825      	ldr	r5, [r4, #0]
 800794e:	6808      	ldr	r0, [r1, #0]
 8007950:	062e      	lsls	r6, r5, #24
 8007952:	f100 0304 	add.w	r3, r0, #4
 8007956:	d50a      	bpl.n	800796e <_printf_i+0xce>
 8007958:	6805      	ldr	r5, [r0, #0]
 800795a:	600b      	str	r3, [r1, #0]
 800795c:	2d00      	cmp	r5, #0
 800795e:	da03      	bge.n	8007968 <_printf_i+0xc8>
 8007960:	232d      	movs	r3, #45	; 0x2d
 8007962:	426d      	negs	r5, r5
 8007964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007968:	485e      	ldr	r0, [pc, #376]	; (8007ae4 <_printf_i+0x244>)
 800796a:	230a      	movs	r3, #10
 800796c:	e019      	b.n	80079a2 <_printf_i+0x102>
 800796e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007972:	6805      	ldr	r5, [r0, #0]
 8007974:	600b      	str	r3, [r1, #0]
 8007976:	bf18      	it	ne
 8007978:	b22d      	sxthne	r5, r5
 800797a:	e7ef      	b.n	800795c <_printf_i+0xbc>
 800797c:	680b      	ldr	r3, [r1, #0]
 800797e:	6825      	ldr	r5, [r4, #0]
 8007980:	1d18      	adds	r0, r3, #4
 8007982:	6008      	str	r0, [r1, #0]
 8007984:	0628      	lsls	r0, r5, #24
 8007986:	d501      	bpl.n	800798c <_printf_i+0xec>
 8007988:	681d      	ldr	r5, [r3, #0]
 800798a:	e002      	b.n	8007992 <_printf_i+0xf2>
 800798c:	0669      	lsls	r1, r5, #25
 800798e:	d5fb      	bpl.n	8007988 <_printf_i+0xe8>
 8007990:	881d      	ldrh	r5, [r3, #0]
 8007992:	4854      	ldr	r0, [pc, #336]	; (8007ae4 <_printf_i+0x244>)
 8007994:	2f6f      	cmp	r7, #111	; 0x6f
 8007996:	bf0c      	ite	eq
 8007998:	2308      	moveq	r3, #8
 800799a:	230a      	movne	r3, #10
 800799c:	2100      	movs	r1, #0
 800799e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079a2:	6866      	ldr	r6, [r4, #4]
 80079a4:	60a6      	str	r6, [r4, #8]
 80079a6:	2e00      	cmp	r6, #0
 80079a8:	bfa2      	ittt	ge
 80079aa:	6821      	ldrge	r1, [r4, #0]
 80079ac:	f021 0104 	bicge.w	r1, r1, #4
 80079b0:	6021      	strge	r1, [r4, #0]
 80079b2:	b90d      	cbnz	r5, 80079b8 <_printf_i+0x118>
 80079b4:	2e00      	cmp	r6, #0
 80079b6:	d04d      	beq.n	8007a54 <_printf_i+0x1b4>
 80079b8:	4616      	mov	r6, r2
 80079ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80079be:	fb03 5711 	mls	r7, r3, r1, r5
 80079c2:	5dc7      	ldrb	r7, [r0, r7]
 80079c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80079c8:	462f      	mov	r7, r5
 80079ca:	42bb      	cmp	r3, r7
 80079cc:	460d      	mov	r5, r1
 80079ce:	d9f4      	bls.n	80079ba <_printf_i+0x11a>
 80079d0:	2b08      	cmp	r3, #8
 80079d2:	d10b      	bne.n	80079ec <_printf_i+0x14c>
 80079d4:	6823      	ldr	r3, [r4, #0]
 80079d6:	07df      	lsls	r7, r3, #31
 80079d8:	d508      	bpl.n	80079ec <_printf_i+0x14c>
 80079da:	6923      	ldr	r3, [r4, #16]
 80079dc:	6861      	ldr	r1, [r4, #4]
 80079de:	4299      	cmp	r1, r3
 80079e0:	bfde      	ittt	le
 80079e2:	2330      	movle	r3, #48	; 0x30
 80079e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80079e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80079ec:	1b92      	subs	r2, r2, r6
 80079ee:	6122      	str	r2, [r4, #16]
 80079f0:	f8cd a000 	str.w	sl, [sp]
 80079f4:	464b      	mov	r3, r9
 80079f6:	aa03      	add	r2, sp, #12
 80079f8:	4621      	mov	r1, r4
 80079fa:	4640      	mov	r0, r8
 80079fc:	f7ff fee2 	bl	80077c4 <_printf_common>
 8007a00:	3001      	adds	r0, #1
 8007a02:	d14c      	bne.n	8007a9e <_printf_i+0x1fe>
 8007a04:	f04f 30ff 	mov.w	r0, #4294967295
 8007a08:	b004      	add	sp, #16
 8007a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a0e:	4835      	ldr	r0, [pc, #212]	; (8007ae4 <_printf_i+0x244>)
 8007a10:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007a14:	6823      	ldr	r3, [r4, #0]
 8007a16:	680e      	ldr	r6, [r1, #0]
 8007a18:	061f      	lsls	r7, r3, #24
 8007a1a:	f856 5b04 	ldr.w	r5, [r6], #4
 8007a1e:	600e      	str	r6, [r1, #0]
 8007a20:	d514      	bpl.n	8007a4c <_printf_i+0x1ac>
 8007a22:	07d9      	lsls	r1, r3, #31
 8007a24:	bf44      	itt	mi
 8007a26:	f043 0320 	orrmi.w	r3, r3, #32
 8007a2a:	6023      	strmi	r3, [r4, #0]
 8007a2c:	b91d      	cbnz	r5, 8007a36 <_printf_i+0x196>
 8007a2e:	6823      	ldr	r3, [r4, #0]
 8007a30:	f023 0320 	bic.w	r3, r3, #32
 8007a34:	6023      	str	r3, [r4, #0]
 8007a36:	2310      	movs	r3, #16
 8007a38:	e7b0      	b.n	800799c <_printf_i+0xfc>
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	f043 0320 	orr.w	r3, r3, #32
 8007a40:	6023      	str	r3, [r4, #0]
 8007a42:	2378      	movs	r3, #120	; 0x78
 8007a44:	4828      	ldr	r0, [pc, #160]	; (8007ae8 <_printf_i+0x248>)
 8007a46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a4a:	e7e3      	b.n	8007a14 <_printf_i+0x174>
 8007a4c:	065e      	lsls	r6, r3, #25
 8007a4e:	bf48      	it	mi
 8007a50:	b2ad      	uxthmi	r5, r5
 8007a52:	e7e6      	b.n	8007a22 <_printf_i+0x182>
 8007a54:	4616      	mov	r6, r2
 8007a56:	e7bb      	b.n	80079d0 <_printf_i+0x130>
 8007a58:	680b      	ldr	r3, [r1, #0]
 8007a5a:	6826      	ldr	r6, [r4, #0]
 8007a5c:	6960      	ldr	r0, [r4, #20]
 8007a5e:	1d1d      	adds	r5, r3, #4
 8007a60:	600d      	str	r5, [r1, #0]
 8007a62:	0635      	lsls	r5, r6, #24
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	d501      	bpl.n	8007a6c <_printf_i+0x1cc>
 8007a68:	6018      	str	r0, [r3, #0]
 8007a6a:	e002      	b.n	8007a72 <_printf_i+0x1d2>
 8007a6c:	0671      	lsls	r1, r6, #25
 8007a6e:	d5fb      	bpl.n	8007a68 <_printf_i+0x1c8>
 8007a70:	8018      	strh	r0, [r3, #0]
 8007a72:	2300      	movs	r3, #0
 8007a74:	6123      	str	r3, [r4, #16]
 8007a76:	4616      	mov	r6, r2
 8007a78:	e7ba      	b.n	80079f0 <_printf_i+0x150>
 8007a7a:	680b      	ldr	r3, [r1, #0]
 8007a7c:	1d1a      	adds	r2, r3, #4
 8007a7e:	600a      	str	r2, [r1, #0]
 8007a80:	681e      	ldr	r6, [r3, #0]
 8007a82:	6862      	ldr	r2, [r4, #4]
 8007a84:	2100      	movs	r1, #0
 8007a86:	4630      	mov	r0, r6
 8007a88:	f7f8 fbaa 	bl	80001e0 <memchr>
 8007a8c:	b108      	cbz	r0, 8007a92 <_printf_i+0x1f2>
 8007a8e:	1b80      	subs	r0, r0, r6
 8007a90:	6060      	str	r0, [r4, #4]
 8007a92:	6863      	ldr	r3, [r4, #4]
 8007a94:	6123      	str	r3, [r4, #16]
 8007a96:	2300      	movs	r3, #0
 8007a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a9c:	e7a8      	b.n	80079f0 <_printf_i+0x150>
 8007a9e:	6923      	ldr	r3, [r4, #16]
 8007aa0:	4632      	mov	r2, r6
 8007aa2:	4649      	mov	r1, r9
 8007aa4:	4640      	mov	r0, r8
 8007aa6:	47d0      	blx	sl
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	d0ab      	beq.n	8007a04 <_printf_i+0x164>
 8007aac:	6823      	ldr	r3, [r4, #0]
 8007aae:	079b      	lsls	r3, r3, #30
 8007ab0:	d413      	bmi.n	8007ada <_printf_i+0x23a>
 8007ab2:	68e0      	ldr	r0, [r4, #12]
 8007ab4:	9b03      	ldr	r3, [sp, #12]
 8007ab6:	4298      	cmp	r0, r3
 8007ab8:	bfb8      	it	lt
 8007aba:	4618      	movlt	r0, r3
 8007abc:	e7a4      	b.n	8007a08 <_printf_i+0x168>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	4632      	mov	r2, r6
 8007ac2:	4649      	mov	r1, r9
 8007ac4:	4640      	mov	r0, r8
 8007ac6:	47d0      	blx	sl
 8007ac8:	3001      	adds	r0, #1
 8007aca:	d09b      	beq.n	8007a04 <_printf_i+0x164>
 8007acc:	3501      	adds	r5, #1
 8007ace:	68e3      	ldr	r3, [r4, #12]
 8007ad0:	9903      	ldr	r1, [sp, #12]
 8007ad2:	1a5b      	subs	r3, r3, r1
 8007ad4:	42ab      	cmp	r3, r5
 8007ad6:	dcf2      	bgt.n	8007abe <_printf_i+0x21e>
 8007ad8:	e7eb      	b.n	8007ab2 <_printf_i+0x212>
 8007ada:	2500      	movs	r5, #0
 8007adc:	f104 0619 	add.w	r6, r4, #25
 8007ae0:	e7f5      	b.n	8007ace <_printf_i+0x22e>
 8007ae2:	bf00      	nop
 8007ae4:	08008cd7 	.word	0x08008cd7
 8007ae8:	08008ce8 	.word	0x08008ce8

08007aec <_sbrk_r>:
 8007aec:	b538      	push	{r3, r4, r5, lr}
 8007aee:	4d06      	ldr	r5, [pc, #24]	; (8007b08 <_sbrk_r+0x1c>)
 8007af0:	2300      	movs	r3, #0
 8007af2:	4604      	mov	r4, r0
 8007af4:	4608      	mov	r0, r1
 8007af6:	602b      	str	r3, [r5, #0]
 8007af8:	f7fa feae 	bl	8002858 <_sbrk>
 8007afc:	1c43      	adds	r3, r0, #1
 8007afe:	d102      	bne.n	8007b06 <_sbrk_r+0x1a>
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	b103      	cbz	r3, 8007b06 <_sbrk_r+0x1a>
 8007b04:	6023      	str	r3, [r4, #0]
 8007b06:	bd38      	pop	{r3, r4, r5, pc}
 8007b08:	2000b050 	.word	0x2000b050

08007b0c <__swbuf_r>:
 8007b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0e:	460e      	mov	r6, r1
 8007b10:	4614      	mov	r4, r2
 8007b12:	4605      	mov	r5, r0
 8007b14:	b118      	cbz	r0, 8007b1e <__swbuf_r+0x12>
 8007b16:	6983      	ldr	r3, [r0, #24]
 8007b18:	b90b      	cbnz	r3, 8007b1e <__swbuf_r+0x12>
 8007b1a:	f000 f9d9 	bl	8007ed0 <__sinit>
 8007b1e:	4b21      	ldr	r3, [pc, #132]	; (8007ba4 <__swbuf_r+0x98>)
 8007b20:	429c      	cmp	r4, r3
 8007b22:	d12b      	bne.n	8007b7c <__swbuf_r+0x70>
 8007b24:	686c      	ldr	r4, [r5, #4]
 8007b26:	69a3      	ldr	r3, [r4, #24]
 8007b28:	60a3      	str	r3, [r4, #8]
 8007b2a:	89a3      	ldrh	r3, [r4, #12]
 8007b2c:	071a      	lsls	r2, r3, #28
 8007b2e:	d52f      	bpl.n	8007b90 <__swbuf_r+0x84>
 8007b30:	6923      	ldr	r3, [r4, #16]
 8007b32:	b36b      	cbz	r3, 8007b90 <__swbuf_r+0x84>
 8007b34:	6923      	ldr	r3, [r4, #16]
 8007b36:	6820      	ldr	r0, [r4, #0]
 8007b38:	1ac0      	subs	r0, r0, r3
 8007b3a:	6963      	ldr	r3, [r4, #20]
 8007b3c:	b2f6      	uxtb	r6, r6
 8007b3e:	4283      	cmp	r3, r0
 8007b40:	4637      	mov	r7, r6
 8007b42:	dc04      	bgt.n	8007b4e <__swbuf_r+0x42>
 8007b44:	4621      	mov	r1, r4
 8007b46:	4628      	mov	r0, r5
 8007b48:	f000 f92e 	bl	8007da8 <_fflush_r>
 8007b4c:	bb30      	cbnz	r0, 8007b9c <__swbuf_r+0x90>
 8007b4e:	68a3      	ldr	r3, [r4, #8]
 8007b50:	3b01      	subs	r3, #1
 8007b52:	60a3      	str	r3, [r4, #8]
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	1c5a      	adds	r2, r3, #1
 8007b58:	6022      	str	r2, [r4, #0]
 8007b5a:	701e      	strb	r6, [r3, #0]
 8007b5c:	6963      	ldr	r3, [r4, #20]
 8007b5e:	3001      	adds	r0, #1
 8007b60:	4283      	cmp	r3, r0
 8007b62:	d004      	beq.n	8007b6e <__swbuf_r+0x62>
 8007b64:	89a3      	ldrh	r3, [r4, #12]
 8007b66:	07db      	lsls	r3, r3, #31
 8007b68:	d506      	bpl.n	8007b78 <__swbuf_r+0x6c>
 8007b6a:	2e0a      	cmp	r6, #10
 8007b6c:	d104      	bne.n	8007b78 <__swbuf_r+0x6c>
 8007b6e:	4621      	mov	r1, r4
 8007b70:	4628      	mov	r0, r5
 8007b72:	f000 f919 	bl	8007da8 <_fflush_r>
 8007b76:	b988      	cbnz	r0, 8007b9c <__swbuf_r+0x90>
 8007b78:	4638      	mov	r0, r7
 8007b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b7c:	4b0a      	ldr	r3, [pc, #40]	; (8007ba8 <__swbuf_r+0x9c>)
 8007b7e:	429c      	cmp	r4, r3
 8007b80:	d101      	bne.n	8007b86 <__swbuf_r+0x7a>
 8007b82:	68ac      	ldr	r4, [r5, #8]
 8007b84:	e7cf      	b.n	8007b26 <__swbuf_r+0x1a>
 8007b86:	4b09      	ldr	r3, [pc, #36]	; (8007bac <__swbuf_r+0xa0>)
 8007b88:	429c      	cmp	r4, r3
 8007b8a:	bf08      	it	eq
 8007b8c:	68ec      	ldreq	r4, [r5, #12]
 8007b8e:	e7ca      	b.n	8007b26 <__swbuf_r+0x1a>
 8007b90:	4621      	mov	r1, r4
 8007b92:	4628      	mov	r0, r5
 8007b94:	f000 f80c 	bl	8007bb0 <__swsetup_r>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	d0cb      	beq.n	8007b34 <__swbuf_r+0x28>
 8007b9c:	f04f 37ff 	mov.w	r7, #4294967295
 8007ba0:	e7ea      	b.n	8007b78 <__swbuf_r+0x6c>
 8007ba2:	bf00      	nop
 8007ba4:	08008d1c 	.word	0x08008d1c
 8007ba8:	08008d3c 	.word	0x08008d3c
 8007bac:	08008cfc 	.word	0x08008cfc

08007bb0 <__swsetup_r>:
 8007bb0:	4b32      	ldr	r3, [pc, #200]	; (8007c7c <__swsetup_r+0xcc>)
 8007bb2:	b570      	push	{r4, r5, r6, lr}
 8007bb4:	681d      	ldr	r5, [r3, #0]
 8007bb6:	4606      	mov	r6, r0
 8007bb8:	460c      	mov	r4, r1
 8007bba:	b125      	cbz	r5, 8007bc6 <__swsetup_r+0x16>
 8007bbc:	69ab      	ldr	r3, [r5, #24]
 8007bbe:	b913      	cbnz	r3, 8007bc6 <__swsetup_r+0x16>
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	f000 f985 	bl	8007ed0 <__sinit>
 8007bc6:	4b2e      	ldr	r3, [pc, #184]	; (8007c80 <__swsetup_r+0xd0>)
 8007bc8:	429c      	cmp	r4, r3
 8007bca:	d10f      	bne.n	8007bec <__swsetup_r+0x3c>
 8007bcc:	686c      	ldr	r4, [r5, #4]
 8007bce:	89a3      	ldrh	r3, [r4, #12]
 8007bd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bd4:	0719      	lsls	r1, r3, #28
 8007bd6:	d42c      	bmi.n	8007c32 <__swsetup_r+0x82>
 8007bd8:	06dd      	lsls	r5, r3, #27
 8007bda:	d411      	bmi.n	8007c00 <__swsetup_r+0x50>
 8007bdc:	2309      	movs	r3, #9
 8007bde:	6033      	str	r3, [r6, #0]
 8007be0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007be4:	81a3      	strh	r3, [r4, #12]
 8007be6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bea:	e03e      	b.n	8007c6a <__swsetup_r+0xba>
 8007bec:	4b25      	ldr	r3, [pc, #148]	; (8007c84 <__swsetup_r+0xd4>)
 8007bee:	429c      	cmp	r4, r3
 8007bf0:	d101      	bne.n	8007bf6 <__swsetup_r+0x46>
 8007bf2:	68ac      	ldr	r4, [r5, #8]
 8007bf4:	e7eb      	b.n	8007bce <__swsetup_r+0x1e>
 8007bf6:	4b24      	ldr	r3, [pc, #144]	; (8007c88 <__swsetup_r+0xd8>)
 8007bf8:	429c      	cmp	r4, r3
 8007bfa:	bf08      	it	eq
 8007bfc:	68ec      	ldreq	r4, [r5, #12]
 8007bfe:	e7e6      	b.n	8007bce <__swsetup_r+0x1e>
 8007c00:	0758      	lsls	r0, r3, #29
 8007c02:	d512      	bpl.n	8007c2a <__swsetup_r+0x7a>
 8007c04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c06:	b141      	cbz	r1, 8007c1a <__swsetup_r+0x6a>
 8007c08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c0c:	4299      	cmp	r1, r3
 8007c0e:	d002      	beq.n	8007c16 <__swsetup_r+0x66>
 8007c10:	4630      	mov	r0, r6
 8007c12:	f7ff fa77 	bl	8007104 <_free_r>
 8007c16:	2300      	movs	r3, #0
 8007c18:	6363      	str	r3, [r4, #52]	; 0x34
 8007c1a:	89a3      	ldrh	r3, [r4, #12]
 8007c1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c20:	81a3      	strh	r3, [r4, #12]
 8007c22:	2300      	movs	r3, #0
 8007c24:	6063      	str	r3, [r4, #4]
 8007c26:	6923      	ldr	r3, [r4, #16]
 8007c28:	6023      	str	r3, [r4, #0]
 8007c2a:	89a3      	ldrh	r3, [r4, #12]
 8007c2c:	f043 0308 	orr.w	r3, r3, #8
 8007c30:	81a3      	strh	r3, [r4, #12]
 8007c32:	6923      	ldr	r3, [r4, #16]
 8007c34:	b94b      	cbnz	r3, 8007c4a <__swsetup_r+0x9a>
 8007c36:	89a3      	ldrh	r3, [r4, #12]
 8007c38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c40:	d003      	beq.n	8007c4a <__swsetup_r+0x9a>
 8007c42:	4621      	mov	r1, r4
 8007c44:	4630      	mov	r0, r6
 8007c46:	f000 fa07 	bl	8008058 <__smakebuf_r>
 8007c4a:	89a0      	ldrh	r0, [r4, #12]
 8007c4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c50:	f010 0301 	ands.w	r3, r0, #1
 8007c54:	d00a      	beq.n	8007c6c <__swsetup_r+0xbc>
 8007c56:	2300      	movs	r3, #0
 8007c58:	60a3      	str	r3, [r4, #8]
 8007c5a:	6963      	ldr	r3, [r4, #20]
 8007c5c:	425b      	negs	r3, r3
 8007c5e:	61a3      	str	r3, [r4, #24]
 8007c60:	6923      	ldr	r3, [r4, #16]
 8007c62:	b943      	cbnz	r3, 8007c76 <__swsetup_r+0xc6>
 8007c64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c68:	d1ba      	bne.n	8007be0 <__swsetup_r+0x30>
 8007c6a:	bd70      	pop	{r4, r5, r6, pc}
 8007c6c:	0781      	lsls	r1, r0, #30
 8007c6e:	bf58      	it	pl
 8007c70:	6963      	ldrpl	r3, [r4, #20]
 8007c72:	60a3      	str	r3, [r4, #8]
 8007c74:	e7f4      	b.n	8007c60 <__swsetup_r+0xb0>
 8007c76:	2000      	movs	r0, #0
 8007c78:	e7f7      	b.n	8007c6a <__swsetup_r+0xba>
 8007c7a:	bf00      	nop
 8007c7c:	20000014 	.word	0x20000014
 8007c80:	08008d1c 	.word	0x08008d1c
 8007c84:	08008d3c 	.word	0x08008d3c
 8007c88:	08008cfc 	.word	0x08008cfc

08007c8c <abort>:
 8007c8c:	b508      	push	{r3, lr}
 8007c8e:	2006      	movs	r0, #6
 8007c90:	f000 faa4 	bl	80081dc <raise>
 8007c94:	2001      	movs	r0, #1
 8007c96:	f7fa fd67 	bl	8002768 <_exit>
	...

08007c9c <__sflush_r>:
 8007c9c:	898a      	ldrh	r2, [r1, #12]
 8007c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca2:	4605      	mov	r5, r0
 8007ca4:	0710      	lsls	r0, r2, #28
 8007ca6:	460c      	mov	r4, r1
 8007ca8:	d458      	bmi.n	8007d5c <__sflush_r+0xc0>
 8007caa:	684b      	ldr	r3, [r1, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	dc05      	bgt.n	8007cbc <__sflush_r+0x20>
 8007cb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	dc02      	bgt.n	8007cbc <__sflush_r+0x20>
 8007cb6:	2000      	movs	r0, #0
 8007cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cbe:	2e00      	cmp	r6, #0
 8007cc0:	d0f9      	beq.n	8007cb6 <__sflush_r+0x1a>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007cc8:	682f      	ldr	r7, [r5, #0]
 8007cca:	602b      	str	r3, [r5, #0]
 8007ccc:	d032      	beq.n	8007d34 <__sflush_r+0x98>
 8007cce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007cd0:	89a3      	ldrh	r3, [r4, #12]
 8007cd2:	075a      	lsls	r2, r3, #29
 8007cd4:	d505      	bpl.n	8007ce2 <__sflush_r+0x46>
 8007cd6:	6863      	ldr	r3, [r4, #4]
 8007cd8:	1ac0      	subs	r0, r0, r3
 8007cda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cdc:	b10b      	cbz	r3, 8007ce2 <__sflush_r+0x46>
 8007cde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ce0:	1ac0      	subs	r0, r0, r3
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ce8:	6a21      	ldr	r1, [r4, #32]
 8007cea:	4628      	mov	r0, r5
 8007cec:	47b0      	blx	r6
 8007cee:	1c43      	adds	r3, r0, #1
 8007cf0:	89a3      	ldrh	r3, [r4, #12]
 8007cf2:	d106      	bne.n	8007d02 <__sflush_r+0x66>
 8007cf4:	6829      	ldr	r1, [r5, #0]
 8007cf6:	291d      	cmp	r1, #29
 8007cf8:	d82c      	bhi.n	8007d54 <__sflush_r+0xb8>
 8007cfa:	4a2a      	ldr	r2, [pc, #168]	; (8007da4 <__sflush_r+0x108>)
 8007cfc:	40ca      	lsrs	r2, r1
 8007cfe:	07d6      	lsls	r6, r2, #31
 8007d00:	d528      	bpl.n	8007d54 <__sflush_r+0xb8>
 8007d02:	2200      	movs	r2, #0
 8007d04:	6062      	str	r2, [r4, #4]
 8007d06:	04d9      	lsls	r1, r3, #19
 8007d08:	6922      	ldr	r2, [r4, #16]
 8007d0a:	6022      	str	r2, [r4, #0]
 8007d0c:	d504      	bpl.n	8007d18 <__sflush_r+0x7c>
 8007d0e:	1c42      	adds	r2, r0, #1
 8007d10:	d101      	bne.n	8007d16 <__sflush_r+0x7a>
 8007d12:	682b      	ldr	r3, [r5, #0]
 8007d14:	b903      	cbnz	r3, 8007d18 <__sflush_r+0x7c>
 8007d16:	6560      	str	r0, [r4, #84]	; 0x54
 8007d18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d1a:	602f      	str	r7, [r5, #0]
 8007d1c:	2900      	cmp	r1, #0
 8007d1e:	d0ca      	beq.n	8007cb6 <__sflush_r+0x1a>
 8007d20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d24:	4299      	cmp	r1, r3
 8007d26:	d002      	beq.n	8007d2e <__sflush_r+0x92>
 8007d28:	4628      	mov	r0, r5
 8007d2a:	f7ff f9eb 	bl	8007104 <_free_r>
 8007d2e:	2000      	movs	r0, #0
 8007d30:	6360      	str	r0, [r4, #52]	; 0x34
 8007d32:	e7c1      	b.n	8007cb8 <__sflush_r+0x1c>
 8007d34:	6a21      	ldr	r1, [r4, #32]
 8007d36:	2301      	movs	r3, #1
 8007d38:	4628      	mov	r0, r5
 8007d3a:	47b0      	blx	r6
 8007d3c:	1c41      	adds	r1, r0, #1
 8007d3e:	d1c7      	bne.n	8007cd0 <__sflush_r+0x34>
 8007d40:	682b      	ldr	r3, [r5, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d0c4      	beq.n	8007cd0 <__sflush_r+0x34>
 8007d46:	2b1d      	cmp	r3, #29
 8007d48:	d001      	beq.n	8007d4e <__sflush_r+0xb2>
 8007d4a:	2b16      	cmp	r3, #22
 8007d4c:	d101      	bne.n	8007d52 <__sflush_r+0xb6>
 8007d4e:	602f      	str	r7, [r5, #0]
 8007d50:	e7b1      	b.n	8007cb6 <__sflush_r+0x1a>
 8007d52:	89a3      	ldrh	r3, [r4, #12]
 8007d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d58:	81a3      	strh	r3, [r4, #12]
 8007d5a:	e7ad      	b.n	8007cb8 <__sflush_r+0x1c>
 8007d5c:	690f      	ldr	r7, [r1, #16]
 8007d5e:	2f00      	cmp	r7, #0
 8007d60:	d0a9      	beq.n	8007cb6 <__sflush_r+0x1a>
 8007d62:	0793      	lsls	r3, r2, #30
 8007d64:	680e      	ldr	r6, [r1, #0]
 8007d66:	bf08      	it	eq
 8007d68:	694b      	ldreq	r3, [r1, #20]
 8007d6a:	600f      	str	r7, [r1, #0]
 8007d6c:	bf18      	it	ne
 8007d6e:	2300      	movne	r3, #0
 8007d70:	eba6 0807 	sub.w	r8, r6, r7
 8007d74:	608b      	str	r3, [r1, #8]
 8007d76:	f1b8 0f00 	cmp.w	r8, #0
 8007d7a:	dd9c      	ble.n	8007cb6 <__sflush_r+0x1a>
 8007d7c:	6a21      	ldr	r1, [r4, #32]
 8007d7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d80:	4643      	mov	r3, r8
 8007d82:	463a      	mov	r2, r7
 8007d84:	4628      	mov	r0, r5
 8007d86:	47b0      	blx	r6
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	dc06      	bgt.n	8007d9a <__sflush_r+0xfe>
 8007d8c:	89a3      	ldrh	r3, [r4, #12]
 8007d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d92:	81a3      	strh	r3, [r4, #12]
 8007d94:	f04f 30ff 	mov.w	r0, #4294967295
 8007d98:	e78e      	b.n	8007cb8 <__sflush_r+0x1c>
 8007d9a:	4407      	add	r7, r0
 8007d9c:	eba8 0800 	sub.w	r8, r8, r0
 8007da0:	e7e9      	b.n	8007d76 <__sflush_r+0xda>
 8007da2:	bf00      	nop
 8007da4:	20400001 	.word	0x20400001

08007da8 <_fflush_r>:
 8007da8:	b538      	push	{r3, r4, r5, lr}
 8007daa:	690b      	ldr	r3, [r1, #16]
 8007dac:	4605      	mov	r5, r0
 8007dae:	460c      	mov	r4, r1
 8007db0:	b913      	cbnz	r3, 8007db8 <_fflush_r+0x10>
 8007db2:	2500      	movs	r5, #0
 8007db4:	4628      	mov	r0, r5
 8007db6:	bd38      	pop	{r3, r4, r5, pc}
 8007db8:	b118      	cbz	r0, 8007dc2 <_fflush_r+0x1a>
 8007dba:	6983      	ldr	r3, [r0, #24]
 8007dbc:	b90b      	cbnz	r3, 8007dc2 <_fflush_r+0x1a>
 8007dbe:	f000 f887 	bl	8007ed0 <__sinit>
 8007dc2:	4b14      	ldr	r3, [pc, #80]	; (8007e14 <_fflush_r+0x6c>)
 8007dc4:	429c      	cmp	r4, r3
 8007dc6:	d11b      	bne.n	8007e00 <_fflush_r+0x58>
 8007dc8:	686c      	ldr	r4, [r5, #4]
 8007dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d0ef      	beq.n	8007db2 <_fflush_r+0xa>
 8007dd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007dd4:	07d0      	lsls	r0, r2, #31
 8007dd6:	d404      	bmi.n	8007de2 <_fflush_r+0x3a>
 8007dd8:	0599      	lsls	r1, r3, #22
 8007dda:	d402      	bmi.n	8007de2 <_fflush_r+0x3a>
 8007ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dde:	f000 f915 	bl	800800c <__retarget_lock_acquire_recursive>
 8007de2:	4628      	mov	r0, r5
 8007de4:	4621      	mov	r1, r4
 8007de6:	f7ff ff59 	bl	8007c9c <__sflush_r>
 8007dea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dec:	07da      	lsls	r2, r3, #31
 8007dee:	4605      	mov	r5, r0
 8007df0:	d4e0      	bmi.n	8007db4 <_fflush_r+0xc>
 8007df2:	89a3      	ldrh	r3, [r4, #12]
 8007df4:	059b      	lsls	r3, r3, #22
 8007df6:	d4dd      	bmi.n	8007db4 <_fflush_r+0xc>
 8007df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dfa:	f000 f908 	bl	800800e <__retarget_lock_release_recursive>
 8007dfe:	e7d9      	b.n	8007db4 <_fflush_r+0xc>
 8007e00:	4b05      	ldr	r3, [pc, #20]	; (8007e18 <_fflush_r+0x70>)
 8007e02:	429c      	cmp	r4, r3
 8007e04:	d101      	bne.n	8007e0a <_fflush_r+0x62>
 8007e06:	68ac      	ldr	r4, [r5, #8]
 8007e08:	e7df      	b.n	8007dca <_fflush_r+0x22>
 8007e0a:	4b04      	ldr	r3, [pc, #16]	; (8007e1c <_fflush_r+0x74>)
 8007e0c:	429c      	cmp	r4, r3
 8007e0e:	bf08      	it	eq
 8007e10:	68ec      	ldreq	r4, [r5, #12]
 8007e12:	e7da      	b.n	8007dca <_fflush_r+0x22>
 8007e14:	08008d1c 	.word	0x08008d1c
 8007e18:	08008d3c 	.word	0x08008d3c
 8007e1c:	08008cfc 	.word	0x08008cfc

08007e20 <std>:
 8007e20:	2300      	movs	r3, #0
 8007e22:	b510      	push	{r4, lr}
 8007e24:	4604      	mov	r4, r0
 8007e26:	e9c0 3300 	strd	r3, r3, [r0]
 8007e2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e2e:	6083      	str	r3, [r0, #8]
 8007e30:	8181      	strh	r1, [r0, #12]
 8007e32:	6643      	str	r3, [r0, #100]	; 0x64
 8007e34:	81c2      	strh	r2, [r0, #14]
 8007e36:	6183      	str	r3, [r0, #24]
 8007e38:	4619      	mov	r1, r3
 8007e3a:	2208      	movs	r2, #8
 8007e3c:	305c      	adds	r0, #92	; 0x5c
 8007e3e:	f7ff f8b1 	bl	8006fa4 <memset>
 8007e42:	4b05      	ldr	r3, [pc, #20]	; (8007e58 <std+0x38>)
 8007e44:	6263      	str	r3, [r4, #36]	; 0x24
 8007e46:	4b05      	ldr	r3, [pc, #20]	; (8007e5c <std+0x3c>)
 8007e48:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e4a:	4b05      	ldr	r3, [pc, #20]	; (8007e60 <std+0x40>)
 8007e4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e4e:	4b05      	ldr	r3, [pc, #20]	; (8007e64 <std+0x44>)
 8007e50:	6224      	str	r4, [r4, #32]
 8007e52:	6323      	str	r3, [r4, #48]	; 0x30
 8007e54:	bd10      	pop	{r4, pc}
 8007e56:	bf00      	nop
 8007e58:	08008215 	.word	0x08008215
 8007e5c:	08008237 	.word	0x08008237
 8007e60:	0800826f 	.word	0x0800826f
 8007e64:	08008293 	.word	0x08008293

08007e68 <_cleanup_r>:
 8007e68:	4901      	ldr	r1, [pc, #4]	; (8007e70 <_cleanup_r+0x8>)
 8007e6a:	f000 b8af 	b.w	8007fcc <_fwalk_reent>
 8007e6e:	bf00      	nop
 8007e70:	08007da9 	.word	0x08007da9

08007e74 <__sfmoreglue>:
 8007e74:	b570      	push	{r4, r5, r6, lr}
 8007e76:	1e4a      	subs	r2, r1, #1
 8007e78:	2568      	movs	r5, #104	; 0x68
 8007e7a:	4355      	muls	r5, r2
 8007e7c:	460e      	mov	r6, r1
 8007e7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e82:	f7ff f98f 	bl	80071a4 <_malloc_r>
 8007e86:	4604      	mov	r4, r0
 8007e88:	b140      	cbz	r0, 8007e9c <__sfmoreglue+0x28>
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	e9c0 1600 	strd	r1, r6, [r0]
 8007e90:	300c      	adds	r0, #12
 8007e92:	60a0      	str	r0, [r4, #8]
 8007e94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e98:	f7ff f884 	bl	8006fa4 <memset>
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	bd70      	pop	{r4, r5, r6, pc}

08007ea0 <__sfp_lock_acquire>:
 8007ea0:	4801      	ldr	r0, [pc, #4]	; (8007ea8 <__sfp_lock_acquire+0x8>)
 8007ea2:	f000 b8b3 	b.w	800800c <__retarget_lock_acquire_recursive>
 8007ea6:	bf00      	nop
 8007ea8:	2000b04c 	.word	0x2000b04c

08007eac <__sfp_lock_release>:
 8007eac:	4801      	ldr	r0, [pc, #4]	; (8007eb4 <__sfp_lock_release+0x8>)
 8007eae:	f000 b8ae 	b.w	800800e <__retarget_lock_release_recursive>
 8007eb2:	bf00      	nop
 8007eb4:	2000b04c 	.word	0x2000b04c

08007eb8 <__sinit_lock_acquire>:
 8007eb8:	4801      	ldr	r0, [pc, #4]	; (8007ec0 <__sinit_lock_acquire+0x8>)
 8007eba:	f000 b8a7 	b.w	800800c <__retarget_lock_acquire_recursive>
 8007ebe:	bf00      	nop
 8007ec0:	2000b047 	.word	0x2000b047

08007ec4 <__sinit_lock_release>:
 8007ec4:	4801      	ldr	r0, [pc, #4]	; (8007ecc <__sinit_lock_release+0x8>)
 8007ec6:	f000 b8a2 	b.w	800800e <__retarget_lock_release_recursive>
 8007eca:	bf00      	nop
 8007ecc:	2000b047 	.word	0x2000b047

08007ed0 <__sinit>:
 8007ed0:	b510      	push	{r4, lr}
 8007ed2:	4604      	mov	r4, r0
 8007ed4:	f7ff fff0 	bl	8007eb8 <__sinit_lock_acquire>
 8007ed8:	69a3      	ldr	r3, [r4, #24]
 8007eda:	b11b      	cbz	r3, 8007ee4 <__sinit+0x14>
 8007edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ee0:	f7ff bff0 	b.w	8007ec4 <__sinit_lock_release>
 8007ee4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ee8:	6523      	str	r3, [r4, #80]	; 0x50
 8007eea:	4b13      	ldr	r3, [pc, #76]	; (8007f38 <__sinit+0x68>)
 8007eec:	4a13      	ldr	r2, [pc, #76]	; (8007f3c <__sinit+0x6c>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	62a2      	str	r2, [r4, #40]	; 0x28
 8007ef2:	42a3      	cmp	r3, r4
 8007ef4:	bf04      	itt	eq
 8007ef6:	2301      	moveq	r3, #1
 8007ef8:	61a3      	streq	r3, [r4, #24]
 8007efa:	4620      	mov	r0, r4
 8007efc:	f000 f820 	bl	8007f40 <__sfp>
 8007f00:	6060      	str	r0, [r4, #4]
 8007f02:	4620      	mov	r0, r4
 8007f04:	f000 f81c 	bl	8007f40 <__sfp>
 8007f08:	60a0      	str	r0, [r4, #8]
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f000 f818 	bl	8007f40 <__sfp>
 8007f10:	2200      	movs	r2, #0
 8007f12:	60e0      	str	r0, [r4, #12]
 8007f14:	2104      	movs	r1, #4
 8007f16:	6860      	ldr	r0, [r4, #4]
 8007f18:	f7ff ff82 	bl	8007e20 <std>
 8007f1c:	68a0      	ldr	r0, [r4, #8]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	2109      	movs	r1, #9
 8007f22:	f7ff ff7d 	bl	8007e20 <std>
 8007f26:	68e0      	ldr	r0, [r4, #12]
 8007f28:	2202      	movs	r2, #2
 8007f2a:	2112      	movs	r1, #18
 8007f2c:	f7ff ff78 	bl	8007e20 <std>
 8007f30:	2301      	movs	r3, #1
 8007f32:	61a3      	str	r3, [r4, #24]
 8007f34:	e7d2      	b.n	8007edc <__sinit+0xc>
 8007f36:	bf00      	nop
 8007f38:	08008c10 	.word	0x08008c10
 8007f3c:	08007e69 	.word	0x08007e69

08007f40 <__sfp>:
 8007f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f42:	4607      	mov	r7, r0
 8007f44:	f7ff ffac 	bl	8007ea0 <__sfp_lock_acquire>
 8007f48:	4b1e      	ldr	r3, [pc, #120]	; (8007fc4 <__sfp+0x84>)
 8007f4a:	681e      	ldr	r6, [r3, #0]
 8007f4c:	69b3      	ldr	r3, [r6, #24]
 8007f4e:	b913      	cbnz	r3, 8007f56 <__sfp+0x16>
 8007f50:	4630      	mov	r0, r6
 8007f52:	f7ff ffbd 	bl	8007ed0 <__sinit>
 8007f56:	3648      	adds	r6, #72	; 0x48
 8007f58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	d503      	bpl.n	8007f68 <__sfp+0x28>
 8007f60:	6833      	ldr	r3, [r6, #0]
 8007f62:	b30b      	cbz	r3, 8007fa8 <__sfp+0x68>
 8007f64:	6836      	ldr	r6, [r6, #0]
 8007f66:	e7f7      	b.n	8007f58 <__sfp+0x18>
 8007f68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f6c:	b9d5      	cbnz	r5, 8007fa4 <__sfp+0x64>
 8007f6e:	4b16      	ldr	r3, [pc, #88]	; (8007fc8 <__sfp+0x88>)
 8007f70:	60e3      	str	r3, [r4, #12]
 8007f72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f76:	6665      	str	r5, [r4, #100]	; 0x64
 8007f78:	f000 f847 	bl	800800a <__retarget_lock_init_recursive>
 8007f7c:	f7ff ff96 	bl	8007eac <__sfp_lock_release>
 8007f80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f88:	6025      	str	r5, [r4, #0]
 8007f8a:	61a5      	str	r5, [r4, #24]
 8007f8c:	2208      	movs	r2, #8
 8007f8e:	4629      	mov	r1, r5
 8007f90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f94:	f7ff f806 	bl	8006fa4 <memset>
 8007f98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fa4:	3468      	adds	r4, #104	; 0x68
 8007fa6:	e7d9      	b.n	8007f5c <__sfp+0x1c>
 8007fa8:	2104      	movs	r1, #4
 8007faa:	4638      	mov	r0, r7
 8007fac:	f7ff ff62 	bl	8007e74 <__sfmoreglue>
 8007fb0:	4604      	mov	r4, r0
 8007fb2:	6030      	str	r0, [r6, #0]
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	d1d5      	bne.n	8007f64 <__sfp+0x24>
 8007fb8:	f7ff ff78 	bl	8007eac <__sfp_lock_release>
 8007fbc:	230c      	movs	r3, #12
 8007fbe:	603b      	str	r3, [r7, #0]
 8007fc0:	e7ee      	b.n	8007fa0 <__sfp+0x60>
 8007fc2:	bf00      	nop
 8007fc4:	08008c10 	.word	0x08008c10
 8007fc8:	ffff0001 	.word	0xffff0001

08007fcc <_fwalk_reent>:
 8007fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fd0:	4606      	mov	r6, r0
 8007fd2:	4688      	mov	r8, r1
 8007fd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007fd8:	2700      	movs	r7, #0
 8007fda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fde:	f1b9 0901 	subs.w	r9, r9, #1
 8007fe2:	d505      	bpl.n	8007ff0 <_fwalk_reent+0x24>
 8007fe4:	6824      	ldr	r4, [r4, #0]
 8007fe6:	2c00      	cmp	r4, #0
 8007fe8:	d1f7      	bne.n	8007fda <_fwalk_reent+0xe>
 8007fea:	4638      	mov	r0, r7
 8007fec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ff0:	89ab      	ldrh	r3, [r5, #12]
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d907      	bls.n	8008006 <_fwalk_reent+0x3a>
 8007ff6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	d003      	beq.n	8008006 <_fwalk_reent+0x3a>
 8007ffe:	4629      	mov	r1, r5
 8008000:	4630      	mov	r0, r6
 8008002:	47c0      	blx	r8
 8008004:	4307      	orrs	r7, r0
 8008006:	3568      	adds	r5, #104	; 0x68
 8008008:	e7e9      	b.n	8007fde <_fwalk_reent+0x12>

0800800a <__retarget_lock_init_recursive>:
 800800a:	4770      	bx	lr

0800800c <__retarget_lock_acquire_recursive>:
 800800c:	4770      	bx	lr

0800800e <__retarget_lock_release_recursive>:
 800800e:	4770      	bx	lr

08008010 <__swhatbuf_r>:
 8008010:	b570      	push	{r4, r5, r6, lr}
 8008012:	460e      	mov	r6, r1
 8008014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008018:	2900      	cmp	r1, #0
 800801a:	b096      	sub	sp, #88	; 0x58
 800801c:	4614      	mov	r4, r2
 800801e:	461d      	mov	r5, r3
 8008020:	da07      	bge.n	8008032 <__swhatbuf_r+0x22>
 8008022:	2300      	movs	r3, #0
 8008024:	602b      	str	r3, [r5, #0]
 8008026:	89b3      	ldrh	r3, [r6, #12]
 8008028:	061a      	lsls	r2, r3, #24
 800802a:	d410      	bmi.n	800804e <__swhatbuf_r+0x3e>
 800802c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008030:	e00e      	b.n	8008050 <__swhatbuf_r+0x40>
 8008032:	466a      	mov	r2, sp
 8008034:	f000 f954 	bl	80082e0 <_fstat_r>
 8008038:	2800      	cmp	r0, #0
 800803a:	dbf2      	blt.n	8008022 <__swhatbuf_r+0x12>
 800803c:	9a01      	ldr	r2, [sp, #4]
 800803e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008042:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008046:	425a      	negs	r2, r3
 8008048:	415a      	adcs	r2, r3
 800804a:	602a      	str	r2, [r5, #0]
 800804c:	e7ee      	b.n	800802c <__swhatbuf_r+0x1c>
 800804e:	2340      	movs	r3, #64	; 0x40
 8008050:	2000      	movs	r0, #0
 8008052:	6023      	str	r3, [r4, #0]
 8008054:	b016      	add	sp, #88	; 0x58
 8008056:	bd70      	pop	{r4, r5, r6, pc}

08008058 <__smakebuf_r>:
 8008058:	898b      	ldrh	r3, [r1, #12]
 800805a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800805c:	079d      	lsls	r5, r3, #30
 800805e:	4606      	mov	r6, r0
 8008060:	460c      	mov	r4, r1
 8008062:	d507      	bpl.n	8008074 <__smakebuf_r+0x1c>
 8008064:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008068:	6023      	str	r3, [r4, #0]
 800806a:	6123      	str	r3, [r4, #16]
 800806c:	2301      	movs	r3, #1
 800806e:	6163      	str	r3, [r4, #20]
 8008070:	b002      	add	sp, #8
 8008072:	bd70      	pop	{r4, r5, r6, pc}
 8008074:	ab01      	add	r3, sp, #4
 8008076:	466a      	mov	r2, sp
 8008078:	f7ff ffca 	bl	8008010 <__swhatbuf_r>
 800807c:	9900      	ldr	r1, [sp, #0]
 800807e:	4605      	mov	r5, r0
 8008080:	4630      	mov	r0, r6
 8008082:	f7ff f88f 	bl	80071a4 <_malloc_r>
 8008086:	b948      	cbnz	r0, 800809c <__smakebuf_r+0x44>
 8008088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800808c:	059a      	lsls	r2, r3, #22
 800808e:	d4ef      	bmi.n	8008070 <__smakebuf_r+0x18>
 8008090:	f023 0303 	bic.w	r3, r3, #3
 8008094:	f043 0302 	orr.w	r3, r3, #2
 8008098:	81a3      	strh	r3, [r4, #12]
 800809a:	e7e3      	b.n	8008064 <__smakebuf_r+0xc>
 800809c:	4b0d      	ldr	r3, [pc, #52]	; (80080d4 <__smakebuf_r+0x7c>)
 800809e:	62b3      	str	r3, [r6, #40]	; 0x28
 80080a0:	89a3      	ldrh	r3, [r4, #12]
 80080a2:	6020      	str	r0, [r4, #0]
 80080a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a8:	81a3      	strh	r3, [r4, #12]
 80080aa:	9b00      	ldr	r3, [sp, #0]
 80080ac:	6163      	str	r3, [r4, #20]
 80080ae:	9b01      	ldr	r3, [sp, #4]
 80080b0:	6120      	str	r0, [r4, #16]
 80080b2:	b15b      	cbz	r3, 80080cc <__smakebuf_r+0x74>
 80080b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080b8:	4630      	mov	r0, r6
 80080ba:	f000 f923 	bl	8008304 <_isatty_r>
 80080be:	b128      	cbz	r0, 80080cc <__smakebuf_r+0x74>
 80080c0:	89a3      	ldrh	r3, [r4, #12]
 80080c2:	f023 0303 	bic.w	r3, r3, #3
 80080c6:	f043 0301 	orr.w	r3, r3, #1
 80080ca:	81a3      	strh	r3, [r4, #12]
 80080cc:	89a0      	ldrh	r0, [r4, #12]
 80080ce:	4305      	orrs	r5, r0
 80080d0:	81a5      	strh	r5, [r4, #12]
 80080d2:	e7cd      	b.n	8008070 <__smakebuf_r+0x18>
 80080d4:	08007e69 	.word	0x08007e69

080080d8 <memcpy>:
 80080d8:	440a      	add	r2, r1
 80080da:	4291      	cmp	r1, r2
 80080dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80080e0:	d100      	bne.n	80080e4 <memcpy+0xc>
 80080e2:	4770      	bx	lr
 80080e4:	b510      	push	{r4, lr}
 80080e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080ee:	4291      	cmp	r1, r2
 80080f0:	d1f9      	bne.n	80080e6 <memcpy+0xe>
 80080f2:	bd10      	pop	{r4, pc}

080080f4 <memmove>:
 80080f4:	4288      	cmp	r0, r1
 80080f6:	b510      	push	{r4, lr}
 80080f8:	eb01 0402 	add.w	r4, r1, r2
 80080fc:	d902      	bls.n	8008104 <memmove+0x10>
 80080fe:	4284      	cmp	r4, r0
 8008100:	4623      	mov	r3, r4
 8008102:	d807      	bhi.n	8008114 <memmove+0x20>
 8008104:	1e43      	subs	r3, r0, #1
 8008106:	42a1      	cmp	r1, r4
 8008108:	d008      	beq.n	800811c <memmove+0x28>
 800810a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800810e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008112:	e7f8      	b.n	8008106 <memmove+0x12>
 8008114:	4402      	add	r2, r0
 8008116:	4601      	mov	r1, r0
 8008118:	428a      	cmp	r2, r1
 800811a:	d100      	bne.n	800811e <memmove+0x2a>
 800811c:	bd10      	pop	{r4, pc}
 800811e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008122:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008126:	e7f7      	b.n	8008118 <memmove+0x24>

08008128 <__malloc_lock>:
 8008128:	4801      	ldr	r0, [pc, #4]	; (8008130 <__malloc_lock+0x8>)
 800812a:	f7ff bf6f 	b.w	800800c <__retarget_lock_acquire_recursive>
 800812e:	bf00      	nop
 8008130:	2000b048 	.word	0x2000b048

08008134 <__malloc_unlock>:
 8008134:	4801      	ldr	r0, [pc, #4]	; (800813c <__malloc_unlock+0x8>)
 8008136:	f7ff bf6a 	b.w	800800e <__retarget_lock_release_recursive>
 800813a:	bf00      	nop
 800813c:	2000b048 	.word	0x2000b048

08008140 <_realloc_r>:
 8008140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008142:	4607      	mov	r7, r0
 8008144:	4614      	mov	r4, r2
 8008146:	460e      	mov	r6, r1
 8008148:	b921      	cbnz	r1, 8008154 <_realloc_r+0x14>
 800814a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800814e:	4611      	mov	r1, r2
 8008150:	f7ff b828 	b.w	80071a4 <_malloc_r>
 8008154:	b922      	cbnz	r2, 8008160 <_realloc_r+0x20>
 8008156:	f7fe ffd5 	bl	8007104 <_free_r>
 800815a:	4625      	mov	r5, r4
 800815c:	4628      	mov	r0, r5
 800815e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008160:	f000 f8f2 	bl	8008348 <_malloc_usable_size_r>
 8008164:	42a0      	cmp	r0, r4
 8008166:	d20f      	bcs.n	8008188 <_realloc_r+0x48>
 8008168:	4621      	mov	r1, r4
 800816a:	4638      	mov	r0, r7
 800816c:	f7ff f81a 	bl	80071a4 <_malloc_r>
 8008170:	4605      	mov	r5, r0
 8008172:	2800      	cmp	r0, #0
 8008174:	d0f2      	beq.n	800815c <_realloc_r+0x1c>
 8008176:	4631      	mov	r1, r6
 8008178:	4622      	mov	r2, r4
 800817a:	f7ff ffad 	bl	80080d8 <memcpy>
 800817e:	4631      	mov	r1, r6
 8008180:	4638      	mov	r0, r7
 8008182:	f7fe ffbf 	bl	8007104 <_free_r>
 8008186:	e7e9      	b.n	800815c <_realloc_r+0x1c>
 8008188:	4635      	mov	r5, r6
 800818a:	e7e7      	b.n	800815c <_realloc_r+0x1c>

0800818c <_raise_r>:
 800818c:	291f      	cmp	r1, #31
 800818e:	b538      	push	{r3, r4, r5, lr}
 8008190:	4604      	mov	r4, r0
 8008192:	460d      	mov	r5, r1
 8008194:	d904      	bls.n	80081a0 <_raise_r+0x14>
 8008196:	2316      	movs	r3, #22
 8008198:	6003      	str	r3, [r0, #0]
 800819a:	f04f 30ff 	mov.w	r0, #4294967295
 800819e:	bd38      	pop	{r3, r4, r5, pc}
 80081a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80081a2:	b112      	cbz	r2, 80081aa <_raise_r+0x1e>
 80081a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081a8:	b94b      	cbnz	r3, 80081be <_raise_r+0x32>
 80081aa:	4620      	mov	r0, r4
 80081ac:	f000 f830 	bl	8008210 <_getpid_r>
 80081b0:	462a      	mov	r2, r5
 80081b2:	4601      	mov	r1, r0
 80081b4:	4620      	mov	r0, r4
 80081b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081ba:	f000 b817 	b.w	80081ec <_kill_r>
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d00a      	beq.n	80081d8 <_raise_r+0x4c>
 80081c2:	1c59      	adds	r1, r3, #1
 80081c4:	d103      	bne.n	80081ce <_raise_r+0x42>
 80081c6:	2316      	movs	r3, #22
 80081c8:	6003      	str	r3, [r0, #0]
 80081ca:	2001      	movs	r0, #1
 80081cc:	e7e7      	b.n	800819e <_raise_r+0x12>
 80081ce:	2400      	movs	r4, #0
 80081d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80081d4:	4628      	mov	r0, r5
 80081d6:	4798      	blx	r3
 80081d8:	2000      	movs	r0, #0
 80081da:	e7e0      	b.n	800819e <_raise_r+0x12>

080081dc <raise>:
 80081dc:	4b02      	ldr	r3, [pc, #8]	; (80081e8 <raise+0xc>)
 80081de:	4601      	mov	r1, r0
 80081e0:	6818      	ldr	r0, [r3, #0]
 80081e2:	f7ff bfd3 	b.w	800818c <_raise_r>
 80081e6:	bf00      	nop
 80081e8:	20000014 	.word	0x20000014

080081ec <_kill_r>:
 80081ec:	b538      	push	{r3, r4, r5, lr}
 80081ee:	4d07      	ldr	r5, [pc, #28]	; (800820c <_kill_r+0x20>)
 80081f0:	2300      	movs	r3, #0
 80081f2:	4604      	mov	r4, r0
 80081f4:	4608      	mov	r0, r1
 80081f6:	4611      	mov	r1, r2
 80081f8:	602b      	str	r3, [r5, #0]
 80081fa:	f7fa faa5 	bl	8002748 <_kill>
 80081fe:	1c43      	adds	r3, r0, #1
 8008200:	d102      	bne.n	8008208 <_kill_r+0x1c>
 8008202:	682b      	ldr	r3, [r5, #0]
 8008204:	b103      	cbz	r3, 8008208 <_kill_r+0x1c>
 8008206:	6023      	str	r3, [r4, #0]
 8008208:	bd38      	pop	{r3, r4, r5, pc}
 800820a:	bf00      	nop
 800820c:	2000b050 	.word	0x2000b050

08008210 <_getpid_r>:
 8008210:	f7fa ba92 	b.w	8002738 <_getpid>

08008214 <__sread>:
 8008214:	b510      	push	{r4, lr}
 8008216:	460c      	mov	r4, r1
 8008218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800821c:	f000 f89c 	bl	8008358 <_read_r>
 8008220:	2800      	cmp	r0, #0
 8008222:	bfab      	itete	ge
 8008224:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008226:	89a3      	ldrhlt	r3, [r4, #12]
 8008228:	181b      	addge	r3, r3, r0
 800822a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800822e:	bfac      	ite	ge
 8008230:	6563      	strge	r3, [r4, #84]	; 0x54
 8008232:	81a3      	strhlt	r3, [r4, #12]
 8008234:	bd10      	pop	{r4, pc}

08008236 <__swrite>:
 8008236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800823a:	461f      	mov	r7, r3
 800823c:	898b      	ldrh	r3, [r1, #12]
 800823e:	05db      	lsls	r3, r3, #23
 8008240:	4605      	mov	r5, r0
 8008242:	460c      	mov	r4, r1
 8008244:	4616      	mov	r6, r2
 8008246:	d505      	bpl.n	8008254 <__swrite+0x1e>
 8008248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800824c:	2302      	movs	r3, #2
 800824e:	2200      	movs	r2, #0
 8008250:	f000 f868 	bl	8008324 <_lseek_r>
 8008254:	89a3      	ldrh	r3, [r4, #12]
 8008256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800825a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800825e:	81a3      	strh	r3, [r4, #12]
 8008260:	4632      	mov	r2, r6
 8008262:	463b      	mov	r3, r7
 8008264:	4628      	mov	r0, r5
 8008266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800826a:	f000 b817 	b.w	800829c <_write_r>

0800826e <__sseek>:
 800826e:	b510      	push	{r4, lr}
 8008270:	460c      	mov	r4, r1
 8008272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008276:	f000 f855 	bl	8008324 <_lseek_r>
 800827a:	1c43      	adds	r3, r0, #1
 800827c:	89a3      	ldrh	r3, [r4, #12]
 800827e:	bf15      	itete	ne
 8008280:	6560      	strne	r0, [r4, #84]	; 0x54
 8008282:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008286:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800828a:	81a3      	strheq	r3, [r4, #12]
 800828c:	bf18      	it	ne
 800828e:	81a3      	strhne	r3, [r4, #12]
 8008290:	bd10      	pop	{r4, pc}

08008292 <__sclose>:
 8008292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008296:	f000 b813 	b.w	80082c0 <_close_r>
	...

0800829c <_write_r>:
 800829c:	b538      	push	{r3, r4, r5, lr}
 800829e:	4d07      	ldr	r5, [pc, #28]	; (80082bc <_write_r+0x20>)
 80082a0:	4604      	mov	r4, r0
 80082a2:	4608      	mov	r0, r1
 80082a4:	4611      	mov	r1, r2
 80082a6:	2200      	movs	r2, #0
 80082a8:	602a      	str	r2, [r5, #0]
 80082aa:	461a      	mov	r2, r3
 80082ac:	f7fa fa83 	bl	80027b6 <_write>
 80082b0:	1c43      	adds	r3, r0, #1
 80082b2:	d102      	bne.n	80082ba <_write_r+0x1e>
 80082b4:	682b      	ldr	r3, [r5, #0]
 80082b6:	b103      	cbz	r3, 80082ba <_write_r+0x1e>
 80082b8:	6023      	str	r3, [r4, #0]
 80082ba:	bd38      	pop	{r3, r4, r5, pc}
 80082bc:	2000b050 	.word	0x2000b050

080082c0 <_close_r>:
 80082c0:	b538      	push	{r3, r4, r5, lr}
 80082c2:	4d06      	ldr	r5, [pc, #24]	; (80082dc <_close_r+0x1c>)
 80082c4:	2300      	movs	r3, #0
 80082c6:	4604      	mov	r4, r0
 80082c8:	4608      	mov	r0, r1
 80082ca:	602b      	str	r3, [r5, #0]
 80082cc:	f7fa fa8f 	bl	80027ee <_close>
 80082d0:	1c43      	adds	r3, r0, #1
 80082d2:	d102      	bne.n	80082da <_close_r+0x1a>
 80082d4:	682b      	ldr	r3, [r5, #0]
 80082d6:	b103      	cbz	r3, 80082da <_close_r+0x1a>
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	bd38      	pop	{r3, r4, r5, pc}
 80082dc:	2000b050 	.word	0x2000b050

080082e0 <_fstat_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	4d07      	ldr	r5, [pc, #28]	; (8008300 <_fstat_r+0x20>)
 80082e4:	2300      	movs	r3, #0
 80082e6:	4604      	mov	r4, r0
 80082e8:	4608      	mov	r0, r1
 80082ea:	4611      	mov	r1, r2
 80082ec:	602b      	str	r3, [r5, #0]
 80082ee:	f7fa fa8a 	bl	8002806 <_fstat>
 80082f2:	1c43      	adds	r3, r0, #1
 80082f4:	d102      	bne.n	80082fc <_fstat_r+0x1c>
 80082f6:	682b      	ldr	r3, [r5, #0]
 80082f8:	b103      	cbz	r3, 80082fc <_fstat_r+0x1c>
 80082fa:	6023      	str	r3, [r4, #0]
 80082fc:	bd38      	pop	{r3, r4, r5, pc}
 80082fe:	bf00      	nop
 8008300:	2000b050 	.word	0x2000b050

08008304 <_isatty_r>:
 8008304:	b538      	push	{r3, r4, r5, lr}
 8008306:	4d06      	ldr	r5, [pc, #24]	; (8008320 <_isatty_r+0x1c>)
 8008308:	2300      	movs	r3, #0
 800830a:	4604      	mov	r4, r0
 800830c:	4608      	mov	r0, r1
 800830e:	602b      	str	r3, [r5, #0]
 8008310:	f7fa fa89 	bl	8002826 <_isatty>
 8008314:	1c43      	adds	r3, r0, #1
 8008316:	d102      	bne.n	800831e <_isatty_r+0x1a>
 8008318:	682b      	ldr	r3, [r5, #0]
 800831a:	b103      	cbz	r3, 800831e <_isatty_r+0x1a>
 800831c:	6023      	str	r3, [r4, #0]
 800831e:	bd38      	pop	{r3, r4, r5, pc}
 8008320:	2000b050 	.word	0x2000b050

08008324 <_lseek_r>:
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	4d07      	ldr	r5, [pc, #28]	; (8008344 <_lseek_r+0x20>)
 8008328:	4604      	mov	r4, r0
 800832a:	4608      	mov	r0, r1
 800832c:	4611      	mov	r1, r2
 800832e:	2200      	movs	r2, #0
 8008330:	602a      	str	r2, [r5, #0]
 8008332:	461a      	mov	r2, r3
 8008334:	f7fa fa82 	bl	800283c <_lseek>
 8008338:	1c43      	adds	r3, r0, #1
 800833a:	d102      	bne.n	8008342 <_lseek_r+0x1e>
 800833c:	682b      	ldr	r3, [r5, #0]
 800833e:	b103      	cbz	r3, 8008342 <_lseek_r+0x1e>
 8008340:	6023      	str	r3, [r4, #0]
 8008342:	bd38      	pop	{r3, r4, r5, pc}
 8008344:	2000b050 	.word	0x2000b050

08008348 <_malloc_usable_size_r>:
 8008348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800834c:	1f18      	subs	r0, r3, #4
 800834e:	2b00      	cmp	r3, #0
 8008350:	bfbc      	itt	lt
 8008352:	580b      	ldrlt	r3, [r1, r0]
 8008354:	18c0      	addlt	r0, r0, r3
 8008356:	4770      	bx	lr

08008358 <_read_r>:
 8008358:	b538      	push	{r3, r4, r5, lr}
 800835a:	4d07      	ldr	r5, [pc, #28]	; (8008378 <_read_r+0x20>)
 800835c:	4604      	mov	r4, r0
 800835e:	4608      	mov	r0, r1
 8008360:	4611      	mov	r1, r2
 8008362:	2200      	movs	r2, #0
 8008364:	602a      	str	r2, [r5, #0]
 8008366:	461a      	mov	r2, r3
 8008368:	f7fa fa08 	bl	800277c <_read>
 800836c:	1c43      	adds	r3, r0, #1
 800836e:	d102      	bne.n	8008376 <_read_r+0x1e>
 8008370:	682b      	ldr	r3, [r5, #0]
 8008372:	b103      	cbz	r3, 8008376 <_read_r+0x1e>
 8008374:	6023      	str	r3, [r4, #0]
 8008376:	bd38      	pop	{r3, r4, r5, pc}
 8008378:	2000b050 	.word	0x2000b050

0800837c <_init>:
 800837c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837e:	bf00      	nop
 8008380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008382:	bc08      	pop	{r3}
 8008384:	469e      	mov	lr, r3
 8008386:	4770      	bx	lr

08008388 <_fini>:
 8008388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800838a:	bf00      	nop
 800838c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800838e:	bc08      	pop	{r3}
 8008390:	469e      	mov	lr, r3
 8008392:	4770      	bx	lr
