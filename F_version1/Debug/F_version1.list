
F_version1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000661c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000998  080067ac  080067ac  000167ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007144  08007144  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08007144  08007144  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007144  08007144  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007144  08007144  00017144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007148  08007148  00017148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800714c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000058ac  20000078  080071c4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005924  080071c4  00025924  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d59  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e54  00000000  00000000  00036e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00039c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  0003acf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000285a4  00000000  00000000  0003bc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b92  00000000  00000000  000641cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f51dd  00000000  00000000  00075d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  0016af3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ed4  00000000  00000000  0016b004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  0016fed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006794 	.word	0x08006794

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006794 	.word	0x08006794

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	0000      	movs	r0, r0
	...

08000af0 <get_C6>:

	uint8_t counter = 0;

//Tone 1 C6 1046.5 Hz
	uint8_t C6[42];
void get_C6(){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 42; i++){
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	e043      	b.n	8000b84 <get_C6+0x94>
		C6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/42))*256;
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff fd09 	bl	8000514 <__aeabi_i2d>
 8000b02:	a32a      	add	r3, pc, #168	; (adr r3, 8000bac <get_C6+0xbc>)
 8000b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b08:	f7ff fd6e 	bl	80005e8 <__aeabi_dmul>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	460b      	mov	r3, r1
 8000b10:	4610      	mov	r0, r2
 8000b12:	4619      	mov	r1, r3
 8000b14:	f04f 0200 	mov.w	r2, #0
 8000b18:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <get_C6+0xb0>)
 8000b1a:	f7ff fe8f 	bl	800083c <__aeabi_ddiv>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	460b      	mov	r3, r1
 8000b22:	4610      	mov	r0, r2
 8000b24:	4619      	mov	r1, r3
 8000b26:	f7ff ff91 	bl	8000a4c <__aeabi_d2f>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	ee00 3a10 	vmov	s0, r3
 8000b30:	f004 fdb6 	bl	80056a0 <arm_sin_f32>
 8000b34:	eef0 7a40 	vmov.f32	s15, s0
 8000b38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b40:	ee17 0a90 	vmov	r0, s15
 8000b44:	f7ff fcf8 	bl	8000538 <__aeabi_f2d>
 8000b48:	a313      	add	r3, pc, #76	; (adr r3, 8000b98 <get_C6+0xa8>)
 8000b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b4e:	f7ff fd4b 	bl	80005e8 <__aeabi_dmul>
 8000b52:	4602      	mov	r2, r0
 8000b54:	460b      	mov	r3, r1
 8000b56:	4610      	mov	r0, r2
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f04f 0200 	mov.w	r2, #0
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <get_C6+0xb4>)
 8000b60:	f7ff fd42 	bl	80005e8 <__aeabi_dmul>
 8000b64:	4602      	mov	r2, r0
 8000b66:	460b      	mov	r3, r1
 8000b68:	4610      	mov	r0, r2
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	f7ff ff4e 	bl	8000a0c <__aeabi_d2uiz>
 8000b70:	4603      	mov	r3, r0
 8000b72:	b2d9      	uxtb	r1, r3
 8000b74:	4a0c      	ldr	r2, [pc, #48]	; (8000ba8 <get_C6+0xb8>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	460a      	mov	r2, r1
 8000b7c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 42; i++){
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3301      	adds	r3, #1
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b29      	cmp	r3, #41	; 0x29
 8000b88:	ddb8      	ble.n	8000afc <get_C6+0xc>
	}
}
 8000b8a:	bf00      	nop
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	f3af 8000 	nop.w
 8000b98:	51eb851f 	.word	0x51eb851f
 8000b9c:	3fd51eb8 	.word	0x3fd51eb8
 8000ba0:	40450000 	.word	0x40450000
 8000ba4:	40700000 	.word	0x40700000
 8000ba8:	2000578c 	.word	0x2000578c
 8000bac:	53c8d4f1 	.word	0x53c8d4f1
 8000bb0:	401921fb 	.word	0x401921fb
 8000bb4:	00000000 	.word	0x00000000

08000bb8 <get_E6>:

//Tone 2 E6 1318.5 Hz
	uint8_t E6[34];
void get_E6(){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
	for(int i = 0; i < 34; i++){
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	e043      	b.n	8000c4c <get_E6+0x94>
		E6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/34))*256;
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff fca5 	bl	8000514 <__aeabi_i2d>
 8000bca:	a32a      	add	r3, pc, #168	; (adr r3, 8000c74 <get_E6+0xbc>)
 8000bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd0:	f7ff fd0a 	bl	80005e8 <__aeabi_dmul>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	4610      	mov	r0, r2
 8000bda:	4619      	mov	r1, r3
 8000bdc:	f04f 0200 	mov.w	r2, #0
 8000be0:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <get_E6+0xb0>)
 8000be2:	f7ff fe2b 	bl	800083c <__aeabi_ddiv>
 8000be6:	4602      	mov	r2, r0
 8000be8:	460b      	mov	r3, r1
 8000bea:	4610      	mov	r0, r2
 8000bec:	4619      	mov	r1, r3
 8000bee:	f7ff ff2d 	bl	8000a4c <__aeabi_d2f>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	ee00 3a10 	vmov	s0, r3
 8000bf8:	f004 fd52 	bl	80056a0 <arm_sin_f32>
 8000bfc:	eef0 7a40 	vmov.f32	s15, s0
 8000c00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c08:	ee17 0a90 	vmov	r0, s15
 8000c0c:	f7ff fc94 	bl	8000538 <__aeabi_f2d>
 8000c10:	a313      	add	r3, pc, #76	; (adr r3, 8000c60 <get_E6+0xa8>)
 8000c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c16:	f7ff fce7 	bl	80005e8 <__aeabi_dmul>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	4610      	mov	r0, r2
 8000c20:	4619      	mov	r1, r3
 8000c22:	f04f 0200 	mov.w	r2, #0
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <get_E6+0xb4>)
 8000c28:	f7ff fcde 	bl	80005e8 <__aeabi_dmul>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	4610      	mov	r0, r2
 8000c32:	4619      	mov	r1, r3
 8000c34:	f7ff feea 	bl	8000a0c <__aeabi_d2uiz>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	b2d9      	uxtb	r1, r3
 8000c3c:	4a0c      	ldr	r2, [pc, #48]	; (8000c70 <get_E6+0xb8>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	460a      	mov	r2, r1
 8000c44:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 34; i++){
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b21      	cmp	r3, #33	; 0x21
 8000c50:	ddb8      	ble.n	8000bc4 <get_E6+0xc>
	}
}
 8000c52:	bf00      	nop
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	f3af 8000 	nop.w
 8000c60:	51eb851f 	.word	0x51eb851f
 8000c64:	3fd51eb8 	.word	0x3fd51eb8
 8000c68:	40410000 	.word	0x40410000
 8000c6c:	40700000 	.word	0x40700000
 8000c70:	200056d8 	.word	0x200056d8
 8000c74:	53c8d4f1 	.word	0x53c8d4f1
 8000c78:	401921fb 	.word	0x401921fb
 8000c7c:	00000000 	.word	0x00000000

08000c80 <get_G6>:

//Tone 3 G6 1568.0 Hz
	uint8_t G6[28];
void get_G6(){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
	for(int i = 0; i < 28; i++){
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	e043      	b.n	8000d14 <get_G6+0x94>
		G6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/28))*256;
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff fc41 	bl	8000514 <__aeabi_i2d>
 8000c92:	a32a      	add	r3, pc, #168	; (adr r3, 8000d3c <get_G6+0xbc>)
 8000c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c98:	f7ff fca6 	bl	80005e8 <__aeabi_dmul>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4610      	mov	r0, r2
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f04f 0200 	mov.w	r2, #0
 8000ca8:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <get_G6+0xb0>)
 8000caa:	f7ff fdc7 	bl	800083c <__aeabi_ddiv>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	4610      	mov	r0, r2
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f7ff fec9 	bl	8000a4c <__aeabi_d2f>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	ee00 3a10 	vmov	s0, r3
 8000cc0:	f004 fcee 	bl	80056a0 <arm_sin_f32>
 8000cc4:	eef0 7a40 	vmov.f32	s15, s0
 8000cc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ccc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000cd0:	ee17 0a90 	vmov	r0, s15
 8000cd4:	f7ff fc30 	bl	8000538 <__aeabi_f2d>
 8000cd8:	a313      	add	r3, pc, #76	; (adr r3, 8000d28 <get_G6+0xa8>)
 8000cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cde:	f7ff fc83 	bl	80005e8 <__aeabi_dmul>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	4610      	mov	r0, r2
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f04f 0200 	mov.w	r2, #0
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <get_G6+0xb4>)
 8000cf0:	f7ff fc7a 	bl	80005e8 <__aeabi_dmul>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	4610      	mov	r0, r2
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f7ff fe86 	bl	8000a0c <__aeabi_d2uiz>
 8000d00:	4603      	mov	r3, r0
 8000d02:	b2d9      	uxtb	r1, r3
 8000d04:	4a0c      	ldr	r2, [pc, #48]	; (8000d38 <get_G6+0xb8>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	460a      	mov	r2, r1
 8000d0c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 28; i++){
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3301      	adds	r3, #1
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b1b      	cmp	r3, #27
 8000d18:	ddb8      	ble.n	8000c8c <get_G6+0xc>
	}
}
 8000d1a:	bf00      	nop
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	f3af 8000 	nop.w
 8000d28:	51eb851f 	.word	0x51eb851f
 8000d2c:	3fd51eb8 	.word	0x3fd51eb8
 8000d30:	403c0000 	.word	0x403c0000
 8000d34:	40700000 	.word	0x40700000
 8000d38:	200057b8 	.word	0x200057b8
 8000d3c:	53c8d4f1 	.word	0x53c8d4f1
 8000d40:	401921fb 	.word	0x401921fb
 8000d44:	00000000 	.word	0x00000000

08000d48 <get_A6>:

//Tone 4 A6 1760.0 Hz

	uint8_t A6[25];
void get_A6(){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 25; i++){
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	e043      	b.n	8000ddc <get_A6+0x94>
		A6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/25))*256;
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff fbdd 	bl	8000514 <__aeabi_i2d>
 8000d5a:	a32a      	add	r3, pc, #168	; (adr r3, 8000e04 <get_A6+0xbc>)
 8000d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d60:	f7ff fc42 	bl	80005e8 <__aeabi_dmul>
 8000d64:	4602      	mov	r2, r0
 8000d66:	460b      	mov	r3, r1
 8000d68:	4610      	mov	r0, r2
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <get_A6+0xb0>)
 8000d72:	f7ff fd63 	bl	800083c <__aeabi_ddiv>
 8000d76:	4602      	mov	r2, r0
 8000d78:	460b      	mov	r3, r1
 8000d7a:	4610      	mov	r0, r2
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f7ff fe65 	bl	8000a4c <__aeabi_d2f>
 8000d82:	4603      	mov	r3, r0
 8000d84:	ee00 3a10 	vmov	s0, r3
 8000d88:	f004 fc8a 	bl	80056a0 <arm_sin_f32>
 8000d8c:	eef0 7a40 	vmov.f32	s15, s0
 8000d90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d98:	ee17 0a90 	vmov	r0, s15
 8000d9c:	f7ff fbcc 	bl	8000538 <__aeabi_f2d>
 8000da0:	a313      	add	r3, pc, #76	; (adr r3, 8000df0 <get_A6+0xa8>)
 8000da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da6:	f7ff fc1f 	bl	80005e8 <__aeabi_dmul>
 8000daa:	4602      	mov	r2, r0
 8000dac:	460b      	mov	r3, r1
 8000dae:	4610      	mov	r0, r2
 8000db0:	4619      	mov	r1, r3
 8000db2:	f04f 0200 	mov.w	r2, #0
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <get_A6+0xb4>)
 8000db8:	f7ff fc16 	bl	80005e8 <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f7ff fe22 	bl	8000a0c <__aeabi_d2uiz>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	b2d9      	uxtb	r1, r3
 8000dcc:	4a0c      	ldr	r2, [pc, #48]	; (8000e00 <get_A6+0xb8>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	460a      	mov	r2, r1
 8000dd4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 25; i++){
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b18      	cmp	r3, #24
 8000de0:	ddb8      	ble.n	8000d54 <get_A6+0xc>
	}
}
 8000de2:	bf00      	nop
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	f3af 8000 	nop.w
 8000df0:	51eb851f 	.word	0x51eb851f
 8000df4:	3fd51eb8 	.word	0x3fd51eb8
 8000df8:	40390000 	.word	0x40390000
 8000dfc:	40700000 	.word	0x40700000
 8000e00:	20005864 	.word	0x20005864
 8000e04:	53c8d4f1 	.word	0x53c8d4f1
 8000e08:	401921fb 	.word	0x401921fb
 8000e0c:	00000000 	.word	0x00000000

08000e10 <get_B6>:

//Tone 5 B6 1975.53 Hz
	uint8_t B6[22];
void get_B6(){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
	for(int i = 0; i < 22; i++){
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	e043      	b.n	8000ea4 <get_B6+0x94>
		B6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/22))*256;
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff fb79 	bl	8000514 <__aeabi_i2d>
 8000e22:	a32a      	add	r3, pc, #168	; (adr r3, 8000ecc <get_B6+0xbc>)
 8000e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e28:	f7ff fbde 	bl	80005e8 <__aeabi_dmul>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	460b      	mov	r3, r1
 8000e30:	4610      	mov	r0, r2
 8000e32:	4619      	mov	r1, r3
 8000e34:	f04f 0200 	mov.w	r2, #0
 8000e38:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <get_B6+0xb0>)
 8000e3a:	f7ff fcff 	bl	800083c <__aeabi_ddiv>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	460b      	mov	r3, r1
 8000e42:	4610      	mov	r0, r2
 8000e44:	4619      	mov	r1, r3
 8000e46:	f7ff fe01 	bl	8000a4c <__aeabi_d2f>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	ee00 3a10 	vmov	s0, r3
 8000e50:	f004 fc26 	bl	80056a0 <arm_sin_f32>
 8000e54:	eef0 7a40 	vmov.f32	s15, s0
 8000e58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e60:	ee17 0a90 	vmov	r0, s15
 8000e64:	f7ff fb68 	bl	8000538 <__aeabi_f2d>
 8000e68:	a313      	add	r3, pc, #76	; (adr r3, 8000eb8 <get_B6+0xa8>)
 8000e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6e:	f7ff fbbb 	bl	80005e8 <__aeabi_dmul>
 8000e72:	4602      	mov	r2, r0
 8000e74:	460b      	mov	r3, r1
 8000e76:	4610      	mov	r0, r2
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <get_B6+0xb4>)
 8000e80:	f7ff fbb2 	bl	80005e8 <__aeabi_dmul>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4610      	mov	r0, r2
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f7ff fdbe 	bl	8000a0c <__aeabi_d2uiz>
 8000e90:	4603      	mov	r3, r0
 8000e92:	b2d9      	uxtb	r1, r3
 8000e94:	4a0c      	ldr	r2, [pc, #48]	; (8000ec8 <get_B6+0xb8>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	460a      	mov	r2, r1
 8000e9c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 22; i++){
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b15      	cmp	r3, #21
 8000ea8:	ddb8      	ble.n	8000e1c <get_B6+0xc>
	}
}
 8000eaa:	bf00      	nop
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	f3af 8000 	nop.w
 8000eb8:	51eb851f 	.word	0x51eb851f
 8000ebc:	3fd51eb8 	.word	0x3fd51eb8
 8000ec0:	40360000 	.word	0x40360000
 8000ec4:	40700000 	.word	0x40700000
 8000ec8:	200056fc 	.word	0x200056fc
 8000ecc:	53c8d4f1 	.word	0x53c8d4f1
 8000ed0:	401921fb 	.word	0x401921fb
 8000ed4:	00000000 	.word	0x00000000

08000ed8 <get_B5>:

//Tone 6 B5 987.78 Hz
	uint8_t B5[45];
void get_B5(){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
	for(int i = 0; i < 45; i++){
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	e043      	b.n	8000f6c <get_B5+0x94>
		B5[i] =  0.33*(1 + arm_sin_f32(2*pi*i/45))*256;
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff fb15 	bl	8000514 <__aeabi_i2d>
 8000eea:	a32a      	add	r3, pc, #168	; (adr r3, 8000f94 <get_B5+0xbc>)
 8000eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef0:	f7ff fb7a 	bl	80005e8 <__aeabi_dmul>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4610      	mov	r0, r2
 8000efa:	4619      	mov	r1, r3
 8000efc:	f04f 0200 	mov.w	r2, #0
 8000f00:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <get_B5+0xb0>)
 8000f02:	f7ff fc9b 	bl	800083c <__aeabi_ddiv>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f7ff fd9d 	bl	8000a4c <__aeabi_d2f>
 8000f12:	4603      	mov	r3, r0
 8000f14:	ee00 3a10 	vmov	s0, r3
 8000f18:	f004 fbc2 	bl	80056a0 <arm_sin_f32>
 8000f1c:	eef0 7a40 	vmov.f32	s15, s0
 8000f20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f28:	ee17 0a90 	vmov	r0, s15
 8000f2c:	f7ff fb04 	bl	8000538 <__aeabi_f2d>
 8000f30:	a313      	add	r3, pc, #76	; (adr r3, 8000f80 <get_B5+0xa8>)
 8000f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f36:	f7ff fb57 	bl	80005e8 <__aeabi_dmul>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4610      	mov	r0, r2
 8000f40:	4619      	mov	r1, r3
 8000f42:	f04f 0200 	mov.w	r2, #0
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <get_B5+0xb4>)
 8000f48:	f7ff fb4e 	bl	80005e8 <__aeabi_dmul>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f7ff fd5a 	bl	8000a0c <__aeabi_d2uiz>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	b2d9      	uxtb	r1, r3
 8000f5c:	4a0c      	ldr	r2, [pc, #48]	; (8000f90 <get_B5+0xb8>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	460a      	mov	r2, r1
 8000f64:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 45; i++){
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b2c      	cmp	r3, #44	; 0x2c
 8000f70:	ddb8      	ble.n	8000ee4 <get_B5+0xc>
	}
}
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	f3af 8000 	nop.w
 8000f80:	51eb851f 	.word	0x51eb851f
 8000f84:	3fd51eb8 	.word	0x3fd51eb8
 8000f88:	40468000 	.word	0x40468000
 8000f8c:	40700000 	.word	0x40700000
 8000f90:	2000575c 	.word	0x2000575c
 8000f94:	53c8d4f1 	.word	0x53c8d4f1
 8000f98:	401921fb 	.word	0x401921fb

08000f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08c      	sub	sp, #48	; 0x30
 8000fa0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa2:	f001 fa7e 	bl	80024a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa6:	f000 f919 	bl	80011dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000faa:	f000 fa2d 	bl	8001408 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fae:	f000 fa0d 	bl	80013cc <MX_DMA_Init>
  MX_DAC1_Init();
 8000fb2:	f000 f965 	bl	8001280 <MX_DAC1_Init>
  MX_QUADSPI_Init();
 8000fb6:	f000 f995 	bl	80012e4 <MX_QUADSPI_Init>
  MX_TIM2_Init();
 8000fba:	f000 f9b9 	bl	8001330 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  BSP_QSPI_Init();
 8000fbe:	f000 fb95 	bl	80016ec <BSP_QSPI_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000fc2:	4878      	ldr	r0, [pc, #480]	; (80011a4 <main+0x208>)
 8000fc4:	f003 ff14 	bl	8004df0 <HAL_TIM_Base_Start_IT>




  get_B5();
 8000fc8:	f7ff ff86 	bl	8000ed8 <get_B5>
  get_C6();
 8000fcc:	f7ff fd90 	bl	8000af0 <get_C6>
  get_E6();
 8000fd0:	f7ff fdf2 	bl	8000bb8 <get_E6>
  get_G6();
 8000fd4:	f7ff fe54 	bl	8000c80 <get_G6>
  get_A6();
 8000fd8:	f7ff feb6 	bl	8000d48 <get_A6>
  get_B6();
 8000fdc:	f7ff ff18 	bl	8000e10 <get_B6>
  uint32_t addr = 0x000000;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
  for(int i = 0; i < 3; i++){
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe8:	e00f      	b.n	800100a <main+0x6e>
	  if(BSP_QSPI_Erase_Block(addr + i * 0x010000) != QSPI_OK){
 8000fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fec:	041b      	lsls	r3, r3, #16
 8000fee:	461a      	mov	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 fca9 	bl	800194c <BSP_QSPI_Erase_Block>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <main+0x68>
		  Error_Handler();
 8001000:	f000 fb6c 	bl	80016dc <Error_Handler>
  for(int i = 0; i < 3; i++){
 8001004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001006:	3301      	adds	r3, #1
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	2b02      	cmp	r3, #2
 800100e:	ddec      	ble.n	8000fea <main+0x4e>
	  }
  }

  uint32_t tone_addr = 0x000000;
 8001010:	2300      	movs	r3, #0
 8001012:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 490; i++){
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
 8001018:	e00f      	b.n	800103a <main+0x9e>
	  if(BSP_QSPI_Write((uint8_t *)B5, tone_addr, 45) != QSPI_OK){
 800101a:	222d      	movs	r2, #45	; 0x2d
 800101c:	6a39      	ldr	r1, [r7, #32]
 800101e:	4862      	ldr	r0, [pc, #392]	; (80011a8 <main+0x20c>)
 8001020:	f000 fc16 	bl	8001850 <BSP_QSPI_Write>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <main+0x92>
		  Error_Handler();
 800102a:	f000 fb57 	bl	80016dc <Error_Handler>
	  }
	  tone_addr += 45;
 800102e:	6a3b      	ldr	r3, [r7, #32]
 8001030:	332d      	adds	r3, #45	; 0x2d
 8001032:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 490; i++){
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	3301      	adds	r3, #1
 8001038:	61fb      	str	r3, [r7, #28]
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 8001040:	dbeb      	blt.n	800101a <main+0x7e>
  }
  for(int i = 0; i < 525; i++){
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
 8001046:	e00f      	b.n	8001068 <main+0xcc>
	  if(BSP_QSPI_Write((uint8_t *)C6, tone_addr, 42) != QSPI_OK){
 8001048:	222a      	movs	r2, #42	; 0x2a
 800104a:	6a39      	ldr	r1, [r7, #32]
 800104c:	4857      	ldr	r0, [pc, #348]	; (80011ac <main+0x210>)
 800104e:	f000 fbff 	bl	8001850 <BSP_QSPI_Write>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <main+0xc0>
		  Error_Handler();
 8001058:	f000 fb40 	bl	80016dc <Error_Handler>
	  }
	  tone_addr += 42;
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	332a      	adds	r3, #42	; 0x2a
 8001060:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 525; i++){
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	3301      	adds	r3, #1
 8001066:	61bb      	str	r3, [r7, #24]
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 800106e:	ddeb      	ble.n	8001048 <main+0xac>
  }
  for(int i = 0; i < 648; i++){
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	e00f      	b.n	8001096 <main+0xfa>
	  if(BSP_QSPI_Write((uint8_t *)E6, tone_addr, 34) != QSPI_OK){
 8001076:	2222      	movs	r2, #34	; 0x22
 8001078:	6a39      	ldr	r1, [r7, #32]
 800107a:	484d      	ldr	r0, [pc, #308]	; (80011b0 <main+0x214>)
 800107c:	f000 fbe8 	bl	8001850 <BSP_QSPI_Write>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <main+0xee>
		  Error_Handler();
 8001086:	f000 fb29 	bl	80016dc <Error_Handler>
	  }
	  tone_addr += 34;
 800108a:	6a3b      	ldr	r3, [r7, #32]
 800108c:	3322      	adds	r3, #34	; 0x22
 800108e:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 648; i++){
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	3301      	adds	r3, #1
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f5b3 7f22 	cmp.w	r3, #648	; 0x288
 800109c:	dbeb      	blt.n	8001076 <main+0xda>
  }
  tone_addr = 0x010266;
 800109e:	4b45      	ldr	r3, [pc, #276]	; (80011b4 <main+0x218>)
 80010a0:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 787; i++){
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	e00f      	b.n	80010c8 <main+0x12c>
	  if(BSP_QSPI_Write((uint8_t *)G6, tone_addr, 28) != QSPI_OK){
 80010a8:	221c      	movs	r2, #28
 80010aa:	6a39      	ldr	r1, [r7, #32]
 80010ac:	4842      	ldr	r0, [pc, #264]	; (80011b8 <main+0x21c>)
 80010ae:	f000 fbcf 	bl	8001850 <BSP_QSPI_Write>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <main+0x120>
		  Error_Handler();
 80010b8:	f000 fb10 	bl	80016dc <Error_Handler>
	  }
	  tone_addr += 28;
 80010bc:	6a3b      	ldr	r3, [r7, #32]
 80010be:	331c      	adds	r3, #28
 80010c0:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 787; i++){
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	3301      	adds	r3, #1
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	f240 3212 	movw	r2, #786	; 0x312
 80010ce:	4293      	cmp	r3, r2
 80010d0:	ddea      	ble.n	80010a8 <main+0x10c>
  }
  tone_addr = 0x015888;
 80010d2:	4b3a      	ldr	r3, [pc, #232]	; (80011bc <main+0x220>)
 80010d4:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 882; i++){
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	e00f      	b.n	80010fc <main+0x160>
	  if(BSP_QSPI_Write((uint8_t *)A6, tone_addr, 25) != QSPI_OK){
 80010dc:	2219      	movs	r2, #25
 80010de:	6a39      	ldr	r1, [r7, #32]
 80010e0:	4837      	ldr	r0, [pc, #220]	; (80011c0 <main+0x224>)
 80010e2:	f000 fbb5 	bl	8001850 <BSP_QSPI_Write>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <main+0x154>
		  Error_Handler();
 80010ec:	f000 faf6 	bl	80016dc <Error_Handler>
	  }
	  tone_addr += 25;
 80010f0:	6a3b      	ldr	r3, [r7, #32]
 80010f2:	3319      	adds	r3, #25
 80010f4:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 882; i++){
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	3301      	adds	r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f240 3271 	movw	r2, #881	; 0x371
 8001102:	4293      	cmp	r3, r2
 8001104:	ddea      	ble.n	80010dc <main+0x140>
  }
  for(int i = 0; i < 1002; i++){
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	e00f      	b.n	800112c <main+0x190>
	  if(BSP_QSPI_Write((uint8_t *)B6, tone_addr, 22) != QSPI_OK){
 800110c:	2216      	movs	r2, #22
 800110e:	6a39      	ldr	r1, [r7, #32]
 8001110:	482c      	ldr	r0, [pc, #176]	; (80011c4 <main+0x228>)
 8001112:	f000 fb9d 	bl	8001850 <BSP_QSPI_Write>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <main+0x184>
		  Error_Handler();
 800111c:	f000 fade 	bl	80016dc <Error_Handler>
	  }
	  tone_addr += 22;
 8001120:	6a3b      	ldr	r3, [r7, #32]
 8001122:	3316      	adds	r3, #22
 8001124:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 1002; i++){
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	3301      	adds	r3, #1
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8001132:	4293      	cmp	r3, r2
 8001134:	ddea      	ble.n	800110c <main+0x170>
  }

  //Read the data
  if(BSP_QSPI_Read((uint8_t *)play, 0x00000000, 22050) != QSPI_OK){
 8001136:	f245 6222 	movw	r2, #22050	; 0x5622
 800113a:	2100      	movs	r1, #0
 800113c:	4822      	ldr	r0, [pc, #136]	; (80011c8 <main+0x22c>)
 800113e:	f000 fb41 	bl	80017c4 <BSP_QSPI_Read>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <main+0x1b0>
	  Error_Handler();
 8001148:	f000 fac8 	bl	80016dc <Error_Handler>
  }

  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 800114c:	2308      	movs	r3, #8
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	f245 6322 	movw	r3, #22050	; 0x5622
 8001154:	4a1c      	ldr	r2, [pc, #112]	; (80011c8 <main+0x22c>)
 8001156:	2100      	movs	r1, #0
 8001158:	481c      	ldr	r0, [pc, #112]	; (80011cc <main+0x230>)
 800115a:	f001 fb03 	bl	8002764 <HAL_DAC_Start_DMA>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  int GPIO_PinState = 0;//When you press the button, status is 0
 800115e:	2300      	movs	r3, #0
 8001160:	603b      	str	r3, [r7, #0]
	  GPIO_PinState =  HAL_GPIO_ReadPin (Button_GPIO_Port, Button_Pin);
 8001162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001166:	481a      	ldr	r0, [pc, #104]	; (80011d0 <main+0x234>)
 8001168:	f002 fa54 	bl	8003614 <HAL_GPIO_ReadPin>
 800116c:	4603      	mov	r3, r0
 800116e:	603b      	str	r3, [r7, #0]
	  if(GPIO_PinState==1){
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d0f3      	beq.n	800115e <main+0x1c2>
		  //HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
	  }
	  else
	  {
		  if(HAL_GPIO_ReadPin (LED_GPIO_Port, LED_Pin)){
 8001176:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800117a:	4816      	ldr	r0, [pc, #88]	; (80011d4 <main+0x238>)
 800117c:	f002 fa4a 	bl	8003614 <HAL_GPIO_ReadPin>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0eb      	beq.n	800115e <main+0x1c2>
			  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2108      	movs	r1, #8
 800118a:	4813      	ldr	r0, [pc, #76]	; (80011d8 <main+0x23c>)
 800118c:	f002 fa5a 	bl	8003644 <HAL_GPIO_WritePin>
			  HAL_Delay(500);
 8001190:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001194:	f001 f9be 	bl	8002514 <HAL_Delay>
			  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001198:	2201      	movs	r2, #1
 800119a:	2108      	movs	r1, #8
 800119c:	480e      	ldr	r0, [pc, #56]	; (80011d8 <main+0x23c>)
 800119e:	f002 fa51 	bl	8003644 <HAL_GPIO_WritePin>
  {
 80011a2:	e7dc      	b.n	800115e <main+0x1c2>
 80011a4:	200057d4 	.word	0x200057d4
 80011a8:	2000575c 	.word	0x2000575c
 80011ac:	2000578c 	.word	0x2000578c
 80011b0:	200056d8 	.word	0x200056d8
 80011b4:	00010266 	.word	0x00010266
 80011b8:	200057b8 	.word	0x200057b8
 80011bc:	00015888 	.word	0x00015888
 80011c0:	20005864 	.word	0x20005864
 80011c4:	200056fc 	.word	0x200056fc
 80011c8:	20000094 	.word	0x20000094
 80011cc:	200056c4 	.word	0x200056c4
 80011d0:	48000800 	.word	0x48000800
 80011d4:	48000400 	.word	0x48000400
 80011d8:	48001000 	.word	0x48001000

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b096      	sub	sp, #88	; 0x58
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	2244      	movs	r2, #68	; 0x44
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f004 fac8 	bl	8005780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	463b      	mov	r3, r7
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001202:	f002 fa5f 	bl	80036c4 <HAL_PWREx_ControlVoltageScaling>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800120c:	f000 fa66 	bl	80016dc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001210:	2310      	movs	r3, #16
 8001212:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001214:	2301      	movs	r3, #1
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800121c:	2360      	movs	r3, #96	; 0x60
 800121e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001220:	2302      	movs	r3, #2
 8001222:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001224:	2301      	movs	r3, #1
 8001226:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001228:	2301      	movs	r3, #1
 800122a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800122c:	2328      	movs	r3, #40	; 0x28
 800122e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001230:	2307      	movs	r3, #7
 8001232:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001234:	2302      	movs	r3, #2
 8001236:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001238:	2302      	movs	r3, #2
 800123a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4618      	mov	r0, r3
 8001242:	f002 ff75 	bl	8004130 <HAL_RCC_OscConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800124c:	f000 fa46 	bl	80016dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001250:	230f      	movs	r3, #15
 8001252:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001254:	2303      	movs	r3, #3
 8001256:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	2104      	movs	r1, #4
 8001268:	4618      	mov	r0, r3
 800126a:	f003 fb47 	bl	80048fc <HAL_RCC_ClockConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001274:	f000 fa32 	bl	80016dc <Error_Handler>
  }
}
 8001278:	bf00      	nop
 800127a:	3758      	adds	r7, #88	; 0x58
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	2224      	movs	r2, #36	; 0x24
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f004 fa77 	bl	8005780 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_DAC1_Init+0x5c>)
 8001294:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <MX_DAC1_Init+0x60>)
 8001296:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001298:	4810      	ldr	r0, [pc, #64]	; (80012dc <MX_DAC1_Init+0x5c>)
 800129a:	f001 fa41 	bl	8002720 <HAL_DAC_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80012a4:	f000 fa1a 	bl	80016dc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80012ac:	2324      	movs	r3, #36	; 0x24
 80012ae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	2200      	movs	r2, #0
 80012c0:	4619      	mov	r1, r3
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <MX_DAC1_Init+0x5c>)
 80012c4:	f001 fb2e 	bl	8002924 <HAL_DAC_ConfigChannel>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80012ce:	f000 fa05 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	3728      	adds	r7, #40	; 0x28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200056c4 	.word	0x200056c4
 80012e0:	40007400 	.word	0x40007400

080012e4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_QUADSPI_Init+0x44>)
 80012ea:	4a10      	ldr	r2, [pc, #64]	; (800132c <MX_QUADSPI_Init+0x48>)
 80012ec:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <MX_QUADSPI_Init+0x44>)
 80012f0:	22ff      	movs	r2, #255	; 0xff
 80012f2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <MX_QUADSPI_Init+0x44>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <MX_QUADSPI_Init+0x44>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_QUADSPI_Init+0x44>)
 8001302:	2201      	movs	r2, #1
 8001304:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <MX_QUADSPI_Init+0x44>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <MX_QUADSPI_Init+0x44>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_QUADSPI_Init+0x44>)
 8001314:	f002 fa2c 	bl	8003770 <HAL_QSPI_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800131e:	f000 f9dd 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20005820 	.word	0x20005820
 800132c:	a0001000 	.word	0xa0001000

08001330 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800134e:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <MX_TIM2_Init+0x98>)
 8001350:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001354:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001356:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <MX_TIM2_Init+0x98>)
 8001358:	2200      	movs	r2, #0
 800135a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135c:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <MX_TIM2_Init+0x98>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 8001362:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <MX_TIM2_Init+0x98>)
 8001364:	f240 7216 	movw	r2, #1814	; 0x716
 8001368:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136a:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <MX_TIM2_Init+0x98>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <MX_TIM2_Init+0x98>)
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001376:	4814      	ldr	r0, [pc, #80]	; (80013c8 <MX_TIM2_Init+0x98>)
 8001378:	f003 fce2 	bl	8004d40 <HAL_TIM_Base_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001382:	f000 f9ab 	bl	80016dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	4619      	mov	r1, r3
 8001392:	480d      	ldr	r0, [pc, #52]	; (80013c8 <MX_TIM2_Init+0x98>)
 8001394:	f003 febb 	bl	800510e <HAL_TIM_ConfigClockSource>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800139e:	f000 f99d 	bl	80016dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013a2:	2320      	movs	r3, #32
 80013a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	4619      	mov	r1, r3
 80013ae:	4806      	ldr	r0, [pc, #24]	; (80013c8 <MX_TIM2_Init+0x98>)
 80013b0:	f004 f8d0 	bl	8005554 <HAL_TIMEx_MasterConfigSynchronization>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013ba:	f000 f98f 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	3720      	adds	r7, #32
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200057d4 	.word	0x200057d4

080013cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_DMA_Init+0x38>)
 80013d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <MX_DMA_Init+0x38>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6493      	str	r3, [r2, #72]	; 0x48
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_DMA_Init+0x38>)
 80013e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	200d      	movs	r0, #13
 80013f0:	f001 f96c 	bl	80026cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80013f4:	200d      	movs	r0, #13
 80013f6:	f001 f985 	bl	8002704 <HAL_NVIC_EnableIRQ>

}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000

08001408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800141e:	4b34      	ldr	r3, [pc, #208]	; (80014f0 <MX_GPIO_Init+0xe8>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	4a33      	ldr	r2, [pc, #204]	; (80014f0 <MX_GPIO_Init+0xe8>)
 8001424:	f043 0310 	orr.w	r3, r3, #16
 8001428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142a:	4b31      	ldr	r3, [pc, #196]	; (80014f0 <MX_GPIO_Init+0xe8>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001436:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <MX_GPIO_Init+0xe8>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	4a2d      	ldr	r2, [pc, #180]	; (80014f0 <MX_GPIO_Init+0xe8>)
 800143c:	f043 0304 	orr.w	r3, r3, #4
 8001440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001442:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <MX_GPIO_Init+0xe8>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <MX_GPIO_Init+0xe8>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	4a27      	ldr	r2, [pc, #156]	; (80014f0 <MX_GPIO_Init+0xe8>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145a:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <MX_GPIO_Init+0xe8>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <MX_GPIO_Init+0xe8>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	4a21      	ldr	r2, [pc, #132]	; (80014f0 <MX_GPIO_Init+0xe8>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001472:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <MX_GPIO_Init+0xe8>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800147e:	2201      	movs	r2, #1
 8001480:	2108      	movs	r1, #8
 8001482:	481c      	ldr	r0, [pc, #112]	; (80014f4 <MX_GPIO_Init+0xec>)
 8001484:	f002 f8de 	bl	8003644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800148e:	481a      	ldr	r0, [pc, #104]	; (80014f8 <MX_GPIO_Init+0xf0>)
 8001490:	f002 f8d8 	bl	8003644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001494:	2308      	movs	r3, #8
 8001496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001498:	2301      	movs	r3, #1
 800149a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	4812      	ldr	r0, [pc, #72]	; (80014f4 <MX_GPIO_Init+0xec>)
 80014ac:	f001 fe14 	bl	80030d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80014b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_GPIO_Init+0xf4>)
 80014b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	480e      	ldr	r0, [pc, #56]	; (8001500 <MX_GPIO_Init+0xf8>)
 80014c6:	f001 fe07 	bl	80030d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80014ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_GPIO_Init+0xf0>)
 80014e4:	f001 fdf8 	bl	80030d8 <HAL_GPIO_Init>

}
 80014e8:	bf00      	nop
 80014ea:	3728      	adds	r7, #40	; 0x28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40021000 	.word	0x40021000
 80014f4:	48001000 	.word	0x48001000
 80014f8:	48000400 	.word	0x48000400
 80014fc:	10110000 	.word	0x10110000
 8001500:	48000800 	.word	0x48000800

08001504 <HAL_DAC_ConvCpltCallbackCh1>:

/* USER CODE BEGIN 4 */
int lower = 1;
int upper = 3;
void HAL_DAC_ConvCpltCallbackCh1 (DAC_HandleTypeDef * hdac){
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af02      	add	r7, sp, #8
 800150a:	6078      	str	r0, [r7, #4]


	int randomnumber = (rand() % (upper - lower + 1)) + lower;
 800150c:	f004 f940 	bl	8005790 <rand>
 8001510:	4602      	mov	r2, r0
 8001512:	4b5f      	ldr	r3, [pc, #380]	; (8001690 <HAL_DAC_ConvCpltCallbackCh1+0x18c>)
 8001514:	6819      	ldr	r1, [r3, #0]
 8001516:	4b5f      	ldr	r3, [pc, #380]	; (8001694 <HAL_DAC_ConvCpltCallbackCh1+0x190>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	1acb      	subs	r3, r1, r3
 800151c:	3301      	adds	r3, #1
 800151e:	fb92 f1f3 	sdiv	r1, r2, r3
 8001522:	fb03 f301 	mul.w	r3, r3, r1
 8001526:	1ad2      	subs	r2, r2, r3
 8001528:	4b5a      	ldr	r3, [pc, #360]	; (8001694 <HAL_DAC_ConvCpltCallbackCh1+0x190>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4413      	add	r3, r2
 800152e:	60fb      	str	r3, [r7, #12]
	if(randomnumber%3 == 0){
 8001530:	68f9      	ldr	r1, [r7, #12]
 8001532:	4b59      	ldr	r3, [pc, #356]	; (8001698 <HAL_DAC_ConvCpltCallbackCh1+0x194>)
 8001534:	fb83 3201 	smull	r3, r2, r3, r1
 8001538:	17cb      	asrs	r3, r1, #31
 800153a:	1ad2      	subs	r2, r2, r3
 800153c:	4613      	mov	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4413      	add	r3, r2
 8001542:	1aca      	subs	r2, r1, r3
 8001544:	2a00      	cmp	r2, #0
 8001546:	d104      	bne.n	8001552 <HAL_DAC_ConvCpltCallbackCh1+0x4e>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001548:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800154c:	4853      	ldr	r0, [pc, #332]	; (800169c <HAL_DAC_ConvCpltCallbackCh1+0x198>)
 800154e:	f002 f891 	bl	8003674 <HAL_GPIO_TogglePin>
	}


	if(counter == 0){
 8001552:	4b53      	ldr	r3, [pc, #332]	; (80016a0 <HAL_DAC_ConvCpltCallbackCh1+0x19c>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d113      	bne.n	8001582 <HAL_DAC_ConvCpltCallbackCh1+0x7e>
		if(BSP_QSPI_Read((uint8_t *)play, 0x000000, 22050) != QSPI_OK){
 800155a:	f245 6222 	movw	r2, #22050	; 0x5622
 800155e:	2100      	movs	r1, #0
 8001560:	4850      	ldr	r0, [pc, #320]	; (80016a4 <HAL_DAC_ConvCpltCallbackCh1+0x1a0>)
 8001562:	f000 f92f 	bl	80017c4 <BSP_QSPI_Read>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <HAL_DAC_ConvCpltCallbackCh1+0x6c>
			  Error_Handler();
 800156c:	f000 f8b6 	bl	80016dc <Error_Handler>
		  }
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 8001570:	2308      	movs	r3, #8
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	f245 6322 	movw	r3, #22050	; 0x5622
 8001578:	4a4a      	ldr	r2, [pc, #296]	; (80016a4 <HAL_DAC_ConvCpltCallbackCh1+0x1a0>)
 800157a:	2100      	movs	r1, #0
 800157c:	484a      	ldr	r0, [pc, #296]	; (80016a8 <HAL_DAC_ConvCpltCallbackCh1+0x1a4>)
 800157e:	f001 f8f1 	bl	8002764 <HAL_DAC_Start_DMA>
	}
	if(counter == 1){
 8001582:	4b47      	ldr	r3, [pc, #284]	; (80016a0 <HAL_DAC_ConvCpltCallbackCh1+0x19c>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d114      	bne.n	80015b4 <HAL_DAC_ConvCpltCallbackCh1+0xb0>
		if(BSP_QSPI_Read((uint8_t *)play, 0x005622, 22050) != QSPI_OK){
 800158a:	f245 6222 	movw	r2, #22050	; 0x5622
 800158e:	f245 6122 	movw	r1, #22050	; 0x5622
 8001592:	4844      	ldr	r0, [pc, #272]	; (80016a4 <HAL_DAC_ConvCpltCallbackCh1+0x1a0>)
 8001594:	f000 f916 	bl	80017c4 <BSP_QSPI_Read>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_DAC_ConvCpltCallbackCh1+0x9e>
			  Error_Handler();
 800159e:	f000 f89d 	bl	80016dc <Error_Handler>
		  }
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 80015a2:	2308      	movs	r3, #8
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	f245 6322 	movw	r3, #22050	; 0x5622
 80015aa:	4a3e      	ldr	r2, [pc, #248]	; (80016a4 <HAL_DAC_ConvCpltCallbackCh1+0x1a0>)
 80015ac:	2100      	movs	r1, #0
 80015ae:	483e      	ldr	r0, [pc, #248]	; (80016a8 <HAL_DAC_ConvCpltCallbackCh1+0x1a4>)
 80015b0:	f001 f8d8 	bl	8002764 <HAL_DAC_Start_DMA>
	}
	if(counter == 2){
 80015b4:	4b3a      	ldr	r3, [pc, #232]	; (80016a0 <HAL_DAC_ConvCpltCallbackCh1+0x19c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d114      	bne.n	80015e6 <HAL_DAC_ConvCpltCallbackCh1+0xe2>
		if(BSP_QSPI_Read((uint8_t *)play, 0x00AC44, 22050) != QSPI_OK){
 80015bc:	f245 6222 	movw	r2, #22050	; 0x5622
 80015c0:	f64a 4144 	movw	r1, #44100	; 0xac44
 80015c4:	4837      	ldr	r0, [pc, #220]	; (80016a4 <HAL_DAC_ConvCpltCallbackCh1+0x1a0>)
 80015c6:	f000 f8fd 	bl	80017c4 <BSP_QSPI_Read>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <HAL_DAC_ConvCpltCallbackCh1+0xd0>
			  Error_Handler();
 80015d0:	f000 f884 	bl	80016dc <Error_Handler>
		  }
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 80015d4:	2308      	movs	r3, #8
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	f245 6322 	movw	r3, #22050	; 0x5622
 80015dc:	4a31      	ldr	r2, [pc, #196]	; (80016a4 <HAL_DAC_ConvCpltCallbackCh1+0x1a0>)
 80015de:	2100      	movs	r1, #0
 80015e0:	4831      	ldr	r0, [pc, #196]	; (80016a8 <HAL_DAC_ConvCpltCallbackCh1+0x1a4>)
 80015e2:	f001 f8bf 	bl	8002764 <HAL_DAC_Start_DMA>
	}
	if(counter == 3){
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <HAL_DAC_ConvCpltCallbackCh1+0x19c>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d113      	bne.n	8001616 <HAL_DAC_ConvCpltCallbackCh1+0x112>
		if(BSP_QSPI_Read((uint8_t *)play, 0x010266, 22050) != QSPI_OK){
 80015ee:	f245 6222 	movw	r2, #22050	; 0x5622
 80015f2:	492e      	ldr	r1, [pc, #184]	; (80016ac <HAL_DAC_ConvCpltCallbackCh1+0x1a8>)
 80015f4:	482b      	ldr	r0, [pc, #172]	; (80016a4 <HAL_DAC_ConvCpltCallbackCh1+0x1a0>)
 80015f6:	f000 f8e5 	bl	80017c4 <BSP_QSPI_Read>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <HAL_DAC_ConvCpltCallbackCh1+0x100>
			  Error_Handler();
 8001600:	f000 f86c 	bl	80016dc <Error_Handler>
		  }
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 8001604:	2308      	movs	r3, #8
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	f245 6322 	movw	r3, #22050	; 0x5622
 800160c:	4a25      	ldr	r2, [pc, #148]	; (80016a4 <HAL_DAC_ConvCpltCallbackCh1+0x1a0>)
 800160e:	2100      	movs	r1, #0
 8001610:	4825      	ldr	r0, [pc, #148]	; (80016a8 <HAL_DAC_ConvCpltCallbackCh1+0x1a4>)
 8001612:	f001 f8a7 	bl	8002764 <HAL_DAC_Start_DMA>
	}
	if(counter == 4){
 8001616:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <HAL_DAC_ConvCpltCallbackCh1+0x19c>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b04      	cmp	r3, #4
 800161c:	d113      	bne.n	8001646 <HAL_DAC_ConvCpltCallbackCh1+0x142>
		if(BSP_QSPI_Read((uint8_t *)play, 0x015888, 22050) != QSPI_OK){
 800161e:	f245 6222 	movw	r2, #22050	; 0x5622
 8001622:	4923      	ldr	r1, [pc, #140]	; (80016b0 <HAL_DAC_ConvCpltCallbackCh1+0x1ac>)
 8001624:	481f      	ldr	r0, [pc, #124]	; (80016a4 <HAL_DAC_ConvCpltCallbackCh1+0x1a0>)
 8001626:	f000 f8cd 	bl	80017c4 <BSP_QSPI_Read>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <HAL_DAC_ConvCpltCallbackCh1+0x130>
			  Error_Handler();
 8001630:	f000 f854 	bl	80016dc <Error_Handler>
		  }
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 8001634:	2308      	movs	r3, #8
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	f245 6322 	movw	r3, #22050	; 0x5622
 800163c:	4a19      	ldr	r2, [pc, #100]	; (80016a4 <HAL_DAC_ConvCpltCallbackCh1+0x1a0>)
 800163e:	2100      	movs	r1, #0
 8001640:	4819      	ldr	r0, [pc, #100]	; (80016a8 <HAL_DAC_ConvCpltCallbackCh1+0x1a4>)
 8001642:	f001 f88f 	bl	8002764 <HAL_DAC_Start_DMA>
	}
	if(counter == 5){
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <HAL_DAC_ConvCpltCallbackCh1+0x19c>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b05      	cmp	r3, #5
 800164c:	d116      	bne.n	800167c <HAL_DAC_ConvCpltCallbackCh1+0x178>
		if(BSP_QSPI_Read((uint8_t *)play, 0x01AEAA, 22050) != QSPI_OK){
 800164e:	f245 6222 	movw	r2, #22050	; 0x5622
 8001652:	4918      	ldr	r1, [pc, #96]	; (80016b4 <HAL_DAC_ConvCpltCallbackCh1+0x1b0>)
 8001654:	4813      	ldr	r0, [pc, #76]	; (80016a4 <HAL_DAC_ConvCpltCallbackCh1+0x1a0>)
 8001656:	f000 f8b5 	bl	80017c4 <BSP_QSPI_Read>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_DAC_ConvCpltCallbackCh1+0x160>
			  Error_Handler();
 8001660:	f000 f83c 	bl	80016dc <Error_Handler>
		  }
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 8001664:	2308      	movs	r3, #8
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	f245 6322 	movw	r3, #22050	; 0x5622
 800166c:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <HAL_DAC_ConvCpltCallbackCh1+0x1a0>)
 800166e:	2100      	movs	r1, #0
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <HAL_DAC_ConvCpltCallbackCh1+0x1a4>)
 8001672:	f001 f877 	bl	8002764 <HAL_DAC_Start_DMA>
		counter=0;
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_DAC_ConvCpltCallbackCh1+0x19c>)
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
	}
	counter++;
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_DAC_ConvCpltCallbackCh1+0x19c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	3301      	adds	r3, #1
 8001682:	b2da      	uxtb	r2, r3
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_DAC_ConvCpltCallbackCh1+0x19c>)
 8001686:	701a      	strb	r2, [r3, #0]
}
 8001688:	bf00      	nop
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000004 	.word	0x20000004
 8001694:	20000000 	.word	0x20000000
 8001698:	55555556 	.word	0x55555556
 800169c:	48000400 	.word	0x48000400
 80016a0:	200056b6 	.word	0x200056b6
 80016a4:	20000094 	.word	0x20000094
 80016a8:	200056c4 	.word	0x200056c4
 80016ac:	00010266 	.word	0x00010266
 80016b0:	00015888 	.word	0x00015888
 80016b4:	0001aeaa 	.word	0x0001aeaa

080016b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d101      	bne.n	80016ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016ca:	f000 ff03 	bl	80024d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40014800 	.word	0x40014800

080016dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	__BKPT();
 80016e0:	be00      	bkpt	0x0000

  /* USER CODE END Error_Handler_Debug */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 80016f2:	4b32      	ldr	r3, [pc, #200]	; (80017bc <BSP_QSPI_Init+0xd0>)
 80016f4:	4a32      	ldr	r2, [pc, #200]	; (80017c0 <BSP_QSPI_Init+0xd4>)
 80016f6:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 80016f8:	4830      	ldr	r0, [pc, #192]	; (80017bc <BSP_QSPI_Init+0xd0>)
 80016fa:	f002 f8af 	bl	800385c <HAL_QSPI_DeInit>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e054      	b.n	80017b2 <BSP_QSPI_Init+0xc6>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8001708:	f000 f964 	bl	80019d4 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 2; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 26.67MHz */
 800170c:	4b2b      	ldr	r3, [pc, #172]	; (80017bc <BSP_QSPI_Init+0xd0>)
 800170e:	2202      	movs	r2, #2
 8001710:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8001712:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <BSP_QSPI_Init+0xd0>)
 8001714:	2204      	movs	r2, #4
 8001716:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001718:	4b28      	ldr	r3, [pc, #160]	; (80017bc <BSP_QSPI_Init+0xd0>)
 800171a:	2210      	movs	r2, #16
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001722:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	fa93 f3a3 	rbit	r3, r3
 800172a:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 8001736:	2320      	movs	r3, #32
 8001738:	e003      	b.n	8001742 <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	fab3 f383 	clz	r3, r3
 8001740:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25R6435F_FLASH_SIZE) - 1;
 8001742:	3b01      	subs	r3, #1
 8001744:	461a      	mov	r2, r3
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <BSP_QSPI_Init+0xd0>)
 8001748:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <BSP_QSPI_Init+0xd0>)
 800174c:	2200      	movs	r2, #0
 800174e:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <BSP_QSPI_Init+0xd0>)
 8001752:	2200      	movs	r2, #0
 8001754:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8001756:	4819      	ldr	r0, [pc, #100]	; (80017bc <BSP_QSPI_Init+0xd0>)
 8001758:	f002 f80a 	bl	8003770 <HAL_QSPI_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e025      	b.n	80017b2 <BSP_QSPI_Init+0xc6>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8001766:	4815      	ldr	r0, [pc, #84]	; (80017bc <BSP_QSPI_Init+0xd0>)
 8001768:	f000 f974 	bl	8001a54 <QSPI_ResetMemory>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 8001772:	2304      	movs	r3, #4
 8001774:	e01d      	b.n	80017b2 <BSP_QSPI_Init+0xc6>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&QSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 8001776:	2101      	movs	r1, #1
 8001778:	4810      	ldr	r0, [pc, #64]	; (80017bc <BSP_QSPI_Init+0xd0>)
 800177a:	f000 fa35 	bl	8001be8 <QSPI_QuadMode>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <BSP_QSPI_Init+0x9c>
  {
    return QSPI_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e014      	b.n	80017b2 <BSP_QSPI_Init+0xc6>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&QSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 8001788:	2101      	movs	r1, #1
 800178a:	480c      	ldr	r0, [pc, #48]	; (80017bc <BSP_QSPI_Init+0xd0>)
 800178c:	f000 fad4 	bl	8001d38 <QSPI_HighPerfMode>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <BSP_QSPI_Init+0xae>
  {
    return QSPI_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e00b      	b.n	80017b2 <BSP_QSPI_Init+0xc6>
  }
  
  /* Re-configure the clock for the high performance mode */
  QSPIHandle.Init.ClockPrescaler = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <BSP_QSPI_Init+0xd0>)
 800179c:	2201      	movs	r2, #1
 800179e:	605a      	str	r2, [r3, #4]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80017a0:	4806      	ldr	r0, [pc, #24]	; (80017bc <BSP_QSPI_Init+0xd0>)
 80017a2:	f001 ffe5 	bl	8003770 <HAL_QSPI_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <BSP_QSPI_Init+0xc4>
  {
    return QSPI_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <BSP_QSPI_Init+0xc6>
  }

  return QSPI_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20005880 	.word	0x20005880
 80017c0:	a0001000 	.word	0xa0001000

080017c4 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b092      	sub	sp, #72	; 0x48
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 80017d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction        = QUAD_INOUT_READ_CMD;
 80017d6:	23eb      	movs	r3, #235	; 0xeb
 80017d8:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = QSPI_ADDRESS_4_LINES;
 80017da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = QSPI_ADDRESS_24_BITS;
 80017e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e4:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = ReadAddr;
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 80017ea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80017ee:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 80017f0:	2300      	movs	r3, #0
 80017f2:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytes     = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 80017f4:	23aa      	movs	r3, #170	; 0xaa
 80017f6:	61bb      	str	r3, [r7, #24]
  sCommand.DataMode           = QSPI_DATA_4_LINES;
 80017f8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80017fc:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles        = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 80017fe:	2304      	movs	r3, #4
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData             = Size;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode            = QSPI_DDR_MODE_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 800180a:	2300      	movs	r3, #0
 800180c:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 800180e:	2300      	movs	r3, #0
 8001810:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001812:	f107 0310 	add.w	r3, r7, #16
 8001816:	f241 3288 	movw	r2, #5000	; 0x1388
 800181a:	4619      	mov	r1, r3
 800181c:	480b      	ldr	r0, [pc, #44]	; (800184c <BSP_QSPI_Read+0x88>)
 800181e:	f002 f841 	bl	80038a4 <HAL_QSPI_Command>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <BSP_QSPI_Read+0x68>
  {
    return QSPI_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e00b      	b.n	8001844 <BSP_QSPI_Read+0x80>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800182c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001830:	68f9      	ldr	r1, [r7, #12]
 8001832:	4806      	ldr	r0, [pc, #24]	; (800184c <BSP_QSPI_Read+0x88>)
 8001834:	f002 f92b 	bl	8003a8e <HAL_QSPI_Receive>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <BSP_QSPI_Read+0x80>
  }

  return QSPI_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3748      	adds	r7, #72	; 0x48
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20005880 	.word	0x20005880

08001850 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b096      	sub	sp, #88	; 0x58
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	b2db      	uxtb	r3, r3
 8001860:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001864:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8001866:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	429a      	cmp	r2, r3
 800186c:	d901      	bls.n	8001872 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4413      	add	r3, r2
 800187c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800187e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = QUAD_PAGE_PROG_CMD;
 8001884:	2338      	movs	r3, #56	; 0x38
 8001886:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001888:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800188c:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 800188e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001892:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001894:	2300      	movs	r3, #0
 8001896:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8001898:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800189c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80018a6:	2300      	movs	r3, #0
 80018a8:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80018aa:	2300      	movs	r3, #0
 80018ac:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 80018ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018b0:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 80018b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b4:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80018b6:	4824      	ldr	r0, [pc, #144]	; (8001948 <BSP_QSPI_Write+0xf8>)
 80018b8:	f000 f910 	bl	8001adc <QSPI_WriteEnable>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e03b      	b.n	800193e <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80018c6:	f107 0314 	add.w	r3, r7, #20
 80018ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ce:	4619      	mov	r1, r3
 80018d0:	481d      	ldr	r0, [pc, #116]	; (8001948 <BSP_QSPI_Write+0xf8>)
 80018d2:	f001 ffe7 	bl	80038a4 <HAL_QSPI_Command>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e02e      	b.n	800193e <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80018e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e4:	68f9      	ldr	r1, [r7, #12]
 80018e6:	4818      	ldr	r0, [pc, #96]	; (8001948 <BSP_QSPI_Write+0xf8>)
 80018e8:	f002 f83a 	bl	8003960 <HAL_QSPI_Transmit>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e023      	b.n	800193e <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80018f6:	f241 3188 	movw	r1, #5000	; 0x1388
 80018fa:	4813      	ldr	r0, [pc, #76]	; (8001948 <BSP_QSPI_Write+0xf8>)
 80018fc:	f000 f93a 	bl	8001b74 <QSPI_AutoPollingMemReady>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e019      	b.n	800193e <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 800190a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800190c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800190e:	4413      	add	r3, r2
 8001910:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001916:	4413      	add	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 800191a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800191c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001920:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001922:	429a      	cmp	r2, r3
 8001924:	d203      	bcs.n	800192e <BSP_QSPI_Write+0xde>
 8001926:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	e001      	b.n	8001932 <BSP_QSPI_Write+0xe2>
 800192e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001932:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8001934:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001938:	429a      	cmp	r2, r3
 800193a:	d3b8      	bcc.n	80018ae <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3758      	adds	r7, #88	; 0x58
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20005880 	.word	0x20005880

0800194c <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b090      	sub	sp, #64	; 0x40
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001954:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001958:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = BLOCK_ERASE_CMD;
 800195a:	23d8      	movs	r3, #216	; 0xd8
 800195c:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 800195e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001968:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800196e:	2300      	movs	r3, #0
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8001972:	2300      	movs	r3, #0
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800197e:	2300      	movs	r3, #0
 8001980:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001982:	2300      	movs	r3, #0
 8001984:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001986:	4812      	ldr	r0, [pc, #72]	; (80019d0 <BSP_QSPI_Erase_Block+0x84>)
 8001988:	f000 f8a8 	bl	8001adc <QSPI_WriteEnable>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e017      	b.n	80019c6 <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001996:	f107 0308 	add.w	r3, r7, #8
 800199a:	f241 3288 	movw	r2, #5000	; 0x1388
 800199e:	4619      	mov	r1, r3
 80019a0:	480b      	ldr	r0, [pc, #44]	; (80019d0 <BSP_QSPI_Erase_Block+0x84>)
 80019a2:	f001 ff7f 	bl	80038a4 <HAL_QSPI_Command>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e00a      	b.n	80019c6 <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 80019b0:	f640 51ac 	movw	r1, #3500	; 0xdac
 80019b4:	4806      	ldr	r0, [pc, #24]	; (80019d0 <BSP_QSPI_Erase_Block+0x84>)
 80019b6:	f000 f8dd 	bl	8001b74 <QSPI_AutoPollingMemReady>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3740      	adds	r7, #64	; 0x40
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20005880 	.word	0x20005880

080019d4 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <BSP_QSPI_MspInit+0x78>)
 80019dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019de:	4a1b      	ldr	r2, [pc, #108]	; (8001a4c <BSP_QSPI_MspInit+0x78>)
 80019e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e4:	6513      	str	r3, [r2, #80]	; 0x50
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <BSP_QSPI_MspInit+0x78>)
 80019e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 80019f2:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <BSP_QSPI_MspInit+0x78>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a15      	ldr	r2, [pc, #84]	; (8001a4c <BSP_QSPI_MspInit+0x78>)
 80019f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <BSP_QSPI_MspInit+0x78>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <BSP_QSPI_MspInit+0x78>)
 8001a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <BSP_QSPI_MspInit+0x78>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0e:	4a0f      	ldr	r2, [pc, #60]	; (8001a4c <BSP_QSPI_MspInit+0x78>)
 8001a10:	f043 0310 	orr.w	r3, r3, #16
 8001a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a16:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <BSP_QSPI_MspInit+0x78>)
 8001a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8001a22:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001a26:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a30:	2303      	movs	r3, #3
 8001a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a34:	230a      	movs	r3, #10
 8001a36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a38:	f107 030c 	add.w	r3, r7, #12
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4804      	ldr	r0, [pc, #16]	; (8001a50 <BSP_QSPI_MspInit+0x7c>)
 8001a40:	f001 fb4a 	bl	80030d8 <HAL_GPIO_Init>
}
 8001a44:	bf00      	nop
 8001a46:	3720      	adds	r7, #32
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	48001000 	.word	0x48001000

08001a54 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b090      	sub	sp, #64	; 0x40
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001a5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a60:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8001a62:	2366      	movs	r3, #102	; 0x66
 8001a64:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a82:	f107 0308 	add.w	r3, r7, #8
 8001a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4812      	ldr	r0, [pc, #72]	; (8001ad8 <QSPI_ResetMemory+0x84>)
 8001a8e:	f001 ff09 	bl	80038a4 <HAL_QSPI_Command>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e019      	b.n	8001ad0 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8001a9c:	2399      	movs	r3, #153	; 0x99
 8001a9e:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001aa0:	f107 0308 	add.w	r3, r7, #8
 8001aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	480b      	ldr	r0, [pc, #44]	; (8001ad8 <QSPI_ResetMemory+0x84>)
 8001aac:	f001 fefa 	bl	80038a4 <HAL_QSPI_Command>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e00a      	b.n	8001ad0 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001aba:	f241 3188 	movw	r1, #5000	; 0x1388
 8001abe:	4806      	ldr	r0, [pc, #24]	; (8001ad8 <QSPI_ResetMemory+0x84>)
 8001ac0:	f000 f858 	bl	8001b74 <QSPI_AutoPollingMemReady>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3740      	adds	r7, #64	; 0x40
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20005880 	.word	0x20005880

08001adc <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b096      	sub	sp, #88	; 0x58
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001ae4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae8:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8001aea:	2306      	movs	r3, #6
 8001aec:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001b02:	2300      	movs	r3, #0
 8001b04:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001b06:	2300      	movs	r3, #0
 8001b08:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b0a:	f107 0320 	add.w	r3, r7, #32
 8001b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b12:	4619      	mov	r1, r3
 8001b14:	4816      	ldr	r0, [pc, #88]	; (8001b70 <QSPI_WriteEnable+0x94>)
 8001b16:	f001 fec5 	bl	80038a4 <HAL_QSPI_Command>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e020      	b.n	8001b66 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = MX25R6435F_SR_WEL;
 8001b24:	2302      	movs	r3, #2
 8001b26:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WEL;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8001b30:	2301      	movs	r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8001b34:	2310      	movs	r3, #16
 8001b36:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001b38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b3c:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8001b3e:	2305      	movs	r3, #5
 8001b40:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8001b42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b46:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b48:	f107 0208 	add.w	r2, r7, #8
 8001b4c:	f107 0120 	add.w	r1, r7, #32
 8001b50:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b54:	4806      	ldr	r0, [pc, #24]	; (8001b70 <QSPI_WriteEnable+0x94>)
 8001b56:	f002 f83c 	bl	8003bd2 <HAL_QSPI_AutoPolling>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3758      	adds	r7, #88	; 0x58
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20005880 	.word	0x20005880

08001b74 <QSPI_AutoPollingMemReady>:
  * @param  hqspi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b096      	sub	sp, #88	; 0x58
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001b7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b82:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001b84:	2305      	movs	r3, #5
 8001b86:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001b90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b94:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WIP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8001bb6:	2310      	movs	r3, #16
 8001bb8:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001bba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bbe:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 8001bc0:	f107 0208 	add.w	r2, r7, #8
 8001bc4:	f107 0120 	add.w	r1, r7, #32
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	4806      	ldr	r0, [pc, #24]	; (8001be4 <QSPI_AutoPollingMemReady+0x70>)
 8001bcc:	f002 f801 	bl	8003bd2 <HAL_QSPI_AutoPolling>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3758      	adds	r7, #88	; 0x58
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20005880 	.word	0x20005880

08001be8 <QSPI_QuadMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b092      	sub	sp, #72	; 0x48
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001bfa:	2305      	movs	r3, #5
 8001bfc:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001c06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c0a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8001c10:	2301      	movs	r3, #1
 8001c12:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4842      	ldr	r0, [pc, #264]	; (8001d34 <QSPI_QuadMode+0x14c>)
 8001c2c:	f001 fe3a 	bl	80038a4 <HAL_QSPI_Command>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <QSPI_QuadMode+0x52>
  {
    return QSPI_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e077      	b.n	8001d2a <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c3a:	f107 030f 	add.w	r3, r7, #15
 8001c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c42:	4619      	mov	r1, r3
 8001c44:	483b      	ldr	r0, [pc, #236]	; (8001d34 <QSPI_QuadMode+0x14c>)
 8001c46:	f001 ff22 	bl	8003a8e <HAL_QSPI_Receive>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <QSPI_QuadMode+0x6c>
  {
    return QSPI_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e06a      	b.n	8001d2a <QSPI_QuadMode+0x142>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001c54:	4837      	ldr	r0, [pc, #220]	; (8001d34 <QSPI_QuadMode+0x14c>)
 8001c56:	f7ff ff41 	bl	8001adc <QSPI_WriteEnable>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <QSPI_QuadMode+0x7c>
  {
    return QSPI_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e062      	b.n	8001d2a <QSPI_QuadMode+0x142>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d105      	bne.n	8001c76 <QSPI_QuadMode+0x8e>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	e004      	b.n	8001c80 <QSPI_QuadMode+0x98>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8001c80:	2301      	movs	r3, #1
 8001c82:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c84:	f107 0310 	add.w	r3, r7, #16
 8001c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4829      	ldr	r0, [pc, #164]	; (8001d34 <QSPI_QuadMode+0x14c>)
 8001c90:	f001 fe08 	bl	80038a4 <HAL_QSPI_Command>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <QSPI_QuadMode+0xb6>
  {
    return QSPI_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e045      	b.n	8001d2a <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c9e:	f107 030f 	add.w	r3, r7, #15
 8001ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4822      	ldr	r0, [pc, #136]	; (8001d34 <QSPI_QuadMode+0x14c>)
 8001caa:	f001 fe59 	bl	8003960 <HAL_QSPI_Transmit>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <QSPI_QuadMode+0xd0>
  {
    return QSPI_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e038      	b.n	8001d2a <QSPI_QuadMode+0x142>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001cb8:	f241 3188 	movw	r1, #5000	; 0x1388
 8001cbc:	481d      	ldr	r0, [pc, #116]	; (8001d34 <QSPI_QuadMode+0x14c>)
 8001cbe:	f7ff ff59 	bl	8001b74 <QSPI_AutoPollingMemReady>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <QSPI_QuadMode+0xe4>
  {
    return QSPI_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e02e      	b.n	8001d2a <QSPI_QuadMode+0x142>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8001ccc:	2305      	movs	r3, #5
 8001cce:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4816      	ldr	r0, [pc, #88]	; (8001d34 <QSPI_QuadMode+0x14c>)
 8001cdc:	f001 fde2 	bl	80038a4 <HAL_QSPI_Command>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <QSPI_QuadMode+0x102>
  {
    return QSPI_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e01f      	b.n	8001d2a <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001cea:	f107 030f 	add.w	r3, r7, #15
 8001cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	480f      	ldr	r0, [pc, #60]	; (8001d34 <QSPI_QuadMode+0x14c>)
 8001cf6:	f001 feca 	bl	8003a8e <HAL_QSPI_Receive>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <QSPI_QuadMode+0x11c>
  {
    return QSPI_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e012      	b.n	8001d2a <QSPI_QuadMode+0x142>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d102      	bne.n	8001d14 <QSPI_QuadMode+0x12c>
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d007      	beq.n	8001d24 <QSPI_QuadMode+0x13c>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d004      	beq.n	8001d28 <QSPI_QuadMode+0x140>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8001d1e:	78fb      	ldrb	r3, [r7, #3]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <QSPI_QuadMode+0x140>
  {
    return QSPI_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <QSPI_QuadMode+0x142>
  }

  return QSPI_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3748      	adds	r7, #72	; 0x48
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20005880 	.word	0x20005880

08001d38 <QSPI_HighPerfMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b092      	sub	sp, #72	; 0x48
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001d44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d48:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001d4a:	2305      	movs	r3, #5
 8001d4c:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001d56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d5a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8001d60:	2301      	movs	r3, #1
 8001d62:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4853      	ldr	r0, [pc, #332]	; (8001ec8 <QSPI_HighPerfMode+0x190>)
 8001d7c:	f001 fd92 	bl	80038a4 <HAL_QSPI_Command>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <QSPI_HighPerfMode+0x52>
  {
    return QSPI_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e09a      	b.n	8001ec0 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d8a:	f107 030c 	add.w	r3, r7, #12
 8001d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d92:	4619      	mov	r1, r3
 8001d94:	484c      	ldr	r0, [pc, #304]	; (8001ec8 <QSPI_HighPerfMode+0x190>)
 8001d96:	f001 fe7a 	bl	8003a8e <HAL_QSPI_Receive>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <QSPI_HighPerfMode+0x6c>
  {
    return QSPI_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e08d      	b.n	8001ec0 <QSPI_HighPerfMode+0x188>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8001da4:	2315      	movs	r3, #21
 8001da6:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8001da8:	2302      	movs	r3, #2
 8001daa:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001dac:	f107 0310 	add.w	r3, r7, #16
 8001db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db4:	4619      	mov	r1, r3
 8001db6:	4844      	ldr	r0, [pc, #272]	; (8001ec8 <QSPI_HighPerfMode+0x190>)
 8001db8:	f001 fd74 	bl	80038a4 <HAL_QSPI_Command>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <QSPI_HighPerfMode+0x8e>
  {
    return QSPI_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e07c      	b.n	8001ec0 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001dc6:	f107 030c 	add.w	r3, r7, #12
 8001dca:	3301      	adds	r3, #1
 8001dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	483d      	ldr	r0, [pc, #244]	; (8001ec8 <QSPI_HighPerfMode+0x190>)
 8001dd4:	f001 fe5b 	bl	8003a8e <HAL_QSPI_Receive>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <QSPI_HighPerfMode+0xaa>
  {
    return QSPI_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e06e      	b.n	8001ec0 <QSPI_HighPerfMode+0x188>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001de2:	4839      	ldr	r0, [pc, #228]	; (8001ec8 <QSPI_HighPerfMode+0x190>)
 8001de4:	f7ff fe7a 	bl	8001adc <QSPI_WriteEnable>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <QSPI_HighPerfMode+0xba>
  {
    return QSPI_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e066      	b.n	8001ec0 <QSPI_HighPerfMode+0x188>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d105      	bne.n	8001e04 <QSPI_HighPerfMode+0xcc>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8001df8:	7bbb      	ldrb	r3, [r7, #14]
 8001dfa:	f043 0302 	orr.w	r3, r3, #2
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	73bb      	strb	r3, [r7, #14]
 8001e02:	e004      	b.n	8001e0e <QSPI_HighPerfMode+0xd6>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8001e04:	7bbb      	ldrb	r3, [r7, #14]
 8001e06:	f023 0302 	bic.w	r3, r3, #2
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 3;
 8001e12:	2303      	movs	r3, #3
 8001e14:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e16:	f107 0310 	add.w	r3, r7, #16
 8001e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4829      	ldr	r0, [pc, #164]	; (8001ec8 <QSPI_HighPerfMode+0x190>)
 8001e22:	f001 fd3f 	bl	80038a4 <HAL_QSPI_Command>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <QSPI_HighPerfMode+0xf8>
  {
    return QSPI_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e047      	b.n	8001ec0 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e30:	f107 030c 	add.w	r3, r7, #12
 8001e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4823      	ldr	r0, [pc, #140]	; (8001ec8 <QSPI_HighPerfMode+0x190>)
 8001e3c:	f001 fd90 	bl	8003960 <HAL_QSPI_Transmit>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <QSPI_HighPerfMode+0x112>
  {
    return QSPI_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e03a      	b.n	8001ec0 <QSPI_HighPerfMode+0x188>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001e4a:	f241 3188 	movw	r1, #5000	; 0x1388
 8001e4e:	481e      	ldr	r0, [pc, #120]	; (8001ec8 <QSPI_HighPerfMode+0x190>)
 8001e50:	f7ff fe90 	bl	8001b74 <QSPI_AutoPollingMemReady>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <QSPI_HighPerfMode+0x126>
  {
    return QSPI_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e030      	b.n	8001ec0 <QSPI_HighPerfMode+0x188>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8001e5e:	2315      	movs	r3, #21
 8001e60:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8001e62:	2302      	movs	r3, #2
 8001e64:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e66:	f107 0310 	add.w	r3, r7, #16
 8001e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4815      	ldr	r0, [pc, #84]	; (8001ec8 <QSPI_HighPerfMode+0x190>)
 8001e72:	f001 fd17 	bl	80038a4 <HAL_QSPI_Command>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <QSPI_HighPerfMode+0x148>
  {
    return QSPI_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e01f      	b.n	8001ec0 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e80:	f107 030c 	add.w	r3, r7, #12
 8001e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e88:	4619      	mov	r1, r3
 8001e8a:	480f      	ldr	r0, [pc, #60]	; (8001ec8 <QSPI_HighPerfMode+0x190>)
 8001e8c:	f001 fdff 	bl	8003a8e <HAL_QSPI_Receive>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <QSPI_HighPerfMode+0x162>
  {
    return QSPI_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e012      	b.n	8001ec0 <QSPI_HighPerfMode+0x188>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8001e9a:	7b7b      	ldrb	r3, [r7, #13]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d102      	bne.n	8001eaa <QSPI_HighPerfMode+0x172>
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d007      	beq.n	8001eba <QSPI_HighPerfMode+0x182>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8001eaa:	7b7b      	ldrb	r3, [r7, #13]
 8001eac:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d004      	beq.n	8001ebe <QSPI_HighPerfMode+0x186>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <QSPI_HighPerfMode+0x186>
  {
    return QSPI_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <QSPI_HighPerfMode+0x188>
  }

  return QSPI_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3748      	adds	r7, #72	; 0x48
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20005880 	.word	0x20005880

08001ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <HAL_MspInit+0x44>)
 8001ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed6:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <HAL_MspInit+0x44>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6613      	str	r3, [r2, #96]	; 0x60
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <HAL_MspInit+0x44>)
 8001ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_MspInit+0x44>)
 8001eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eee:	4a08      	ldr	r2, [pc, #32]	; (8001f10 <HAL_MspInit+0x44>)
 8001ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_MspInit+0x44>)
 8001ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000

08001f14 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a2a      	ldr	r2, [pc, #168]	; (8001fdc <HAL_DAC_MspInit+0xc8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d14d      	bne.n	8001fd2 <HAL_DAC_MspInit+0xbe>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001f36:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <HAL_DAC_MspInit+0xcc>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	4a29      	ldr	r2, [pc, #164]	; (8001fe0 <HAL_DAC_MspInit+0xcc>)
 8001f3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f40:	6593      	str	r3, [r2, #88]	; 0x58
 8001f42:	4b27      	ldr	r3, [pc, #156]	; (8001fe0 <HAL_DAC_MspInit+0xcc>)
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4e:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <HAL_DAC_MspInit+0xcc>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	4a23      	ldr	r2, [pc, #140]	; (8001fe0 <HAL_DAC_MspInit+0xcc>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5a:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <HAL_DAC_MspInit+0xcc>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f66:	2310      	movs	r3, #16
 8001f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	4619      	mov	r1, r3
 8001f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f7c:	f001 f8ac 	bl	80030d8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001f80:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <HAL_DAC_MspInit+0xd0>)
 8001f82:	4a19      	ldr	r2, [pc, #100]	; (8001fe8 <HAL_DAC_MspInit+0xd4>)
 8001f84:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001f86:	4b17      	ldr	r3, [pc, #92]	; (8001fe4 <HAL_DAC_MspInit+0xd0>)
 8001f88:	2206      	movs	r2, #6
 8001f8a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f8c:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <HAL_DAC_MspInit+0xd0>)
 8001f8e:	2210      	movs	r2, #16
 8001f90:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f92:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <HAL_DAC_MspInit+0xd0>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <HAL_DAC_MspInit+0xd0>)
 8001f9a:	2280      	movs	r2, #128	; 0x80
 8001f9c:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f9e:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <HAL_DAC_MspInit+0xd0>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <HAL_DAC_MspInit+0xd0>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001faa:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <HAL_DAC_MspInit+0xd0>)
 8001fac:	2220      	movs	r2, #32
 8001fae:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <HAL_DAC_MspInit+0xd0>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001fb6:	480b      	ldr	r0, [pc, #44]	; (8001fe4 <HAL_DAC_MspInit+0xd0>)
 8001fb8:	f000 fe58 	bl	8002c6c <HAL_DMA_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8001fc2:	f7ff fb8b 	bl	80016dc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a06      	ldr	r2, [pc, #24]	; (8001fe4 <HAL_DAC_MspInit+0xd0>)
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <HAL_DAC_MspInit+0xd0>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001fd2:	bf00      	nop
 8001fd4:	3728      	adds	r7, #40	; 0x28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40007400 	.word	0x40007400
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	20005714 	.word	0x20005714
 8001fe8:	40020030 	.word	0x40020030

08001fec <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	; 0x28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a26      	ldr	r2, [pc, #152]	; (80020a4 <HAL_QSPI_MspInit+0xb8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d145      	bne.n	800209a <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800200e:	4b26      	ldr	r3, [pc, #152]	; (80020a8 <HAL_QSPI_MspInit+0xbc>)
 8002010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002012:	4a25      	ldr	r2, [pc, #148]	; (80020a8 <HAL_QSPI_MspInit+0xbc>)
 8002014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002018:	6513      	str	r3, [r2, #80]	; 0x50
 800201a:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <HAL_QSPI_MspInit+0xbc>)
 800201c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800201e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002026:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <HAL_QSPI_MspInit+0xbc>)
 8002028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202a:	4a1f      	ldr	r2, [pc, #124]	; (80020a8 <HAL_QSPI_MspInit+0xbc>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002032:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <HAL_QSPI_MspInit+0xbc>)
 8002034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800203e:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <HAL_QSPI_MspInit+0xbc>)
 8002040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002042:	4a19      	ldr	r2, [pc, #100]	; (80020a8 <HAL_QSPI_MspInit+0xbc>)
 8002044:	f043 0310 	orr.w	r3, r3, #16
 8002048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800204a:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <HAL_QSPI_MspInit+0xbc>)
 800204c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]
    PE10     ------> QUADSPI_CLK
    PE11     ------> QUADSPI_NCS
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002056:	23c0      	movs	r3, #192	; 0xc0
 8002058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205a:	2302      	movs	r3, #2
 800205c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002062:	2303      	movs	r3, #3
 8002064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002066:	230a      	movs	r3, #10
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	4619      	mov	r1, r3
 8002070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002074:	f001 f830 	bl	80030d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8002078:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800207c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207e:	2302      	movs	r3, #2
 8002080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002086:	2303      	movs	r3, #3
 8002088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800208a:	230a      	movs	r3, #10
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800208e:	f107 0314 	add.w	r3, r7, #20
 8002092:	4619      	mov	r1, r3
 8002094:	4805      	ldr	r0, [pc, #20]	; (80020ac <HAL_QSPI_MspInit+0xc0>)
 8002096:	f001 f81f 	bl	80030d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800209a:	bf00      	nop
 800209c:	3728      	adds	r7, #40	; 0x28
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	a0001000 	.word	0xa0001000
 80020a8:	40021000 	.word	0x40021000
 80020ac:	48001000 	.word	0x48001000

080020b0 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0b      	ldr	r2, [pc, #44]	; (80020ec <HAL_QSPI_MspDeInit+0x3c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d10f      	bne.n	80020e2 <HAL_QSPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80020c2:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <HAL_QSPI_MspDeInit+0x40>)
 80020c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c6:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <HAL_QSPI_MspDeInit+0x40>)
 80020c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020cc:	6513      	str	r3, [r2, #80]	; 0x50
    PE10     ------> QUADSPI_CLK
    PE11     ------> QUADSPI_NCS
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6|GPIO_PIN_7);
 80020ce:	21c0      	movs	r1, #192	; 0xc0
 80020d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d4:	f001 f9aa 	bl	800342c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13);
 80020d8:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 80020dc:	4805      	ldr	r0, [pc, #20]	; (80020f4 <HAL_QSPI_MspDeInit+0x44>)
 80020de:	f001 f9a5 	bl	800342c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	a0001000 	.word	0xa0001000
 80020f0:	40021000 	.word	0x40021000
 80020f4:	48001000 	.word	0x48001000

080020f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002108:	d10b      	bne.n	8002122 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_TIM_Base_MspInit+0x38>)
 800210c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210e:	4a08      	ldr	r2, [pc, #32]	; (8002130 <HAL_TIM_Base_MspInit+0x38>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6593      	str	r3, [r2, #88]	; 0x58
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <HAL_TIM_Base_MspInit+0x38>)
 8002118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000

08002134 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08c      	sub	sp, #48	; 0x30
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8002144:	2200      	movs	r2, #0
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	201a      	movs	r0, #26
 800214a:	f000 fabf 	bl	80026cc <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800214e:	201a      	movs	r0, #26
 8002150:	f000 fad8 	bl	8002704 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8002154:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <HAL_InitTick+0x9c>)
 8002156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002158:	4a1d      	ldr	r2, [pc, #116]	; (80021d0 <HAL_InitTick+0x9c>)
 800215a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800215e:	6613      	str	r3, [r2, #96]	; 0x60
 8002160:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <HAL_InitTick+0x9c>)
 8002162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800216c:	f107 0210 	add.w	r2, r7, #16
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	4611      	mov	r1, r2
 8002176:	4618      	mov	r0, r3
 8002178:	f002 fd50 	bl	8004c1c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800217c:	f002 fd38 	bl	8004bf0 <HAL_RCC_GetPCLK2Freq>
 8002180:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002184:	4a13      	ldr	r2, [pc, #76]	; (80021d4 <HAL_InitTick+0xa0>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	0c9b      	lsrs	r3, r3, #18
 800218c:	3b01      	subs	r3, #1
 800218e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <HAL_InitTick+0xa4>)
 8002192:	4a12      	ldr	r2, [pc, #72]	; (80021dc <HAL_InitTick+0xa8>)
 8002194:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <HAL_InitTick+0xa4>)
 8002198:	f240 32e7 	movw	r2, #999	; 0x3e7
 800219c:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800219e:	4a0e      	ldr	r2, [pc, #56]	; (80021d8 <HAL_InitTick+0xa4>)
 80021a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a2:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <HAL_InitTick+0xa4>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021aa:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_InitTick+0xa4>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 80021b0:	4809      	ldr	r0, [pc, #36]	; (80021d8 <HAL_InitTick+0xa4>)
 80021b2:	f002 fdc5 	bl	8004d40 <HAL_TIM_Base_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d104      	bne.n	80021c6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80021bc:	4806      	ldr	r0, [pc, #24]	; (80021d8 <HAL_InitTick+0xa4>)
 80021be:	f002 fe17 	bl	8004df0 <HAL_TIM_Base_Start_IT>
 80021c2:	4603      	mov	r3, r0
 80021c4:	e000      	b.n	80021c8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3730      	adds	r7, #48	; 0x30
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40021000 	.word	0x40021000
 80021d4:	431bde83 	.word	0x431bde83
 80021d8:	200058c4 	.word	0x200058c4
 80021dc:	40014800 	.word	0x40014800

080021e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021e4:	e7fe      	b.n	80021e4 <NMI_Handler+0x4>

080021e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ea:	e7fe      	b.n	80021ea <HardFault_Handler+0x4>

080021ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f0:	e7fe      	b.n	80021f0 <MemManage_Handler+0x4>

080021f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021f6:	e7fe      	b.n	80021f6 <BusFault_Handler+0x4>

080021f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021fc:	e7fe      	b.n	80021fc <UsageFault_Handler+0x4>

080021fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800223c:	4802      	ldr	r0, [pc, #8]	; (8002248 <DMA1_Channel3_IRQHandler+0x10>)
 800223e:	f000 fe6b 	bl	8002f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20005714 	.word	0x20005714

0800224c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002250:	4802      	ldr	r0, [pc, #8]	; (800225c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8002252:	f002 fe3d 	bl	8004ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	200058c4 	.word	0x200058c4

08002260 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
	return 1;
 8002264:	2301      	movs	r3, #1
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <_kill>:

int _kill(int pid, int sig)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800227a:	f003 fa57 	bl	800572c <__errno>
 800227e:	4603      	mov	r3, r0
 8002280:	2216      	movs	r2, #22
 8002282:	601a      	str	r2, [r3, #0]
	return -1;
 8002284:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <_exit>:

void _exit (int status)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002298:	f04f 31ff 	mov.w	r1, #4294967295
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff ffe7 	bl	8002270 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022a2:	e7fe      	b.n	80022a2 <_exit+0x12>

080022a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	e00a      	b.n	80022cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022b6:	f3af 8000 	nop.w
 80022ba:	4601      	mov	r1, r0
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	60ba      	str	r2, [r7, #8]
 80022c2:	b2ca      	uxtb	r2, r1
 80022c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	3301      	adds	r3, #1
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	dbf0      	blt.n	80022b6 <_read+0x12>
	}

return len;
 80022d4:	687b      	ldr	r3, [r7, #4]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b086      	sub	sp, #24
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	e009      	b.n	8002304 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	60ba      	str	r2, [r7, #8]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	3301      	adds	r3, #1
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	429a      	cmp	r2, r3
 800230a:	dbf1      	blt.n	80022f0 <_write+0x12>
	}
	return len;
 800230c:	687b      	ldr	r3, [r7, #4]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <_close>:

int _close(int file)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
	return -1;
 800231e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800233e:	605a      	str	r2, [r3, #4]
	return 0;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <_isatty>:

int _isatty(int file)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
	return 1;
 8002356:	2301      	movs	r3, #1
}
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
	return 0;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002388:	4a14      	ldr	r2, [pc, #80]	; (80023dc <_sbrk+0x5c>)
 800238a:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <_sbrk+0x60>)
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002394:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <_sbrk+0x64>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d102      	bne.n	80023a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800239c:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <_sbrk+0x64>)
 800239e:	4a12      	ldr	r2, [pc, #72]	; (80023e8 <_sbrk+0x68>)
 80023a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a2:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <_sbrk+0x64>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d207      	bcs.n	80023c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b0:	f003 f9bc 	bl	800572c <__errno>
 80023b4:	4603      	mov	r3, r0
 80023b6:	220c      	movs	r2, #12
 80023b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295
 80023be:	e009      	b.n	80023d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <_sbrk+0x64>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023c6:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <_sbrk+0x64>)
 80023d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023d2:	68fb      	ldr	r3, [r7, #12]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20018000 	.word	0x20018000
 80023e0:	00000400 	.word	0x00000400
 80023e4:	200056b8 	.word	0x200056b8
 80023e8:	20005928 	.word	0x20005928

080023ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023f0:	4b15      	ldr	r3, [pc, #84]	; (8002448 <SystemInit+0x5c>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f6:	4a14      	ldr	r2, [pc, #80]	; (8002448 <SystemInit+0x5c>)
 80023f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002400:	4b12      	ldr	r3, [pc, #72]	; (800244c <SystemInit+0x60>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a11      	ldr	r2, [pc, #68]	; (800244c <SystemInit+0x60>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800240c:	4b0f      	ldr	r3, [pc, #60]	; (800244c <SystemInit+0x60>)
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002412:	4b0e      	ldr	r3, [pc, #56]	; (800244c <SystemInit+0x60>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a0d      	ldr	r2, [pc, #52]	; (800244c <SystemInit+0x60>)
 8002418:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800241c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002420:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <SystemInit+0x60>)
 8002424:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002428:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800242a:	4b08      	ldr	r3, [pc, #32]	; (800244c <SystemInit+0x60>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a07      	ldr	r2, [pc, #28]	; (800244c <SystemInit+0x60>)
 8002430:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002434:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002436:	4b05      	ldr	r3, [pc, #20]	; (800244c <SystemInit+0x60>)
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000ed00 	.word	0xe000ed00
 800244c:	40021000 	.word	0x40021000

08002450 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002450:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002488 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002454:	f7ff ffca 	bl	80023ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002458:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800245a:	e003      	b.n	8002464 <LoopCopyDataInit>

0800245c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800245e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002460:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002462:	3104      	adds	r1, #4

08002464 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002464:	480a      	ldr	r0, [pc, #40]	; (8002490 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002466:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002468:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800246a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800246c:	d3f6      	bcc.n	800245c <CopyDataInit>
	ldr	r2, =_sbss
 800246e:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002470:	e002      	b.n	8002478 <LoopFillZerobss>

08002472 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002472:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002474:	f842 3b04 	str.w	r3, [r2], #4

08002478 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002478:	4b08      	ldr	r3, [pc, #32]	; (800249c <LoopForever+0x16>)
	cmp	r2, r3
 800247a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800247c:	d3f9      	bcc.n	8002472 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800247e:	f003 f95b 	bl	8005738 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002482:	f7fe fd8b 	bl	8000f9c <main>

08002486 <LoopForever>:

LoopForever:
    b LoopForever
 8002486:	e7fe      	b.n	8002486 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002488:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800248c:	0800714c 	.word	0x0800714c
	ldr	r0, =_sdata
 8002490:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002494:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8002498:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 800249c:	20005924 	.word	0x20005924

080024a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024a0:	e7fe      	b.n	80024a0 <ADC1_2_IRQHandler>

080024a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ac:	2003      	movs	r0, #3
 80024ae:	f000 f902 	bl	80026b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024b2:	200f      	movs	r0, #15
 80024b4:	f7ff fe3e 	bl	8002134 <HAL_InitTick>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d002      	beq.n	80024c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	71fb      	strb	r3, [r7, #7]
 80024c2:	e001      	b.n	80024c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024c4:	f7ff fd02 	bl	8001ecc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024c8:	79fb      	ldrb	r3, [r7, #7]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_IncTick+0x20>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_IncTick+0x24>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	4a04      	ldr	r2, [pc, #16]	; (80024f8 <HAL_IncTick+0x24>)
 80024e6:	6013      	str	r3, [r2, #0]
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000010 	.word	0x20000010
 80024f8:	20005910 	.word	0x20005910

080024fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <HAL_GetTick+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20005910 	.word	0x20005910

08002514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800251c:	f7ff ffee 	bl	80024fc <HAL_GetTick>
 8002520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252c:	d005      	beq.n	800253a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <HAL_Delay+0x44>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4413      	add	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800253a:	bf00      	nop
 800253c:	f7ff ffde 	bl	80024fc <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	429a      	cmp	r2, r3
 800254a:	d8f7      	bhi.n	800253c <HAL_Delay+0x28>
  {
  }
}
 800254c:	bf00      	nop
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000010 	.word	0x20000010

0800255c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800256c:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <__NVIC_SetPriorityGrouping+0x44>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002578:	4013      	ands	r3, r2
 800257a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800258c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800258e:	4a04      	ldr	r2, [pc, #16]	; (80025a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	60d3      	str	r3, [r2, #12]
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a8:	4b04      	ldr	r3, [pc, #16]	; (80025bc <__NVIC_GetPriorityGrouping+0x18>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	0a1b      	lsrs	r3, r3, #8
 80025ae:	f003 0307 	and.w	r3, r3, #7
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	db0b      	blt.n	80025ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	f003 021f 	and.w	r2, r3, #31
 80025d8:	4907      	ldr	r1, [pc, #28]	; (80025f8 <__NVIC_EnableIRQ+0x38>)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	2001      	movs	r0, #1
 80025e2:	fa00 f202 	lsl.w	r2, r0, r2
 80025e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	e000e100 	.word	0xe000e100

080025fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260c:	2b00      	cmp	r3, #0
 800260e:	db0a      	blt.n	8002626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	b2da      	uxtb	r2, r3
 8002614:	490c      	ldr	r1, [pc, #48]	; (8002648 <__NVIC_SetPriority+0x4c>)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	0112      	lsls	r2, r2, #4
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	440b      	add	r3, r1
 8002620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002624:	e00a      	b.n	800263c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4908      	ldr	r1, [pc, #32]	; (800264c <__NVIC_SetPriority+0x50>)
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	3b04      	subs	r3, #4
 8002634:	0112      	lsls	r2, r2, #4
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	440b      	add	r3, r1
 800263a:	761a      	strb	r2, [r3, #24]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	e000e100 	.word	0xe000e100
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	; 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f1c3 0307 	rsb	r3, r3, #7
 800266a:	2b04      	cmp	r3, #4
 800266c:	bf28      	it	cs
 800266e:	2304      	movcs	r3, #4
 8002670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3304      	adds	r3, #4
 8002676:	2b06      	cmp	r3, #6
 8002678:	d902      	bls.n	8002680 <NVIC_EncodePriority+0x30>
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3b03      	subs	r3, #3
 800267e:	e000      	b.n	8002682 <NVIC_EncodePriority+0x32>
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	f04f 32ff 	mov.w	r2, #4294967295
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43da      	mvns	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	401a      	ands	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002698:	f04f 31ff 	mov.w	r1, #4294967295
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	fa01 f303 	lsl.w	r3, r1, r3
 80026a2:	43d9      	mvns	r1, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	4313      	orrs	r3, r2
         );
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3724      	adds	r7, #36	; 0x24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff ff4c 	bl	800255c <__NVIC_SetPriorityGrouping>
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026de:	f7ff ff61 	bl	80025a4 <__NVIC_GetPriorityGrouping>
 80026e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	68b9      	ldr	r1, [r7, #8]
 80026e8:	6978      	ldr	r0, [r7, #20]
 80026ea:	f7ff ffb1 	bl	8002650 <NVIC_EncodePriority>
 80026ee:	4602      	mov	r2, r0
 80026f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f4:	4611      	mov	r1, r2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff ff80 	bl	80025fc <__NVIC_SetPriority>
}
 80026fc:	bf00      	nop
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff ff54 	bl	80025c0 <__NVIC_EnableIRQ>
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e014      	b.n	800275c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	791b      	ldrb	r3, [r3, #4]
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d105      	bne.n	8002748 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff fbe6 	bl	8001f14 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
 8002770:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	795b      	ldrb	r3, [r3, #5]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_DAC_Start_DMA+0x1e>
 800277e:	2302      	movs	r3, #2
 8002780:	e0ab      	b.n	80028da <HAL_DAC_Start_DMA+0x176>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2202      	movs	r2, #2
 800278c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d12f      	bne.n	80027f4 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	4a52      	ldr	r2, [pc, #328]	; (80028e4 <HAL_DAC_Start_DMA+0x180>)
 800279a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	4a51      	ldr	r2, [pc, #324]	; (80028e8 <HAL_DAC_Start_DMA+0x184>)
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	4a50      	ldr	r2, [pc, #320]	; (80028ec <HAL_DAC_Start_DMA+0x188>)
 80027aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027ba:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d013      	beq.n	80027ea <HAL_DAC_Start_DMA+0x86>
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d845      	bhi.n	8002854 <HAL_DAC_Start_DMA+0xf0>
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_DAC_Start_DMA+0x72>
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d005      	beq.n	80027e0 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80027d4:	e03e      	b.n	8002854 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	3308      	adds	r3, #8
 80027dc:	613b      	str	r3, [r7, #16]
        break;
 80027de:	e03c      	b.n	800285a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	330c      	adds	r3, #12
 80027e6:	613b      	str	r3, [r7, #16]
        break;
 80027e8:	e037      	b.n	800285a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	3310      	adds	r3, #16
 80027f0:	613b      	str	r3, [r7, #16]
        break;
 80027f2:	e032      	b.n	800285a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	4a3d      	ldr	r2, [pc, #244]	; (80028f0 <HAL_DAC_Start_DMA+0x18c>)
 80027fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	4a3c      	ldr	r2, [pc, #240]	; (80028f4 <HAL_DAC_Start_DMA+0x190>)
 8002802:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	4a3b      	ldr	r2, [pc, #236]	; (80028f8 <HAL_DAC_Start_DMA+0x194>)
 800280a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800281a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	2b08      	cmp	r3, #8
 8002820:	d013      	beq.n	800284a <HAL_DAC_Start_DMA+0xe6>
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	2b08      	cmp	r3, #8
 8002826:	d817      	bhi.n	8002858 <HAL_DAC_Start_DMA+0xf4>
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_DAC_Start_DMA+0xd2>
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	2b04      	cmp	r3, #4
 8002832:	d005      	beq.n	8002840 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002834:	e010      	b.n	8002858 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	3314      	adds	r3, #20
 800283c:	613b      	str	r3, [r7, #16]
        break;
 800283e:	e00c      	b.n	800285a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	3318      	adds	r3, #24
 8002846:	613b      	str	r3, [r7, #16]
        break;
 8002848:	e007      	b.n	800285a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	331c      	adds	r3, #28
 8002850:	613b      	str	r3, [r7, #16]
        break;
 8002852:	e002      	b.n	800285a <HAL_DAC_Start_DMA+0xf6>
        break;
 8002854:	bf00      	nop
 8002856:	e000      	b.n	800285a <HAL_DAC_Start_DMA+0xf6>
        break;
 8002858:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d111      	bne.n	8002884 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800286e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6898      	ldr	r0, [r3, #8]
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	f000 faaf 	bl	8002ddc <HAL_DMA_Start_IT>
 800287e:	4603      	mov	r3, r0
 8002880:	75fb      	strb	r3, [r7, #23]
 8002882:	e010      	b.n	80028a6 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002892:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	68d8      	ldr	r0, [r3, #12]
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	f000 fa9d 	bl	8002ddc <HAL_DMA_Start_IT>
 80028a2:	4603      	mov	r3, r0
 80028a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10c      	bne.n	80028cc <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6819      	ldr	r1, [r3, #0]
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	2201      	movs	r2, #1
 80028c0:	409a      	lsls	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	e005      	b.n	80028d8 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	f043 0204 	orr.w	r2, r3, #4
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80028d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	08002b59 	.word	0x08002b59
 80028e8:	08002b7b 	.word	0x08002b7b
 80028ec:	08002b97 	.word	0x08002b97
 80028f0:	08002c01 	.word	0x08002c01
 80028f4:	08002c23 	.word	0x08002c23
 80028f8:	08002c3f 	.word	0x08002c3f

080028fc <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	795b      	ldrb	r3, [r3, #5]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_DAC_ConfigChannel+0x1c>
 800293c:	2302      	movs	r3, #2
 800293e:	e107      	b.n	8002b50 <HAL_DAC_ConfigChannel+0x22c>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2201      	movs	r2, #1
 8002944:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2202      	movs	r2, #2
 800294a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b04      	cmp	r3, #4
 8002952:	d174      	bne.n	8002a3e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002954:	f7ff fdd2 	bl	80024fc <HAL_GetTick>
 8002958:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d134      	bne.n	80029ca <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002960:	e011      	b.n	8002986 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002962:	f7ff fdcb 	bl	80024fc <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b01      	cmp	r3, #1
 800296e:	d90a      	bls.n	8002986 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	f043 0208 	orr.w	r2, r3, #8
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2203      	movs	r2, #3
 8002980:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e0e4      	b.n	8002b50 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1e6      	bne.n	8002962 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002994:	2001      	movs	r0, #1
 8002996:	f7ff fdbd 	bl	8002514 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	6992      	ldr	r2, [r2, #24]
 80029a2:	641a      	str	r2, [r3, #64]	; 0x40
 80029a4:	e01e      	b.n	80029e4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80029a6:	f7ff fda9 	bl	80024fc <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d90a      	bls.n	80029ca <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	f043 0208 	orr.w	r2, r3, #8
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2203      	movs	r2, #3
 80029c4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e0c2      	b.n	8002b50 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	dbe8      	blt.n	80029a6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80029d4:	2001      	movs	r0, #1
 80029d6:	f7ff fd9d 	bl	8002514 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	6992      	ldr	r2, [r2, #24]
 80029e2:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80029f4:	fa01 f303 	lsl.w	r3, r1, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	ea02 0103 	and.w	r1, r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	69da      	ldr	r2, [r3, #28]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f003 0310 	and.w	r3, r3, #16
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f003 0310 	and.w	r3, r3, #16
 8002a1e:	21ff      	movs	r1, #255	; 0xff
 8002a20:	fa01 f303 	lsl.w	r3, r1, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	ea02 0103 	and.w	r1, r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	6a1a      	ldr	r2, [r3, #32]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f003 0310 	and.w	r3, r3, #16
 8002a34:	409a      	lsls	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d11d      	bne.n	8002a82 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f003 0310 	and.w	r3, r3, #16
 8002a54:	221f      	movs	r2, #31
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f003 0310 	and.w	r3, r3, #16
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a88:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	2207      	movs	r2, #7
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6819      	ldr	r1, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43da      	mvns	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	400a      	ands	r2, r1
 8002ae6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43db      	mvns	r3, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4013      	ands	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6819      	ldr	r1, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f003 0310 	and.w	r3, r3, #16
 8002b32:	22c0      	movs	r2, #192	; 0xc0
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43da      	mvns	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	400a      	ands	r2, r1
 8002b40:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2201      	movs	r2, #1
 8002b46:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3720      	adds	r7, #32
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b64:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f7fe fccc 	bl	8001504 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	711a      	strb	r2, [r3, #4]
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b86:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f7ff feb7 	bl	80028fc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b084      	sub	sp, #16
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	f043 0204 	orr.w	r2, r3, #4
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f7ff fead 	bl	8002910 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	711a      	strb	r2, [r3, #4]
}
 8002bbc:	bf00      	nop
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f7ff ffd8 	bl	8002bc4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2201      	movs	r2, #1
 8002c18:	711a      	strb	r2, [r3, #4]
}
 8002c1a:	bf00      	nop
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b084      	sub	sp, #16
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f7ff ffd1 	bl	8002bd8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b084      	sub	sp, #16
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f043 0204 	orr.w	r2, r3, #4
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f7ff ffc7 	bl	8002bec <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	711a      	strb	r2, [r3, #4]
}
 8002c64:	bf00      	nop
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e098      	b.n	8002db0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	4b4d      	ldr	r3, [pc, #308]	; (8002dbc <HAL_DMA_Init+0x150>)
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d80f      	bhi.n	8002caa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	4b4b      	ldr	r3, [pc, #300]	; (8002dc0 <HAL_DMA_Init+0x154>)
 8002c92:	4413      	add	r3, r2
 8002c94:	4a4b      	ldr	r2, [pc, #300]	; (8002dc4 <HAL_DMA_Init+0x158>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	091b      	lsrs	r3, r3, #4
 8002c9c:	009a      	lsls	r2, r3, #2
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a48      	ldr	r2, [pc, #288]	; (8002dc8 <HAL_DMA_Init+0x15c>)
 8002ca6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ca8:	e00e      	b.n	8002cc8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4b46      	ldr	r3, [pc, #280]	; (8002dcc <HAL_DMA_Init+0x160>)
 8002cb2:	4413      	add	r3, r2
 8002cb4:	4a43      	ldr	r2, [pc, #268]	; (8002dc4 <HAL_DMA_Init+0x158>)
 8002cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cba:	091b      	lsrs	r3, r3, #4
 8002cbc:	009a      	lsls	r2, r3, #2
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a42      	ldr	r2, [pc, #264]	; (8002dd0 <HAL_DMA_Init+0x164>)
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d22:	d039      	beq.n	8002d98 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	4a27      	ldr	r2, [pc, #156]	; (8002dc8 <HAL_DMA_Init+0x15c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d11a      	bne.n	8002d64 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d2e:	4b29      	ldr	r3, [pc, #164]	; (8002dd4 <HAL_DMA_Init+0x168>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	f003 031c 	and.w	r3, r3, #28
 8002d3a:	210f      	movs	r1, #15
 8002d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	4924      	ldr	r1, [pc, #144]	; (8002dd4 <HAL_DMA_Init+0x168>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d48:	4b22      	ldr	r3, [pc, #136]	; (8002dd4 <HAL_DMA_Init+0x168>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6859      	ldr	r1, [r3, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d54:	f003 031c 	and.w	r3, r3, #28
 8002d58:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5c:	491d      	ldr	r1, [pc, #116]	; (8002dd4 <HAL_DMA_Init+0x168>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]
 8002d62:	e019      	b.n	8002d98 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d64:	4b1c      	ldr	r3, [pc, #112]	; (8002dd8 <HAL_DMA_Init+0x16c>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6c:	f003 031c 	and.w	r3, r3, #28
 8002d70:	210f      	movs	r1, #15
 8002d72:	fa01 f303 	lsl.w	r3, r1, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	4917      	ldr	r1, [pc, #92]	; (8002dd8 <HAL_DMA_Init+0x16c>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d7e:	4b16      	ldr	r3, [pc, #88]	; (8002dd8 <HAL_DMA_Init+0x16c>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6859      	ldr	r1, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	f003 031c 	and.w	r3, r3, #28
 8002d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d92:	4911      	ldr	r1, [pc, #68]	; (8002dd8 <HAL_DMA_Init+0x16c>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	40020407 	.word	0x40020407
 8002dc0:	bffdfff8 	.word	0xbffdfff8
 8002dc4:	cccccccd 	.word	0xcccccccd
 8002dc8:	40020000 	.word	0x40020000
 8002dcc:	bffdfbf8 	.word	0xbffdfbf8
 8002dd0:	40020400 	.word	0x40020400
 8002dd4:	400200a8 	.word	0x400200a8
 8002dd8:	400204a8 	.word	0x400204a8

08002ddc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <HAL_DMA_Start_IT+0x20>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e04b      	b.n	8002e94 <HAL_DMA_Start_IT+0xb8>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d13a      	bne.n	8002e86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	68b9      	ldr	r1, [r7, #8]
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f91e 	bl	8003076 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d008      	beq.n	8002e54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 020e 	orr.w	r2, r2, #14
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	e00f      	b.n	8002e74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0204 	bic.w	r2, r2, #4
 8002e62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 020a 	orr.w	r2, r2, #10
 8002e72:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	e005      	b.n	8002e92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d008      	beq.n	8002ec6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e022      	b.n	8002f0c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 020e 	bic.w	r2, r2, #14
 8002ed4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0201 	bic.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	f003 021c 	and.w	r2, r3, #28
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f34:	f003 031c 	and.w	r3, r3, #28
 8002f38:	2204      	movs	r2, #4
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d026      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x7a>
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d021      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0320 	and.w	r3, r3, #32
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d107      	bne.n	8002f6c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0204 	bic.w	r2, r2, #4
 8002f6a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f70:	f003 021c 	and.w	r2, r3, #28
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	2104      	movs	r1, #4
 8002f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d071      	beq.n	800306c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002f90:	e06c      	b.n	800306c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f96:	f003 031c 	and.w	r3, r3, #28
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d02e      	beq.n	8003004 <HAL_DMA_IRQHandler+0xec>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d029      	beq.n	8003004 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10b      	bne.n	8002fd6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 020a 	bic.w	r2, r2, #10
 8002fcc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	f003 021c 	and.w	r2, r3, #28
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	2102      	movs	r1, #2
 8002fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d038      	beq.n	800306c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003002:	e033      	b.n	800306c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003008:	f003 031c 	and.w	r3, r3, #28
 800300c:	2208      	movs	r2, #8
 800300e:	409a      	lsls	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d02a      	beq.n	800306e <HAL_DMA_IRQHandler+0x156>
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b00      	cmp	r3, #0
 8003020:	d025      	beq.n	800306e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 020e 	bic.w	r2, r2, #14
 8003030:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	f003 021c 	and.w	r2, r3, #28
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	2101      	movs	r1, #1
 8003040:	fa01 f202 	lsl.w	r2, r1, r2
 8003044:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003060:	2b00      	cmp	r3, #0
 8003062:	d004      	beq.n	800306e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800306c:	bf00      	nop
 800306e:	bf00      	nop
}
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003076:	b480      	push	{r7}
 8003078:	b085      	sub	sp, #20
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
 8003082:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003088:	f003 021c 	and.w	r2, r3, #28
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	2101      	movs	r1, #1
 8003092:	fa01 f202 	lsl.w	r2, r1, r2
 8003096:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	2b10      	cmp	r3, #16
 80030a6:	d108      	bne.n	80030ba <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80030b8:	e007      	b.n	80030ca <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	60da      	str	r2, [r3, #12]
}
 80030ca:	bf00      	nop
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030e6:	e17f      	b.n	80033e8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	2101      	movs	r1, #1
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	fa01 f303 	lsl.w	r3, r1, r3
 80030f4:	4013      	ands	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 8171 	beq.w	80033e2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d00b      	beq.n	8003120 <HAL_GPIO_Init+0x48>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d007      	beq.n	8003120 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003114:	2b11      	cmp	r3, #17
 8003116:	d003      	beq.n	8003120 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b12      	cmp	r3, #18
 800311e:	d130      	bne.n	8003182 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	2203      	movs	r2, #3
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003156:	2201      	movs	r2, #1
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4013      	ands	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	091b      	lsrs	r3, r3, #4
 800316c:	f003 0201 	and.w	r2, r3, #1
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	2b03      	cmp	r3, #3
 800318c:	d118      	bne.n	80031c0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003192:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003194:	2201      	movs	r2, #1
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	4013      	ands	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	08db      	lsrs	r3, r3, #3
 80031aa:	f003 0201 	and.w	r2, r3, #1
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	2203      	movs	r2, #3
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4013      	ands	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d003      	beq.n	8003200 <HAL_GPIO_Init+0x128>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b12      	cmp	r3, #18
 80031fe:	d123      	bne.n	8003248 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	08da      	lsrs	r2, r3, #3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3208      	adds	r2, #8
 8003208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800320c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	220f      	movs	r2, #15
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4013      	ands	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	08da      	lsrs	r2, r3, #3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3208      	adds	r2, #8
 8003242:	6939      	ldr	r1, [r7, #16]
 8003244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	2203      	movs	r2, #3
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4013      	ands	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 0203 	and.w	r2, r3, #3
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 80ac 	beq.w	80033e2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800328a:	4b5f      	ldr	r3, [pc, #380]	; (8003408 <HAL_GPIO_Init+0x330>)
 800328c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800328e:	4a5e      	ldr	r2, [pc, #376]	; (8003408 <HAL_GPIO_Init+0x330>)
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	6613      	str	r3, [r2, #96]	; 0x60
 8003296:	4b5c      	ldr	r3, [pc, #368]	; (8003408 <HAL_GPIO_Init+0x330>)
 8003298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	60bb      	str	r3, [r7, #8]
 80032a0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032a2:	4a5a      	ldr	r2, [pc, #360]	; (800340c <HAL_GPIO_Init+0x334>)
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	089b      	lsrs	r3, r3, #2
 80032a8:	3302      	adds	r3, #2
 80032aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	220f      	movs	r2, #15
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43db      	mvns	r3, r3
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4013      	ands	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032cc:	d025      	beq.n	800331a <HAL_GPIO_Init+0x242>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a4f      	ldr	r2, [pc, #316]	; (8003410 <HAL_GPIO_Init+0x338>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d01f      	beq.n	8003316 <HAL_GPIO_Init+0x23e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a4e      	ldr	r2, [pc, #312]	; (8003414 <HAL_GPIO_Init+0x33c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d019      	beq.n	8003312 <HAL_GPIO_Init+0x23a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a4d      	ldr	r2, [pc, #308]	; (8003418 <HAL_GPIO_Init+0x340>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d013      	beq.n	800330e <HAL_GPIO_Init+0x236>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a4c      	ldr	r2, [pc, #304]	; (800341c <HAL_GPIO_Init+0x344>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00d      	beq.n	800330a <HAL_GPIO_Init+0x232>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a4b      	ldr	r2, [pc, #300]	; (8003420 <HAL_GPIO_Init+0x348>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d007      	beq.n	8003306 <HAL_GPIO_Init+0x22e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a4a      	ldr	r2, [pc, #296]	; (8003424 <HAL_GPIO_Init+0x34c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d101      	bne.n	8003302 <HAL_GPIO_Init+0x22a>
 80032fe:	2306      	movs	r3, #6
 8003300:	e00c      	b.n	800331c <HAL_GPIO_Init+0x244>
 8003302:	2307      	movs	r3, #7
 8003304:	e00a      	b.n	800331c <HAL_GPIO_Init+0x244>
 8003306:	2305      	movs	r3, #5
 8003308:	e008      	b.n	800331c <HAL_GPIO_Init+0x244>
 800330a:	2304      	movs	r3, #4
 800330c:	e006      	b.n	800331c <HAL_GPIO_Init+0x244>
 800330e:	2303      	movs	r3, #3
 8003310:	e004      	b.n	800331c <HAL_GPIO_Init+0x244>
 8003312:	2302      	movs	r3, #2
 8003314:	e002      	b.n	800331c <HAL_GPIO_Init+0x244>
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <HAL_GPIO_Init+0x244>
 800331a:	2300      	movs	r3, #0
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	f002 0203 	and.w	r2, r2, #3
 8003322:	0092      	lsls	r2, r2, #2
 8003324:	4093      	lsls	r3, r2
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800332c:	4937      	ldr	r1, [pc, #220]	; (800340c <HAL_GPIO_Init+0x334>)
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	089b      	lsrs	r3, r3, #2
 8003332:	3302      	adds	r3, #2
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800333a:	4b3b      	ldr	r3, [pc, #236]	; (8003428 <HAL_GPIO_Init+0x350>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	43db      	mvns	r3, r3
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4013      	ands	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4313      	orrs	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800335e:	4a32      	ldr	r2, [pc, #200]	; (8003428 <HAL_GPIO_Init+0x350>)
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003364:	4b30      	ldr	r3, [pc, #192]	; (8003428 <HAL_GPIO_Init+0x350>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	43db      	mvns	r3, r3
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4013      	ands	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003388:	4a27      	ldr	r2, [pc, #156]	; (8003428 <HAL_GPIO_Init+0x350>)
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800338e:	4b26      	ldr	r3, [pc, #152]	; (8003428 <HAL_GPIO_Init+0x350>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	43db      	mvns	r3, r3
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	4013      	ands	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033b2:	4a1d      	ldr	r2, [pc, #116]	; (8003428 <HAL_GPIO_Init+0x350>)
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033b8:	4b1b      	ldr	r3, [pc, #108]	; (8003428 <HAL_GPIO_Init+0x350>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	43db      	mvns	r3, r3
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4013      	ands	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033dc:	4a12      	ldr	r2, [pc, #72]	; (8003428 <HAL_GPIO_Init+0x350>)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	3301      	adds	r3, #1
 80033e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	fa22 f303 	lsr.w	r3, r2, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f47f ae78 	bne.w	80030e8 <HAL_GPIO_Init+0x10>
  }
}
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	371c      	adds	r7, #28
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40021000 	.word	0x40021000
 800340c:	40010000 	.word	0x40010000
 8003410:	48000400 	.word	0x48000400
 8003414:	48000800 	.word	0x48000800
 8003418:	48000c00 	.word	0x48000c00
 800341c:	48001000 	.word	0x48001000
 8003420:	48001400 	.word	0x48001400
 8003424:	48001800 	.word	0x48001800
 8003428:	40010400 	.word	0x40010400

0800342c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800343a:	e0cd      	b.n	80035d8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800343c:	2201      	movs	r2, #1
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	4013      	ands	r3, r2
 8003448:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80c0 	beq.w	80035d2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003452:	4a68      	ldr	r2, [pc, #416]	; (80035f4 <HAL_GPIO_DeInit+0x1c8>)
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	089b      	lsrs	r3, r3, #2
 8003458:	3302      	adds	r3, #2
 800345a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800345e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	220f      	movs	r2, #15
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4013      	ands	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800347a:	d025      	beq.n	80034c8 <HAL_GPIO_DeInit+0x9c>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a5e      	ldr	r2, [pc, #376]	; (80035f8 <HAL_GPIO_DeInit+0x1cc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d01f      	beq.n	80034c4 <HAL_GPIO_DeInit+0x98>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a5d      	ldr	r2, [pc, #372]	; (80035fc <HAL_GPIO_DeInit+0x1d0>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d019      	beq.n	80034c0 <HAL_GPIO_DeInit+0x94>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a5c      	ldr	r2, [pc, #368]	; (8003600 <HAL_GPIO_DeInit+0x1d4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d013      	beq.n	80034bc <HAL_GPIO_DeInit+0x90>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a5b      	ldr	r2, [pc, #364]	; (8003604 <HAL_GPIO_DeInit+0x1d8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d00d      	beq.n	80034b8 <HAL_GPIO_DeInit+0x8c>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a5a      	ldr	r2, [pc, #360]	; (8003608 <HAL_GPIO_DeInit+0x1dc>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d007      	beq.n	80034b4 <HAL_GPIO_DeInit+0x88>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a59      	ldr	r2, [pc, #356]	; (800360c <HAL_GPIO_DeInit+0x1e0>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d101      	bne.n	80034b0 <HAL_GPIO_DeInit+0x84>
 80034ac:	2306      	movs	r3, #6
 80034ae:	e00c      	b.n	80034ca <HAL_GPIO_DeInit+0x9e>
 80034b0:	2307      	movs	r3, #7
 80034b2:	e00a      	b.n	80034ca <HAL_GPIO_DeInit+0x9e>
 80034b4:	2305      	movs	r3, #5
 80034b6:	e008      	b.n	80034ca <HAL_GPIO_DeInit+0x9e>
 80034b8:	2304      	movs	r3, #4
 80034ba:	e006      	b.n	80034ca <HAL_GPIO_DeInit+0x9e>
 80034bc:	2303      	movs	r3, #3
 80034be:	e004      	b.n	80034ca <HAL_GPIO_DeInit+0x9e>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e002      	b.n	80034ca <HAL_GPIO_DeInit+0x9e>
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <HAL_GPIO_DeInit+0x9e>
 80034c8:	2300      	movs	r3, #0
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	f002 0203 	and.w	r2, r2, #3
 80034d0:	0092      	lsls	r2, r2, #2
 80034d2:	4093      	lsls	r3, r2
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d132      	bne.n	8003540 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80034da:	4b4d      	ldr	r3, [pc, #308]	; (8003610 <HAL_GPIO_DeInit+0x1e4>)
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	43db      	mvns	r3, r3
 80034e2:	494b      	ldr	r1, [pc, #300]	; (8003610 <HAL_GPIO_DeInit+0x1e4>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80034e8:	4b49      	ldr	r3, [pc, #292]	; (8003610 <HAL_GPIO_DeInit+0x1e4>)
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	43db      	mvns	r3, r3
 80034f0:	4947      	ldr	r1, [pc, #284]	; (8003610 <HAL_GPIO_DeInit+0x1e4>)
 80034f2:	4013      	ands	r3, r2
 80034f4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80034f6:	4b46      	ldr	r3, [pc, #280]	; (8003610 <HAL_GPIO_DeInit+0x1e4>)
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	4944      	ldr	r1, [pc, #272]	; (8003610 <HAL_GPIO_DeInit+0x1e4>)
 8003500:	4013      	ands	r3, r2
 8003502:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003504:	4b42      	ldr	r3, [pc, #264]	; (8003610 <HAL_GPIO_DeInit+0x1e4>)
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	43db      	mvns	r3, r3
 800350c:	4940      	ldr	r1, [pc, #256]	; (8003610 <HAL_GPIO_DeInit+0x1e4>)
 800350e:	4013      	ands	r3, r2
 8003510:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f003 0303 	and.w	r3, r3, #3
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	220f      	movs	r2, #15
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003522:	4a34      	ldr	r2, [pc, #208]	; (80035f4 <HAL_GPIO_DeInit+0x1c8>)
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	089b      	lsrs	r3, r3, #2
 8003528:	3302      	adds	r3, #2
 800352a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	43da      	mvns	r2, r3
 8003532:	4830      	ldr	r0, [pc, #192]	; (80035f4 <HAL_GPIO_DeInit+0x1c8>)
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	089b      	lsrs	r3, r3, #2
 8003538:	400a      	ands	r2, r1
 800353a:	3302      	adds	r3, #2
 800353c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	2103      	movs	r1, #3
 800354a:	fa01 f303 	lsl.w	r3, r1, r3
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	08da      	lsrs	r2, r3, #3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3208      	adds	r2, #8
 800355c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	220f      	movs	r2, #15
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	43db      	mvns	r3, r3
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	08d2      	lsrs	r2, r2, #3
 8003574:	4019      	ands	r1, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3208      	adds	r2, #8
 800357a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	2103      	movs	r1, #3
 8003588:	fa01 f303 	lsl.w	r3, r1, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	401a      	ands	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	2101      	movs	r1, #1
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	fa01 f303 	lsl.w	r3, r1, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	401a      	ands	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	2103      	movs	r1, #3
 80035b2:	fa01 f303 	lsl.w	r3, r1, r3
 80035b6:	43db      	mvns	r3, r3
 80035b8:	401a      	ands	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c2:	2101      	movs	r1, #1
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	43db      	mvns	r3, r3
 80035cc:	401a      	ands	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	3301      	adds	r3, #1
 80035d6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	fa22 f303 	lsr.w	r3, r2, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f47f af2b 	bne.w	800343c <HAL_GPIO_DeInit+0x10>
  }
}
 80035e6:	bf00      	nop
 80035e8:	bf00      	nop
 80035ea:	371c      	adds	r7, #28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	40010000 	.word	0x40010000
 80035f8:	48000400 	.word	0x48000400
 80035fc:	48000800 	.word	0x48000800
 8003600:	48000c00 	.word	0x48000c00
 8003604:	48001000 	.word	0x48001000
 8003608:	48001400 	.word	0x48001400
 800360c:	48001800 	.word	0x48001800
 8003610:	40010400 	.word	0x40010400

08003614 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	887b      	ldrh	r3, [r7, #2]
 8003626:	4013      	ands	r3, r2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
 8003630:	e001      	b.n	8003636 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003632:	2300      	movs	r3, #0
 8003634:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003636:	7bfb      	ldrb	r3, [r7, #15]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	807b      	strh	r3, [r7, #2]
 8003650:	4613      	mov	r3, r2
 8003652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003654:	787b      	ldrb	r3, [r7, #1]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800365a:	887a      	ldrh	r2, [r7, #2]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003660:	e002      	b.n	8003668 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003662:	887a      	ldrh	r2, [r7, #2]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003686:	887a      	ldrh	r2, [r7, #2]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4013      	ands	r3, r2
 800368c:	041a      	lsls	r2, r3, #16
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	43d9      	mvns	r1, r3
 8003692:	887b      	ldrh	r3, [r7, #2]
 8003694:	400b      	ands	r3, r1
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	619a      	str	r2, [r3, #24]
}
 800369c:	bf00      	nop
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036ac:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40007000 	.word	0x40007000

080036c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036d2:	d130      	bne.n	8003736 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80036d4:	4b23      	ldr	r3, [pc, #140]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e0:	d038      	beq.n	8003754 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036e2:	4b20      	ldr	r3, [pc, #128]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036ea:	4a1e      	ldr	r2, [pc, #120]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036f2:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2232      	movs	r2, #50	; 0x32
 80036f8:	fb02 f303 	mul.w	r3, r2, r3
 80036fc:	4a1b      	ldr	r2, [pc, #108]	; (800376c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003702:	0c9b      	lsrs	r3, r3, #18
 8003704:	3301      	adds	r3, #1
 8003706:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003708:	e002      	b.n	8003710 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	3b01      	subs	r3, #1
 800370e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003710:	4b14      	ldr	r3, [pc, #80]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800371c:	d102      	bne.n	8003724 <HAL_PWREx_ControlVoltageScaling+0x60>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1f2      	bne.n	800370a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003724:	4b0f      	ldr	r3, [pc, #60]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003730:	d110      	bne.n	8003754 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e00f      	b.n	8003756 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003736:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800373e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003742:	d007      	beq.n	8003754 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003744:	4b07      	ldr	r3, [pc, #28]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800374c:	4a05      	ldr	r2, [pc, #20]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800374e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003752:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40007000 	.word	0x40007000
 8003768:	20000008 	.word	0x20000008
 800376c:	431bde83 	.word	0x431bde83

08003770 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af02      	add	r7, sp, #8
 8003776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003778:	f7fe fec0 	bl	80024fc <HAL_GetTick>
 800377c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e063      	b.n	8003850 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10b      	bne.n	80037ac <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7fe fc25 	bl	8001fec <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80037a2:	f241 3188 	movw	r1, #5000	; 0x1388
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 faf7 	bl	8003d9a <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	021a      	lsls	r2, r3, #8
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	2120      	movs	r1, #32
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 faef 	bl	8003db6 <QSPI_WaitFlagStateUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80037dc:	7afb      	ldrb	r3, [r7, #11]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d131      	bne.n	8003846 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80037ec:	f023 0310 	bic.w	r3, r3, #16
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6852      	ldr	r2, [r2, #4]
 80037f4:	0611      	lsls	r1, r2, #24
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	68d2      	ldr	r2, [r2, #12]
 80037fa:	4311      	orrs	r1, r2
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	430b      	orrs	r3, r1
 8003802:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	4b13      	ldr	r3, [pc, #76]	; (8003858 <HAL_QSPI_Init+0xe8>)
 800380c:	4013      	ands	r3, r2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6912      	ldr	r2, [r2, #16]
 8003812:	0411      	lsls	r1, r2, #16
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6952      	ldr	r2, [r2, #20]
 8003818:	4311      	orrs	r1, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6992      	ldr	r2, [r2, #24]
 800381e:	4311      	orrs	r1, r2
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6812      	ldr	r2, [r2, #0]
 8003824:	430b      	orrs	r3, r1
 8003826:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800384e:	7afb      	ldrb	r3, [r7, #11]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	ffe0f8fe 	.word	0xffe0f8fe

0800385c <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e016      	b.n	800389c <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0201 	bic.w	r2, r2, #1
 800387c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7fe fc16 	bl	80020b0 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b088      	sub	sp, #32
 80038a8:	af02      	add	r7, sp, #8
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80038b0:	f7fe fe24 	bl	80024fc <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_QSPI_Command+0x22>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e048      	b.n	8003958 <HAL_QSPI_Command+0xb4>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d137      	bne.n	800394a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	2200      	movs	r2, #0
 80038f0:	2120      	movs	r1, #32
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 fa5f 	bl	8003db6 <QSPI_WaitFlagStateUntilTimeout>
 80038f8:	4603      	mov	r3, r0
 80038fa:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80038fc:	7dfb      	ldrb	r3, [r7, #23]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d125      	bne.n	800394e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003902:	2200      	movs	r2, #0
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 fa8c 	bl	8003e24 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	2b00      	cmp	r3, #0
 8003912:	d115      	bne.n	8003940 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	2201      	movs	r2, #1
 800391c:	2102      	movs	r1, #2
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 fa49 	bl	8003db6 <QSPI_WaitFlagStateUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003928:	7dfb      	ldrb	r3, [r7, #23]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10f      	bne.n	800394e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2202      	movs	r2, #2
 8003934:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800393e:	e006      	b.n	800394e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003948:	e001      	b.n	800394e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800394a:	2302      	movs	r3, #2
 800394c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003956:	7dfb      	ldrb	r3, [r7, #23]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08a      	sub	sp, #40	; 0x28
 8003964:	af02      	add	r7, sp, #8
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003970:	f7fe fdc4 	bl	80024fc <HAL_GetTick>
 8003974:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	3320      	adds	r3, #32
 800397c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b01      	cmp	r3, #1
 8003988:	d101      	bne.n	800398e <HAL_QSPI_Transmit+0x2e>
 800398a:	2302      	movs	r3, #2
 800398c:	e07b      	b.n	8003a86 <HAL_QSPI_Transmit+0x126>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d16a      	bne.n	8003a78 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d05b      	beq.n	8003a66 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2212      	movs	r2, #18
 80039b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695a      	ldr	r2, [r3, #20]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80039e2:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80039e4:	e01b      	b.n	8003a1e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	2201      	movs	r2, #1
 80039ee:	2104      	movs	r1, #4
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 f9e0 	bl	8003db6 <QSPI_WaitFlagStateUntilTimeout>
 80039f6:	4603      	mov	r3, r0
 80039f8:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80039fa:	7ffb      	ldrb	r3, [r7, #31]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d113      	bne.n	8003a28 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	781a      	ldrb	r2, [r3, #0]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	1e5a      	subs	r2, r3, #1
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1df      	bne.n	80039e6 <HAL_QSPI_Transmit+0x86>
 8003a26:	e000      	b.n	8003a2a <HAL_QSPI_Transmit+0xca>
          break;
 8003a28:	bf00      	nop
      }

      if (status == HAL_OK)
 8003a2a:	7ffb      	ldrb	r3, [r7, #31]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d115      	bne.n	8003a5c <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	2201      	movs	r2, #1
 8003a38:	2102      	movs	r1, #2
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 f9bb 	bl	8003db6 <QSPI_WaitFlagStateUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003a44:	7ffb      	ldrb	r3, [r7, #31]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d108      	bne.n	8003a5c <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 f934 	bl	8003cc0 <HAL_QSPI_Abort>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003a64:	e00a      	b.n	8003a7c <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6a:	f043 0208 	orr.w	r2, r3, #8
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	77fb      	strb	r3, [r7, #31]
 8003a76:	e001      	b.n	8003a7c <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003a84:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3720      	adds	r7, #32
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b08a      	sub	sp, #40	; 0x28
 8003a92:	af02      	add	r7, sp, #8
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003a9e:	f7fe fd2d 	bl	80024fc <HAL_GetTick>
 8003aa2:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3320      	adds	r3, #32
 8003ab2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_QSPI_Receive+0x36>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e082      	b.n	8003bca <HAL_QSPI_Receive+0x13c>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d171      	bne.n	8003bbc <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d062      	beq.n	8003baa <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2222      	movs	r2, #34	; 0x22
 8003ae8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003b1c:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8003b26:	e01c      	b.n	8003b62 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	2106      	movs	r1, #6
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 f93f 	bl	8003db6 <QSPI_WaitFlagStateUntilTimeout>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8003b3c:	7ffb      	ldrb	r3, [r7, #31]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d114      	bne.n	8003b6c <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	7812      	ldrb	r2, [r2, #0]
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5c:	1e5a      	subs	r2, r3, #1
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1de      	bne.n	8003b28 <HAL_QSPI_Receive+0x9a>
 8003b6a:	e000      	b.n	8003b6e <HAL_QSPI_Receive+0xe0>
          break;
 8003b6c:	bf00      	nop
      }

      if (status == HAL_OK)
 8003b6e:	7ffb      	ldrb	r3, [r7, #31]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d115      	bne.n	8003ba0 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	2102      	movs	r1, #2
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 f919 	bl	8003db6 <QSPI_WaitFlagStateUntilTimeout>
 8003b84:	4603      	mov	r3, r0
 8003b86:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8003b88:	7ffb      	ldrb	r3, [r7, #31]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d108      	bne.n	8003ba0 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2202      	movs	r2, #2
 8003b94:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 f892 	bl	8003cc0 <HAL_QSPI_Abort>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003ba8:	e00a      	b.n	8003bc0 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bae:	f043 0208 	orr.w	r2, r3, #8
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	77fb      	strb	r3, [r7, #31]
 8003bba:	e001      	b.n	8003bc0 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003bc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3720      	adds	r7, #32
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b088      	sub	sp, #32
 8003bd6:	af02      	add	r7, sp, #8
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
 8003bde:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003be0:	f7fe fc8c 	bl	80024fc <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_QSPI_AutoPolling+0x24>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e060      	b.n	8003cb8 <HAL_QSPI_AutoPolling+0xe6>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d14f      	bne.n	8003caa <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2242      	movs	r2, #66	; 0x42
 8003c14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2120      	movs	r1, #32
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 f8c7 	bl	8003db6 <QSPI_WaitFlagStateUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d13d      	bne.n	8003cae <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6812      	ldr	r2, [r2, #0]
 8003c3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6852      	ldr	r2, [r2, #4]
 8003c44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6892      	ldr	r2, [r2, #8]
 8003c4e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003c68:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8003c72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c76:	68b9      	ldr	r1, [r7, #8]
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 f8d3 	bl	8003e24 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	2201      	movs	r2, #1
 8003c86:	2108      	movs	r1, #8
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 f894 	bl	8003db6 <QSPI_WaitFlagStateUntilTimeout>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8003c92:	7dfb      	ldrb	r3, [r7, #23]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10a      	bne.n	8003cae <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2208      	movs	r2, #8
 8003c9e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003ca8:	e001      	b.n	8003cae <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003caa:	2302      	movs	r3, #2
 8003cac:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af02      	add	r7, sp, #8
 8003cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003ccc:	f7fe fc16 	bl	80024fc <HAL_GetTick>
 8003cd0:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d056      	beq.n	8003d90 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d017      	beq.n	8003d28 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0204 	bic.w	r2, r2, #4
 8003d06:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff f8c5 	bl	8002e9c <HAL_DMA_Abort>
 8003d12:	4603      	mov	r3, r0
 8003d14:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d20:	f043 0204 	orr.w	r2, r3, #4
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0202 	orr.w	r2, r2, #2
 8003d36:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2201      	movs	r2, #1
 8003d42:	2102      	movs	r1, #2
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f836 	bl	8003db6 <QSPI_WaitFlagStateUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10e      	bne.n	8003d72 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2200      	movs	r2, #0
 8003d66:	2120      	movs	r1, #32
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f824 	bl	8003db6 <QSPI_WaitFlagStateUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10b      	bne.n	8003d90 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695a      	ldr	r2, [r3, #20]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003d86:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	603b      	str	r3, [r7, #0]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003dc6:	e01a      	b.n	8003dfe <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dce:	d016      	beq.n	8003dfe <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd0:	f7fe fb94 	bl	80024fc <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d302      	bcc.n	8003de6 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10b      	bne.n	8003dfe <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2204      	movs	r2, #4
 8003dea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df2:	f043 0201 	orr.w	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e00e      	b.n	8003e1c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	bf14      	ite	ne
 8003e0c:	2301      	movne	r3, #1
 8003e0e:	2300      	moveq	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	461a      	mov	r2, r3
 8003e14:	79fb      	ldrb	r3, [r7, #7]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d1d6      	bne.n	8003dc8 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d009      	beq.n	8003e4c <QSPI_Config+0x28>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003e3e:	d005      	beq.n	8003e4c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3a01      	subs	r2, #1
 8003e4a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 80b9 	beq.w	8003fc8 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d05f      	beq.n	8003f1e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	6892      	ldr	r2, [r2, #8]
 8003e66:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d031      	beq.n	8003ed4 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	431a      	orrs	r2, r3
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	049b      	lsls	r3, r3, #18
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	ea42 0103 	orr.w	r1, r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003ec4:	f000 812e 	beq.w	8004124 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	6852      	ldr	r2, [r2, #4]
 8003ed0:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8003ed2:	e127      	b.n	8004124 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	431a      	orrs	r2, r3
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	049b      	lsls	r3, r3, #18
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	431a      	orrs	r2, r3
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	431a      	orrs	r2, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	ea42 0103 	orr.w	r1, r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	615a      	str	r2, [r3, #20]
}
 8003f1c:	e102      	b.n	8004124 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d02e      	beq.n	8003f84 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f34:	431a      	orrs	r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	049b      	lsls	r3, r3, #18
 8003f42:	431a      	orrs	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	431a      	orrs	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	ea42 0103 	orr.w	r1, r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003f74:	f000 80d6 	beq.w	8004124 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	6852      	ldr	r2, [r2, #4]
 8003f80:	619a      	str	r2, [r3, #24]
}
 8003f82:	e0cf      	b.n	8004124 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f92:	431a      	orrs	r2, r3
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	049b      	lsls	r3, r3, #18
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	431a      	orrs	r2, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	ea42 0103 	orr.w	r1, r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	615a      	str	r2, [r3, #20]
}
 8003fc6:	e0ad      	b.n	8004124 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d058      	beq.n	8004082 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	6892      	ldr	r2, [r2, #8]
 8003fd8:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d02d      	beq.n	800403e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	431a      	orrs	r2, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	049b      	lsls	r3, r3, #18
 8003ffe:	431a      	orrs	r2, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	431a      	orrs	r2, r3
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	431a      	orrs	r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	431a      	orrs	r2, r3
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	431a      	orrs	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	ea42 0103 	orr.w	r1, r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	430a      	orrs	r2, r1
 8004028:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004030:	d078      	beq.n	8004124 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	6852      	ldr	r2, [r2, #4]
 800403a:	619a      	str	r2, [r3, #24]
}
 800403c:	e072      	b.n	8004124 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	431a      	orrs	r2, r3
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404c:	431a      	orrs	r2, r3
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	431a      	orrs	r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	049b      	lsls	r3, r3, #18
 800405a:	431a      	orrs	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	431a      	orrs	r2, r3
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	431a      	orrs	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	431a      	orrs	r2, r3
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	ea42 0103 	orr.w	r1, r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	430a      	orrs	r2, r1
 800407e:	615a      	str	r2, [r3, #20]
}
 8004080:	e050      	b.n	8004124 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d02a      	beq.n	80040e0 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	431a      	orrs	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004098:	431a      	orrs	r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	431a      	orrs	r2, r3
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	049b      	lsls	r3, r3, #18
 80040a6:	431a      	orrs	r2, r3
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	431a      	orrs	r2, r3
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	431a      	orrs	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	431a      	orrs	r2, r3
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	ea42 0103 	orr.w	r1, r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80040d2:	d027      	beq.n	8004124 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	6852      	ldr	r2, [r2, #4]
 80040dc:	619a      	str	r2, [r3, #24]
}
 80040de:	e021      	b.n	8004124 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d01d      	beq.n	8004124 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	431a      	orrs	r2, r3
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f6:	431a      	orrs	r2, r3
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	431a      	orrs	r2, r3
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	049b      	lsls	r3, r3, #18
 8004104:	431a      	orrs	r2, r3
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	431a      	orrs	r2, r3
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	431a      	orrs	r2, r3
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	ea42 0103 	orr.w	r1, r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	430a      	orrs	r2, r1
 8004122:	615a      	str	r2, [r3, #20]
}
 8004124:	bf00      	nop
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e3d4      	b.n	80048ec <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004142:	4ba1      	ldr	r3, [pc, #644]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
 800414a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800414c:	4b9e      	ldr	r3, [pc, #632]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0310 	and.w	r3, r3, #16
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 80e4 	beq.w	800432c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d007      	beq.n	800417a <HAL_RCC_OscConfig+0x4a>
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	2b0c      	cmp	r3, #12
 800416e:	f040 808b 	bne.w	8004288 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2b01      	cmp	r3, #1
 8004176:	f040 8087 	bne.w	8004288 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800417a:	4b93      	ldr	r3, [pc, #588]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d005      	beq.n	8004192 <HAL_RCC_OscConfig+0x62>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e3ac      	b.n	80048ec <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1a      	ldr	r2, [r3, #32]
 8004196:	4b8c      	ldr	r3, [pc, #560]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d004      	beq.n	80041ac <HAL_RCC_OscConfig+0x7c>
 80041a2:	4b89      	ldr	r3, [pc, #548]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041aa:	e005      	b.n	80041b8 <HAL_RCC_OscConfig+0x88>
 80041ac:	4b86      	ldr	r3, [pc, #536]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 80041ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b2:	091b      	lsrs	r3, r3, #4
 80041b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d223      	bcs.n	8004204 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fd5d 	bl	8004c80 <RCC_SetFlashLatencyFromMSIRange>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e38d      	b.n	80048ec <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041d0:	4b7d      	ldr	r3, [pc, #500]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a7c      	ldr	r2, [pc, #496]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 80041d6:	f043 0308 	orr.w	r3, r3, #8
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	4b7a      	ldr	r3, [pc, #488]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	4977      	ldr	r1, [pc, #476]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041ee:	4b76      	ldr	r3, [pc, #472]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	021b      	lsls	r3, r3, #8
 80041fc:	4972      	ldr	r1, [pc, #456]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	604b      	str	r3, [r1, #4]
 8004202:	e025      	b.n	8004250 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004204:	4b70      	ldr	r3, [pc, #448]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a6f      	ldr	r2, [pc, #444]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 800420a:	f043 0308 	orr.w	r3, r3, #8
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	4b6d      	ldr	r3, [pc, #436]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	496a      	ldr	r1, [pc, #424]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 800421e:	4313      	orrs	r3, r2
 8004220:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004222:	4b69      	ldr	r3, [pc, #420]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	021b      	lsls	r3, r3, #8
 8004230:	4965      	ldr	r1, [pc, #404]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 8004232:	4313      	orrs	r3, r2
 8004234:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d109      	bne.n	8004250 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fd1d 	bl	8004c80 <RCC_SetFlashLatencyFromMSIRange>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e34d      	b.n	80048ec <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004250:	f000 fc36 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8004254:	4602      	mov	r2, r0
 8004256:	4b5c      	ldr	r3, [pc, #368]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	091b      	lsrs	r3, r3, #4
 800425c:	f003 030f 	and.w	r3, r3, #15
 8004260:	495a      	ldr	r1, [pc, #360]	; (80043cc <HAL_RCC_OscConfig+0x29c>)
 8004262:	5ccb      	ldrb	r3, [r1, r3]
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	fa22 f303 	lsr.w	r3, r2, r3
 800426c:	4a58      	ldr	r2, [pc, #352]	; (80043d0 <HAL_RCC_OscConfig+0x2a0>)
 800426e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004270:	4b58      	ldr	r3, [pc, #352]	; (80043d4 <HAL_RCC_OscConfig+0x2a4>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f7fd ff5d 	bl	8002134 <HAL_InitTick>
 800427a:	4603      	mov	r3, r0
 800427c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800427e:	7bfb      	ldrb	r3, [r7, #15]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d052      	beq.n	800432a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004284:	7bfb      	ldrb	r3, [r7, #15]
 8004286:	e331      	b.n	80048ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d032      	beq.n	80042f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004290:	4b4d      	ldr	r3, [pc, #308]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a4c      	ldr	r2, [pc, #304]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800429c:	f7fe f92e 	bl	80024fc <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042a4:	f7fe f92a 	bl	80024fc <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e31a      	b.n	80048ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042b6:	4b44      	ldr	r3, [pc, #272]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f0      	beq.n	80042a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042c2:	4b41      	ldr	r3, [pc, #260]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a40      	ldr	r2, [pc, #256]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 80042c8:	f043 0308 	orr.w	r3, r3, #8
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	4b3e      	ldr	r3, [pc, #248]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	493b      	ldr	r1, [pc, #236]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042e0:	4b39      	ldr	r3, [pc, #228]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	021b      	lsls	r3, r3, #8
 80042ee:	4936      	ldr	r1, [pc, #216]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	604b      	str	r3, [r1, #4]
 80042f4:	e01a      	b.n	800432c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042f6:	4b34      	ldr	r3, [pc, #208]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a33      	ldr	r2, [pc, #204]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004302:	f7fe f8fb 	bl	80024fc <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800430a:	f7fe f8f7 	bl	80024fc <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e2e7      	b.n	80048ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800431c:	4b2a      	ldr	r3, [pc, #168]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f0      	bne.n	800430a <HAL_RCC_OscConfig+0x1da>
 8004328:	e000      	b.n	800432c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800432a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d074      	beq.n	8004422 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	2b08      	cmp	r3, #8
 800433c:	d005      	beq.n	800434a <HAL_RCC_OscConfig+0x21a>
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	2b0c      	cmp	r3, #12
 8004342:	d10e      	bne.n	8004362 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	2b03      	cmp	r3, #3
 8004348:	d10b      	bne.n	8004362 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434a:	4b1f      	ldr	r3, [pc, #124]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d064      	beq.n	8004420 <HAL_RCC_OscConfig+0x2f0>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d160      	bne.n	8004420 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e2c4      	b.n	80048ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436a:	d106      	bne.n	800437a <HAL_RCC_OscConfig+0x24a>
 800436c:	4b16      	ldr	r3, [pc, #88]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a15      	ldr	r2, [pc, #84]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 8004372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	e01d      	b.n	80043b6 <HAL_RCC_OscConfig+0x286>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004382:	d10c      	bne.n	800439e <HAL_RCC_OscConfig+0x26e>
 8004384:	4b10      	ldr	r3, [pc, #64]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a0f      	ldr	r2, [pc, #60]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 800438a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	4b0d      	ldr	r3, [pc, #52]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a0c      	ldr	r2, [pc, #48]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 8004396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	e00b      	b.n	80043b6 <HAL_RCC_OscConfig+0x286>
 800439e:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a09      	ldr	r2, [pc, #36]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 80043a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	4b07      	ldr	r3, [pc, #28]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a06      	ldr	r2, [pc, #24]	; (80043c8 <HAL_RCC_OscConfig+0x298>)
 80043b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d01c      	beq.n	80043f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043be:	f7fe f89d 	bl	80024fc <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043c4:	e011      	b.n	80043ea <HAL_RCC_OscConfig+0x2ba>
 80043c6:	bf00      	nop
 80043c8:	40021000 	.word	0x40021000
 80043cc:	080067ac 	.word	0x080067ac
 80043d0:	20000008 	.word	0x20000008
 80043d4:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d8:	f7fe f890 	bl	80024fc <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b64      	cmp	r3, #100	; 0x64
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e280      	b.n	80048ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ea:	4baf      	ldr	r3, [pc, #700]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0f0      	beq.n	80043d8 <HAL_RCC_OscConfig+0x2a8>
 80043f6:	e014      	b.n	8004422 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f8:	f7fe f880 	bl	80024fc <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004400:	f7fe f87c 	bl	80024fc <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b64      	cmp	r3, #100	; 0x64
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e26c      	b.n	80048ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004412:	4ba5      	ldr	r3, [pc, #660]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f0      	bne.n	8004400 <HAL_RCC_OscConfig+0x2d0>
 800441e:	e000      	b.n	8004422 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d060      	beq.n	80044f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	2b04      	cmp	r3, #4
 8004432:	d005      	beq.n	8004440 <HAL_RCC_OscConfig+0x310>
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2b0c      	cmp	r3, #12
 8004438:	d119      	bne.n	800446e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b02      	cmp	r3, #2
 800443e:	d116      	bne.n	800446e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004440:	4b99      	ldr	r3, [pc, #612]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <HAL_RCC_OscConfig+0x328>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e249      	b.n	80048ec <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004458:	4b93      	ldr	r3, [pc, #588]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	061b      	lsls	r3, r3, #24
 8004466:	4990      	ldr	r1, [pc, #576]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 8004468:	4313      	orrs	r3, r2
 800446a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800446c:	e040      	b.n	80044f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d023      	beq.n	80044be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004476:	4b8c      	ldr	r3, [pc, #560]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a8b      	ldr	r2, [pc, #556]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 800447c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004482:	f7fe f83b 	bl	80024fc <HAL_GetTick>
 8004486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800448a:	f7fe f837 	bl	80024fc <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e227      	b.n	80048ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800449c:	4b82      	ldr	r3, [pc, #520]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0f0      	beq.n	800448a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a8:	4b7f      	ldr	r3, [pc, #508]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	061b      	lsls	r3, r3, #24
 80044b6:	497c      	ldr	r1, [pc, #496]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	604b      	str	r3, [r1, #4]
 80044bc:	e018      	b.n	80044f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044be:	4b7a      	ldr	r3, [pc, #488]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a79      	ldr	r2, [pc, #484]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 80044c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ca:	f7fe f817 	bl	80024fc <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044d2:	f7fe f813 	bl	80024fc <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e203      	b.n	80048ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044e4:	4b70      	ldr	r3, [pc, #448]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1f0      	bne.n	80044d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0308 	and.w	r3, r3, #8
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d03c      	beq.n	8004576 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d01c      	beq.n	800453e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004504:	4b68      	ldr	r3, [pc, #416]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 8004506:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800450a:	4a67      	ldr	r2, [pc, #412]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 800450c:	f043 0301 	orr.w	r3, r3, #1
 8004510:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004514:	f7fd fff2 	bl	80024fc <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800451c:	f7fd ffee 	bl	80024fc <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e1de      	b.n	80048ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800452e:	4b5e      	ldr	r3, [pc, #376]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 8004530:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0ef      	beq.n	800451c <HAL_RCC_OscConfig+0x3ec>
 800453c:	e01b      	b.n	8004576 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800453e:	4b5a      	ldr	r3, [pc, #360]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 8004540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004544:	4a58      	ldr	r2, [pc, #352]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 8004546:	f023 0301 	bic.w	r3, r3, #1
 800454a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454e:	f7fd ffd5 	bl	80024fc <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004554:	e008      	b.n	8004568 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004556:	f7fd ffd1 	bl	80024fc <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e1c1      	b.n	80048ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004568:	4b4f      	ldr	r3, [pc, #316]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 800456a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1ef      	bne.n	8004556 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 80a6 	beq.w	80046d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004584:	2300      	movs	r3, #0
 8004586:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004588:	4b47      	ldr	r3, [pc, #284]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 800458a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10d      	bne.n	80045b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004594:	4b44      	ldr	r3, [pc, #272]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 8004596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004598:	4a43      	ldr	r2, [pc, #268]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 800459a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459e:	6593      	str	r3, [r2, #88]	; 0x58
 80045a0:	4b41      	ldr	r3, [pc, #260]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 80045a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ac:	2301      	movs	r3, #1
 80045ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045b0:	4b3e      	ldr	r3, [pc, #248]	; (80046ac <HAL_RCC_OscConfig+0x57c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d118      	bne.n	80045ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045bc:	4b3b      	ldr	r3, [pc, #236]	; (80046ac <HAL_RCC_OscConfig+0x57c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a3a      	ldr	r2, [pc, #232]	; (80046ac <HAL_RCC_OscConfig+0x57c>)
 80045c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045c8:	f7fd ff98 	bl	80024fc <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d0:	f7fd ff94 	bl	80024fc <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e184      	b.n	80048ec <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045e2:	4b32      	ldr	r3, [pc, #200]	; (80046ac <HAL_RCC_OscConfig+0x57c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f0      	beq.n	80045d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d108      	bne.n	8004608 <HAL_RCC_OscConfig+0x4d8>
 80045f6:	4b2c      	ldr	r3, [pc, #176]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 80045f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fc:	4a2a      	ldr	r2, [pc, #168]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004606:	e024      	b.n	8004652 <HAL_RCC_OscConfig+0x522>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	2b05      	cmp	r3, #5
 800460e:	d110      	bne.n	8004632 <HAL_RCC_OscConfig+0x502>
 8004610:	4b25      	ldr	r3, [pc, #148]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 8004612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004616:	4a24      	ldr	r2, [pc, #144]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 8004618:	f043 0304 	orr.w	r3, r3, #4
 800461c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004620:	4b21      	ldr	r3, [pc, #132]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 8004622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004626:	4a20      	ldr	r2, [pc, #128]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004630:	e00f      	b.n	8004652 <HAL_RCC_OscConfig+0x522>
 8004632:	4b1d      	ldr	r3, [pc, #116]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 8004634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004638:	4a1b      	ldr	r2, [pc, #108]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 800463a:	f023 0301 	bic.w	r3, r3, #1
 800463e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004642:	4b19      	ldr	r3, [pc, #100]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 8004644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004648:	4a17      	ldr	r2, [pc, #92]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 800464a:	f023 0304 	bic.w	r3, r3, #4
 800464e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d016      	beq.n	8004688 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465a:	f7fd ff4f 	bl	80024fc <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004660:	e00a      	b.n	8004678 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004662:	f7fd ff4b 	bl	80024fc <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004670:	4293      	cmp	r3, r2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e139      	b.n	80048ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004678:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <HAL_RCC_OscConfig+0x578>)
 800467a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0ed      	beq.n	8004662 <HAL_RCC_OscConfig+0x532>
 8004686:	e01a      	b.n	80046be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004688:	f7fd ff38 	bl	80024fc <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800468e:	e00f      	b.n	80046b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004690:	f7fd ff34 	bl	80024fc <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	f241 3288 	movw	r2, #5000	; 0x1388
 800469e:	4293      	cmp	r3, r2
 80046a0:	d906      	bls.n	80046b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e122      	b.n	80048ec <HAL_RCC_OscConfig+0x7bc>
 80046a6:	bf00      	nop
 80046a8:	40021000 	.word	0x40021000
 80046ac:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046b0:	4b90      	ldr	r3, [pc, #576]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 80046b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1e8      	bne.n	8004690 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046be:	7ffb      	ldrb	r3, [r7, #31]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d105      	bne.n	80046d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c4:	4b8b      	ldr	r3, [pc, #556]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 80046c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c8:	4a8a      	ldr	r2, [pc, #552]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 80046ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 8108 	beq.w	80048ea <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046de:	2b02      	cmp	r3, #2
 80046e0:	f040 80d0 	bne.w	8004884 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80046e4:	4b83      	ldr	r3, [pc, #524]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f003 0203 	and.w	r2, r3, #3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d130      	bne.n	800475a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	3b01      	subs	r3, #1
 8004704:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004706:	429a      	cmp	r2, r3
 8004708:	d127      	bne.n	800475a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004714:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004716:	429a      	cmp	r2, r3
 8004718:	d11f      	bne.n	800475a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004724:	2a07      	cmp	r2, #7
 8004726:	bf14      	ite	ne
 8004728:	2201      	movne	r2, #1
 800472a:	2200      	moveq	r2, #0
 800472c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800472e:	4293      	cmp	r3, r2
 8004730:	d113      	bne.n	800475a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473c:	085b      	lsrs	r3, r3, #1
 800473e:	3b01      	subs	r3, #1
 8004740:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004742:	429a      	cmp	r2, r3
 8004744:	d109      	bne.n	800475a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	085b      	lsrs	r3, r3, #1
 8004752:	3b01      	subs	r3, #1
 8004754:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004756:	429a      	cmp	r2, r3
 8004758:	d06e      	beq.n	8004838 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	2b0c      	cmp	r3, #12
 800475e:	d069      	beq.n	8004834 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004760:	4b64      	ldr	r3, [pc, #400]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d105      	bne.n	8004778 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800476c:	4b61      	ldr	r3, [pc, #388]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e0b7      	b.n	80048ec <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800477c:	4b5d      	ldr	r3, [pc, #372]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a5c      	ldr	r2, [pc, #368]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 8004782:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004786:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004788:	f7fd feb8 	bl	80024fc <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004790:	f7fd feb4 	bl	80024fc <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e0a4      	b.n	80048ec <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047a2:	4b54      	ldr	r3, [pc, #336]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047ae:	4b51      	ldr	r3, [pc, #324]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	4b51      	ldr	r3, [pc, #324]	; (80048f8 <HAL_RCC_OscConfig+0x7c8>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80047be:	3a01      	subs	r2, #1
 80047c0:	0112      	lsls	r2, r2, #4
 80047c2:	4311      	orrs	r1, r2
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047c8:	0212      	lsls	r2, r2, #8
 80047ca:	4311      	orrs	r1, r2
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047d0:	0852      	lsrs	r2, r2, #1
 80047d2:	3a01      	subs	r2, #1
 80047d4:	0552      	lsls	r2, r2, #21
 80047d6:	4311      	orrs	r1, r2
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80047dc:	0852      	lsrs	r2, r2, #1
 80047de:	3a01      	subs	r2, #1
 80047e0:	0652      	lsls	r2, r2, #25
 80047e2:	4311      	orrs	r1, r2
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047e8:	0912      	lsrs	r2, r2, #4
 80047ea:	0452      	lsls	r2, r2, #17
 80047ec:	430a      	orrs	r2, r1
 80047ee:	4941      	ldr	r1, [pc, #260]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80047f4:	4b3f      	ldr	r3, [pc, #252]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a3e      	ldr	r2, [pc, #248]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 80047fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004800:	4b3c      	ldr	r3, [pc, #240]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	4a3b      	ldr	r2, [pc, #236]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 8004806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800480a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800480c:	f7fd fe76 	bl	80024fc <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004814:	f7fd fe72 	bl	80024fc <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e062      	b.n	80048ec <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004826:	4b33      	ldr	r3, [pc, #204]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004832:	e05a      	b.n	80048ea <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e059      	b.n	80048ec <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004838:	4b2e      	ldr	r3, [pc, #184]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d152      	bne.n	80048ea <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004844:	4b2b      	ldr	r3, [pc, #172]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a2a      	ldr	r2, [pc, #168]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 800484a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800484e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004850:	4b28      	ldr	r3, [pc, #160]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4a27      	ldr	r2, [pc, #156]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 8004856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800485a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800485c:	f7fd fe4e 	bl	80024fc <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004864:	f7fd fe4a 	bl	80024fc <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e03a      	b.n	80048ec <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004876:	4b1f      	ldr	r3, [pc, #124]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0f0      	beq.n	8004864 <HAL_RCC_OscConfig+0x734>
 8004882:	e032      	b.n	80048ea <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	2b0c      	cmp	r3, #12
 8004888:	d02d      	beq.n	80048e6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488a:	4b1a      	ldr	r3, [pc, #104]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a19      	ldr	r2, [pc, #100]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 8004890:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004894:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004896:	4b17      	ldr	r3, [pc, #92]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d105      	bne.n	80048ae <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80048a2:	4b14      	ldr	r3, [pc, #80]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	4a13      	ldr	r2, [pc, #76]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 80048a8:	f023 0303 	bic.w	r3, r3, #3
 80048ac:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80048ae:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	4a10      	ldr	r2, [pc, #64]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 80048b4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80048b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048bc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048be:	f7fd fe1d 	bl	80024fc <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c6:	f7fd fe19 	bl	80024fc <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e009      	b.n	80048ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048d8:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <HAL_RCC_OscConfig+0x7c4>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1f0      	bne.n	80048c6 <HAL_RCC_OscConfig+0x796>
 80048e4:	e001      	b.n	80048ea <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3720      	adds	r7, #32
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	40021000 	.word	0x40021000
 80048f8:	f99d808c 	.word	0xf99d808c

080048fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e0c8      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004910:	4b66      	ldr	r3, [pc, #408]	; (8004aac <HAL_RCC_ClockConfig+0x1b0>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d910      	bls.n	8004940 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491e:	4b63      	ldr	r3, [pc, #396]	; (8004aac <HAL_RCC_ClockConfig+0x1b0>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f023 0207 	bic.w	r2, r3, #7
 8004926:	4961      	ldr	r1, [pc, #388]	; (8004aac <HAL_RCC_ClockConfig+0x1b0>)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	4313      	orrs	r3, r2
 800492c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800492e:	4b5f      	ldr	r3, [pc, #380]	; (8004aac <HAL_RCC_ClockConfig+0x1b0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	429a      	cmp	r2, r3
 800493a:	d001      	beq.n	8004940 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e0b0      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d04c      	beq.n	80049e6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b03      	cmp	r3, #3
 8004952:	d107      	bne.n	8004964 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004954:	4b56      	ldr	r3, [pc, #344]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d121      	bne.n	80049a4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e09e      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2b02      	cmp	r3, #2
 800496a:	d107      	bne.n	800497c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800496c:	4b50      	ldr	r3, [pc, #320]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d115      	bne.n	80049a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e092      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d107      	bne.n	8004994 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004984:	4b4a      	ldr	r3, [pc, #296]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d109      	bne.n	80049a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e086      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004994:	4b46      	ldr	r3, [pc, #280]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e07e      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049a4:	4b42      	ldr	r3, [pc, #264]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f023 0203 	bic.w	r2, r3, #3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	493f      	ldr	r1, [pc, #252]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049b6:	f7fd fda1 	bl	80024fc <HAL_GetTick>
 80049ba:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049bc:	e00a      	b.n	80049d4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049be:	f7fd fd9d 	bl	80024fc <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e066      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049d4:	4b36      	ldr	r3, [pc, #216]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 020c 	and.w	r2, r3, #12
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d1eb      	bne.n	80049be <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d008      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049f2:	4b2f      	ldr	r3, [pc, #188]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	492c      	ldr	r1, [pc, #176]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a04:	4b29      	ldr	r3, [pc, #164]	; (8004aac <HAL_RCC_ClockConfig+0x1b0>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d210      	bcs.n	8004a34 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a12:	4b26      	ldr	r3, [pc, #152]	; (8004aac <HAL_RCC_ClockConfig+0x1b0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f023 0207 	bic.w	r2, r3, #7
 8004a1a:	4924      	ldr	r1, [pc, #144]	; (8004aac <HAL_RCC_ClockConfig+0x1b0>)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a22:	4b22      	ldr	r3, [pc, #136]	; (8004aac <HAL_RCC_ClockConfig+0x1b0>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d001      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e036      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d008      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a40:	4b1b      	ldr	r3, [pc, #108]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	4918      	ldr	r1, [pc, #96]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d009      	beq.n	8004a72 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a5e:	4b14      	ldr	r3, [pc, #80]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	4910      	ldr	r1, [pc, #64]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a72:	f000 f825 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8004a76:	4602      	mov	r2, r0
 8004a78:	4b0d      	ldr	r3, [pc, #52]	; (8004ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	091b      	lsrs	r3, r3, #4
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	490c      	ldr	r1, [pc, #48]	; (8004ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a84:	5ccb      	ldrb	r3, [r1, r3]
 8004a86:	f003 031f 	and.w	r3, r3, #31
 8004a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8e:	4a0a      	ldr	r2, [pc, #40]	; (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a92:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <HAL_RCC_ClockConfig+0x1c0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fd fb4c 	bl	8002134 <HAL_InitTick>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004aa0:	7afb      	ldrb	r3, [r7, #11]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40022000 	.word	0x40022000
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	080067ac 	.word	0x080067ac
 8004ab8:	20000008 	.word	0x20000008
 8004abc:	2000000c 	.word	0x2000000c

08004ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b089      	sub	sp, #36	; 0x24
 8004ac4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61fb      	str	r3, [r7, #28]
 8004aca:	2300      	movs	r3, #0
 8004acc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ace:	4b3e      	ldr	r3, [pc, #248]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
 8004ad6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ad8:	4b3b      	ldr	r3, [pc, #236]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	2b0c      	cmp	r3, #12
 8004aec:	d121      	bne.n	8004b32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d11e      	bne.n	8004b32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004af4:	4b34      	ldr	r3, [pc, #208]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0308 	and.w	r3, r3, #8
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d107      	bne.n	8004b10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b00:	4b31      	ldr	r3, [pc, #196]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b06:	0a1b      	lsrs	r3, r3, #8
 8004b08:	f003 030f 	and.w	r3, r3, #15
 8004b0c:	61fb      	str	r3, [r7, #28]
 8004b0e:	e005      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b10:	4b2d      	ldr	r3, [pc, #180]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	091b      	lsrs	r3, r3, #4
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b1c:	4a2b      	ldr	r2, [pc, #172]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10d      	bne.n	8004b48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b30:	e00a      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d102      	bne.n	8004b3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b38:	4b25      	ldr	r3, [pc, #148]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b3a:	61bb      	str	r3, [r7, #24]
 8004b3c:	e004      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d101      	bne.n	8004b48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b44:	4b23      	ldr	r3, [pc, #140]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	2b0c      	cmp	r3, #12
 8004b4c:	d134      	bne.n	8004bb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b4e:	4b1e      	ldr	r3, [pc, #120]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d003      	beq.n	8004b66 <HAL_RCC_GetSysClockFreq+0xa6>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b03      	cmp	r3, #3
 8004b62:	d003      	beq.n	8004b6c <HAL_RCC_GetSysClockFreq+0xac>
 8004b64:	e005      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b66:	4b1a      	ldr	r3, [pc, #104]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b68:	617b      	str	r3, [r7, #20]
      break;
 8004b6a:	e005      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b6c:	4b19      	ldr	r3, [pc, #100]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b6e:	617b      	str	r3, [r7, #20]
      break;
 8004b70:	e002      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	617b      	str	r3, [r7, #20]
      break;
 8004b76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b78:	4b13      	ldr	r3, [pc, #76]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	091b      	lsrs	r3, r3, #4
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	3301      	adds	r3, #1
 8004b84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b86:	4b10      	ldr	r3, [pc, #64]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	0a1b      	lsrs	r3, r3, #8
 8004b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	fb02 f203 	mul.w	r2, r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b9e:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	0e5b      	lsrs	r3, r3, #25
 8004ba4:	f003 0303 	and.w	r3, r3, #3
 8004ba8:	3301      	adds	r3, #1
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004bb8:	69bb      	ldr	r3, [r7, #24]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3724      	adds	r7, #36	; 0x24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	080067c4 	.word	0x080067c4
 8004bd0:	00f42400 	.word	0x00f42400
 8004bd4:	007a1200 	.word	0x007a1200

08004bd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bdc:	4b03      	ldr	r3, [pc, #12]	; (8004bec <HAL_RCC_GetHCLKFreq+0x14>)
 8004bde:	681b      	ldr	r3, [r3, #0]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	20000008 	.word	0x20000008

08004bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004bf4:	f7ff fff0 	bl	8004bd8 <HAL_RCC_GetHCLKFreq>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	4b06      	ldr	r3, [pc, #24]	; (8004c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	0adb      	lsrs	r3, r3, #11
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	4904      	ldr	r1, [pc, #16]	; (8004c18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c06:	5ccb      	ldrb	r3, [r1, r3]
 8004c08:	f003 031f 	and.w	r3, r3, #31
 8004c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40021000 	.word	0x40021000
 8004c18:	080067bc 	.word	0x080067bc

08004c1c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	220f      	movs	r2, #15
 8004c2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004c2c:	4b12      	ldr	r3, [pc, #72]	; (8004c78 <HAL_RCC_GetClockConfig+0x5c>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f003 0203 	and.w	r2, r3, #3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004c38:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <HAL_RCC_GetClockConfig+0x5c>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004c44:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <HAL_RCC_GetClockConfig+0x5c>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004c50:	4b09      	ldr	r3, [pc, #36]	; (8004c78 <HAL_RCC_GetClockConfig+0x5c>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	08db      	lsrs	r3, r3, #3
 8004c56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004c5e:	4b07      	ldr	r3, [pc, #28]	; (8004c7c <HAL_RCC_GetClockConfig+0x60>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0207 	and.w	r2, r3, #7
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	601a      	str	r2, [r3, #0]
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	40022000 	.word	0x40022000

08004c80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c88:	2300      	movs	r3, #0
 8004c8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c8c:	4b2a      	ldr	r3, [pc, #168]	; (8004d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c98:	f7fe fd06 	bl	80036a8 <HAL_PWREx_GetVoltageRange>
 8004c9c:	6178      	str	r0, [r7, #20]
 8004c9e:	e014      	b.n	8004cca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ca0:	4b25      	ldr	r3, [pc, #148]	; (8004d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca4:	4a24      	ldr	r2, [pc, #144]	; (8004d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004caa:	6593      	str	r3, [r2, #88]	; 0x58
 8004cac:	4b22      	ldr	r3, [pc, #136]	; (8004d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004cb8:	f7fe fcf6 	bl	80036a8 <HAL_PWREx_GetVoltageRange>
 8004cbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004cbe:	4b1e      	ldr	r3, [pc, #120]	; (8004d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc2:	4a1d      	ldr	r2, [pc, #116]	; (8004d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cd0:	d10b      	bne.n	8004cea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b80      	cmp	r3, #128	; 0x80
 8004cd6:	d919      	bls.n	8004d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2ba0      	cmp	r3, #160	; 0xa0
 8004cdc:	d902      	bls.n	8004ce4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cde:	2302      	movs	r3, #2
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	e013      	b.n	8004d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	613b      	str	r3, [r7, #16]
 8004ce8:	e010      	b.n	8004d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b80      	cmp	r3, #128	; 0x80
 8004cee:	d902      	bls.n	8004cf6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	613b      	str	r3, [r7, #16]
 8004cf4:	e00a      	b.n	8004d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b80      	cmp	r3, #128	; 0x80
 8004cfa:	d102      	bne.n	8004d02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	613b      	str	r3, [r7, #16]
 8004d00:	e004      	b.n	8004d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b70      	cmp	r3, #112	; 0x70
 8004d06:	d101      	bne.n	8004d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d08:	2301      	movs	r3, #1
 8004d0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f023 0207 	bic.w	r2, r3, #7
 8004d14:	4909      	ldr	r1, [pc, #36]	; (8004d3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d1c:	4b07      	ldr	r3, [pc, #28]	; (8004d3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d001      	beq.n	8004d2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3718      	adds	r7, #24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	40022000 	.word	0x40022000

08004d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e049      	b.n	8004de6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d106      	bne.n	8004d6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7fd f9c6 	bl	80020f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4610      	mov	r0, r2
 8004d80:	f000 fab4 	bl	80052ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d001      	beq.n	8004e08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e04f      	b.n	8004ea8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0201 	orr.w	r2, r2, #1
 8004e1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a23      	ldr	r2, [pc, #140]	; (8004eb4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d01d      	beq.n	8004e66 <HAL_TIM_Base_Start_IT+0x76>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e32:	d018      	beq.n	8004e66 <HAL_TIM_Base_Start_IT+0x76>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a1f      	ldr	r2, [pc, #124]	; (8004eb8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d013      	beq.n	8004e66 <HAL_TIM_Base_Start_IT+0x76>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a1e      	ldr	r2, [pc, #120]	; (8004ebc <HAL_TIM_Base_Start_IT+0xcc>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00e      	beq.n	8004e66 <HAL_TIM_Base_Start_IT+0x76>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a1c      	ldr	r2, [pc, #112]	; (8004ec0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d009      	beq.n	8004e66 <HAL_TIM_Base_Start_IT+0x76>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a1b      	ldr	r2, [pc, #108]	; (8004ec4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d004      	beq.n	8004e66 <HAL_TIM_Base_Start_IT+0x76>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a19      	ldr	r2, [pc, #100]	; (8004ec8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d115      	bne.n	8004e92 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	4b17      	ldr	r3, [pc, #92]	; (8004ecc <HAL_TIM_Base_Start_IT+0xdc>)
 8004e6e:	4013      	ands	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2b06      	cmp	r3, #6
 8004e76:	d015      	beq.n	8004ea4 <HAL_TIM_Base_Start_IT+0xb4>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e7e:	d011      	beq.n	8004ea4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0201 	orr.w	r2, r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e90:	e008      	b.n	8004ea4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0201 	orr.w	r2, r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	e000      	b.n	8004ea6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	40012c00 	.word	0x40012c00
 8004eb8:	40000400 	.word	0x40000400
 8004ebc:	40000800 	.word	0x40000800
 8004ec0:	40000c00 	.word	0x40000c00
 8004ec4:	40013400 	.word	0x40013400
 8004ec8:	40014000 	.word	0x40014000
 8004ecc:	00010007 	.word	0x00010007

08004ed0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d122      	bne.n	8004f2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d11b      	bne.n	8004f2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f06f 0202 	mvn.w	r2, #2
 8004efc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	f003 0303 	and.w	r3, r3, #3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f9cb 	bl	80052ae <HAL_TIM_IC_CaptureCallback>
 8004f18:	e005      	b.n	8004f26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f9bd 	bl	800529a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f9ce 	bl	80052c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f003 0304 	and.w	r3, r3, #4
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d122      	bne.n	8004f80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b04      	cmp	r3, #4
 8004f46:	d11b      	bne.n	8004f80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f06f 0204 	mvn.w	r2, #4
 8004f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2202      	movs	r2, #2
 8004f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f9a1 	bl	80052ae <HAL_TIM_IC_CaptureCallback>
 8004f6c:	e005      	b.n	8004f7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f993 	bl	800529a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f9a4 	bl	80052c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f003 0308 	and.w	r3, r3, #8
 8004f8a:	2b08      	cmp	r3, #8
 8004f8c:	d122      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f003 0308 	and.w	r3, r3, #8
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d11b      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0208 	mvn.w	r2, #8
 8004fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2204      	movs	r2, #4
 8004faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f977 	bl	80052ae <HAL_TIM_IC_CaptureCallback>
 8004fc0:	e005      	b.n	8004fce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f969 	bl	800529a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f97a 	bl	80052c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f003 0310 	and.w	r3, r3, #16
 8004fde:	2b10      	cmp	r3, #16
 8004fe0:	d122      	bne.n	8005028 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f003 0310 	and.w	r3, r3, #16
 8004fec:	2b10      	cmp	r3, #16
 8004fee:	d11b      	bne.n	8005028 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f06f 0210 	mvn.w	r2, #16
 8004ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2208      	movs	r2, #8
 8004ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f94d 	bl	80052ae <HAL_TIM_IC_CaptureCallback>
 8005014:	e005      	b.n	8005022 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f93f 	bl	800529a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f950 	bl	80052c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b01      	cmp	r3, #1
 8005034:	d10e      	bne.n	8005054 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b01      	cmp	r3, #1
 8005042:	d107      	bne.n	8005054 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f06f 0201 	mvn.w	r2, #1
 800504c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7fc fb32 	bl	80016b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505e:	2b80      	cmp	r3, #128	; 0x80
 8005060:	d10e      	bne.n	8005080 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506c:	2b80      	cmp	r3, #128	; 0x80
 800506e:	d107      	bne.n	8005080 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 fafc 	bl	8005678 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800508e:	d10e      	bne.n	80050ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509a:	2b80      	cmp	r3, #128	; 0x80
 800509c:	d107      	bne.n	80050ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80050a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 faef 	bl	800568c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b8:	2b40      	cmp	r3, #64	; 0x40
 80050ba:	d10e      	bne.n	80050da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c6:	2b40      	cmp	r3, #64	; 0x40
 80050c8:	d107      	bne.n	80050da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f8fe 	bl	80052d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	d10e      	bne.n	8005106 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f003 0320 	and.w	r3, r3, #32
 80050f2:	2b20      	cmp	r3, #32
 80050f4:	d107      	bne.n	8005106 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f06f 0220 	mvn.w	r2, #32
 80050fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 faaf 	bl	8005664 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005106:	bf00      	nop
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b084      	sub	sp, #16
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800511e:	2b01      	cmp	r3, #1
 8005120:	d101      	bne.n	8005126 <HAL_TIM_ConfigClockSource+0x18>
 8005122:	2302      	movs	r3, #2
 8005124:	e0b5      	b.n	8005292 <HAL_TIM_ConfigClockSource+0x184>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2202      	movs	r2, #2
 8005132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005144:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005148:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005150:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005162:	d03e      	beq.n	80051e2 <HAL_TIM_ConfigClockSource+0xd4>
 8005164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005168:	f200 8087 	bhi.w	800527a <HAL_TIM_ConfigClockSource+0x16c>
 800516c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005170:	f000 8085 	beq.w	800527e <HAL_TIM_ConfigClockSource+0x170>
 8005174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005178:	d87f      	bhi.n	800527a <HAL_TIM_ConfigClockSource+0x16c>
 800517a:	2b70      	cmp	r3, #112	; 0x70
 800517c:	d01a      	beq.n	80051b4 <HAL_TIM_ConfigClockSource+0xa6>
 800517e:	2b70      	cmp	r3, #112	; 0x70
 8005180:	d87b      	bhi.n	800527a <HAL_TIM_ConfigClockSource+0x16c>
 8005182:	2b60      	cmp	r3, #96	; 0x60
 8005184:	d050      	beq.n	8005228 <HAL_TIM_ConfigClockSource+0x11a>
 8005186:	2b60      	cmp	r3, #96	; 0x60
 8005188:	d877      	bhi.n	800527a <HAL_TIM_ConfigClockSource+0x16c>
 800518a:	2b50      	cmp	r3, #80	; 0x50
 800518c:	d03c      	beq.n	8005208 <HAL_TIM_ConfigClockSource+0xfa>
 800518e:	2b50      	cmp	r3, #80	; 0x50
 8005190:	d873      	bhi.n	800527a <HAL_TIM_ConfigClockSource+0x16c>
 8005192:	2b40      	cmp	r3, #64	; 0x40
 8005194:	d058      	beq.n	8005248 <HAL_TIM_ConfigClockSource+0x13a>
 8005196:	2b40      	cmp	r3, #64	; 0x40
 8005198:	d86f      	bhi.n	800527a <HAL_TIM_ConfigClockSource+0x16c>
 800519a:	2b30      	cmp	r3, #48	; 0x30
 800519c:	d064      	beq.n	8005268 <HAL_TIM_ConfigClockSource+0x15a>
 800519e:	2b30      	cmp	r3, #48	; 0x30
 80051a0:	d86b      	bhi.n	800527a <HAL_TIM_ConfigClockSource+0x16c>
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	d060      	beq.n	8005268 <HAL_TIM_ConfigClockSource+0x15a>
 80051a6:	2b20      	cmp	r3, #32
 80051a8:	d867      	bhi.n	800527a <HAL_TIM_ConfigClockSource+0x16c>
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d05c      	beq.n	8005268 <HAL_TIM_ConfigClockSource+0x15a>
 80051ae:	2b10      	cmp	r3, #16
 80051b0:	d05a      	beq.n	8005268 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80051b2:	e062      	b.n	800527a <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6818      	ldr	r0, [r3, #0]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	6899      	ldr	r1, [r3, #8]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f000 f9a6 	bl	8005514 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	609a      	str	r2, [r3, #8]
      break;
 80051e0:	e04e      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	6899      	ldr	r1, [r3, #8]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f000 f98f 	bl	8005514 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005204:	609a      	str	r2, [r3, #8]
      break;
 8005206:	e03b      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6818      	ldr	r0, [r3, #0]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	6859      	ldr	r1, [r3, #4]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	461a      	mov	r2, r3
 8005216:	f000 f903 	bl	8005420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2150      	movs	r1, #80	; 0x50
 8005220:	4618      	mov	r0, r3
 8005222:	f000 f95c 	bl	80054de <TIM_ITRx_SetConfig>
      break;
 8005226:	e02b      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6818      	ldr	r0, [r3, #0]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	6859      	ldr	r1, [r3, #4]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	461a      	mov	r2, r3
 8005236:	f000 f922 	bl	800547e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2160      	movs	r1, #96	; 0x60
 8005240:	4618      	mov	r0, r3
 8005242:	f000 f94c 	bl	80054de <TIM_ITRx_SetConfig>
      break;
 8005246:	e01b      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6818      	ldr	r0, [r3, #0]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	6859      	ldr	r1, [r3, #4]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	461a      	mov	r2, r3
 8005256:	f000 f8e3 	bl	8005420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2140      	movs	r1, #64	; 0x40
 8005260:	4618      	mov	r0, r3
 8005262:	f000 f93c 	bl	80054de <TIM_ITRx_SetConfig>
      break;
 8005266:	e00b      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4619      	mov	r1, r3
 8005272:	4610      	mov	r0, r2
 8005274:	f000 f933 	bl	80054de <TIM_ITRx_SetConfig>
        break;
 8005278:	e002      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800527a:	bf00      	nop
 800527c:	e000      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800527e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b083      	sub	sp, #12
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
	...

080052ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a40      	ldr	r2, [pc, #256]	; (8005400 <TIM_Base_SetConfig+0x114>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d013      	beq.n	800532c <TIM_Base_SetConfig+0x40>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530a:	d00f      	beq.n	800532c <TIM_Base_SetConfig+0x40>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a3d      	ldr	r2, [pc, #244]	; (8005404 <TIM_Base_SetConfig+0x118>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d00b      	beq.n	800532c <TIM_Base_SetConfig+0x40>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a3c      	ldr	r2, [pc, #240]	; (8005408 <TIM_Base_SetConfig+0x11c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d007      	beq.n	800532c <TIM_Base_SetConfig+0x40>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a3b      	ldr	r2, [pc, #236]	; (800540c <TIM_Base_SetConfig+0x120>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d003      	beq.n	800532c <TIM_Base_SetConfig+0x40>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a3a      	ldr	r2, [pc, #232]	; (8005410 <TIM_Base_SetConfig+0x124>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d108      	bne.n	800533e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a2f      	ldr	r2, [pc, #188]	; (8005400 <TIM_Base_SetConfig+0x114>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d01f      	beq.n	8005386 <TIM_Base_SetConfig+0x9a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534c:	d01b      	beq.n	8005386 <TIM_Base_SetConfig+0x9a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a2c      	ldr	r2, [pc, #176]	; (8005404 <TIM_Base_SetConfig+0x118>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d017      	beq.n	8005386 <TIM_Base_SetConfig+0x9a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a2b      	ldr	r2, [pc, #172]	; (8005408 <TIM_Base_SetConfig+0x11c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d013      	beq.n	8005386 <TIM_Base_SetConfig+0x9a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a2a      	ldr	r2, [pc, #168]	; (800540c <TIM_Base_SetConfig+0x120>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00f      	beq.n	8005386 <TIM_Base_SetConfig+0x9a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a29      	ldr	r2, [pc, #164]	; (8005410 <TIM_Base_SetConfig+0x124>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d00b      	beq.n	8005386 <TIM_Base_SetConfig+0x9a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a28      	ldr	r2, [pc, #160]	; (8005414 <TIM_Base_SetConfig+0x128>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d007      	beq.n	8005386 <TIM_Base_SetConfig+0x9a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a27      	ldr	r2, [pc, #156]	; (8005418 <TIM_Base_SetConfig+0x12c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d003      	beq.n	8005386 <TIM_Base_SetConfig+0x9a>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a26      	ldr	r2, [pc, #152]	; (800541c <TIM_Base_SetConfig+0x130>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d108      	bne.n	8005398 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800538c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4313      	orrs	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a10      	ldr	r2, [pc, #64]	; (8005400 <TIM_Base_SetConfig+0x114>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d00f      	beq.n	80053e4 <TIM_Base_SetConfig+0xf8>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a12      	ldr	r2, [pc, #72]	; (8005410 <TIM_Base_SetConfig+0x124>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00b      	beq.n	80053e4 <TIM_Base_SetConfig+0xf8>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a11      	ldr	r2, [pc, #68]	; (8005414 <TIM_Base_SetConfig+0x128>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d007      	beq.n	80053e4 <TIM_Base_SetConfig+0xf8>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a10      	ldr	r2, [pc, #64]	; (8005418 <TIM_Base_SetConfig+0x12c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d003      	beq.n	80053e4 <TIM_Base_SetConfig+0xf8>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a0f      	ldr	r2, [pc, #60]	; (800541c <TIM_Base_SetConfig+0x130>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d103      	bne.n	80053ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	691a      	ldr	r2, [r3, #16]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	615a      	str	r2, [r3, #20]
}
 80053f2:	bf00      	nop
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40012c00 	.word	0x40012c00
 8005404:	40000400 	.word	0x40000400
 8005408:	40000800 	.word	0x40000800
 800540c:	40000c00 	.word	0x40000c00
 8005410:	40013400 	.word	0x40013400
 8005414:	40014000 	.word	0x40014000
 8005418:	40014400 	.word	0x40014400
 800541c:	40014800 	.word	0x40014800

08005420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005420:	b480      	push	{r7}
 8005422:	b087      	sub	sp, #28
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	f023 0201 	bic.w	r2, r3, #1
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800544a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	4313      	orrs	r3, r2
 8005454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f023 030a 	bic.w	r3, r3, #10
 800545c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	621a      	str	r2, [r3, #32]
}
 8005472:	bf00      	nop
 8005474:	371c      	adds	r7, #28
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800547e:	b480      	push	{r7}
 8005480:	b087      	sub	sp, #28
 8005482:	af00      	add	r7, sp, #0
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	f023 0210 	bic.w	r2, r3, #16
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	031b      	lsls	r3, r3, #12
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	621a      	str	r2, [r3, #32]
}
 80054d2:	bf00      	nop
 80054d4:	371c      	adds	r7, #28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054de:	b480      	push	{r7}
 80054e0:	b085      	sub	sp, #20
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
 80054e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f043 0307 	orr.w	r3, r3, #7
 8005500:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	609a      	str	r2, [r3, #8]
}
 8005508:	bf00      	nop
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
 8005520:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800552e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	021a      	lsls	r2, r3, #8
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	431a      	orrs	r2, r3
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	4313      	orrs	r3, r2
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	4313      	orrs	r3, r2
 8005540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	609a      	str	r2, [r3, #8]
}
 8005548:	bf00      	nop
 800554a:	371c      	adds	r7, #28
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005564:	2b01      	cmp	r3, #1
 8005566:	d101      	bne.n	800556c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005568:	2302      	movs	r3, #2
 800556a:	e068      	b.n	800563e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2202      	movs	r2, #2
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a2e      	ldr	r2, [pc, #184]	; (800564c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d004      	beq.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a2d      	ldr	r2, [pc, #180]	; (8005650 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d108      	bne.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80055a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a1e      	ldr	r2, [pc, #120]	; (800564c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d01d      	beq.n	8005612 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055de:	d018      	beq.n	8005612 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a1b      	ldr	r2, [pc, #108]	; (8005654 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d013      	beq.n	8005612 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a1a      	ldr	r2, [pc, #104]	; (8005658 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00e      	beq.n	8005612 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a18      	ldr	r2, [pc, #96]	; (800565c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d009      	beq.n	8005612 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a13      	ldr	r2, [pc, #76]	; (8005650 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d004      	beq.n	8005612 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a14      	ldr	r2, [pc, #80]	; (8005660 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d10c      	bne.n	800562c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005618:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	4313      	orrs	r3, r2
 8005622:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	40012c00 	.word	0x40012c00
 8005650:	40013400 	.word	0x40013400
 8005654:	40000400 	.word	0x40000400
 8005658:	40000800 	.word	0x40000800
 800565c:	40000c00 	.word	0x40000c00
 8005660:	40014000 	.word	0x40014000

08005664 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <arm_sin_f32>:
 80056a0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005720 <arm_sin_f32+0x80>
 80056a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80056a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80056ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056b0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80056b4:	d504      	bpl.n	80056c0 <arm_sin_f32+0x20>
 80056b6:	ee17 3a90 	vmov	r3, s15
 80056ba:	3b01      	subs	r3, #1
 80056bc:	ee07 3a90 	vmov	s15, r3
 80056c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056c4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005724 <arm_sin_f32+0x84>
 80056c8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80056cc:	ee20 0a07 	vmul.f32	s0, s0, s14
 80056d0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80056d4:	ee17 3a90 	vmov	r3, s15
 80056d8:	b29b      	uxth	r3, r3
 80056da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056de:	d21a      	bcs.n	8005716 <arm_sin_f32+0x76>
 80056e0:	ee07 3a90 	vmov	s15, r3
 80056e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e8:	1c59      	adds	r1, r3, #1
 80056ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 80056ee:	4a0e      	ldr	r2, [pc, #56]	; (8005728 <arm_sin_f32+0x88>)
 80056f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80056f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80056f8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80056fc:	ed93 7a00 	vldr	s14, [r3]
 8005700:	edd2 6a00 	vldr	s13, [r2]
 8005704:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005708:	ee20 0a26 	vmul.f32	s0, s0, s13
 800570c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005710:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005714:	4770      	bx	lr
 8005716:	ee30 0a47 	vsub.f32	s0, s0, s14
 800571a:	2101      	movs	r1, #1
 800571c:	2300      	movs	r3, #0
 800571e:	e7e6      	b.n	80056ee <arm_sin_f32+0x4e>
 8005720:	3e22f983 	.word	0x3e22f983
 8005724:	44000000 	.word	0x44000000
 8005728:	080067f4 	.word	0x080067f4

0800572c <__errno>:
 800572c:	4b01      	ldr	r3, [pc, #4]	; (8005734 <__errno+0x8>)
 800572e:	6818      	ldr	r0, [r3, #0]
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	20000014 	.word	0x20000014

08005738 <__libc_init_array>:
 8005738:	b570      	push	{r4, r5, r6, lr}
 800573a:	4d0d      	ldr	r5, [pc, #52]	; (8005770 <__libc_init_array+0x38>)
 800573c:	4c0d      	ldr	r4, [pc, #52]	; (8005774 <__libc_init_array+0x3c>)
 800573e:	1b64      	subs	r4, r4, r5
 8005740:	10a4      	asrs	r4, r4, #2
 8005742:	2600      	movs	r6, #0
 8005744:	42a6      	cmp	r6, r4
 8005746:	d109      	bne.n	800575c <__libc_init_array+0x24>
 8005748:	4d0b      	ldr	r5, [pc, #44]	; (8005778 <__libc_init_array+0x40>)
 800574a:	4c0c      	ldr	r4, [pc, #48]	; (800577c <__libc_init_array+0x44>)
 800574c:	f001 f822 	bl	8006794 <_init>
 8005750:	1b64      	subs	r4, r4, r5
 8005752:	10a4      	asrs	r4, r4, #2
 8005754:	2600      	movs	r6, #0
 8005756:	42a6      	cmp	r6, r4
 8005758:	d105      	bne.n	8005766 <__libc_init_array+0x2e>
 800575a:	bd70      	pop	{r4, r5, r6, pc}
 800575c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005760:	4798      	blx	r3
 8005762:	3601      	adds	r6, #1
 8005764:	e7ee      	b.n	8005744 <__libc_init_array+0xc>
 8005766:	f855 3b04 	ldr.w	r3, [r5], #4
 800576a:	4798      	blx	r3
 800576c:	3601      	adds	r6, #1
 800576e:	e7f2      	b.n	8005756 <__libc_init_array+0x1e>
 8005770:	08007144 	.word	0x08007144
 8005774:	08007144 	.word	0x08007144
 8005778:	08007144 	.word	0x08007144
 800577c:	08007148 	.word	0x08007148

08005780 <memset>:
 8005780:	4402      	add	r2, r0
 8005782:	4603      	mov	r3, r0
 8005784:	4293      	cmp	r3, r2
 8005786:	d100      	bne.n	800578a <memset+0xa>
 8005788:	4770      	bx	lr
 800578a:	f803 1b01 	strb.w	r1, [r3], #1
 800578e:	e7f9      	b.n	8005784 <memset+0x4>

08005790 <rand>:
 8005790:	4b17      	ldr	r3, [pc, #92]	; (80057f0 <rand+0x60>)
 8005792:	b510      	push	{r4, lr}
 8005794:	681c      	ldr	r4, [r3, #0]
 8005796:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005798:	b9b3      	cbnz	r3, 80057c8 <rand+0x38>
 800579a:	2018      	movs	r0, #24
 800579c:	f000 f868 	bl	8005870 <malloc>
 80057a0:	63a0      	str	r0, [r4, #56]	; 0x38
 80057a2:	b928      	cbnz	r0, 80057b0 <rand+0x20>
 80057a4:	4602      	mov	r2, r0
 80057a6:	4b13      	ldr	r3, [pc, #76]	; (80057f4 <rand+0x64>)
 80057a8:	4813      	ldr	r0, [pc, #76]	; (80057f8 <rand+0x68>)
 80057aa:	214e      	movs	r1, #78	; 0x4e
 80057ac:	f000 f830 	bl	8005810 <__assert_func>
 80057b0:	4a12      	ldr	r2, [pc, #72]	; (80057fc <rand+0x6c>)
 80057b2:	4b13      	ldr	r3, [pc, #76]	; (8005800 <rand+0x70>)
 80057b4:	e9c0 2300 	strd	r2, r3, [r0]
 80057b8:	4b12      	ldr	r3, [pc, #72]	; (8005804 <rand+0x74>)
 80057ba:	6083      	str	r3, [r0, #8]
 80057bc:	230b      	movs	r3, #11
 80057be:	8183      	strh	r3, [r0, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	2300      	movs	r3, #0
 80057c4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80057c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80057ca:	480f      	ldr	r0, [pc, #60]	; (8005808 <rand+0x78>)
 80057cc:	690a      	ldr	r2, [r1, #16]
 80057ce:	694b      	ldr	r3, [r1, #20]
 80057d0:	4c0e      	ldr	r4, [pc, #56]	; (800580c <rand+0x7c>)
 80057d2:	4350      	muls	r0, r2
 80057d4:	fb04 0003 	mla	r0, r4, r3, r0
 80057d8:	fba2 3404 	umull	r3, r4, r2, r4
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	4404      	add	r4, r0
 80057e0:	f144 0000 	adc.w	r0, r4, #0
 80057e4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80057e8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80057ec:	bd10      	pop	{r4, pc}
 80057ee:	bf00      	nop
 80057f0:	20000014 	.word	0x20000014
 80057f4:	08006ffc 	.word	0x08006ffc
 80057f8:	08007013 	.word	0x08007013
 80057fc:	abcd330e 	.word	0xabcd330e
 8005800:	e66d1234 	.word	0xe66d1234
 8005804:	0005deec 	.word	0x0005deec
 8005808:	5851f42d 	.word	0x5851f42d
 800580c:	4c957f2d 	.word	0x4c957f2d

08005810 <__assert_func>:
 8005810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005812:	4614      	mov	r4, r2
 8005814:	461a      	mov	r2, r3
 8005816:	4b09      	ldr	r3, [pc, #36]	; (800583c <__assert_func+0x2c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4605      	mov	r5, r0
 800581c:	68d8      	ldr	r0, [r3, #12]
 800581e:	b14c      	cbz	r4, 8005834 <__assert_func+0x24>
 8005820:	4b07      	ldr	r3, [pc, #28]	; (8005840 <__assert_func+0x30>)
 8005822:	9100      	str	r1, [sp, #0]
 8005824:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005828:	4906      	ldr	r1, [pc, #24]	; (8005844 <__assert_func+0x34>)
 800582a:	462b      	mov	r3, r5
 800582c:	f000 f80e 	bl	800584c <fiprintf>
 8005830:	f000 fc8e 	bl	8006150 <abort>
 8005834:	4b04      	ldr	r3, [pc, #16]	; (8005848 <__assert_func+0x38>)
 8005836:	461c      	mov	r4, r3
 8005838:	e7f3      	b.n	8005822 <__assert_func+0x12>
 800583a:	bf00      	nop
 800583c:	20000014 	.word	0x20000014
 8005840:	08007072 	.word	0x08007072
 8005844:	0800707f 	.word	0x0800707f
 8005848:	080070ad 	.word	0x080070ad

0800584c <fiprintf>:
 800584c:	b40e      	push	{r1, r2, r3}
 800584e:	b503      	push	{r0, r1, lr}
 8005850:	4601      	mov	r1, r0
 8005852:	ab03      	add	r3, sp, #12
 8005854:	4805      	ldr	r0, [pc, #20]	; (800586c <fiprintf+0x20>)
 8005856:	f853 2b04 	ldr.w	r2, [r3], #4
 800585a:	6800      	ldr	r0, [r0, #0]
 800585c:	9301      	str	r3, [sp, #4]
 800585e:	f000 f8e3 	bl	8005a28 <_vfiprintf_r>
 8005862:	b002      	add	sp, #8
 8005864:	f85d eb04 	ldr.w	lr, [sp], #4
 8005868:	b003      	add	sp, #12
 800586a:	4770      	bx	lr
 800586c:	20000014 	.word	0x20000014

08005870 <malloc>:
 8005870:	4b02      	ldr	r3, [pc, #8]	; (800587c <malloc+0xc>)
 8005872:	4601      	mov	r1, r0
 8005874:	6818      	ldr	r0, [r3, #0]
 8005876:	f000 b853 	b.w	8005920 <_malloc_r>
 800587a:	bf00      	nop
 800587c:	20000014 	.word	0x20000014

08005880 <_free_r>:
 8005880:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005882:	2900      	cmp	r1, #0
 8005884:	d048      	beq.n	8005918 <_free_r+0x98>
 8005886:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800588a:	9001      	str	r0, [sp, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	f1a1 0404 	sub.w	r4, r1, #4
 8005892:	bfb8      	it	lt
 8005894:	18e4      	addlt	r4, r4, r3
 8005896:	f000 fe81 	bl	800659c <__malloc_lock>
 800589a:	4a20      	ldr	r2, [pc, #128]	; (800591c <_free_r+0x9c>)
 800589c:	9801      	ldr	r0, [sp, #4]
 800589e:	6813      	ldr	r3, [r2, #0]
 80058a0:	4615      	mov	r5, r2
 80058a2:	b933      	cbnz	r3, 80058b2 <_free_r+0x32>
 80058a4:	6063      	str	r3, [r4, #4]
 80058a6:	6014      	str	r4, [r2, #0]
 80058a8:	b003      	add	sp, #12
 80058aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058ae:	f000 be7b 	b.w	80065a8 <__malloc_unlock>
 80058b2:	42a3      	cmp	r3, r4
 80058b4:	d90b      	bls.n	80058ce <_free_r+0x4e>
 80058b6:	6821      	ldr	r1, [r4, #0]
 80058b8:	1862      	adds	r2, r4, r1
 80058ba:	4293      	cmp	r3, r2
 80058bc:	bf04      	itt	eq
 80058be:	681a      	ldreq	r2, [r3, #0]
 80058c0:	685b      	ldreq	r3, [r3, #4]
 80058c2:	6063      	str	r3, [r4, #4]
 80058c4:	bf04      	itt	eq
 80058c6:	1852      	addeq	r2, r2, r1
 80058c8:	6022      	streq	r2, [r4, #0]
 80058ca:	602c      	str	r4, [r5, #0]
 80058cc:	e7ec      	b.n	80058a8 <_free_r+0x28>
 80058ce:	461a      	mov	r2, r3
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	b10b      	cbz	r3, 80058d8 <_free_r+0x58>
 80058d4:	42a3      	cmp	r3, r4
 80058d6:	d9fa      	bls.n	80058ce <_free_r+0x4e>
 80058d8:	6811      	ldr	r1, [r2, #0]
 80058da:	1855      	adds	r5, r2, r1
 80058dc:	42a5      	cmp	r5, r4
 80058de:	d10b      	bne.n	80058f8 <_free_r+0x78>
 80058e0:	6824      	ldr	r4, [r4, #0]
 80058e2:	4421      	add	r1, r4
 80058e4:	1854      	adds	r4, r2, r1
 80058e6:	42a3      	cmp	r3, r4
 80058e8:	6011      	str	r1, [r2, #0]
 80058ea:	d1dd      	bne.n	80058a8 <_free_r+0x28>
 80058ec:	681c      	ldr	r4, [r3, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	6053      	str	r3, [r2, #4]
 80058f2:	4421      	add	r1, r4
 80058f4:	6011      	str	r1, [r2, #0]
 80058f6:	e7d7      	b.n	80058a8 <_free_r+0x28>
 80058f8:	d902      	bls.n	8005900 <_free_r+0x80>
 80058fa:	230c      	movs	r3, #12
 80058fc:	6003      	str	r3, [r0, #0]
 80058fe:	e7d3      	b.n	80058a8 <_free_r+0x28>
 8005900:	6825      	ldr	r5, [r4, #0]
 8005902:	1961      	adds	r1, r4, r5
 8005904:	428b      	cmp	r3, r1
 8005906:	bf04      	itt	eq
 8005908:	6819      	ldreq	r1, [r3, #0]
 800590a:	685b      	ldreq	r3, [r3, #4]
 800590c:	6063      	str	r3, [r4, #4]
 800590e:	bf04      	itt	eq
 8005910:	1949      	addeq	r1, r1, r5
 8005912:	6021      	streq	r1, [r4, #0]
 8005914:	6054      	str	r4, [r2, #4]
 8005916:	e7c7      	b.n	80058a8 <_free_r+0x28>
 8005918:	b003      	add	sp, #12
 800591a:	bd30      	pop	{r4, r5, pc}
 800591c:	200056bc 	.word	0x200056bc

08005920 <_malloc_r>:
 8005920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005922:	1ccd      	adds	r5, r1, #3
 8005924:	f025 0503 	bic.w	r5, r5, #3
 8005928:	3508      	adds	r5, #8
 800592a:	2d0c      	cmp	r5, #12
 800592c:	bf38      	it	cc
 800592e:	250c      	movcc	r5, #12
 8005930:	2d00      	cmp	r5, #0
 8005932:	4606      	mov	r6, r0
 8005934:	db01      	blt.n	800593a <_malloc_r+0x1a>
 8005936:	42a9      	cmp	r1, r5
 8005938:	d903      	bls.n	8005942 <_malloc_r+0x22>
 800593a:	230c      	movs	r3, #12
 800593c:	6033      	str	r3, [r6, #0]
 800593e:	2000      	movs	r0, #0
 8005940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005942:	f000 fe2b 	bl	800659c <__malloc_lock>
 8005946:	4921      	ldr	r1, [pc, #132]	; (80059cc <_malloc_r+0xac>)
 8005948:	680a      	ldr	r2, [r1, #0]
 800594a:	4614      	mov	r4, r2
 800594c:	b99c      	cbnz	r4, 8005976 <_malloc_r+0x56>
 800594e:	4f20      	ldr	r7, [pc, #128]	; (80059d0 <_malloc_r+0xb0>)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	b923      	cbnz	r3, 800595e <_malloc_r+0x3e>
 8005954:	4621      	mov	r1, r4
 8005956:	4630      	mov	r0, r6
 8005958:	f000 fb2a 	bl	8005fb0 <_sbrk_r>
 800595c:	6038      	str	r0, [r7, #0]
 800595e:	4629      	mov	r1, r5
 8005960:	4630      	mov	r0, r6
 8005962:	f000 fb25 	bl	8005fb0 <_sbrk_r>
 8005966:	1c43      	adds	r3, r0, #1
 8005968:	d123      	bne.n	80059b2 <_malloc_r+0x92>
 800596a:	230c      	movs	r3, #12
 800596c:	6033      	str	r3, [r6, #0]
 800596e:	4630      	mov	r0, r6
 8005970:	f000 fe1a 	bl	80065a8 <__malloc_unlock>
 8005974:	e7e3      	b.n	800593e <_malloc_r+0x1e>
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	1b5b      	subs	r3, r3, r5
 800597a:	d417      	bmi.n	80059ac <_malloc_r+0x8c>
 800597c:	2b0b      	cmp	r3, #11
 800597e:	d903      	bls.n	8005988 <_malloc_r+0x68>
 8005980:	6023      	str	r3, [r4, #0]
 8005982:	441c      	add	r4, r3
 8005984:	6025      	str	r5, [r4, #0]
 8005986:	e004      	b.n	8005992 <_malloc_r+0x72>
 8005988:	6863      	ldr	r3, [r4, #4]
 800598a:	42a2      	cmp	r2, r4
 800598c:	bf0c      	ite	eq
 800598e:	600b      	streq	r3, [r1, #0]
 8005990:	6053      	strne	r3, [r2, #4]
 8005992:	4630      	mov	r0, r6
 8005994:	f000 fe08 	bl	80065a8 <__malloc_unlock>
 8005998:	f104 000b 	add.w	r0, r4, #11
 800599c:	1d23      	adds	r3, r4, #4
 800599e:	f020 0007 	bic.w	r0, r0, #7
 80059a2:	1ac2      	subs	r2, r0, r3
 80059a4:	d0cc      	beq.n	8005940 <_malloc_r+0x20>
 80059a6:	1a1b      	subs	r3, r3, r0
 80059a8:	50a3      	str	r3, [r4, r2]
 80059aa:	e7c9      	b.n	8005940 <_malloc_r+0x20>
 80059ac:	4622      	mov	r2, r4
 80059ae:	6864      	ldr	r4, [r4, #4]
 80059b0:	e7cc      	b.n	800594c <_malloc_r+0x2c>
 80059b2:	1cc4      	adds	r4, r0, #3
 80059b4:	f024 0403 	bic.w	r4, r4, #3
 80059b8:	42a0      	cmp	r0, r4
 80059ba:	d0e3      	beq.n	8005984 <_malloc_r+0x64>
 80059bc:	1a21      	subs	r1, r4, r0
 80059be:	4630      	mov	r0, r6
 80059c0:	f000 faf6 	bl	8005fb0 <_sbrk_r>
 80059c4:	3001      	adds	r0, #1
 80059c6:	d1dd      	bne.n	8005984 <_malloc_r+0x64>
 80059c8:	e7cf      	b.n	800596a <_malloc_r+0x4a>
 80059ca:	bf00      	nop
 80059cc:	200056bc 	.word	0x200056bc
 80059d0:	200056c0 	.word	0x200056c0

080059d4 <__sfputc_r>:
 80059d4:	6893      	ldr	r3, [r2, #8]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	b410      	push	{r4}
 80059dc:	6093      	str	r3, [r2, #8]
 80059de:	da08      	bge.n	80059f2 <__sfputc_r+0x1e>
 80059e0:	6994      	ldr	r4, [r2, #24]
 80059e2:	42a3      	cmp	r3, r4
 80059e4:	db01      	blt.n	80059ea <__sfputc_r+0x16>
 80059e6:	290a      	cmp	r1, #10
 80059e8:	d103      	bne.n	80059f2 <__sfputc_r+0x1e>
 80059ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059ee:	f000 baef 	b.w	8005fd0 <__swbuf_r>
 80059f2:	6813      	ldr	r3, [r2, #0]
 80059f4:	1c58      	adds	r0, r3, #1
 80059f6:	6010      	str	r0, [r2, #0]
 80059f8:	7019      	strb	r1, [r3, #0]
 80059fa:	4608      	mov	r0, r1
 80059fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <__sfputs_r>:
 8005a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a04:	4606      	mov	r6, r0
 8005a06:	460f      	mov	r7, r1
 8005a08:	4614      	mov	r4, r2
 8005a0a:	18d5      	adds	r5, r2, r3
 8005a0c:	42ac      	cmp	r4, r5
 8005a0e:	d101      	bne.n	8005a14 <__sfputs_r+0x12>
 8005a10:	2000      	movs	r0, #0
 8005a12:	e007      	b.n	8005a24 <__sfputs_r+0x22>
 8005a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a18:	463a      	mov	r2, r7
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	f7ff ffda 	bl	80059d4 <__sfputc_r>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d1f3      	bne.n	8005a0c <__sfputs_r+0xa>
 8005a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a28 <_vfiprintf_r>:
 8005a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2c:	460d      	mov	r5, r1
 8005a2e:	b09d      	sub	sp, #116	; 0x74
 8005a30:	4614      	mov	r4, r2
 8005a32:	4698      	mov	r8, r3
 8005a34:	4606      	mov	r6, r0
 8005a36:	b118      	cbz	r0, 8005a40 <_vfiprintf_r+0x18>
 8005a38:	6983      	ldr	r3, [r0, #24]
 8005a3a:	b90b      	cbnz	r3, 8005a40 <_vfiprintf_r+0x18>
 8005a3c:	f000 fcaa 	bl	8006394 <__sinit>
 8005a40:	4b89      	ldr	r3, [pc, #548]	; (8005c68 <_vfiprintf_r+0x240>)
 8005a42:	429d      	cmp	r5, r3
 8005a44:	d11b      	bne.n	8005a7e <_vfiprintf_r+0x56>
 8005a46:	6875      	ldr	r5, [r6, #4]
 8005a48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a4a:	07d9      	lsls	r1, r3, #31
 8005a4c:	d405      	bmi.n	8005a5a <_vfiprintf_r+0x32>
 8005a4e:	89ab      	ldrh	r3, [r5, #12]
 8005a50:	059a      	lsls	r2, r3, #22
 8005a52:	d402      	bmi.n	8005a5a <_vfiprintf_r+0x32>
 8005a54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a56:	f000 fd3b 	bl	80064d0 <__retarget_lock_acquire_recursive>
 8005a5a:	89ab      	ldrh	r3, [r5, #12]
 8005a5c:	071b      	lsls	r3, r3, #28
 8005a5e:	d501      	bpl.n	8005a64 <_vfiprintf_r+0x3c>
 8005a60:	692b      	ldr	r3, [r5, #16]
 8005a62:	b9eb      	cbnz	r3, 8005aa0 <_vfiprintf_r+0x78>
 8005a64:	4629      	mov	r1, r5
 8005a66:	4630      	mov	r0, r6
 8005a68:	f000 fb04 	bl	8006074 <__swsetup_r>
 8005a6c:	b1c0      	cbz	r0, 8005aa0 <_vfiprintf_r+0x78>
 8005a6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a70:	07dc      	lsls	r4, r3, #31
 8005a72:	d50e      	bpl.n	8005a92 <_vfiprintf_r+0x6a>
 8005a74:	f04f 30ff 	mov.w	r0, #4294967295
 8005a78:	b01d      	add	sp, #116	; 0x74
 8005a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a7e:	4b7b      	ldr	r3, [pc, #492]	; (8005c6c <_vfiprintf_r+0x244>)
 8005a80:	429d      	cmp	r5, r3
 8005a82:	d101      	bne.n	8005a88 <_vfiprintf_r+0x60>
 8005a84:	68b5      	ldr	r5, [r6, #8]
 8005a86:	e7df      	b.n	8005a48 <_vfiprintf_r+0x20>
 8005a88:	4b79      	ldr	r3, [pc, #484]	; (8005c70 <_vfiprintf_r+0x248>)
 8005a8a:	429d      	cmp	r5, r3
 8005a8c:	bf08      	it	eq
 8005a8e:	68f5      	ldreq	r5, [r6, #12]
 8005a90:	e7da      	b.n	8005a48 <_vfiprintf_r+0x20>
 8005a92:	89ab      	ldrh	r3, [r5, #12]
 8005a94:	0598      	lsls	r0, r3, #22
 8005a96:	d4ed      	bmi.n	8005a74 <_vfiprintf_r+0x4c>
 8005a98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a9a:	f000 fd1a 	bl	80064d2 <__retarget_lock_release_recursive>
 8005a9e:	e7e9      	b.n	8005a74 <_vfiprintf_r+0x4c>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8005aa4:	2320      	movs	r3, #32
 8005aa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005aaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8005aae:	2330      	movs	r3, #48	; 0x30
 8005ab0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005c74 <_vfiprintf_r+0x24c>
 8005ab4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ab8:	f04f 0901 	mov.w	r9, #1
 8005abc:	4623      	mov	r3, r4
 8005abe:	469a      	mov	sl, r3
 8005ac0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ac4:	b10a      	cbz	r2, 8005aca <_vfiprintf_r+0xa2>
 8005ac6:	2a25      	cmp	r2, #37	; 0x25
 8005ac8:	d1f9      	bne.n	8005abe <_vfiprintf_r+0x96>
 8005aca:	ebba 0b04 	subs.w	fp, sl, r4
 8005ace:	d00b      	beq.n	8005ae8 <_vfiprintf_r+0xc0>
 8005ad0:	465b      	mov	r3, fp
 8005ad2:	4622      	mov	r2, r4
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	4630      	mov	r0, r6
 8005ad8:	f7ff ff93 	bl	8005a02 <__sfputs_r>
 8005adc:	3001      	adds	r0, #1
 8005ade:	f000 80aa 	beq.w	8005c36 <_vfiprintf_r+0x20e>
 8005ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ae4:	445a      	add	r2, fp
 8005ae6:	9209      	str	r2, [sp, #36]	; 0x24
 8005ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 80a2 	beq.w	8005c36 <_vfiprintf_r+0x20e>
 8005af2:	2300      	movs	r3, #0
 8005af4:	f04f 32ff 	mov.w	r2, #4294967295
 8005af8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005afc:	f10a 0a01 	add.w	sl, sl, #1
 8005b00:	9304      	str	r3, [sp, #16]
 8005b02:	9307      	str	r3, [sp, #28]
 8005b04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b08:	931a      	str	r3, [sp, #104]	; 0x68
 8005b0a:	4654      	mov	r4, sl
 8005b0c:	2205      	movs	r2, #5
 8005b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b12:	4858      	ldr	r0, [pc, #352]	; (8005c74 <_vfiprintf_r+0x24c>)
 8005b14:	f7fa fb5c 	bl	80001d0 <memchr>
 8005b18:	9a04      	ldr	r2, [sp, #16]
 8005b1a:	b9d8      	cbnz	r0, 8005b54 <_vfiprintf_r+0x12c>
 8005b1c:	06d1      	lsls	r1, r2, #27
 8005b1e:	bf44      	itt	mi
 8005b20:	2320      	movmi	r3, #32
 8005b22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b26:	0713      	lsls	r3, r2, #28
 8005b28:	bf44      	itt	mi
 8005b2a:	232b      	movmi	r3, #43	; 0x2b
 8005b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b30:	f89a 3000 	ldrb.w	r3, [sl]
 8005b34:	2b2a      	cmp	r3, #42	; 0x2a
 8005b36:	d015      	beq.n	8005b64 <_vfiprintf_r+0x13c>
 8005b38:	9a07      	ldr	r2, [sp, #28]
 8005b3a:	4654      	mov	r4, sl
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	f04f 0c0a 	mov.w	ip, #10
 8005b42:	4621      	mov	r1, r4
 8005b44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b48:	3b30      	subs	r3, #48	; 0x30
 8005b4a:	2b09      	cmp	r3, #9
 8005b4c:	d94e      	bls.n	8005bec <_vfiprintf_r+0x1c4>
 8005b4e:	b1b0      	cbz	r0, 8005b7e <_vfiprintf_r+0x156>
 8005b50:	9207      	str	r2, [sp, #28]
 8005b52:	e014      	b.n	8005b7e <_vfiprintf_r+0x156>
 8005b54:	eba0 0308 	sub.w	r3, r0, r8
 8005b58:	fa09 f303 	lsl.w	r3, r9, r3
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	9304      	str	r3, [sp, #16]
 8005b60:	46a2      	mov	sl, r4
 8005b62:	e7d2      	b.n	8005b0a <_vfiprintf_r+0xe2>
 8005b64:	9b03      	ldr	r3, [sp, #12]
 8005b66:	1d19      	adds	r1, r3, #4
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	9103      	str	r1, [sp, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	bfbb      	ittet	lt
 8005b70:	425b      	neglt	r3, r3
 8005b72:	f042 0202 	orrlt.w	r2, r2, #2
 8005b76:	9307      	strge	r3, [sp, #28]
 8005b78:	9307      	strlt	r3, [sp, #28]
 8005b7a:	bfb8      	it	lt
 8005b7c:	9204      	strlt	r2, [sp, #16]
 8005b7e:	7823      	ldrb	r3, [r4, #0]
 8005b80:	2b2e      	cmp	r3, #46	; 0x2e
 8005b82:	d10c      	bne.n	8005b9e <_vfiprintf_r+0x176>
 8005b84:	7863      	ldrb	r3, [r4, #1]
 8005b86:	2b2a      	cmp	r3, #42	; 0x2a
 8005b88:	d135      	bne.n	8005bf6 <_vfiprintf_r+0x1ce>
 8005b8a:	9b03      	ldr	r3, [sp, #12]
 8005b8c:	1d1a      	adds	r2, r3, #4
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	9203      	str	r2, [sp, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	bfb8      	it	lt
 8005b96:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b9a:	3402      	adds	r4, #2
 8005b9c:	9305      	str	r3, [sp, #20]
 8005b9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005c84 <_vfiprintf_r+0x25c>
 8005ba2:	7821      	ldrb	r1, [r4, #0]
 8005ba4:	2203      	movs	r2, #3
 8005ba6:	4650      	mov	r0, sl
 8005ba8:	f7fa fb12 	bl	80001d0 <memchr>
 8005bac:	b140      	cbz	r0, 8005bc0 <_vfiprintf_r+0x198>
 8005bae:	2340      	movs	r3, #64	; 0x40
 8005bb0:	eba0 000a 	sub.w	r0, r0, sl
 8005bb4:	fa03 f000 	lsl.w	r0, r3, r0
 8005bb8:	9b04      	ldr	r3, [sp, #16]
 8005bba:	4303      	orrs	r3, r0
 8005bbc:	3401      	adds	r4, #1
 8005bbe:	9304      	str	r3, [sp, #16]
 8005bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bc4:	482c      	ldr	r0, [pc, #176]	; (8005c78 <_vfiprintf_r+0x250>)
 8005bc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bca:	2206      	movs	r2, #6
 8005bcc:	f7fa fb00 	bl	80001d0 <memchr>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	d03f      	beq.n	8005c54 <_vfiprintf_r+0x22c>
 8005bd4:	4b29      	ldr	r3, [pc, #164]	; (8005c7c <_vfiprintf_r+0x254>)
 8005bd6:	bb1b      	cbnz	r3, 8005c20 <_vfiprintf_r+0x1f8>
 8005bd8:	9b03      	ldr	r3, [sp, #12]
 8005bda:	3307      	adds	r3, #7
 8005bdc:	f023 0307 	bic.w	r3, r3, #7
 8005be0:	3308      	adds	r3, #8
 8005be2:	9303      	str	r3, [sp, #12]
 8005be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005be6:	443b      	add	r3, r7
 8005be8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bea:	e767      	b.n	8005abc <_vfiprintf_r+0x94>
 8005bec:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bf0:	460c      	mov	r4, r1
 8005bf2:	2001      	movs	r0, #1
 8005bf4:	e7a5      	b.n	8005b42 <_vfiprintf_r+0x11a>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	3401      	adds	r4, #1
 8005bfa:	9305      	str	r3, [sp, #20]
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	f04f 0c0a 	mov.w	ip, #10
 8005c02:	4620      	mov	r0, r4
 8005c04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c08:	3a30      	subs	r2, #48	; 0x30
 8005c0a:	2a09      	cmp	r2, #9
 8005c0c:	d903      	bls.n	8005c16 <_vfiprintf_r+0x1ee>
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0c5      	beq.n	8005b9e <_vfiprintf_r+0x176>
 8005c12:	9105      	str	r1, [sp, #20]
 8005c14:	e7c3      	b.n	8005b9e <_vfiprintf_r+0x176>
 8005c16:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e7f0      	b.n	8005c02 <_vfiprintf_r+0x1da>
 8005c20:	ab03      	add	r3, sp, #12
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	462a      	mov	r2, r5
 8005c26:	4b16      	ldr	r3, [pc, #88]	; (8005c80 <_vfiprintf_r+0x258>)
 8005c28:	a904      	add	r1, sp, #16
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	f3af 8000 	nop.w
 8005c30:	4607      	mov	r7, r0
 8005c32:	1c78      	adds	r0, r7, #1
 8005c34:	d1d6      	bne.n	8005be4 <_vfiprintf_r+0x1bc>
 8005c36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c38:	07d9      	lsls	r1, r3, #31
 8005c3a:	d405      	bmi.n	8005c48 <_vfiprintf_r+0x220>
 8005c3c:	89ab      	ldrh	r3, [r5, #12]
 8005c3e:	059a      	lsls	r2, r3, #22
 8005c40:	d402      	bmi.n	8005c48 <_vfiprintf_r+0x220>
 8005c42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c44:	f000 fc45 	bl	80064d2 <__retarget_lock_release_recursive>
 8005c48:	89ab      	ldrh	r3, [r5, #12]
 8005c4a:	065b      	lsls	r3, r3, #25
 8005c4c:	f53f af12 	bmi.w	8005a74 <_vfiprintf_r+0x4c>
 8005c50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c52:	e711      	b.n	8005a78 <_vfiprintf_r+0x50>
 8005c54:	ab03      	add	r3, sp, #12
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	462a      	mov	r2, r5
 8005c5a:	4b09      	ldr	r3, [pc, #36]	; (8005c80 <_vfiprintf_r+0x258>)
 8005c5c:	a904      	add	r1, sp, #16
 8005c5e:	4630      	mov	r0, r6
 8005c60:	f000 f880 	bl	8005d64 <_printf_i>
 8005c64:	e7e4      	b.n	8005c30 <_vfiprintf_r+0x208>
 8005c66:	bf00      	nop
 8005c68:	08007104 	.word	0x08007104
 8005c6c:	08007124 	.word	0x08007124
 8005c70:	080070e4 	.word	0x080070e4
 8005c74:	080070ae 	.word	0x080070ae
 8005c78:	080070b8 	.word	0x080070b8
 8005c7c:	00000000 	.word	0x00000000
 8005c80:	08005a03 	.word	0x08005a03
 8005c84:	080070b4 	.word	0x080070b4

08005c88 <_printf_common>:
 8005c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c8c:	4616      	mov	r6, r2
 8005c8e:	4699      	mov	r9, r3
 8005c90:	688a      	ldr	r2, [r1, #8]
 8005c92:	690b      	ldr	r3, [r1, #16]
 8005c94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	bfb8      	it	lt
 8005c9c:	4613      	movlt	r3, r2
 8005c9e:	6033      	str	r3, [r6, #0]
 8005ca0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ca4:	4607      	mov	r7, r0
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	b10a      	cbz	r2, 8005cae <_printf_common+0x26>
 8005caa:	3301      	adds	r3, #1
 8005cac:	6033      	str	r3, [r6, #0]
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	0699      	lsls	r1, r3, #26
 8005cb2:	bf42      	ittt	mi
 8005cb4:	6833      	ldrmi	r3, [r6, #0]
 8005cb6:	3302      	addmi	r3, #2
 8005cb8:	6033      	strmi	r3, [r6, #0]
 8005cba:	6825      	ldr	r5, [r4, #0]
 8005cbc:	f015 0506 	ands.w	r5, r5, #6
 8005cc0:	d106      	bne.n	8005cd0 <_printf_common+0x48>
 8005cc2:	f104 0a19 	add.w	sl, r4, #25
 8005cc6:	68e3      	ldr	r3, [r4, #12]
 8005cc8:	6832      	ldr	r2, [r6, #0]
 8005cca:	1a9b      	subs	r3, r3, r2
 8005ccc:	42ab      	cmp	r3, r5
 8005cce:	dc26      	bgt.n	8005d1e <_printf_common+0x96>
 8005cd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cd4:	1e13      	subs	r3, r2, #0
 8005cd6:	6822      	ldr	r2, [r4, #0]
 8005cd8:	bf18      	it	ne
 8005cda:	2301      	movne	r3, #1
 8005cdc:	0692      	lsls	r2, r2, #26
 8005cde:	d42b      	bmi.n	8005d38 <_printf_common+0xb0>
 8005ce0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ce4:	4649      	mov	r1, r9
 8005ce6:	4638      	mov	r0, r7
 8005ce8:	47c0      	blx	r8
 8005cea:	3001      	adds	r0, #1
 8005cec:	d01e      	beq.n	8005d2c <_printf_common+0xa4>
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	68e5      	ldr	r5, [r4, #12]
 8005cf2:	6832      	ldr	r2, [r6, #0]
 8005cf4:	f003 0306 	and.w	r3, r3, #6
 8005cf8:	2b04      	cmp	r3, #4
 8005cfa:	bf08      	it	eq
 8005cfc:	1aad      	subeq	r5, r5, r2
 8005cfe:	68a3      	ldr	r3, [r4, #8]
 8005d00:	6922      	ldr	r2, [r4, #16]
 8005d02:	bf0c      	ite	eq
 8005d04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d08:	2500      	movne	r5, #0
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	bfc4      	itt	gt
 8005d0e:	1a9b      	subgt	r3, r3, r2
 8005d10:	18ed      	addgt	r5, r5, r3
 8005d12:	2600      	movs	r6, #0
 8005d14:	341a      	adds	r4, #26
 8005d16:	42b5      	cmp	r5, r6
 8005d18:	d11a      	bne.n	8005d50 <_printf_common+0xc8>
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	e008      	b.n	8005d30 <_printf_common+0xa8>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	4652      	mov	r2, sl
 8005d22:	4649      	mov	r1, r9
 8005d24:	4638      	mov	r0, r7
 8005d26:	47c0      	blx	r8
 8005d28:	3001      	adds	r0, #1
 8005d2a:	d103      	bne.n	8005d34 <_printf_common+0xac>
 8005d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d34:	3501      	adds	r5, #1
 8005d36:	e7c6      	b.n	8005cc6 <_printf_common+0x3e>
 8005d38:	18e1      	adds	r1, r4, r3
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	2030      	movs	r0, #48	; 0x30
 8005d3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d42:	4422      	add	r2, r4
 8005d44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d4c:	3302      	adds	r3, #2
 8005d4e:	e7c7      	b.n	8005ce0 <_printf_common+0x58>
 8005d50:	2301      	movs	r3, #1
 8005d52:	4622      	mov	r2, r4
 8005d54:	4649      	mov	r1, r9
 8005d56:	4638      	mov	r0, r7
 8005d58:	47c0      	blx	r8
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	d0e6      	beq.n	8005d2c <_printf_common+0xa4>
 8005d5e:	3601      	adds	r6, #1
 8005d60:	e7d9      	b.n	8005d16 <_printf_common+0x8e>
	...

08005d64 <_printf_i>:
 8005d64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d68:	460c      	mov	r4, r1
 8005d6a:	4691      	mov	r9, r2
 8005d6c:	7e27      	ldrb	r7, [r4, #24]
 8005d6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005d70:	2f78      	cmp	r7, #120	; 0x78
 8005d72:	4680      	mov	r8, r0
 8005d74:	469a      	mov	sl, r3
 8005d76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d7a:	d807      	bhi.n	8005d8c <_printf_i+0x28>
 8005d7c:	2f62      	cmp	r7, #98	; 0x62
 8005d7e:	d80a      	bhi.n	8005d96 <_printf_i+0x32>
 8005d80:	2f00      	cmp	r7, #0
 8005d82:	f000 80d8 	beq.w	8005f36 <_printf_i+0x1d2>
 8005d86:	2f58      	cmp	r7, #88	; 0x58
 8005d88:	f000 80a3 	beq.w	8005ed2 <_printf_i+0x16e>
 8005d8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d94:	e03a      	b.n	8005e0c <_printf_i+0xa8>
 8005d96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d9a:	2b15      	cmp	r3, #21
 8005d9c:	d8f6      	bhi.n	8005d8c <_printf_i+0x28>
 8005d9e:	a001      	add	r0, pc, #4	; (adr r0, 8005da4 <_printf_i+0x40>)
 8005da0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005da4:	08005dfd 	.word	0x08005dfd
 8005da8:	08005e11 	.word	0x08005e11
 8005dac:	08005d8d 	.word	0x08005d8d
 8005db0:	08005d8d 	.word	0x08005d8d
 8005db4:	08005d8d 	.word	0x08005d8d
 8005db8:	08005d8d 	.word	0x08005d8d
 8005dbc:	08005e11 	.word	0x08005e11
 8005dc0:	08005d8d 	.word	0x08005d8d
 8005dc4:	08005d8d 	.word	0x08005d8d
 8005dc8:	08005d8d 	.word	0x08005d8d
 8005dcc:	08005d8d 	.word	0x08005d8d
 8005dd0:	08005f1d 	.word	0x08005f1d
 8005dd4:	08005e41 	.word	0x08005e41
 8005dd8:	08005eff 	.word	0x08005eff
 8005ddc:	08005d8d 	.word	0x08005d8d
 8005de0:	08005d8d 	.word	0x08005d8d
 8005de4:	08005f3f 	.word	0x08005f3f
 8005de8:	08005d8d 	.word	0x08005d8d
 8005dec:	08005e41 	.word	0x08005e41
 8005df0:	08005d8d 	.word	0x08005d8d
 8005df4:	08005d8d 	.word	0x08005d8d
 8005df8:	08005f07 	.word	0x08005f07
 8005dfc:	680b      	ldr	r3, [r1, #0]
 8005dfe:	1d1a      	adds	r2, r3, #4
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	600a      	str	r2, [r1, #0]
 8005e04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e0a3      	b.n	8005f58 <_printf_i+0x1f4>
 8005e10:	6825      	ldr	r5, [r4, #0]
 8005e12:	6808      	ldr	r0, [r1, #0]
 8005e14:	062e      	lsls	r6, r5, #24
 8005e16:	f100 0304 	add.w	r3, r0, #4
 8005e1a:	d50a      	bpl.n	8005e32 <_printf_i+0xce>
 8005e1c:	6805      	ldr	r5, [r0, #0]
 8005e1e:	600b      	str	r3, [r1, #0]
 8005e20:	2d00      	cmp	r5, #0
 8005e22:	da03      	bge.n	8005e2c <_printf_i+0xc8>
 8005e24:	232d      	movs	r3, #45	; 0x2d
 8005e26:	426d      	negs	r5, r5
 8005e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e2c:	485e      	ldr	r0, [pc, #376]	; (8005fa8 <_printf_i+0x244>)
 8005e2e:	230a      	movs	r3, #10
 8005e30:	e019      	b.n	8005e66 <_printf_i+0x102>
 8005e32:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005e36:	6805      	ldr	r5, [r0, #0]
 8005e38:	600b      	str	r3, [r1, #0]
 8005e3a:	bf18      	it	ne
 8005e3c:	b22d      	sxthne	r5, r5
 8005e3e:	e7ef      	b.n	8005e20 <_printf_i+0xbc>
 8005e40:	680b      	ldr	r3, [r1, #0]
 8005e42:	6825      	ldr	r5, [r4, #0]
 8005e44:	1d18      	adds	r0, r3, #4
 8005e46:	6008      	str	r0, [r1, #0]
 8005e48:	0628      	lsls	r0, r5, #24
 8005e4a:	d501      	bpl.n	8005e50 <_printf_i+0xec>
 8005e4c:	681d      	ldr	r5, [r3, #0]
 8005e4e:	e002      	b.n	8005e56 <_printf_i+0xf2>
 8005e50:	0669      	lsls	r1, r5, #25
 8005e52:	d5fb      	bpl.n	8005e4c <_printf_i+0xe8>
 8005e54:	881d      	ldrh	r5, [r3, #0]
 8005e56:	4854      	ldr	r0, [pc, #336]	; (8005fa8 <_printf_i+0x244>)
 8005e58:	2f6f      	cmp	r7, #111	; 0x6f
 8005e5a:	bf0c      	ite	eq
 8005e5c:	2308      	moveq	r3, #8
 8005e5e:	230a      	movne	r3, #10
 8005e60:	2100      	movs	r1, #0
 8005e62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e66:	6866      	ldr	r6, [r4, #4]
 8005e68:	60a6      	str	r6, [r4, #8]
 8005e6a:	2e00      	cmp	r6, #0
 8005e6c:	bfa2      	ittt	ge
 8005e6e:	6821      	ldrge	r1, [r4, #0]
 8005e70:	f021 0104 	bicge.w	r1, r1, #4
 8005e74:	6021      	strge	r1, [r4, #0]
 8005e76:	b90d      	cbnz	r5, 8005e7c <_printf_i+0x118>
 8005e78:	2e00      	cmp	r6, #0
 8005e7a:	d04d      	beq.n	8005f18 <_printf_i+0x1b4>
 8005e7c:	4616      	mov	r6, r2
 8005e7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e82:	fb03 5711 	mls	r7, r3, r1, r5
 8005e86:	5dc7      	ldrb	r7, [r0, r7]
 8005e88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e8c:	462f      	mov	r7, r5
 8005e8e:	42bb      	cmp	r3, r7
 8005e90:	460d      	mov	r5, r1
 8005e92:	d9f4      	bls.n	8005e7e <_printf_i+0x11a>
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d10b      	bne.n	8005eb0 <_printf_i+0x14c>
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	07df      	lsls	r7, r3, #31
 8005e9c:	d508      	bpl.n	8005eb0 <_printf_i+0x14c>
 8005e9e:	6923      	ldr	r3, [r4, #16]
 8005ea0:	6861      	ldr	r1, [r4, #4]
 8005ea2:	4299      	cmp	r1, r3
 8005ea4:	bfde      	ittt	le
 8005ea6:	2330      	movle	r3, #48	; 0x30
 8005ea8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005eac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005eb0:	1b92      	subs	r2, r2, r6
 8005eb2:	6122      	str	r2, [r4, #16]
 8005eb4:	f8cd a000 	str.w	sl, [sp]
 8005eb8:	464b      	mov	r3, r9
 8005eba:	aa03      	add	r2, sp, #12
 8005ebc:	4621      	mov	r1, r4
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	f7ff fee2 	bl	8005c88 <_printf_common>
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	d14c      	bne.n	8005f62 <_printf_i+0x1fe>
 8005ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ecc:	b004      	add	sp, #16
 8005ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed2:	4835      	ldr	r0, [pc, #212]	; (8005fa8 <_printf_i+0x244>)
 8005ed4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	680e      	ldr	r6, [r1, #0]
 8005edc:	061f      	lsls	r7, r3, #24
 8005ede:	f856 5b04 	ldr.w	r5, [r6], #4
 8005ee2:	600e      	str	r6, [r1, #0]
 8005ee4:	d514      	bpl.n	8005f10 <_printf_i+0x1ac>
 8005ee6:	07d9      	lsls	r1, r3, #31
 8005ee8:	bf44      	itt	mi
 8005eea:	f043 0320 	orrmi.w	r3, r3, #32
 8005eee:	6023      	strmi	r3, [r4, #0]
 8005ef0:	b91d      	cbnz	r5, 8005efa <_printf_i+0x196>
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	f023 0320 	bic.w	r3, r3, #32
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	2310      	movs	r3, #16
 8005efc:	e7b0      	b.n	8005e60 <_printf_i+0xfc>
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	f043 0320 	orr.w	r3, r3, #32
 8005f04:	6023      	str	r3, [r4, #0]
 8005f06:	2378      	movs	r3, #120	; 0x78
 8005f08:	4828      	ldr	r0, [pc, #160]	; (8005fac <_printf_i+0x248>)
 8005f0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f0e:	e7e3      	b.n	8005ed8 <_printf_i+0x174>
 8005f10:	065e      	lsls	r6, r3, #25
 8005f12:	bf48      	it	mi
 8005f14:	b2ad      	uxthmi	r5, r5
 8005f16:	e7e6      	b.n	8005ee6 <_printf_i+0x182>
 8005f18:	4616      	mov	r6, r2
 8005f1a:	e7bb      	b.n	8005e94 <_printf_i+0x130>
 8005f1c:	680b      	ldr	r3, [r1, #0]
 8005f1e:	6826      	ldr	r6, [r4, #0]
 8005f20:	6960      	ldr	r0, [r4, #20]
 8005f22:	1d1d      	adds	r5, r3, #4
 8005f24:	600d      	str	r5, [r1, #0]
 8005f26:	0635      	lsls	r5, r6, #24
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	d501      	bpl.n	8005f30 <_printf_i+0x1cc>
 8005f2c:	6018      	str	r0, [r3, #0]
 8005f2e:	e002      	b.n	8005f36 <_printf_i+0x1d2>
 8005f30:	0671      	lsls	r1, r6, #25
 8005f32:	d5fb      	bpl.n	8005f2c <_printf_i+0x1c8>
 8005f34:	8018      	strh	r0, [r3, #0]
 8005f36:	2300      	movs	r3, #0
 8005f38:	6123      	str	r3, [r4, #16]
 8005f3a:	4616      	mov	r6, r2
 8005f3c:	e7ba      	b.n	8005eb4 <_printf_i+0x150>
 8005f3e:	680b      	ldr	r3, [r1, #0]
 8005f40:	1d1a      	adds	r2, r3, #4
 8005f42:	600a      	str	r2, [r1, #0]
 8005f44:	681e      	ldr	r6, [r3, #0]
 8005f46:	6862      	ldr	r2, [r4, #4]
 8005f48:	2100      	movs	r1, #0
 8005f4a:	4630      	mov	r0, r6
 8005f4c:	f7fa f940 	bl	80001d0 <memchr>
 8005f50:	b108      	cbz	r0, 8005f56 <_printf_i+0x1f2>
 8005f52:	1b80      	subs	r0, r0, r6
 8005f54:	6060      	str	r0, [r4, #4]
 8005f56:	6863      	ldr	r3, [r4, #4]
 8005f58:	6123      	str	r3, [r4, #16]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f60:	e7a8      	b.n	8005eb4 <_printf_i+0x150>
 8005f62:	6923      	ldr	r3, [r4, #16]
 8005f64:	4632      	mov	r2, r6
 8005f66:	4649      	mov	r1, r9
 8005f68:	4640      	mov	r0, r8
 8005f6a:	47d0      	blx	sl
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d0ab      	beq.n	8005ec8 <_printf_i+0x164>
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	079b      	lsls	r3, r3, #30
 8005f74:	d413      	bmi.n	8005f9e <_printf_i+0x23a>
 8005f76:	68e0      	ldr	r0, [r4, #12]
 8005f78:	9b03      	ldr	r3, [sp, #12]
 8005f7a:	4298      	cmp	r0, r3
 8005f7c:	bfb8      	it	lt
 8005f7e:	4618      	movlt	r0, r3
 8005f80:	e7a4      	b.n	8005ecc <_printf_i+0x168>
 8005f82:	2301      	movs	r3, #1
 8005f84:	4632      	mov	r2, r6
 8005f86:	4649      	mov	r1, r9
 8005f88:	4640      	mov	r0, r8
 8005f8a:	47d0      	blx	sl
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	d09b      	beq.n	8005ec8 <_printf_i+0x164>
 8005f90:	3501      	adds	r5, #1
 8005f92:	68e3      	ldr	r3, [r4, #12]
 8005f94:	9903      	ldr	r1, [sp, #12]
 8005f96:	1a5b      	subs	r3, r3, r1
 8005f98:	42ab      	cmp	r3, r5
 8005f9a:	dcf2      	bgt.n	8005f82 <_printf_i+0x21e>
 8005f9c:	e7eb      	b.n	8005f76 <_printf_i+0x212>
 8005f9e:	2500      	movs	r5, #0
 8005fa0:	f104 0619 	add.w	r6, r4, #25
 8005fa4:	e7f5      	b.n	8005f92 <_printf_i+0x22e>
 8005fa6:	bf00      	nop
 8005fa8:	080070bf 	.word	0x080070bf
 8005fac:	080070d0 	.word	0x080070d0

08005fb0 <_sbrk_r>:
 8005fb0:	b538      	push	{r3, r4, r5, lr}
 8005fb2:	4d06      	ldr	r5, [pc, #24]	; (8005fcc <_sbrk_r+0x1c>)
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	4604      	mov	r4, r0
 8005fb8:	4608      	mov	r0, r1
 8005fba:	602b      	str	r3, [r5, #0]
 8005fbc:	f7fc f9e0 	bl	8002380 <_sbrk>
 8005fc0:	1c43      	adds	r3, r0, #1
 8005fc2:	d102      	bne.n	8005fca <_sbrk_r+0x1a>
 8005fc4:	682b      	ldr	r3, [r5, #0]
 8005fc6:	b103      	cbz	r3, 8005fca <_sbrk_r+0x1a>
 8005fc8:	6023      	str	r3, [r4, #0]
 8005fca:	bd38      	pop	{r3, r4, r5, pc}
 8005fcc:	20005920 	.word	0x20005920

08005fd0 <__swbuf_r>:
 8005fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd2:	460e      	mov	r6, r1
 8005fd4:	4614      	mov	r4, r2
 8005fd6:	4605      	mov	r5, r0
 8005fd8:	b118      	cbz	r0, 8005fe2 <__swbuf_r+0x12>
 8005fda:	6983      	ldr	r3, [r0, #24]
 8005fdc:	b90b      	cbnz	r3, 8005fe2 <__swbuf_r+0x12>
 8005fde:	f000 f9d9 	bl	8006394 <__sinit>
 8005fe2:	4b21      	ldr	r3, [pc, #132]	; (8006068 <__swbuf_r+0x98>)
 8005fe4:	429c      	cmp	r4, r3
 8005fe6:	d12b      	bne.n	8006040 <__swbuf_r+0x70>
 8005fe8:	686c      	ldr	r4, [r5, #4]
 8005fea:	69a3      	ldr	r3, [r4, #24]
 8005fec:	60a3      	str	r3, [r4, #8]
 8005fee:	89a3      	ldrh	r3, [r4, #12]
 8005ff0:	071a      	lsls	r2, r3, #28
 8005ff2:	d52f      	bpl.n	8006054 <__swbuf_r+0x84>
 8005ff4:	6923      	ldr	r3, [r4, #16]
 8005ff6:	b36b      	cbz	r3, 8006054 <__swbuf_r+0x84>
 8005ff8:	6923      	ldr	r3, [r4, #16]
 8005ffa:	6820      	ldr	r0, [r4, #0]
 8005ffc:	1ac0      	subs	r0, r0, r3
 8005ffe:	6963      	ldr	r3, [r4, #20]
 8006000:	b2f6      	uxtb	r6, r6
 8006002:	4283      	cmp	r3, r0
 8006004:	4637      	mov	r7, r6
 8006006:	dc04      	bgt.n	8006012 <__swbuf_r+0x42>
 8006008:	4621      	mov	r1, r4
 800600a:	4628      	mov	r0, r5
 800600c:	f000 f92e 	bl	800626c <_fflush_r>
 8006010:	bb30      	cbnz	r0, 8006060 <__swbuf_r+0x90>
 8006012:	68a3      	ldr	r3, [r4, #8]
 8006014:	3b01      	subs	r3, #1
 8006016:	60a3      	str	r3, [r4, #8]
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	6022      	str	r2, [r4, #0]
 800601e:	701e      	strb	r6, [r3, #0]
 8006020:	6963      	ldr	r3, [r4, #20]
 8006022:	3001      	adds	r0, #1
 8006024:	4283      	cmp	r3, r0
 8006026:	d004      	beq.n	8006032 <__swbuf_r+0x62>
 8006028:	89a3      	ldrh	r3, [r4, #12]
 800602a:	07db      	lsls	r3, r3, #31
 800602c:	d506      	bpl.n	800603c <__swbuf_r+0x6c>
 800602e:	2e0a      	cmp	r6, #10
 8006030:	d104      	bne.n	800603c <__swbuf_r+0x6c>
 8006032:	4621      	mov	r1, r4
 8006034:	4628      	mov	r0, r5
 8006036:	f000 f919 	bl	800626c <_fflush_r>
 800603a:	b988      	cbnz	r0, 8006060 <__swbuf_r+0x90>
 800603c:	4638      	mov	r0, r7
 800603e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006040:	4b0a      	ldr	r3, [pc, #40]	; (800606c <__swbuf_r+0x9c>)
 8006042:	429c      	cmp	r4, r3
 8006044:	d101      	bne.n	800604a <__swbuf_r+0x7a>
 8006046:	68ac      	ldr	r4, [r5, #8]
 8006048:	e7cf      	b.n	8005fea <__swbuf_r+0x1a>
 800604a:	4b09      	ldr	r3, [pc, #36]	; (8006070 <__swbuf_r+0xa0>)
 800604c:	429c      	cmp	r4, r3
 800604e:	bf08      	it	eq
 8006050:	68ec      	ldreq	r4, [r5, #12]
 8006052:	e7ca      	b.n	8005fea <__swbuf_r+0x1a>
 8006054:	4621      	mov	r1, r4
 8006056:	4628      	mov	r0, r5
 8006058:	f000 f80c 	bl	8006074 <__swsetup_r>
 800605c:	2800      	cmp	r0, #0
 800605e:	d0cb      	beq.n	8005ff8 <__swbuf_r+0x28>
 8006060:	f04f 37ff 	mov.w	r7, #4294967295
 8006064:	e7ea      	b.n	800603c <__swbuf_r+0x6c>
 8006066:	bf00      	nop
 8006068:	08007104 	.word	0x08007104
 800606c:	08007124 	.word	0x08007124
 8006070:	080070e4 	.word	0x080070e4

08006074 <__swsetup_r>:
 8006074:	4b32      	ldr	r3, [pc, #200]	; (8006140 <__swsetup_r+0xcc>)
 8006076:	b570      	push	{r4, r5, r6, lr}
 8006078:	681d      	ldr	r5, [r3, #0]
 800607a:	4606      	mov	r6, r0
 800607c:	460c      	mov	r4, r1
 800607e:	b125      	cbz	r5, 800608a <__swsetup_r+0x16>
 8006080:	69ab      	ldr	r3, [r5, #24]
 8006082:	b913      	cbnz	r3, 800608a <__swsetup_r+0x16>
 8006084:	4628      	mov	r0, r5
 8006086:	f000 f985 	bl	8006394 <__sinit>
 800608a:	4b2e      	ldr	r3, [pc, #184]	; (8006144 <__swsetup_r+0xd0>)
 800608c:	429c      	cmp	r4, r3
 800608e:	d10f      	bne.n	80060b0 <__swsetup_r+0x3c>
 8006090:	686c      	ldr	r4, [r5, #4]
 8006092:	89a3      	ldrh	r3, [r4, #12]
 8006094:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006098:	0719      	lsls	r1, r3, #28
 800609a:	d42c      	bmi.n	80060f6 <__swsetup_r+0x82>
 800609c:	06dd      	lsls	r5, r3, #27
 800609e:	d411      	bmi.n	80060c4 <__swsetup_r+0x50>
 80060a0:	2309      	movs	r3, #9
 80060a2:	6033      	str	r3, [r6, #0]
 80060a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80060a8:	81a3      	strh	r3, [r4, #12]
 80060aa:	f04f 30ff 	mov.w	r0, #4294967295
 80060ae:	e03e      	b.n	800612e <__swsetup_r+0xba>
 80060b0:	4b25      	ldr	r3, [pc, #148]	; (8006148 <__swsetup_r+0xd4>)
 80060b2:	429c      	cmp	r4, r3
 80060b4:	d101      	bne.n	80060ba <__swsetup_r+0x46>
 80060b6:	68ac      	ldr	r4, [r5, #8]
 80060b8:	e7eb      	b.n	8006092 <__swsetup_r+0x1e>
 80060ba:	4b24      	ldr	r3, [pc, #144]	; (800614c <__swsetup_r+0xd8>)
 80060bc:	429c      	cmp	r4, r3
 80060be:	bf08      	it	eq
 80060c0:	68ec      	ldreq	r4, [r5, #12]
 80060c2:	e7e6      	b.n	8006092 <__swsetup_r+0x1e>
 80060c4:	0758      	lsls	r0, r3, #29
 80060c6:	d512      	bpl.n	80060ee <__swsetup_r+0x7a>
 80060c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060ca:	b141      	cbz	r1, 80060de <__swsetup_r+0x6a>
 80060cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060d0:	4299      	cmp	r1, r3
 80060d2:	d002      	beq.n	80060da <__swsetup_r+0x66>
 80060d4:	4630      	mov	r0, r6
 80060d6:	f7ff fbd3 	bl	8005880 <_free_r>
 80060da:	2300      	movs	r3, #0
 80060dc:	6363      	str	r3, [r4, #52]	; 0x34
 80060de:	89a3      	ldrh	r3, [r4, #12]
 80060e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80060e4:	81a3      	strh	r3, [r4, #12]
 80060e6:	2300      	movs	r3, #0
 80060e8:	6063      	str	r3, [r4, #4]
 80060ea:	6923      	ldr	r3, [r4, #16]
 80060ec:	6023      	str	r3, [r4, #0]
 80060ee:	89a3      	ldrh	r3, [r4, #12]
 80060f0:	f043 0308 	orr.w	r3, r3, #8
 80060f4:	81a3      	strh	r3, [r4, #12]
 80060f6:	6923      	ldr	r3, [r4, #16]
 80060f8:	b94b      	cbnz	r3, 800610e <__swsetup_r+0x9a>
 80060fa:	89a3      	ldrh	r3, [r4, #12]
 80060fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006104:	d003      	beq.n	800610e <__swsetup_r+0x9a>
 8006106:	4621      	mov	r1, r4
 8006108:	4630      	mov	r0, r6
 800610a:	f000 fa07 	bl	800651c <__smakebuf_r>
 800610e:	89a0      	ldrh	r0, [r4, #12]
 8006110:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006114:	f010 0301 	ands.w	r3, r0, #1
 8006118:	d00a      	beq.n	8006130 <__swsetup_r+0xbc>
 800611a:	2300      	movs	r3, #0
 800611c:	60a3      	str	r3, [r4, #8]
 800611e:	6963      	ldr	r3, [r4, #20]
 8006120:	425b      	negs	r3, r3
 8006122:	61a3      	str	r3, [r4, #24]
 8006124:	6923      	ldr	r3, [r4, #16]
 8006126:	b943      	cbnz	r3, 800613a <__swsetup_r+0xc6>
 8006128:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800612c:	d1ba      	bne.n	80060a4 <__swsetup_r+0x30>
 800612e:	bd70      	pop	{r4, r5, r6, pc}
 8006130:	0781      	lsls	r1, r0, #30
 8006132:	bf58      	it	pl
 8006134:	6963      	ldrpl	r3, [r4, #20]
 8006136:	60a3      	str	r3, [r4, #8]
 8006138:	e7f4      	b.n	8006124 <__swsetup_r+0xb0>
 800613a:	2000      	movs	r0, #0
 800613c:	e7f7      	b.n	800612e <__swsetup_r+0xba>
 800613e:	bf00      	nop
 8006140:	20000014 	.word	0x20000014
 8006144:	08007104 	.word	0x08007104
 8006148:	08007124 	.word	0x08007124
 800614c:	080070e4 	.word	0x080070e4

08006150 <abort>:
 8006150:	b508      	push	{r3, lr}
 8006152:	2006      	movs	r0, #6
 8006154:	f000 fa56 	bl	8006604 <raise>
 8006158:	2001      	movs	r0, #1
 800615a:	f7fc f899 	bl	8002290 <_exit>
	...

08006160 <__sflush_r>:
 8006160:	898a      	ldrh	r2, [r1, #12]
 8006162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006166:	4605      	mov	r5, r0
 8006168:	0710      	lsls	r0, r2, #28
 800616a:	460c      	mov	r4, r1
 800616c:	d458      	bmi.n	8006220 <__sflush_r+0xc0>
 800616e:	684b      	ldr	r3, [r1, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	dc05      	bgt.n	8006180 <__sflush_r+0x20>
 8006174:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006176:	2b00      	cmp	r3, #0
 8006178:	dc02      	bgt.n	8006180 <__sflush_r+0x20>
 800617a:	2000      	movs	r0, #0
 800617c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006182:	2e00      	cmp	r6, #0
 8006184:	d0f9      	beq.n	800617a <__sflush_r+0x1a>
 8006186:	2300      	movs	r3, #0
 8006188:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800618c:	682f      	ldr	r7, [r5, #0]
 800618e:	602b      	str	r3, [r5, #0]
 8006190:	d032      	beq.n	80061f8 <__sflush_r+0x98>
 8006192:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006194:	89a3      	ldrh	r3, [r4, #12]
 8006196:	075a      	lsls	r2, r3, #29
 8006198:	d505      	bpl.n	80061a6 <__sflush_r+0x46>
 800619a:	6863      	ldr	r3, [r4, #4]
 800619c:	1ac0      	subs	r0, r0, r3
 800619e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061a0:	b10b      	cbz	r3, 80061a6 <__sflush_r+0x46>
 80061a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061a4:	1ac0      	subs	r0, r0, r3
 80061a6:	2300      	movs	r3, #0
 80061a8:	4602      	mov	r2, r0
 80061aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061ac:	6a21      	ldr	r1, [r4, #32]
 80061ae:	4628      	mov	r0, r5
 80061b0:	47b0      	blx	r6
 80061b2:	1c43      	adds	r3, r0, #1
 80061b4:	89a3      	ldrh	r3, [r4, #12]
 80061b6:	d106      	bne.n	80061c6 <__sflush_r+0x66>
 80061b8:	6829      	ldr	r1, [r5, #0]
 80061ba:	291d      	cmp	r1, #29
 80061bc:	d82c      	bhi.n	8006218 <__sflush_r+0xb8>
 80061be:	4a2a      	ldr	r2, [pc, #168]	; (8006268 <__sflush_r+0x108>)
 80061c0:	40ca      	lsrs	r2, r1
 80061c2:	07d6      	lsls	r6, r2, #31
 80061c4:	d528      	bpl.n	8006218 <__sflush_r+0xb8>
 80061c6:	2200      	movs	r2, #0
 80061c8:	6062      	str	r2, [r4, #4]
 80061ca:	04d9      	lsls	r1, r3, #19
 80061cc:	6922      	ldr	r2, [r4, #16]
 80061ce:	6022      	str	r2, [r4, #0]
 80061d0:	d504      	bpl.n	80061dc <__sflush_r+0x7c>
 80061d2:	1c42      	adds	r2, r0, #1
 80061d4:	d101      	bne.n	80061da <__sflush_r+0x7a>
 80061d6:	682b      	ldr	r3, [r5, #0]
 80061d8:	b903      	cbnz	r3, 80061dc <__sflush_r+0x7c>
 80061da:	6560      	str	r0, [r4, #84]	; 0x54
 80061dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061de:	602f      	str	r7, [r5, #0]
 80061e0:	2900      	cmp	r1, #0
 80061e2:	d0ca      	beq.n	800617a <__sflush_r+0x1a>
 80061e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061e8:	4299      	cmp	r1, r3
 80061ea:	d002      	beq.n	80061f2 <__sflush_r+0x92>
 80061ec:	4628      	mov	r0, r5
 80061ee:	f7ff fb47 	bl	8005880 <_free_r>
 80061f2:	2000      	movs	r0, #0
 80061f4:	6360      	str	r0, [r4, #52]	; 0x34
 80061f6:	e7c1      	b.n	800617c <__sflush_r+0x1c>
 80061f8:	6a21      	ldr	r1, [r4, #32]
 80061fa:	2301      	movs	r3, #1
 80061fc:	4628      	mov	r0, r5
 80061fe:	47b0      	blx	r6
 8006200:	1c41      	adds	r1, r0, #1
 8006202:	d1c7      	bne.n	8006194 <__sflush_r+0x34>
 8006204:	682b      	ldr	r3, [r5, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d0c4      	beq.n	8006194 <__sflush_r+0x34>
 800620a:	2b1d      	cmp	r3, #29
 800620c:	d001      	beq.n	8006212 <__sflush_r+0xb2>
 800620e:	2b16      	cmp	r3, #22
 8006210:	d101      	bne.n	8006216 <__sflush_r+0xb6>
 8006212:	602f      	str	r7, [r5, #0]
 8006214:	e7b1      	b.n	800617a <__sflush_r+0x1a>
 8006216:	89a3      	ldrh	r3, [r4, #12]
 8006218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800621c:	81a3      	strh	r3, [r4, #12]
 800621e:	e7ad      	b.n	800617c <__sflush_r+0x1c>
 8006220:	690f      	ldr	r7, [r1, #16]
 8006222:	2f00      	cmp	r7, #0
 8006224:	d0a9      	beq.n	800617a <__sflush_r+0x1a>
 8006226:	0793      	lsls	r3, r2, #30
 8006228:	680e      	ldr	r6, [r1, #0]
 800622a:	bf08      	it	eq
 800622c:	694b      	ldreq	r3, [r1, #20]
 800622e:	600f      	str	r7, [r1, #0]
 8006230:	bf18      	it	ne
 8006232:	2300      	movne	r3, #0
 8006234:	eba6 0807 	sub.w	r8, r6, r7
 8006238:	608b      	str	r3, [r1, #8]
 800623a:	f1b8 0f00 	cmp.w	r8, #0
 800623e:	dd9c      	ble.n	800617a <__sflush_r+0x1a>
 8006240:	6a21      	ldr	r1, [r4, #32]
 8006242:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006244:	4643      	mov	r3, r8
 8006246:	463a      	mov	r2, r7
 8006248:	4628      	mov	r0, r5
 800624a:	47b0      	blx	r6
 800624c:	2800      	cmp	r0, #0
 800624e:	dc06      	bgt.n	800625e <__sflush_r+0xfe>
 8006250:	89a3      	ldrh	r3, [r4, #12]
 8006252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006256:	81a3      	strh	r3, [r4, #12]
 8006258:	f04f 30ff 	mov.w	r0, #4294967295
 800625c:	e78e      	b.n	800617c <__sflush_r+0x1c>
 800625e:	4407      	add	r7, r0
 8006260:	eba8 0800 	sub.w	r8, r8, r0
 8006264:	e7e9      	b.n	800623a <__sflush_r+0xda>
 8006266:	bf00      	nop
 8006268:	20400001 	.word	0x20400001

0800626c <_fflush_r>:
 800626c:	b538      	push	{r3, r4, r5, lr}
 800626e:	690b      	ldr	r3, [r1, #16]
 8006270:	4605      	mov	r5, r0
 8006272:	460c      	mov	r4, r1
 8006274:	b913      	cbnz	r3, 800627c <_fflush_r+0x10>
 8006276:	2500      	movs	r5, #0
 8006278:	4628      	mov	r0, r5
 800627a:	bd38      	pop	{r3, r4, r5, pc}
 800627c:	b118      	cbz	r0, 8006286 <_fflush_r+0x1a>
 800627e:	6983      	ldr	r3, [r0, #24]
 8006280:	b90b      	cbnz	r3, 8006286 <_fflush_r+0x1a>
 8006282:	f000 f887 	bl	8006394 <__sinit>
 8006286:	4b14      	ldr	r3, [pc, #80]	; (80062d8 <_fflush_r+0x6c>)
 8006288:	429c      	cmp	r4, r3
 800628a:	d11b      	bne.n	80062c4 <_fflush_r+0x58>
 800628c:	686c      	ldr	r4, [r5, #4]
 800628e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0ef      	beq.n	8006276 <_fflush_r+0xa>
 8006296:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006298:	07d0      	lsls	r0, r2, #31
 800629a:	d404      	bmi.n	80062a6 <_fflush_r+0x3a>
 800629c:	0599      	lsls	r1, r3, #22
 800629e:	d402      	bmi.n	80062a6 <_fflush_r+0x3a>
 80062a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062a2:	f000 f915 	bl	80064d0 <__retarget_lock_acquire_recursive>
 80062a6:	4628      	mov	r0, r5
 80062a8:	4621      	mov	r1, r4
 80062aa:	f7ff ff59 	bl	8006160 <__sflush_r>
 80062ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062b0:	07da      	lsls	r2, r3, #31
 80062b2:	4605      	mov	r5, r0
 80062b4:	d4e0      	bmi.n	8006278 <_fflush_r+0xc>
 80062b6:	89a3      	ldrh	r3, [r4, #12]
 80062b8:	059b      	lsls	r3, r3, #22
 80062ba:	d4dd      	bmi.n	8006278 <_fflush_r+0xc>
 80062bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062be:	f000 f908 	bl	80064d2 <__retarget_lock_release_recursive>
 80062c2:	e7d9      	b.n	8006278 <_fflush_r+0xc>
 80062c4:	4b05      	ldr	r3, [pc, #20]	; (80062dc <_fflush_r+0x70>)
 80062c6:	429c      	cmp	r4, r3
 80062c8:	d101      	bne.n	80062ce <_fflush_r+0x62>
 80062ca:	68ac      	ldr	r4, [r5, #8]
 80062cc:	e7df      	b.n	800628e <_fflush_r+0x22>
 80062ce:	4b04      	ldr	r3, [pc, #16]	; (80062e0 <_fflush_r+0x74>)
 80062d0:	429c      	cmp	r4, r3
 80062d2:	bf08      	it	eq
 80062d4:	68ec      	ldreq	r4, [r5, #12]
 80062d6:	e7da      	b.n	800628e <_fflush_r+0x22>
 80062d8:	08007104 	.word	0x08007104
 80062dc:	08007124 	.word	0x08007124
 80062e0:	080070e4 	.word	0x080070e4

080062e4 <std>:
 80062e4:	2300      	movs	r3, #0
 80062e6:	b510      	push	{r4, lr}
 80062e8:	4604      	mov	r4, r0
 80062ea:	e9c0 3300 	strd	r3, r3, [r0]
 80062ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062f2:	6083      	str	r3, [r0, #8]
 80062f4:	8181      	strh	r1, [r0, #12]
 80062f6:	6643      	str	r3, [r0, #100]	; 0x64
 80062f8:	81c2      	strh	r2, [r0, #14]
 80062fa:	6183      	str	r3, [r0, #24]
 80062fc:	4619      	mov	r1, r3
 80062fe:	2208      	movs	r2, #8
 8006300:	305c      	adds	r0, #92	; 0x5c
 8006302:	f7ff fa3d 	bl	8005780 <memset>
 8006306:	4b05      	ldr	r3, [pc, #20]	; (800631c <std+0x38>)
 8006308:	6263      	str	r3, [r4, #36]	; 0x24
 800630a:	4b05      	ldr	r3, [pc, #20]	; (8006320 <std+0x3c>)
 800630c:	62a3      	str	r3, [r4, #40]	; 0x28
 800630e:	4b05      	ldr	r3, [pc, #20]	; (8006324 <std+0x40>)
 8006310:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006312:	4b05      	ldr	r3, [pc, #20]	; (8006328 <std+0x44>)
 8006314:	6224      	str	r4, [r4, #32]
 8006316:	6323      	str	r3, [r4, #48]	; 0x30
 8006318:	bd10      	pop	{r4, pc}
 800631a:	bf00      	nop
 800631c:	0800663d 	.word	0x0800663d
 8006320:	0800665f 	.word	0x0800665f
 8006324:	08006697 	.word	0x08006697
 8006328:	080066bb 	.word	0x080066bb

0800632c <_cleanup_r>:
 800632c:	4901      	ldr	r1, [pc, #4]	; (8006334 <_cleanup_r+0x8>)
 800632e:	f000 b8af 	b.w	8006490 <_fwalk_reent>
 8006332:	bf00      	nop
 8006334:	0800626d 	.word	0x0800626d

08006338 <__sfmoreglue>:
 8006338:	b570      	push	{r4, r5, r6, lr}
 800633a:	1e4a      	subs	r2, r1, #1
 800633c:	2568      	movs	r5, #104	; 0x68
 800633e:	4355      	muls	r5, r2
 8006340:	460e      	mov	r6, r1
 8006342:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006346:	f7ff faeb 	bl	8005920 <_malloc_r>
 800634a:	4604      	mov	r4, r0
 800634c:	b140      	cbz	r0, 8006360 <__sfmoreglue+0x28>
 800634e:	2100      	movs	r1, #0
 8006350:	e9c0 1600 	strd	r1, r6, [r0]
 8006354:	300c      	adds	r0, #12
 8006356:	60a0      	str	r0, [r4, #8]
 8006358:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800635c:	f7ff fa10 	bl	8005780 <memset>
 8006360:	4620      	mov	r0, r4
 8006362:	bd70      	pop	{r4, r5, r6, pc}

08006364 <__sfp_lock_acquire>:
 8006364:	4801      	ldr	r0, [pc, #4]	; (800636c <__sfp_lock_acquire+0x8>)
 8006366:	f000 b8b3 	b.w	80064d0 <__retarget_lock_acquire_recursive>
 800636a:	bf00      	nop
 800636c:	2000591c 	.word	0x2000591c

08006370 <__sfp_lock_release>:
 8006370:	4801      	ldr	r0, [pc, #4]	; (8006378 <__sfp_lock_release+0x8>)
 8006372:	f000 b8ae 	b.w	80064d2 <__retarget_lock_release_recursive>
 8006376:	bf00      	nop
 8006378:	2000591c 	.word	0x2000591c

0800637c <__sinit_lock_acquire>:
 800637c:	4801      	ldr	r0, [pc, #4]	; (8006384 <__sinit_lock_acquire+0x8>)
 800637e:	f000 b8a7 	b.w	80064d0 <__retarget_lock_acquire_recursive>
 8006382:	bf00      	nop
 8006384:	20005917 	.word	0x20005917

08006388 <__sinit_lock_release>:
 8006388:	4801      	ldr	r0, [pc, #4]	; (8006390 <__sinit_lock_release+0x8>)
 800638a:	f000 b8a2 	b.w	80064d2 <__retarget_lock_release_recursive>
 800638e:	bf00      	nop
 8006390:	20005917 	.word	0x20005917

08006394 <__sinit>:
 8006394:	b510      	push	{r4, lr}
 8006396:	4604      	mov	r4, r0
 8006398:	f7ff fff0 	bl	800637c <__sinit_lock_acquire>
 800639c:	69a3      	ldr	r3, [r4, #24]
 800639e:	b11b      	cbz	r3, 80063a8 <__sinit+0x14>
 80063a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063a4:	f7ff bff0 	b.w	8006388 <__sinit_lock_release>
 80063a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80063ac:	6523      	str	r3, [r4, #80]	; 0x50
 80063ae:	4b13      	ldr	r3, [pc, #76]	; (80063fc <__sinit+0x68>)
 80063b0:	4a13      	ldr	r2, [pc, #76]	; (8006400 <__sinit+0x6c>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80063b6:	42a3      	cmp	r3, r4
 80063b8:	bf04      	itt	eq
 80063ba:	2301      	moveq	r3, #1
 80063bc:	61a3      	streq	r3, [r4, #24]
 80063be:	4620      	mov	r0, r4
 80063c0:	f000 f820 	bl	8006404 <__sfp>
 80063c4:	6060      	str	r0, [r4, #4]
 80063c6:	4620      	mov	r0, r4
 80063c8:	f000 f81c 	bl	8006404 <__sfp>
 80063cc:	60a0      	str	r0, [r4, #8]
 80063ce:	4620      	mov	r0, r4
 80063d0:	f000 f818 	bl	8006404 <__sfp>
 80063d4:	2200      	movs	r2, #0
 80063d6:	60e0      	str	r0, [r4, #12]
 80063d8:	2104      	movs	r1, #4
 80063da:	6860      	ldr	r0, [r4, #4]
 80063dc:	f7ff ff82 	bl	80062e4 <std>
 80063e0:	68a0      	ldr	r0, [r4, #8]
 80063e2:	2201      	movs	r2, #1
 80063e4:	2109      	movs	r1, #9
 80063e6:	f7ff ff7d 	bl	80062e4 <std>
 80063ea:	68e0      	ldr	r0, [r4, #12]
 80063ec:	2202      	movs	r2, #2
 80063ee:	2112      	movs	r1, #18
 80063f0:	f7ff ff78 	bl	80062e4 <std>
 80063f4:	2301      	movs	r3, #1
 80063f6:	61a3      	str	r3, [r4, #24]
 80063f8:	e7d2      	b.n	80063a0 <__sinit+0xc>
 80063fa:	bf00      	nop
 80063fc:	08006ff8 	.word	0x08006ff8
 8006400:	0800632d 	.word	0x0800632d

08006404 <__sfp>:
 8006404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006406:	4607      	mov	r7, r0
 8006408:	f7ff ffac 	bl	8006364 <__sfp_lock_acquire>
 800640c:	4b1e      	ldr	r3, [pc, #120]	; (8006488 <__sfp+0x84>)
 800640e:	681e      	ldr	r6, [r3, #0]
 8006410:	69b3      	ldr	r3, [r6, #24]
 8006412:	b913      	cbnz	r3, 800641a <__sfp+0x16>
 8006414:	4630      	mov	r0, r6
 8006416:	f7ff ffbd 	bl	8006394 <__sinit>
 800641a:	3648      	adds	r6, #72	; 0x48
 800641c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006420:	3b01      	subs	r3, #1
 8006422:	d503      	bpl.n	800642c <__sfp+0x28>
 8006424:	6833      	ldr	r3, [r6, #0]
 8006426:	b30b      	cbz	r3, 800646c <__sfp+0x68>
 8006428:	6836      	ldr	r6, [r6, #0]
 800642a:	e7f7      	b.n	800641c <__sfp+0x18>
 800642c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006430:	b9d5      	cbnz	r5, 8006468 <__sfp+0x64>
 8006432:	4b16      	ldr	r3, [pc, #88]	; (800648c <__sfp+0x88>)
 8006434:	60e3      	str	r3, [r4, #12]
 8006436:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800643a:	6665      	str	r5, [r4, #100]	; 0x64
 800643c:	f000 f847 	bl	80064ce <__retarget_lock_init_recursive>
 8006440:	f7ff ff96 	bl	8006370 <__sfp_lock_release>
 8006444:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006448:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800644c:	6025      	str	r5, [r4, #0]
 800644e:	61a5      	str	r5, [r4, #24]
 8006450:	2208      	movs	r2, #8
 8006452:	4629      	mov	r1, r5
 8006454:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006458:	f7ff f992 	bl	8005780 <memset>
 800645c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006460:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006464:	4620      	mov	r0, r4
 8006466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006468:	3468      	adds	r4, #104	; 0x68
 800646a:	e7d9      	b.n	8006420 <__sfp+0x1c>
 800646c:	2104      	movs	r1, #4
 800646e:	4638      	mov	r0, r7
 8006470:	f7ff ff62 	bl	8006338 <__sfmoreglue>
 8006474:	4604      	mov	r4, r0
 8006476:	6030      	str	r0, [r6, #0]
 8006478:	2800      	cmp	r0, #0
 800647a:	d1d5      	bne.n	8006428 <__sfp+0x24>
 800647c:	f7ff ff78 	bl	8006370 <__sfp_lock_release>
 8006480:	230c      	movs	r3, #12
 8006482:	603b      	str	r3, [r7, #0]
 8006484:	e7ee      	b.n	8006464 <__sfp+0x60>
 8006486:	bf00      	nop
 8006488:	08006ff8 	.word	0x08006ff8
 800648c:	ffff0001 	.word	0xffff0001

08006490 <_fwalk_reent>:
 8006490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006494:	4606      	mov	r6, r0
 8006496:	4688      	mov	r8, r1
 8006498:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800649c:	2700      	movs	r7, #0
 800649e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064a2:	f1b9 0901 	subs.w	r9, r9, #1
 80064a6:	d505      	bpl.n	80064b4 <_fwalk_reent+0x24>
 80064a8:	6824      	ldr	r4, [r4, #0]
 80064aa:	2c00      	cmp	r4, #0
 80064ac:	d1f7      	bne.n	800649e <_fwalk_reent+0xe>
 80064ae:	4638      	mov	r0, r7
 80064b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064b4:	89ab      	ldrh	r3, [r5, #12]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d907      	bls.n	80064ca <_fwalk_reent+0x3a>
 80064ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064be:	3301      	adds	r3, #1
 80064c0:	d003      	beq.n	80064ca <_fwalk_reent+0x3a>
 80064c2:	4629      	mov	r1, r5
 80064c4:	4630      	mov	r0, r6
 80064c6:	47c0      	blx	r8
 80064c8:	4307      	orrs	r7, r0
 80064ca:	3568      	adds	r5, #104	; 0x68
 80064cc:	e7e9      	b.n	80064a2 <_fwalk_reent+0x12>

080064ce <__retarget_lock_init_recursive>:
 80064ce:	4770      	bx	lr

080064d0 <__retarget_lock_acquire_recursive>:
 80064d0:	4770      	bx	lr

080064d2 <__retarget_lock_release_recursive>:
 80064d2:	4770      	bx	lr

080064d4 <__swhatbuf_r>:
 80064d4:	b570      	push	{r4, r5, r6, lr}
 80064d6:	460e      	mov	r6, r1
 80064d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064dc:	2900      	cmp	r1, #0
 80064de:	b096      	sub	sp, #88	; 0x58
 80064e0:	4614      	mov	r4, r2
 80064e2:	461d      	mov	r5, r3
 80064e4:	da07      	bge.n	80064f6 <__swhatbuf_r+0x22>
 80064e6:	2300      	movs	r3, #0
 80064e8:	602b      	str	r3, [r5, #0]
 80064ea:	89b3      	ldrh	r3, [r6, #12]
 80064ec:	061a      	lsls	r2, r3, #24
 80064ee:	d410      	bmi.n	8006512 <__swhatbuf_r+0x3e>
 80064f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064f4:	e00e      	b.n	8006514 <__swhatbuf_r+0x40>
 80064f6:	466a      	mov	r2, sp
 80064f8:	f000 f906 	bl	8006708 <_fstat_r>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	dbf2      	blt.n	80064e6 <__swhatbuf_r+0x12>
 8006500:	9a01      	ldr	r2, [sp, #4]
 8006502:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006506:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800650a:	425a      	negs	r2, r3
 800650c:	415a      	adcs	r2, r3
 800650e:	602a      	str	r2, [r5, #0]
 8006510:	e7ee      	b.n	80064f0 <__swhatbuf_r+0x1c>
 8006512:	2340      	movs	r3, #64	; 0x40
 8006514:	2000      	movs	r0, #0
 8006516:	6023      	str	r3, [r4, #0]
 8006518:	b016      	add	sp, #88	; 0x58
 800651a:	bd70      	pop	{r4, r5, r6, pc}

0800651c <__smakebuf_r>:
 800651c:	898b      	ldrh	r3, [r1, #12]
 800651e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006520:	079d      	lsls	r5, r3, #30
 8006522:	4606      	mov	r6, r0
 8006524:	460c      	mov	r4, r1
 8006526:	d507      	bpl.n	8006538 <__smakebuf_r+0x1c>
 8006528:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800652c:	6023      	str	r3, [r4, #0]
 800652e:	6123      	str	r3, [r4, #16]
 8006530:	2301      	movs	r3, #1
 8006532:	6163      	str	r3, [r4, #20]
 8006534:	b002      	add	sp, #8
 8006536:	bd70      	pop	{r4, r5, r6, pc}
 8006538:	ab01      	add	r3, sp, #4
 800653a:	466a      	mov	r2, sp
 800653c:	f7ff ffca 	bl	80064d4 <__swhatbuf_r>
 8006540:	9900      	ldr	r1, [sp, #0]
 8006542:	4605      	mov	r5, r0
 8006544:	4630      	mov	r0, r6
 8006546:	f7ff f9eb 	bl	8005920 <_malloc_r>
 800654a:	b948      	cbnz	r0, 8006560 <__smakebuf_r+0x44>
 800654c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006550:	059a      	lsls	r2, r3, #22
 8006552:	d4ef      	bmi.n	8006534 <__smakebuf_r+0x18>
 8006554:	f023 0303 	bic.w	r3, r3, #3
 8006558:	f043 0302 	orr.w	r3, r3, #2
 800655c:	81a3      	strh	r3, [r4, #12]
 800655e:	e7e3      	b.n	8006528 <__smakebuf_r+0xc>
 8006560:	4b0d      	ldr	r3, [pc, #52]	; (8006598 <__smakebuf_r+0x7c>)
 8006562:	62b3      	str	r3, [r6, #40]	; 0x28
 8006564:	89a3      	ldrh	r3, [r4, #12]
 8006566:	6020      	str	r0, [r4, #0]
 8006568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800656c:	81a3      	strh	r3, [r4, #12]
 800656e:	9b00      	ldr	r3, [sp, #0]
 8006570:	6163      	str	r3, [r4, #20]
 8006572:	9b01      	ldr	r3, [sp, #4]
 8006574:	6120      	str	r0, [r4, #16]
 8006576:	b15b      	cbz	r3, 8006590 <__smakebuf_r+0x74>
 8006578:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800657c:	4630      	mov	r0, r6
 800657e:	f000 f8d5 	bl	800672c <_isatty_r>
 8006582:	b128      	cbz	r0, 8006590 <__smakebuf_r+0x74>
 8006584:	89a3      	ldrh	r3, [r4, #12]
 8006586:	f023 0303 	bic.w	r3, r3, #3
 800658a:	f043 0301 	orr.w	r3, r3, #1
 800658e:	81a3      	strh	r3, [r4, #12]
 8006590:	89a0      	ldrh	r0, [r4, #12]
 8006592:	4305      	orrs	r5, r0
 8006594:	81a5      	strh	r5, [r4, #12]
 8006596:	e7cd      	b.n	8006534 <__smakebuf_r+0x18>
 8006598:	0800632d 	.word	0x0800632d

0800659c <__malloc_lock>:
 800659c:	4801      	ldr	r0, [pc, #4]	; (80065a4 <__malloc_lock+0x8>)
 800659e:	f7ff bf97 	b.w	80064d0 <__retarget_lock_acquire_recursive>
 80065a2:	bf00      	nop
 80065a4:	20005918 	.word	0x20005918

080065a8 <__malloc_unlock>:
 80065a8:	4801      	ldr	r0, [pc, #4]	; (80065b0 <__malloc_unlock+0x8>)
 80065aa:	f7ff bf92 	b.w	80064d2 <__retarget_lock_release_recursive>
 80065ae:	bf00      	nop
 80065b0:	20005918 	.word	0x20005918

080065b4 <_raise_r>:
 80065b4:	291f      	cmp	r1, #31
 80065b6:	b538      	push	{r3, r4, r5, lr}
 80065b8:	4604      	mov	r4, r0
 80065ba:	460d      	mov	r5, r1
 80065bc:	d904      	bls.n	80065c8 <_raise_r+0x14>
 80065be:	2316      	movs	r3, #22
 80065c0:	6003      	str	r3, [r0, #0]
 80065c2:	f04f 30ff 	mov.w	r0, #4294967295
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80065ca:	b112      	cbz	r2, 80065d2 <_raise_r+0x1e>
 80065cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80065d0:	b94b      	cbnz	r3, 80065e6 <_raise_r+0x32>
 80065d2:	4620      	mov	r0, r4
 80065d4:	f000 f830 	bl	8006638 <_getpid_r>
 80065d8:	462a      	mov	r2, r5
 80065da:	4601      	mov	r1, r0
 80065dc:	4620      	mov	r0, r4
 80065de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065e2:	f000 b817 	b.w	8006614 <_kill_r>
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d00a      	beq.n	8006600 <_raise_r+0x4c>
 80065ea:	1c59      	adds	r1, r3, #1
 80065ec:	d103      	bne.n	80065f6 <_raise_r+0x42>
 80065ee:	2316      	movs	r3, #22
 80065f0:	6003      	str	r3, [r0, #0]
 80065f2:	2001      	movs	r0, #1
 80065f4:	e7e7      	b.n	80065c6 <_raise_r+0x12>
 80065f6:	2400      	movs	r4, #0
 80065f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80065fc:	4628      	mov	r0, r5
 80065fe:	4798      	blx	r3
 8006600:	2000      	movs	r0, #0
 8006602:	e7e0      	b.n	80065c6 <_raise_r+0x12>

08006604 <raise>:
 8006604:	4b02      	ldr	r3, [pc, #8]	; (8006610 <raise+0xc>)
 8006606:	4601      	mov	r1, r0
 8006608:	6818      	ldr	r0, [r3, #0]
 800660a:	f7ff bfd3 	b.w	80065b4 <_raise_r>
 800660e:	bf00      	nop
 8006610:	20000014 	.word	0x20000014

08006614 <_kill_r>:
 8006614:	b538      	push	{r3, r4, r5, lr}
 8006616:	4d07      	ldr	r5, [pc, #28]	; (8006634 <_kill_r+0x20>)
 8006618:	2300      	movs	r3, #0
 800661a:	4604      	mov	r4, r0
 800661c:	4608      	mov	r0, r1
 800661e:	4611      	mov	r1, r2
 8006620:	602b      	str	r3, [r5, #0]
 8006622:	f7fb fe25 	bl	8002270 <_kill>
 8006626:	1c43      	adds	r3, r0, #1
 8006628:	d102      	bne.n	8006630 <_kill_r+0x1c>
 800662a:	682b      	ldr	r3, [r5, #0]
 800662c:	b103      	cbz	r3, 8006630 <_kill_r+0x1c>
 800662e:	6023      	str	r3, [r4, #0]
 8006630:	bd38      	pop	{r3, r4, r5, pc}
 8006632:	bf00      	nop
 8006634:	20005920 	.word	0x20005920

08006638 <_getpid_r>:
 8006638:	f7fb be12 	b.w	8002260 <_getpid>

0800663c <__sread>:
 800663c:	b510      	push	{r4, lr}
 800663e:	460c      	mov	r4, r1
 8006640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006644:	f000 f894 	bl	8006770 <_read_r>
 8006648:	2800      	cmp	r0, #0
 800664a:	bfab      	itete	ge
 800664c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800664e:	89a3      	ldrhlt	r3, [r4, #12]
 8006650:	181b      	addge	r3, r3, r0
 8006652:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006656:	bfac      	ite	ge
 8006658:	6563      	strge	r3, [r4, #84]	; 0x54
 800665a:	81a3      	strhlt	r3, [r4, #12]
 800665c:	bd10      	pop	{r4, pc}

0800665e <__swrite>:
 800665e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006662:	461f      	mov	r7, r3
 8006664:	898b      	ldrh	r3, [r1, #12]
 8006666:	05db      	lsls	r3, r3, #23
 8006668:	4605      	mov	r5, r0
 800666a:	460c      	mov	r4, r1
 800666c:	4616      	mov	r6, r2
 800666e:	d505      	bpl.n	800667c <__swrite+0x1e>
 8006670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006674:	2302      	movs	r3, #2
 8006676:	2200      	movs	r2, #0
 8006678:	f000 f868 	bl	800674c <_lseek_r>
 800667c:	89a3      	ldrh	r3, [r4, #12]
 800667e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006682:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006686:	81a3      	strh	r3, [r4, #12]
 8006688:	4632      	mov	r2, r6
 800668a:	463b      	mov	r3, r7
 800668c:	4628      	mov	r0, r5
 800668e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006692:	f000 b817 	b.w	80066c4 <_write_r>

08006696 <__sseek>:
 8006696:	b510      	push	{r4, lr}
 8006698:	460c      	mov	r4, r1
 800669a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800669e:	f000 f855 	bl	800674c <_lseek_r>
 80066a2:	1c43      	adds	r3, r0, #1
 80066a4:	89a3      	ldrh	r3, [r4, #12]
 80066a6:	bf15      	itete	ne
 80066a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80066aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066b2:	81a3      	strheq	r3, [r4, #12]
 80066b4:	bf18      	it	ne
 80066b6:	81a3      	strhne	r3, [r4, #12]
 80066b8:	bd10      	pop	{r4, pc}

080066ba <__sclose>:
 80066ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066be:	f000 b813 	b.w	80066e8 <_close_r>
	...

080066c4 <_write_r>:
 80066c4:	b538      	push	{r3, r4, r5, lr}
 80066c6:	4d07      	ldr	r5, [pc, #28]	; (80066e4 <_write_r+0x20>)
 80066c8:	4604      	mov	r4, r0
 80066ca:	4608      	mov	r0, r1
 80066cc:	4611      	mov	r1, r2
 80066ce:	2200      	movs	r2, #0
 80066d0:	602a      	str	r2, [r5, #0]
 80066d2:	461a      	mov	r2, r3
 80066d4:	f7fb fe03 	bl	80022de <_write>
 80066d8:	1c43      	adds	r3, r0, #1
 80066da:	d102      	bne.n	80066e2 <_write_r+0x1e>
 80066dc:	682b      	ldr	r3, [r5, #0]
 80066de:	b103      	cbz	r3, 80066e2 <_write_r+0x1e>
 80066e0:	6023      	str	r3, [r4, #0]
 80066e2:	bd38      	pop	{r3, r4, r5, pc}
 80066e4:	20005920 	.word	0x20005920

080066e8 <_close_r>:
 80066e8:	b538      	push	{r3, r4, r5, lr}
 80066ea:	4d06      	ldr	r5, [pc, #24]	; (8006704 <_close_r+0x1c>)
 80066ec:	2300      	movs	r3, #0
 80066ee:	4604      	mov	r4, r0
 80066f0:	4608      	mov	r0, r1
 80066f2:	602b      	str	r3, [r5, #0]
 80066f4:	f7fb fe0f 	bl	8002316 <_close>
 80066f8:	1c43      	adds	r3, r0, #1
 80066fa:	d102      	bne.n	8006702 <_close_r+0x1a>
 80066fc:	682b      	ldr	r3, [r5, #0]
 80066fe:	b103      	cbz	r3, 8006702 <_close_r+0x1a>
 8006700:	6023      	str	r3, [r4, #0]
 8006702:	bd38      	pop	{r3, r4, r5, pc}
 8006704:	20005920 	.word	0x20005920

08006708 <_fstat_r>:
 8006708:	b538      	push	{r3, r4, r5, lr}
 800670a:	4d07      	ldr	r5, [pc, #28]	; (8006728 <_fstat_r+0x20>)
 800670c:	2300      	movs	r3, #0
 800670e:	4604      	mov	r4, r0
 8006710:	4608      	mov	r0, r1
 8006712:	4611      	mov	r1, r2
 8006714:	602b      	str	r3, [r5, #0]
 8006716:	f7fb fe0a 	bl	800232e <_fstat>
 800671a:	1c43      	adds	r3, r0, #1
 800671c:	d102      	bne.n	8006724 <_fstat_r+0x1c>
 800671e:	682b      	ldr	r3, [r5, #0]
 8006720:	b103      	cbz	r3, 8006724 <_fstat_r+0x1c>
 8006722:	6023      	str	r3, [r4, #0]
 8006724:	bd38      	pop	{r3, r4, r5, pc}
 8006726:	bf00      	nop
 8006728:	20005920 	.word	0x20005920

0800672c <_isatty_r>:
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	4d06      	ldr	r5, [pc, #24]	; (8006748 <_isatty_r+0x1c>)
 8006730:	2300      	movs	r3, #0
 8006732:	4604      	mov	r4, r0
 8006734:	4608      	mov	r0, r1
 8006736:	602b      	str	r3, [r5, #0]
 8006738:	f7fb fe09 	bl	800234e <_isatty>
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	d102      	bne.n	8006746 <_isatty_r+0x1a>
 8006740:	682b      	ldr	r3, [r5, #0]
 8006742:	b103      	cbz	r3, 8006746 <_isatty_r+0x1a>
 8006744:	6023      	str	r3, [r4, #0]
 8006746:	bd38      	pop	{r3, r4, r5, pc}
 8006748:	20005920 	.word	0x20005920

0800674c <_lseek_r>:
 800674c:	b538      	push	{r3, r4, r5, lr}
 800674e:	4d07      	ldr	r5, [pc, #28]	; (800676c <_lseek_r+0x20>)
 8006750:	4604      	mov	r4, r0
 8006752:	4608      	mov	r0, r1
 8006754:	4611      	mov	r1, r2
 8006756:	2200      	movs	r2, #0
 8006758:	602a      	str	r2, [r5, #0]
 800675a:	461a      	mov	r2, r3
 800675c:	f7fb fe02 	bl	8002364 <_lseek>
 8006760:	1c43      	adds	r3, r0, #1
 8006762:	d102      	bne.n	800676a <_lseek_r+0x1e>
 8006764:	682b      	ldr	r3, [r5, #0]
 8006766:	b103      	cbz	r3, 800676a <_lseek_r+0x1e>
 8006768:	6023      	str	r3, [r4, #0]
 800676a:	bd38      	pop	{r3, r4, r5, pc}
 800676c:	20005920 	.word	0x20005920

08006770 <_read_r>:
 8006770:	b538      	push	{r3, r4, r5, lr}
 8006772:	4d07      	ldr	r5, [pc, #28]	; (8006790 <_read_r+0x20>)
 8006774:	4604      	mov	r4, r0
 8006776:	4608      	mov	r0, r1
 8006778:	4611      	mov	r1, r2
 800677a:	2200      	movs	r2, #0
 800677c:	602a      	str	r2, [r5, #0]
 800677e:	461a      	mov	r2, r3
 8006780:	f7fb fd90 	bl	80022a4 <_read>
 8006784:	1c43      	adds	r3, r0, #1
 8006786:	d102      	bne.n	800678e <_read_r+0x1e>
 8006788:	682b      	ldr	r3, [r5, #0]
 800678a:	b103      	cbz	r3, 800678e <_read_r+0x1e>
 800678c:	6023      	str	r3, [r4, #0]
 800678e:	bd38      	pop	{r3, r4, r5, pc}
 8006790:	20005920 	.word	0x20005920

08006794 <_init>:
 8006794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006796:	bf00      	nop
 8006798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800679a:	bc08      	pop	{r3}
 800679c:	469e      	mov	lr, r3
 800679e:	4770      	bx	lr

080067a0 <_fini>:
 80067a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a2:	bf00      	nop
 80067a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067a6:	bc08      	pop	{r3}
 80067a8:	469e      	mov	lr, r3
 80067aa:	4770      	bx	lr
