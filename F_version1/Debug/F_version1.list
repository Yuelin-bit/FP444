
F_version1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000998  08007db8  08007db8  00017db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008750  08008750  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008750  08008750  00018750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008758  08008758  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008758  08008758  00018758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800875c  0800875c  0001875c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000af60  20000078  080087d8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000afd8  080087d8  0002afd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a244  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003317  00000000  00000000  0003a2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  0003d608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001248  00000000  00000000  0003e9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002914b  00000000  00000000  0003fbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015230  00000000  00000000  00068d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa880  00000000  00000000  0007df63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  001787e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c7c  00000000  00000000  001788ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  0017e528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007da0 	.word	0x08007da0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08007da0 	.word	0x08007da0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b96e 	b.w	8000de0 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468c      	mov	ip, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8083 	bne.w	8000c32 <__udivmoddi4+0x116>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4617      	mov	r7, r2
 8000b30:	d947      	bls.n	8000bc2 <__udivmoddi4+0xa6>
 8000b32:	fab2 f282 	clz	r2, r2
 8000b36:	b142      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b38:	f1c2 0020 	rsb	r0, r2, #32
 8000b3c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b40:	4091      	lsls	r1, r2
 8000b42:	4097      	lsls	r7, r2
 8000b44:	ea40 0c01 	orr.w	ip, r0, r1
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbbc f6f8 	udiv	r6, ip, r8
 8000b54:	fa1f fe87 	uxth.w	lr, r7
 8000b58:	fb08 c116 	mls	r1, r8, r6, ip
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb06 f10e 	mul.w	r1, r6, lr
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b6e:	f080 8119 	bcs.w	8000da4 <__udivmoddi4+0x288>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8116 	bls.w	8000da4 <__udivmoddi4+0x288>
 8000b78:	3e02      	subs	r6, #2
 8000b7a:	443b      	add	r3, r7
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b84:	fb08 3310 	mls	r3, r8, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b90:	45a6      	cmp	lr, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	193c      	adds	r4, r7, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9a:	f080 8105 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b9e:	45a6      	cmp	lr, r4
 8000ba0:	f240 8102 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	443c      	add	r4, r7
 8000ba8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bac:	eba4 040e 	sub.w	r4, r4, lr
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	b11d      	cbz	r5, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bbc:	4631      	mov	r1, r6
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	b902      	cbnz	r2, 8000bc6 <__udivmoddi4+0xaa>
 8000bc4:	deff      	udf	#255	; 0xff
 8000bc6:	fab2 f282 	clz	r2, r2
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d150      	bne.n	8000c70 <__udivmoddi4+0x154>
 8000bce:	1bcb      	subs	r3, r1, r7
 8000bd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd4:	fa1f f887 	uxth.w	r8, r7
 8000bd8:	2601      	movs	r6, #1
 8000bda:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bde:	0c21      	lsrs	r1, r4, #16
 8000be0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000be4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000bf0:	1879      	adds	r1, r7, r1
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0xe2>
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	f200 80e9 	bhi.w	8000dd0 <__udivmoddi4+0x2b4>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1ac9      	subs	r1, r1, r3
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x10c>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x10a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80d9 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e7bf      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x12e>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80b1 	beq.w	8000d9e <__udivmoddi4+0x282>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x1cc>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0x140>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80b8 	bhi.w	8000dcc <__udivmoddi4+0x2b0>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	468c      	mov	ip, r1
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0a8      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000c6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c6e:	e7a5      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c70:	f1c2 0320 	rsb	r3, r2, #32
 8000c74:	fa20 f603 	lsr.w	r6, r0, r3
 8000c78:	4097      	lsls	r7, r2
 8000c7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c82:	40d9      	lsrs	r1, r3
 8000c84:	4330      	orrs	r0, r6
 8000c86:	0c03      	lsrs	r3, r0, #16
 8000c88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c8c:	fa1f f887 	uxth.w	r8, r7
 8000c90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c98:	fb06 f108 	mul.w	r1, r6, r8
 8000c9c:	4299      	cmp	r1, r3
 8000c9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x19c>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000caa:	f080 808d 	bcs.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 808a 	bls.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cb4:	3e02      	subs	r6, #2
 8000cb6:	443b      	add	r3, r7
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b281      	uxth	r1, r0
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc8:	fb00 f308 	mul.w	r3, r0, r8
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x1c4>
 8000cd0:	1879      	adds	r1, r7, r1
 8000cd2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cd6:	d273      	bcs.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d971      	bls.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cdc:	3802      	subs	r0, #2
 8000cde:	4439      	add	r1, r7
 8000ce0:	1acb      	subs	r3, r1, r3
 8000ce2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ce6:	e778      	b.n	8000bda <__udivmoddi4+0xbe>
 8000ce8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cec:	fa03 f406 	lsl.w	r4, r3, r6
 8000cf0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cf4:	431c      	orrs	r4, r3
 8000cf6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d06:	431f      	orrs	r7, r3
 8000d08:	0c3b      	lsrs	r3, r7, #16
 8000d0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0e:	fa1f f884 	uxth.w	r8, r4
 8000d12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d1e:	458a      	cmp	sl, r1
 8000d20:	fa02 f206 	lsl.w	r2, r2, r6
 8000d24:	fa00 f306 	lsl.w	r3, r0, r6
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x220>
 8000d2a:	1861      	adds	r1, r4, r1
 8000d2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d30:	d248      	bcs.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d32:	458a      	cmp	sl, r1
 8000d34:	d946      	bls.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d36:	f1a9 0902 	sub.w	r9, r9, #2
 8000d3a:	4421      	add	r1, r4
 8000d3c:	eba1 010a 	sub.w	r1, r1, sl
 8000d40:	b2bf      	uxth	r7, r7
 8000d42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d4e:	fb00 f808 	mul.w	r8, r0, r8
 8000d52:	45b8      	cmp	r8, r7
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x24a>
 8000d56:	19e7      	adds	r7, r4, r7
 8000d58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5c:	d22e      	bcs.n	8000dbc <__udivmoddi4+0x2a0>
 8000d5e:	45b8      	cmp	r8, r7
 8000d60:	d92c      	bls.n	8000dbc <__udivmoddi4+0x2a0>
 8000d62:	3802      	subs	r0, #2
 8000d64:	4427      	add	r7, r4
 8000d66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d6a:	eba7 0708 	sub.w	r7, r7, r8
 8000d6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d72:	454f      	cmp	r7, r9
 8000d74:	46c6      	mov	lr, r8
 8000d76:	4649      	mov	r1, r9
 8000d78:	d31a      	bcc.n	8000db0 <__udivmoddi4+0x294>
 8000d7a:	d017      	beq.n	8000dac <__udivmoddi4+0x290>
 8000d7c:	b15d      	cbz	r5, 8000d96 <__udivmoddi4+0x27a>
 8000d7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d82:	eb67 0701 	sbc.w	r7, r7, r1
 8000d86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d8a:	40f2      	lsrs	r2, r6
 8000d8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d90:	40f7      	lsrs	r7, r6
 8000d92:	e9c5 2700 	strd	r2, r7, [r5]
 8000d96:	2600      	movs	r6, #0
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	462e      	mov	r6, r5
 8000da0:	4628      	mov	r0, r5
 8000da2:	e70b      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da4:	4606      	mov	r6, r0
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0x60>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6fd      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000dac:	4543      	cmp	r3, r8
 8000dae:	d2e5      	bcs.n	8000d7c <__udivmoddi4+0x260>
 8000db0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000db4:	eb69 0104 	sbc.w	r1, r9, r4
 8000db8:	3801      	subs	r0, #1
 8000dba:	e7df      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	e7d2      	b.n	8000d66 <__udivmoddi4+0x24a>
 8000dc0:	4660      	mov	r0, ip
 8000dc2:	e78d      	b.n	8000ce0 <__udivmoddi4+0x1c4>
 8000dc4:	4681      	mov	r9, r0
 8000dc6:	e7b9      	b.n	8000d3c <__udivmoddi4+0x220>
 8000dc8:	4666      	mov	r6, ip
 8000dca:	e775      	b.n	8000cb8 <__udivmoddi4+0x19c>
 8000dcc:	4630      	mov	r0, r6
 8000dce:	e74a      	b.n	8000c66 <__udivmoddi4+0x14a>
 8000dd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd4:	4439      	add	r1, r7
 8000dd6:	e713      	b.n	8000c00 <__udivmoddi4+0xe4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	443c      	add	r4, r7
 8000ddc:	e724      	b.n	8000c28 <__udivmoddi4+0x10c>
 8000dde:	bf00      	nop

08000de0 <__aeabi_idiv0>:
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	0000      	movs	r0, r0
	...

08000de8 <get_C6>:



//Tone 1 C6 1046.5 Hz
	uint8_t C6[42];
void get_C6(){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
	for(int i = 0; i < 42; i++){
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	e043      	b.n	8000e7c <get_C6+0x94>
		C6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/42))*256;
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff fb8d 	bl	8000514 <__aeabi_i2d>
 8000dfa:	a32a      	add	r3, pc, #168	; (adr r3, 8000ea4 <get_C6+0xbc>)
 8000dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e00:	f7ff fbf2 	bl	80005e8 <__aeabi_dmul>
 8000e04:	4602      	mov	r2, r0
 8000e06:	460b      	mov	r3, r1
 8000e08:	4610      	mov	r0, r2
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	f04f 0200 	mov.w	r2, #0
 8000e10:	4b21      	ldr	r3, [pc, #132]	; (8000e98 <get_C6+0xb0>)
 8000e12:	f7ff fd13 	bl	800083c <__aeabi_ddiv>
 8000e16:	4602      	mov	r2, r0
 8000e18:	460b      	mov	r3, r1
 8000e1a:	4610      	mov	r0, r2
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f7ff fe15 	bl	8000a4c <__aeabi_d2f>
 8000e22:	4603      	mov	r3, r0
 8000e24:	ee00 3a10 	vmov	s0, r3
 8000e28:	f005 ff40 	bl	8006cac <arm_sin_f32>
 8000e2c:	eef0 7a40 	vmov.f32	s15, s0
 8000e30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e38:	ee17 0a90 	vmov	r0, s15
 8000e3c:	f7ff fb7c 	bl	8000538 <__aeabi_f2d>
 8000e40:	a313      	add	r3, pc, #76	; (adr r3, 8000e90 <get_C6+0xa8>)
 8000e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e46:	f7ff fbcf 	bl	80005e8 <__aeabi_dmul>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	4610      	mov	r0, r2
 8000e50:	4619      	mov	r1, r3
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <get_C6+0xb4>)
 8000e58:	f7ff fbc6 	bl	80005e8 <__aeabi_dmul>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4610      	mov	r0, r2
 8000e62:	4619      	mov	r1, r3
 8000e64:	f7ff fdd2 	bl	8000a0c <__aeabi_d2uiz>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	b2d9      	uxtb	r1, r3
 8000e6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ea0 <get_C6+0xb8>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	460a      	mov	r2, r1
 8000e74:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 42; i++){
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b29      	cmp	r3, #41	; 0x29
 8000e80:	ddb8      	ble.n	8000df4 <get_C6+0xc>
	}
}
 8000e82:	bf00      	nop
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	f3af 8000 	nop.w
 8000e90:	51eb851f 	.word	0x51eb851f
 8000e94:	3fd51eb8 	.word	0x3fd51eb8
 8000e98:	40450000 	.word	0x40450000
 8000e9c:	40700000 	.word	0x40700000
 8000ea0:	2000adbc 	.word	0x2000adbc
 8000ea4:	53c8d4f1 	.word	0x53c8d4f1
 8000ea8:	401921fb 	.word	0x401921fb
 8000eac:	00000000 	.word	0x00000000

08000eb0 <get_E6>:

//Tone 2 E6 1318.5 Hz
	uint8_t E6[34];
void get_E6(){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 34; i++){
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	e043      	b.n	8000f44 <get_E6+0x94>
		E6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/34))*256;
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff fb29 	bl	8000514 <__aeabi_i2d>
 8000ec2:	a32a      	add	r3, pc, #168	; (adr r3, 8000f6c <get_E6+0xbc>)
 8000ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec8:	f7ff fb8e 	bl	80005e8 <__aeabi_dmul>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f04f 0200 	mov.w	r2, #0
 8000ed8:	4b21      	ldr	r3, [pc, #132]	; (8000f60 <get_E6+0xb0>)
 8000eda:	f7ff fcaf 	bl	800083c <__aeabi_ddiv>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f7ff fdb1 	bl	8000a4c <__aeabi_d2f>
 8000eea:	4603      	mov	r3, r0
 8000eec:	ee00 3a10 	vmov	s0, r3
 8000ef0:	f005 fedc 	bl	8006cac <arm_sin_f32>
 8000ef4:	eef0 7a40 	vmov.f32	s15, s0
 8000ef8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000efc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f00:	ee17 0a90 	vmov	r0, s15
 8000f04:	f7ff fb18 	bl	8000538 <__aeabi_f2d>
 8000f08:	a313      	add	r3, pc, #76	; (adr r3, 8000f58 <get_E6+0xa8>)
 8000f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0e:	f7ff fb6b 	bl	80005e8 <__aeabi_dmul>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4610      	mov	r0, r2
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <get_E6+0xb4>)
 8000f20:	f7ff fb62 	bl	80005e8 <__aeabi_dmul>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4610      	mov	r0, r2
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f7ff fd6e 	bl	8000a0c <__aeabi_d2uiz>
 8000f30:	4603      	mov	r3, r0
 8000f32:	b2d9      	uxtb	r1, r3
 8000f34:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <get_E6+0xb8>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	460a      	mov	r2, r1
 8000f3c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 34; i++){
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3301      	adds	r3, #1
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b21      	cmp	r3, #33	; 0x21
 8000f48:	ddb8      	ble.n	8000ebc <get_E6+0xc>
	}
}
 8000f4a:	bf00      	nop
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	f3af 8000 	nop.w
 8000f58:	51eb851f 	.word	0x51eb851f
 8000f5c:	3fd51eb8 	.word	0x3fd51eb8
 8000f60:	40410000 	.word	0x40410000
 8000f64:	40700000 	.word	0x40700000
 8000f68:	2000ad08 	.word	0x2000ad08
 8000f6c:	53c8d4f1 	.word	0x53c8d4f1
 8000f70:	401921fb 	.word	0x401921fb
 8000f74:	00000000 	.word	0x00000000

08000f78 <get_G6>:

//Tone 3 G6 1568.0 Hz
	uint8_t G6[28];
void get_G6(){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 28; i++){
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	e043      	b.n	800100c <get_G6+0x94>
		G6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/28))*256;
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff fac5 	bl	8000514 <__aeabi_i2d>
 8000f8a:	a32a      	add	r3, pc, #168	; (adr r3, 8001034 <get_G6+0xbc>)
 8000f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f90:	f7ff fb2a 	bl	80005e8 <__aeabi_dmul>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	4610      	mov	r0, r2
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f04f 0200 	mov.w	r2, #0
 8000fa0:	4b21      	ldr	r3, [pc, #132]	; (8001028 <get_G6+0xb0>)
 8000fa2:	f7ff fc4b 	bl	800083c <__aeabi_ddiv>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	4610      	mov	r0, r2
 8000fac:	4619      	mov	r1, r3
 8000fae:	f7ff fd4d 	bl	8000a4c <__aeabi_d2f>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	ee00 3a10 	vmov	s0, r3
 8000fb8:	f005 fe78 	bl	8006cac <arm_sin_f32>
 8000fbc:	eef0 7a40 	vmov.f32	s15, s0
 8000fc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fc8:	ee17 0a90 	vmov	r0, s15
 8000fcc:	f7ff fab4 	bl	8000538 <__aeabi_f2d>
 8000fd0:	a313      	add	r3, pc, #76	; (adr r3, 8001020 <get_G6+0xa8>)
 8000fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd6:	f7ff fb07 	bl	80005e8 <__aeabi_dmul>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4610      	mov	r0, r2
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <get_G6+0xb4>)
 8000fe8:	f7ff fafe 	bl	80005e8 <__aeabi_dmul>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f7ff fd0a 	bl	8000a0c <__aeabi_d2uiz>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	b2d9      	uxtb	r1, r3
 8000ffc:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <get_G6+0xb8>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	460a      	mov	r2, r1
 8001004:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 28; i++){
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3301      	adds	r3, #1
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b1b      	cmp	r3, #27
 8001010:	ddb8      	ble.n	8000f84 <get_G6+0xc>
	}
}
 8001012:	bf00      	nop
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	f3af 8000 	nop.w
 8001020:	51eb851f 	.word	0x51eb851f
 8001024:	3fd51eb8 	.word	0x3fd51eb8
 8001028:	403c0000 	.word	0x403c0000
 800102c:	40700000 	.word	0x40700000
 8001030:	2000ae6c 	.word	0x2000ae6c
 8001034:	53c8d4f1 	.word	0x53c8d4f1
 8001038:	401921fb 	.word	0x401921fb
 800103c:	00000000 	.word	0x00000000

08001040 <get_A6>:

//Tone 4 A6 1760.0 Hz

	uint8_t A6[25];
void get_A6(){
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
	for(int i = 0; i < 25; i++){
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	e043      	b.n	80010d4 <get_A6+0x94>
		A6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/25))*256;
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff fa61 	bl	8000514 <__aeabi_i2d>
 8001052:	a32a      	add	r3, pc, #168	; (adr r3, 80010fc <get_A6+0xbc>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f7ff fac6 	bl	80005e8 <__aeabi_dmul>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <get_A6+0xb0>)
 800106a:	f7ff fbe7 	bl	800083c <__aeabi_ddiv>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4610      	mov	r0, r2
 8001074:	4619      	mov	r1, r3
 8001076:	f7ff fce9 	bl	8000a4c <__aeabi_d2f>
 800107a:	4603      	mov	r3, r0
 800107c:	ee00 3a10 	vmov	s0, r3
 8001080:	f005 fe14 	bl	8006cac <arm_sin_f32>
 8001084:	eef0 7a40 	vmov.f32	s15, s0
 8001088:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800108c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001090:	ee17 0a90 	vmov	r0, s15
 8001094:	f7ff fa50 	bl	8000538 <__aeabi_f2d>
 8001098:	a313      	add	r3, pc, #76	; (adr r3, 80010e8 <get_A6+0xa8>)
 800109a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109e:	f7ff faa3 	bl	80005e8 <__aeabi_dmul>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4610      	mov	r0, r2
 80010a8:	4619      	mov	r1, r3
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <get_A6+0xb4>)
 80010b0:	f7ff fa9a 	bl	80005e8 <__aeabi_dmul>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f7ff fca6 	bl	8000a0c <__aeabi_d2uiz>
 80010c0:	4603      	mov	r3, r0
 80010c2:	b2d9      	uxtb	r1, r3
 80010c4:	4a0c      	ldr	r2, [pc, #48]	; (80010f8 <get_A6+0xb8>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	460a      	mov	r2, r1
 80010cc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 25; i++){
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3301      	adds	r3, #1
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b18      	cmp	r3, #24
 80010d8:	ddb8      	ble.n	800104c <get_A6+0xc>
	}
}
 80010da:	bf00      	nop
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	f3af 8000 	nop.w
 80010e8:	51eb851f 	.word	0x51eb851f
 80010ec:	3fd51eb8 	.word	0x3fd51eb8
 80010f0:	40390000 	.word	0x40390000
 80010f4:	40700000 	.word	0x40700000
 80010f8:	2000af18 	.word	0x2000af18
 80010fc:	53c8d4f1 	.word	0x53c8d4f1
 8001100:	401921fb 	.word	0x401921fb
 8001104:	00000000 	.word	0x00000000

08001108 <get_B6>:

//Tone 5 B6 1975.53 Hz
	uint8_t B6[22];
void get_B6(){
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 22; i++){
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	e043      	b.n	800119c <get_B6+0x94>
		B6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/22))*256;
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff f9fd 	bl	8000514 <__aeabi_i2d>
 800111a:	a32a      	add	r3, pc, #168	; (adr r3, 80011c4 <get_B6+0xbc>)
 800111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001120:	f7ff fa62 	bl	80005e8 <__aeabi_dmul>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4610      	mov	r0, r2
 800112a:	4619      	mov	r1, r3
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <get_B6+0xb0>)
 8001132:	f7ff fb83 	bl	800083c <__aeabi_ddiv>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	4610      	mov	r0, r2
 800113c:	4619      	mov	r1, r3
 800113e:	f7ff fc85 	bl	8000a4c <__aeabi_d2f>
 8001142:	4603      	mov	r3, r0
 8001144:	ee00 3a10 	vmov	s0, r3
 8001148:	f005 fdb0 	bl	8006cac <arm_sin_f32>
 800114c:	eef0 7a40 	vmov.f32	s15, s0
 8001150:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001154:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001158:	ee17 0a90 	vmov	r0, s15
 800115c:	f7ff f9ec 	bl	8000538 <__aeabi_f2d>
 8001160:	a313      	add	r3, pc, #76	; (adr r3, 80011b0 <get_B6+0xa8>)
 8001162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001166:	f7ff fa3f 	bl	80005e8 <__aeabi_dmul>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <get_B6+0xb4>)
 8001178:	f7ff fa36 	bl	80005e8 <__aeabi_dmul>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4610      	mov	r0, r2
 8001182:	4619      	mov	r1, r3
 8001184:	f7ff fc42 	bl	8000a0c <__aeabi_d2uiz>
 8001188:	4603      	mov	r3, r0
 800118a:	b2d9      	uxtb	r1, r3
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <get_B6+0xb8>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	460a      	mov	r2, r1
 8001194:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 22; i++){
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3301      	adds	r3, #1
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b15      	cmp	r3, #21
 80011a0:	ddb8      	ble.n	8001114 <get_B6+0xc>
	}
}
 80011a2:	bf00      	nop
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	f3af 8000 	nop.w
 80011b0:	51eb851f 	.word	0x51eb851f
 80011b4:	3fd51eb8 	.word	0x3fd51eb8
 80011b8:	40360000 	.word	0x40360000
 80011bc:	40700000 	.word	0x40700000
 80011c0:	2000ad2c 	.word	0x2000ad2c
 80011c4:	53c8d4f1 	.word	0x53c8d4f1
 80011c8:	401921fb 	.word	0x401921fb
 80011cc:	00000000 	.word	0x00000000

080011d0 <get_B5>:

//Tone 6 B5 987.78 Hz
	uint8_t B5[45];
void get_B5(){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 45; i++){
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	e043      	b.n	8001264 <get_B5+0x94>
		B5[i] =  0.33*(1 + arm_sin_f32(2*pi*i/45))*256;
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff f999 	bl	8000514 <__aeabi_i2d>
 80011e2:	a32a      	add	r3, pc, #168	; (adr r3, 800128c <get_B5+0xbc>)
 80011e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e8:	f7ff f9fe 	bl	80005e8 <__aeabi_dmul>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	f04f 0200 	mov.w	r2, #0
 80011f8:	4b21      	ldr	r3, [pc, #132]	; (8001280 <get_B5+0xb0>)
 80011fa:	f7ff fb1f 	bl	800083c <__aeabi_ddiv>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	f7ff fc21 	bl	8000a4c <__aeabi_d2f>
 800120a:	4603      	mov	r3, r0
 800120c:	ee00 3a10 	vmov	s0, r3
 8001210:	f005 fd4c 	bl	8006cac <arm_sin_f32>
 8001214:	eef0 7a40 	vmov.f32	s15, s0
 8001218:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800121c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001220:	ee17 0a90 	vmov	r0, s15
 8001224:	f7ff f988 	bl	8000538 <__aeabi_f2d>
 8001228:	a313      	add	r3, pc, #76	; (adr r3, 8001278 <get_B5+0xa8>)
 800122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122e:	f7ff f9db 	bl	80005e8 <__aeabi_dmul>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <get_B5+0xb4>)
 8001240:	f7ff f9d2 	bl	80005e8 <__aeabi_dmul>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
 800124c:	f7ff fbde 	bl	8000a0c <__aeabi_d2uiz>
 8001250:	4603      	mov	r3, r0
 8001252:	b2d9      	uxtb	r1, r3
 8001254:	4a0c      	ldr	r2, [pc, #48]	; (8001288 <get_B5+0xb8>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	460a      	mov	r2, r1
 800125c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 45; i++){
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3301      	adds	r3, #1
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b2c      	cmp	r3, #44	; 0x2c
 8001268:	ddb8      	ble.n	80011dc <get_B5+0xc>
	}
}
 800126a:	bf00      	nop
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	f3af 8000 	nop.w
 8001278:	51eb851f 	.word	0x51eb851f
 800127c:	3fd51eb8 	.word	0x3fd51eb8
 8001280:	40468000 	.word	0x40468000
 8001284:	40700000 	.word	0x40700000
 8001288:	2000ad8c 	.word	0x2000ad8c
 800128c:	53c8d4f1 	.word	0x53c8d4f1
 8001290:	401921fb 	.word	0x401921fb

08001294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08c      	sub	sp, #48	; 0x30
 8001298:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129a:	f001 faf6 	bl	800288a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129e:	f000 f957 	bl	8001550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a2:	f000 fa9b 	bl	80017dc <MX_GPIO_Init>
  MX_DMA_Init();
 80012a6:	f000 fa7b 	bl	80017a0 <MX_DMA_Init>
  MX_DAC1_Init();
 80012aa:	f000 f9a3 	bl	80015f4 <MX_DAC1_Init>
  MX_QUADSPI_Init();
 80012ae:	f000 f9d3 	bl	8001658 <MX_QUADSPI_Init>
  MX_TIM2_Init();
 80012b2:	f000 f9f7 	bl	80016a4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80012b6:	f000 fa43 	bl	8001740 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_QSPI_Init();
 80012ba:	f000 fbad 	bl	8001a18 <BSP_QSPI_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 80012be:	4892      	ldr	r0, [pc, #584]	; (8001508 <main+0x274>)
 80012c0:	f004 fc5c 	bl	8005b7c <HAL_TIM_Base_Start_IT>




  get_B5();
 80012c4:	f7ff ff84 	bl	80011d0 <get_B5>
  get_C6();
 80012c8:	f7ff fd8e 	bl	8000de8 <get_C6>
  get_E6();
 80012cc:	f7ff fdf0 	bl	8000eb0 <get_E6>
  get_G6();
 80012d0:	f7ff fe52 	bl	8000f78 <get_G6>
  get_A6();
 80012d4:	f7ff feb4 	bl	8001040 <get_A6>
  get_B6();
 80012d8:	f7ff ff16 	bl	8001108 <get_B6>
  uint32_t addr = 0x000000;
 80012dc:	2300      	movs	r3, #0
 80012de:	607b      	str	r3, [r7, #4]
  for(int i = 0; i < 3; i++){
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
 80012e4:	e00f      	b.n	8001306 <main+0x72>
	  if(BSP_QSPI_Erase_Block(addr + i * 0x010000) != QSPI_OK){
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	041b      	lsls	r3, r3, #16
 80012ea:	461a      	mov	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4413      	add	r3, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 fcc1 	bl	8001c78 <BSP_QSPI_Erase_Block>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <main+0x6c>
		  Error_Handler();
 80012fc:	f000 fb84 	bl	8001a08 <Error_Handler>
  for(int i = 0; i < 3; i++){
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	3301      	adds	r3, #1
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	2b02      	cmp	r3, #2
 800130a:	ddec      	ble.n	80012e6 <main+0x52>
	  }
  }

  uint32_t tone_addr = 0x000000;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 490; i++){
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
 8001314:	e00f      	b.n	8001336 <main+0xa2>
	  if(BSP_QSPI_Write((uint8_t *)B5, tone_addr, 45) != QSPI_OK){
 8001316:	222d      	movs	r2, #45	; 0x2d
 8001318:	6a39      	ldr	r1, [r7, #32]
 800131a:	487c      	ldr	r0, [pc, #496]	; (800150c <main+0x278>)
 800131c:	f000 fc2e 	bl	8001b7c <BSP_QSPI_Write>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <main+0x96>
		  Error_Handler();
 8001326:	f000 fb6f 	bl	8001a08 <Error_Handler>
	  }
	  tone_addr += 45;
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	332d      	adds	r3, #45	; 0x2d
 800132e:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 490; i++){
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	3301      	adds	r3, #1
 8001334:	61fb      	str	r3, [r7, #28]
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 800133c:	dbeb      	blt.n	8001316 <main+0x82>
  }
  for(int i = 0; i < 525; i++){
 800133e:	2300      	movs	r3, #0
 8001340:	61bb      	str	r3, [r7, #24]
 8001342:	e00f      	b.n	8001364 <main+0xd0>
	  if(BSP_QSPI_Write((uint8_t *)C6, tone_addr, 42) != QSPI_OK){
 8001344:	222a      	movs	r2, #42	; 0x2a
 8001346:	6a39      	ldr	r1, [r7, #32]
 8001348:	4871      	ldr	r0, [pc, #452]	; (8001510 <main+0x27c>)
 800134a:	f000 fc17 	bl	8001b7c <BSP_QSPI_Write>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <main+0xc4>
		  Error_Handler();
 8001354:	f000 fb58 	bl	8001a08 <Error_Handler>
	  }
	  tone_addr += 42;
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	332a      	adds	r3, #42	; 0x2a
 800135c:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 525; i++){
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	3301      	adds	r3, #1
 8001362:	61bb      	str	r3, [r7, #24]
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 800136a:	ddeb      	ble.n	8001344 <main+0xb0>
  }
  for(int i = 0; i < 648; i++){
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	e00f      	b.n	8001392 <main+0xfe>
	  if(BSP_QSPI_Write((uint8_t *)E6, tone_addr, 34) != QSPI_OK){
 8001372:	2222      	movs	r2, #34	; 0x22
 8001374:	6a39      	ldr	r1, [r7, #32]
 8001376:	4867      	ldr	r0, [pc, #412]	; (8001514 <main+0x280>)
 8001378:	f000 fc00 	bl	8001b7c <BSP_QSPI_Write>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <main+0xf2>
		  Error_Handler();
 8001382:	f000 fb41 	bl	8001a08 <Error_Handler>
	  }
	  tone_addr += 34;
 8001386:	6a3b      	ldr	r3, [r7, #32]
 8001388:	3322      	adds	r3, #34	; 0x22
 800138a:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 648; i++){
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	3301      	adds	r3, #1
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f5b3 7f22 	cmp.w	r3, #648	; 0x288
 8001398:	dbeb      	blt.n	8001372 <main+0xde>
  }
  tone_addr = 0x010266;
 800139a:	4b5f      	ldr	r3, [pc, #380]	; (8001518 <main+0x284>)
 800139c:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 787; i++){
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	e00f      	b.n	80013c4 <main+0x130>
	  if(BSP_QSPI_Write((uint8_t *)G6, tone_addr, 28) != QSPI_OK){
 80013a4:	221c      	movs	r2, #28
 80013a6:	6a39      	ldr	r1, [r7, #32]
 80013a8:	485c      	ldr	r0, [pc, #368]	; (800151c <main+0x288>)
 80013aa:	f000 fbe7 	bl	8001b7c <BSP_QSPI_Write>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <main+0x124>
		  Error_Handler();
 80013b4:	f000 fb28 	bl	8001a08 <Error_Handler>
	  }
	  tone_addr += 28;
 80013b8:	6a3b      	ldr	r3, [r7, #32]
 80013ba:	331c      	adds	r3, #28
 80013bc:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 787; i++){
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	3301      	adds	r3, #1
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	f240 3212 	movw	r2, #786	; 0x312
 80013ca:	4293      	cmp	r3, r2
 80013cc:	ddea      	ble.n	80013a4 <main+0x110>
  }
  tone_addr = 0x015888;
 80013ce:	4b54      	ldr	r3, [pc, #336]	; (8001520 <main+0x28c>)
 80013d0:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 882; i++){
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	e00f      	b.n	80013f8 <main+0x164>
	  if(BSP_QSPI_Write((uint8_t *)A6, tone_addr, 25) != QSPI_OK){
 80013d8:	2219      	movs	r2, #25
 80013da:	6a39      	ldr	r1, [r7, #32]
 80013dc:	4851      	ldr	r0, [pc, #324]	; (8001524 <main+0x290>)
 80013de:	f000 fbcd 	bl	8001b7c <BSP_QSPI_Write>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <main+0x158>
		  Error_Handler();
 80013e8:	f000 fb0e 	bl	8001a08 <Error_Handler>
	  }
	  tone_addr += 25;
 80013ec:	6a3b      	ldr	r3, [r7, #32]
 80013ee:	3319      	adds	r3, #25
 80013f0:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 882; i++){
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	3301      	adds	r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f240 3271 	movw	r2, #881	; 0x371
 80013fe:	4293      	cmp	r3, r2
 8001400:	ddea      	ble.n	80013d8 <main+0x144>
  }
  for(int i = 0; i < 1002; i++){
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	e00f      	b.n	8001428 <main+0x194>
	  if(BSP_QSPI_Write((uint8_t *)B6, tone_addr, 22) != QSPI_OK){
 8001408:	2216      	movs	r2, #22
 800140a:	6a39      	ldr	r1, [r7, #32]
 800140c:	4846      	ldr	r0, [pc, #280]	; (8001528 <main+0x294>)
 800140e:	f000 fbb5 	bl	8001b7c <BSP_QSPI_Write>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <main+0x188>
		  Error_Handler();
 8001418:	f000 faf6 	bl	8001a08 <Error_Handler>
	  }
	  tone_addr += 22;
 800141c:	6a3b      	ldr	r3, [r7, #32]
 800141e:	3316      	adds	r3, #22
 8001420:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 1002; i++){
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	3301      	adds	r3, #1
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800142e:	4293      	cmp	r3, r2
 8001430:	ddea      	ble.n	8001408 <main+0x174>
  }

  //Read the data
  if(BSP_QSPI_Read((uint8_t *)play, 0x00000000, 22050) != QSPI_OK){
 8001432:	f245 6222 	movw	r2, #22050	; 0x5622
 8001436:	2100      	movs	r1, #0
 8001438:	483c      	ldr	r0, [pc, #240]	; (800152c <main+0x298>)
 800143a:	f000 fb59 	bl	8001af0 <BSP_QSPI_Read>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <main+0x1b4>
	  Error_Handler();
 8001444:	f000 fae0 	bl	8001a08 <Error_Handler>
  }

  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 8001448:	2308      	movs	r3, #8
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	f245 6322 	movw	r3, #22050	; 0x5622
 8001450:	4a36      	ldr	r2, [pc, #216]	; (800152c <main+0x298>)
 8001452:	2100      	movs	r1, #0
 8001454:	4836      	ldr	r0, [pc, #216]	; (8001530 <main+0x29c>)
 8001456:	f001 fb79 	bl	8002b4c <HAL_DAC_Start_DMA>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  int GPIO_PinState = 0;//When you press the button, status is 0
 800145a:	2300      	movs	r3, #0
 800145c:	603b      	str	r3, [r7, #0]
	  GPIO_PinState =  HAL_GPIO_ReadPin (Button_GPIO_Port, Button_Pin);
 800145e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001462:	4834      	ldr	r0, [pc, #208]	; (8001534 <main+0x2a0>)
 8001464:	f002 faca 	bl	80039fc <HAL_GPIO_ReadPin>
 8001468:	4603      	mov	r3, r0
 800146a:	603b      	str	r3, [r7, #0]
	  if(GPIO_PinState==1){
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d0f3      	beq.n	800145a <main+0x1c6>
		  //HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
	  }
	  else
	  {
		  if(HAL_GPIO_ReadPin (LED_GPIO_Port, LED_Pin)){
 8001472:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001476:	4830      	ldr	r0, [pc, #192]	; (8001538 <main+0x2a4>)
 8001478:	f002 fac0 	bl	80039fc <HAL_GPIO_ReadPin>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0eb      	beq.n	800145a <main+0x1c6>
			  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	2108      	movs	r1, #8
 8001486:	482d      	ldr	r0, [pc, #180]	; (800153c <main+0x2a8>)
 8001488:	f002 fad0 	bl	8003a2c <HAL_GPIO_WritePin>
			  if(BSP_QSPI_Read((uint8_t *)play, 0x01AEAA, 22050) != QSPI_OK){
 800148c:	f245 6222 	movw	r2, #22050	; 0x5622
 8001490:	492b      	ldr	r1, [pc, #172]	; (8001540 <main+0x2ac>)
 8001492:	4826      	ldr	r0, [pc, #152]	; (800152c <main+0x298>)
 8001494:	f000 fb2c 	bl	8001af0 <BSP_QSPI_Read>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <main+0x20e>
			  			  Error_Handler();
 800149e:	f000 fab3 	bl	8001a08 <Error_Handler>
			  		  }
			  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 80014a2:	2308      	movs	r3, #8
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	f245 6322 	movw	r3, #22050	; 0x5622
 80014aa:	4a20      	ldr	r2, [pc, #128]	; (800152c <main+0x298>)
 80014ac:	2100      	movs	r1, #0
 80014ae:	4820      	ldr	r0, [pc, #128]	; (8001530 <main+0x29c>)
 80014b0:	f001 fb4c 	bl	8002b4c <HAL_DAC_Start_DMA>
			  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014ba:	481f      	ldr	r0, [pc, #124]	; (8001538 <main+0x2a4>)
 80014bc:	f002 fab6 	bl	8003a2c <HAL_GPIO_WritePin>
			  isDelaying = 1;
 80014c0:	4b20      	ldr	r3, [pc, #128]	; (8001544 <main+0x2b0>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	601a      	str	r2, [r3, #0]
			  HAL_Delay(500);
 80014c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014ca:	f001 fa17 	bl	80028fc <HAL_Delay>
			  isDelaying = 0;
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <main+0x2b0>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80014d4:	2201      	movs	r2, #1
 80014d6:	2108      	movs	r1, #8
 80014d8:	4818      	ldr	r0, [pc, #96]	; (800153c <main+0x2a8>)
 80014da:	f002 faa7 	bl	8003a2c <HAL_GPIO_WritePin>
			  if(BSP_QSPI_Read((uint8_t *)play, 0x02AEAA, 22050) != QSPI_OK){
 80014de:	f245 6222 	movw	r2, #22050	; 0x5622
 80014e2:	4919      	ldr	r1, [pc, #100]	; (8001548 <main+0x2b4>)
 80014e4:	4811      	ldr	r0, [pc, #68]	; (800152c <main+0x298>)
 80014e6:	f000 fb03 	bl	8001af0 <BSP_QSPI_Read>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <main+0x260>
			  					  Error_Handler();
 80014f0:	f000 fa8a 	bl	8001a08 <Error_Handler>
			  		}
			  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, empty, 22050, DAC_ALIGN_8B_R);
 80014f4:	2308      	movs	r3, #8
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	f245 6322 	movw	r3, #22050	; 0x5622
 80014fc:	4a13      	ldr	r2, [pc, #76]	; (800154c <main+0x2b8>)
 80014fe:	2100      	movs	r1, #0
 8001500:	480b      	ldr	r0, [pc, #44]	; (8001530 <main+0x29c>)
 8001502:	f001 fb23 	bl	8002b4c <HAL_DAC_Start_DMA>
  {
 8001506:	e7a8      	b.n	800145a <main+0x1c6>
 8001508:	2000ae88 	.word	0x2000ae88
 800150c:	2000ad8c 	.word	0x2000ad8c
 8001510:	2000adbc 	.word	0x2000adbc
 8001514:	2000ad08 	.word	0x2000ad08
 8001518:	00010266 	.word	0x00010266
 800151c:	2000ae6c 	.word	0x2000ae6c
 8001520:	00015888 	.word	0x00015888
 8001524:	2000af18 	.word	0x2000af18
 8001528:	2000ad2c 	.word	0x2000ad2c
 800152c:	20000094 	.word	0x20000094
 8001530:	2000acf4 	.word	0x2000acf4
 8001534:	48000800 	.word	0x48000800
 8001538:	48000400 	.word	0x48000400
 800153c:	48001000 	.word	0x48001000
 8001540:	0001aeaa 	.word	0x0001aeaa
 8001544:	2000acdc 	.word	0x2000acdc
 8001548:	0002aeaa 	.word	0x0002aeaa
 800154c:	200056b8 	.word	0x200056b8

08001550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b096      	sub	sp, #88	; 0x58
 8001554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	2244      	movs	r2, #68	; 0x44
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f005 fc14 	bl	8006d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001564:	463b      	mov	r3, r7
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001572:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001576:	f002 fa99 	bl	8003aac <HAL_PWREx_ControlVoltageScaling>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001580:	f000 fa42 	bl	8001a08 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001584:	2310      	movs	r3, #16
 8001586:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001588:	2301      	movs	r3, #1
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001590:	2360      	movs	r3, #96	; 0x60
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001594:	2302      	movs	r3, #2
 8001596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001598:	2301      	movs	r3, #1
 800159a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800159c:	2301      	movs	r3, #1
 800159e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80015a0:	2328      	movs	r3, #40	; 0x28
 80015a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015a4:	2307      	movs	r3, #7
 80015a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015a8:	2302      	movs	r3, #2
 80015aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015ac:	2302      	movs	r3, #2
 80015ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4618      	mov	r0, r3
 80015b6:	f002 ffaf 	bl	8004518 <HAL_RCC_OscConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80015c0:	f000 fa22 	bl	8001a08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c4:	230f      	movs	r3, #15
 80015c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c8:	2303      	movs	r3, #3
 80015ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015d8:	463b      	mov	r3, r7
 80015da:	2104      	movs	r1, #4
 80015dc:	4618      	mov	r0, r3
 80015de:	f003 fb81 	bl	8004ce4 <HAL_RCC_ClockConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80015e8:	f000 fa0e 	bl	8001a08 <Error_Handler>
  }
}
 80015ec:	bf00      	nop
 80015ee:	3758      	adds	r7, #88	; 0x58
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	2224      	movs	r2, #36	; 0x24
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f005 fbc3 	bl	8006d8c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_DAC1_Init+0x5c>)
 8001608:	4a12      	ldr	r2, [pc, #72]	; (8001654 <MX_DAC1_Init+0x60>)
 800160a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800160c:	4810      	ldr	r0, [pc, #64]	; (8001650 <MX_DAC1_Init+0x5c>)
 800160e:	f001 fa7b 	bl	8002b08 <HAL_DAC_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001618:	f000 f9f6 	bl	8001a08 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001620:	2324      	movs	r3, #36	; 0x24
 8001622:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2200      	movs	r2, #0
 8001634:	4619      	mov	r1, r3
 8001636:	4806      	ldr	r0, [pc, #24]	; (8001650 <MX_DAC1_Init+0x5c>)
 8001638:	f001 fb68 	bl	8002d0c <HAL_DAC_ConfigChannel>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001642:	f000 f9e1 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	3728      	adds	r7, #40	; 0x28
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000acf4 	.word	0x2000acf4
 8001654:	40007400 	.word	0x40007400

08001658 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <MX_QUADSPI_Init+0x44>)
 800165e:	4a10      	ldr	r2, [pc, #64]	; (80016a0 <MX_QUADSPI_Init+0x48>)
 8001660:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <MX_QUADSPI_Init+0x44>)
 8001664:	22ff      	movs	r2, #255	; 0xff
 8001666:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <MX_QUADSPI_Init+0x44>)
 800166a:	2201      	movs	r2, #1
 800166c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <MX_QUADSPI_Init+0x44>)
 8001670:	2200      	movs	r2, #0
 8001672:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <MX_QUADSPI_Init+0x44>)
 8001676:	2201      	movs	r2, #1
 8001678:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <MX_QUADSPI_Init+0x44>)
 800167c:	2200      	movs	r2, #0
 800167e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_QUADSPI_Init+0x44>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_QUADSPI_Init+0x44>)
 8001688:	f002 fa66 	bl	8003b58 <HAL_QSPI_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001692:	f000 f9b9 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	2000aed4 	.word	0x2000aed4
 80016a0:	a0001000 	.word	0xa0001000

080016a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016aa:	f107 0310 	add.w	r3, r7, #16
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016c2:	4b1e      	ldr	r3, [pc, #120]	; (800173c <MX_TIM2_Init+0x98>)
 80016c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016ca:	4b1c      	ldr	r3, [pc, #112]	; (800173c <MX_TIM2_Init+0x98>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <MX_TIM2_Init+0x98>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 80016d6:	4b19      	ldr	r3, [pc, #100]	; (800173c <MX_TIM2_Init+0x98>)
 80016d8:	f240 7216 	movw	r2, #1814	; 0x716
 80016dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <MX_TIM2_Init+0x98>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <MX_TIM2_Init+0x98>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ea:	4814      	ldr	r0, [pc, #80]	; (800173c <MX_TIM2_Init+0x98>)
 80016ec:	f004 f9ee 	bl	8005acc <HAL_TIM_Base_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016f6:	f000 f987 	bl	8001a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001700:	f107 0310 	add.w	r3, r7, #16
 8001704:	4619      	mov	r1, r3
 8001706:	480d      	ldr	r0, [pc, #52]	; (800173c <MX_TIM2_Init+0x98>)
 8001708:	f004 fbc7 	bl	8005e9a <HAL_TIM_ConfigClockSource>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001712:	f000 f979 	bl	8001a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001716:	2320      	movs	r3, #32
 8001718:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	4619      	mov	r1, r3
 8001722:	4806      	ldr	r0, [pc, #24]	; (800173c <MX_TIM2_Init+0x98>)
 8001724:	f004 fddc 	bl	80062e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800172e:	f000 f96b 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000ae88 	.word	0x2000ae88

08001740 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001744:	4b14      	ldr	r3, [pc, #80]	; (8001798 <MX_USART1_UART_Init+0x58>)
 8001746:	4a15      	ldr	r2, [pc, #84]	; (800179c <MX_USART1_UART_Init+0x5c>)
 8001748:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800174a:	4b13      	ldr	r3, [pc, #76]	; (8001798 <MX_USART1_UART_Init+0x58>)
 800174c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001750:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <MX_USART1_UART_Init+0x58>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001758:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <MX_USART1_UART_Init+0x58>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <MX_USART1_UART_Init+0x58>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <MX_USART1_UART_Init+0x58>)
 8001766:	220c      	movs	r2, #12
 8001768:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <MX_USART1_UART_Init+0x58>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <MX_USART1_UART_Init+0x58>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <MX_USART1_UART_Init+0x58>)
 8001778:	2200      	movs	r2, #0
 800177a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <MX_USART1_UART_Init+0x58>)
 800177e:	2200      	movs	r2, #0
 8001780:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_USART1_UART_Init+0x58>)
 8001784:	f004 fe52 	bl	800642c <HAL_UART_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800178e:	f000 f93b 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2000ade8 	.word	0x2000ade8
 800179c:	40013800 	.word	0x40013800

080017a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_DMA_Init+0x38>)
 80017a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017aa:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <MX_DMA_Init+0x38>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6493      	str	r3, [r2, #72]	; 0x48
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_DMA_Init+0x38>)
 80017b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	200d      	movs	r0, #13
 80017c4:	f001 f976 	bl	8002ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80017c8:	200d      	movs	r0, #13
 80017ca:	f001 f98f 	bl	8002aec <HAL_NVIC_EnableIRQ>

}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000

080017dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017f2:	4b34      	ldr	r3, [pc, #208]	; (80018c4 <MX_GPIO_Init+0xe8>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f6:	4a33      	ldr	r2, [pc, #204]	; (80018c4 <MX_GPIO_Init+0xe8>)
 80017f8:	f043 0310 	orr.w	r3, r3, #16
 80017fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017fe:	4b31      	ldr	r3, [pc, #196]	; (80018c4 <MX_GPIO_Init+0xe8>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180a:	4b2e      	ldr	r3, [pc, #184]	; (80018c4 <MX_GPIO_Init+0xe8>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	4a2d      	ldr	r2, [pc, #180]	; (80018c4 <MX_GPIO_Init+0xe8>)
 8001810:	f043 0304 	orr.w	r3, r3, #4
 8001814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001816:	4b2b      	ldr	r3, [pc, #172]	; (80018c4 <MX_GPIO_Init+0xe8>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	4b28      	ldr	r3, [pc, #160]	; (80018c4 <MX_GPIO_Init+0xe8>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	4a27      	ldr	r2, [pc, #156]	; (80018c4 <MX_GPIO_Init+0xe8>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182e:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <MX_GPIO_Init+0xe8>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <MX_GPIO_Init+0xe8>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	4a21      	ldr	r2, [pc, #132]	; (80018c4 <MX_GPIO_Init+0xe8>)
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001846:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <MX_GPIO_Init+0xe8>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001852:	2201      	movs	r2, #1
 8001854:	2108      	movs	r1, #8
 8001856:	481c      	ldr	r0, [pc, #112]	; (80018c8 <MX_GPIO_Init+0xec>)
 8001858:	f002 f8e8 	bl	8003a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800185c:	2200      	movs	r2, #0
 800185e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001862:	481a      	ldr	r0, [pc, #104]	; (80018cc <MX_GPIO_Init+0xf0>)
 8001864:	f002 f8e2 	bl	8003a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001868:	2308      	movs	r3, #8
 800186a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186c:	2301      	movs	r3, #1
 800186e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4619      	mov	r1, r3
 800187e:	4812      	ldr	r0, [pc, #72]	; (80018c8 <MX_GPIO_Init+0xec>)
 8001880:	f001 fe1e 	bl	80034c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <MX_GPIO_Init+0xf4>)
 800188c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	480e      	ldr	r0, [pc, #56]	; (80018d4 <MX_GPIO_Init+0xf8>)
 800189a:	f001 fe11 	bl	80034c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800189e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	4805      	ldr	r0, [pc, #20]	; (80018cc <MX_GPIO_Init+0xf0>)
 80018b8:	f001 fe02 	bl	80034c0 <HAL_GPIO_Init>

}
 80018bc:	bf00      	nop
 80018be:	3728      	adds	r7, #40	; 0x28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40021000 	.word	0x40021000
 80018c8:	48001000 	.word	0x48001000
 80018cc:	48000400 	.word	0x48000400
 80018d0:	10110000 	.word	0x10110000
 80018d4:	48000800 	.word	0x48000800

080018d8 <HAL_DAC_ConvCpltCallbackCh1>:
/* USER CODE BEGIN 4 */
int lower = 1;
int upper = 3;
int DAC_status = 0;
int LED_status2 = 0;
void HAL_DAC_ConvCpltCallbackCh1 (DAC_HandleTypeDef * hdac){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af02      	add	r7, sp, #8
 80018de:	6078      	str	r0, [r7, #4]
	if(isDelaying == 1) return;
 80018e0:	4b35      	ldr	r3, [pc, #212]	; (80019b8 <HAL_DAC_ConvCpltCallbackCh1+0xe0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d063      	beq.n	80019b0 <HAL_DAC_ConvCpltCallbackCh1+0xd8>
	if(DAC_status == 1){
 80018e8:	4b34      	ldr	r3, [pc, #208]	; (80019bc <HAL_DAC_ConvCpltCallbackCh1+0xe4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d116      	bne.n	800191e <HAL_DAC_ConvCpltCallbackCh1+0x46>
		if(BSP_QSPI_Read((uint8_t *)play, 0x02AEAA, 22050) != QSPI_OK){
 80018f0:	f245 6222 	movw	r2, #22050	; 0x5622
 80018f4:	4932      	ldr	r1, [pc, #200]	; (80019c0 <HAL_DAC_ConvCpltCallbackCh1+0xe8>)
 80018f6:	4833      	ldr	r0, [pc, #204]	; (80019c4 <HAL_DAC_ConvCpltCallbackCh1+0xec>)
 80018f8:	f000 f8fa 	bl	8001af0 <BSP_QSPI_Read>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_DAC_ConvCpltCallbackCh1+0x2e>
					  Error_Handler();
 8001902:	f000 f881 	bl	8001a08 <Error_Handler>
		}
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, empty, 22050, DAC_ALIGN_8B_R);
 8001906:	2308      	movs	r3, #8
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	f245 6322 	movw	r3, #22050	; 0x5622
 800190e:	4a2e      	ldr	r2, [pc, #184]	; (80019c8 <HAL_DAC_ConvCpltCallbackCh1+0xf0>)
 8001910:	2100      	movs	r1, #0
 8001912:	482e      	ldr	r0, [pc, #184]	; (80019cc <HAL_DAC_ConvCpltCallbackCh1+0xf4>)
 8001914:	f001 f91a 	bl	8002b4c <HAL_DAC_Start_DMA>
		DAC_status = 0;
 8001918:	4b28      	ldr	r3, [pc, #160]	; (80019bc <HAL_DAC_ConvCpltCallbackCh1+0xe4>)
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
	}
	int randomnumber = (rand() % (upper - lower + 1)) + lower;
 800191e:	f005 fa3d 	bl	8006d9c <rand>
 8001922:	4602      	mov	r2, r0
 8001924:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <HAL_DAC_ConvCpltCallbackCh1+0xf8>)
 8001926:	6819      	ldr	r1, [r3, #0]
 8001928:	4b2a      	ldr	r3, [pc, #168]	; (80019d4 <HAL_DAC_ConvCpltCallbackCh1+0xfc>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	1acb      	subs	r3, r1, r3
 800192e:	3301      	adds	r3, #1
 8001930:	fb92 f1f3 	sdiv	r1, r2, r3
 8001934:	fb03 f301 	mul.w	r3, r3, r1
 8001938:	1ad2      	subs	r2, r2, r3
 800193a:	4b26      	ldr	r3, [pc, #152]	; (80019d4 <HAL_DAC_ConvCpltCallbackCh1+0xfc>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4413      	add	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
	if(randomnumber%3 == 0){
 8001942:	68f9      	ldr	r1, [r7, #12]
 8001944:	4b24      	ldr	r3, [pc, #144]	; (80019d8 <HAL_DAC_ConvCpltCallbackCh1+0x100>)
 8001946:	fb83 3201 	smull	r3, r2, r3, r1
 800194a:	17cb      	asrs	r3, r1, #31
 800194c:	1ad2      	subs	r2, r2, r3
 800194e:	4613      	mov	r3, r2
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	4413      	add	r3, r2
 8001954:	1aca      	subs	r2, r1, r3
 8001956:	2a00      	cmp	r2, #0
 8001958:	d12b      	bne.n	80019b2 <HAL_DAC_ConvCpltCallbackCh1+0xda>
		LED_status2 = (LED_status2 + 1) % 2;
 800195a:	4b20      	ldr	r3, [pc, #128]	; (80019dc <HAL_DAC_ConvCpltCallbackCh1+0x104>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	3301      	adds	r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	bfb8      	it	lt
 8001968:	425b      	neglt	r3, r3
 800196a:	4a1c      	ldr	r2, [pc, #112]	; (80019dc <HAL_DAC_ConvCpltCallbackCh1+0x104>)
 800196c:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800196e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001972:	481b      	ldr	r0, [pc, #108]	; (80019e0 <HAL_DAC_ConvCpltCallbackCh1+0x108>)
 8001974:	f002 f872 	bl	8003a5c <HAL_GPIO_TogglePin>
		if(LED_status2){
 8001978:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_DAC_ConvCpltCallbackCh1+0x104>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d018      	beq.n	80019b2 <HAL_DAC_ConvCpltCallbackCh1+0xda>
			DAC_status = 1;
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <HAL_DAC_ConvCpltCallbackCh1+0xe4>)
 8001982:	2201      	movs	r2, #1
 8001984:	601a      	str	r2, [r3, #0]
			if(BSP_QSPI_Read((uint8_t *)play, 0x000000, 22050) != QSPI_OK){
 8001986:	f245 6222 	movw	r2, #22050	; 0x5622
 800198a:	2100      	movs	r1, #0
 800198c:	480d      	ldr	r0, [pc, #52]	; (80019c4 <HAL_DAC_ConvCpltCallbackCh1+0xec>)
 800198e:	f000 f8af 	bl	8001af0 <BSP_QSPI_Read>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <HAL_DAC_ConvCpltCallbackCh1+0xc4>
								  Error_Handler();
 8001998:	f000 f836 	bl	8001a08 <Error_Handler>
			}
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 800199c:	2308      	movs	r3, #8
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	f245 6322 	movw	r3, #22050	; 0x5622
 80019a4:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <HAL_DAC_ConvCpltCallbackCh1+0xec>)
 80019a6:	2100      	movs	r1, #0
 80019a8:	4808      	ldr	r0, [pc, #32]	; (80019cc <HAL_DAC_ConvCpltCallbackCh1+0xf4>)
 80019aa:	f001 f8cf 	bl	8002b4c <HAL_DAC_Start_DMA>
 80019ae:	e000      	b.n	80019b2 <HAL_DAC_ConvCpltCallbackCh1+0xda>
	if(isDelaying == 1) return;
 80019b0:	bf00      	nop
		  }
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
		counter=0;
	}
	counter++;*/
}
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	2000acdc 	.word	0x2000acdc
 80019bc:	2000ace0 	.word	0x2000ace0
 80019c0:	0002aeaa 	.word	0x0002aeaa
 80019c4:	20000094 	.word	0x20000094
 80019c8:	200056b8 	.word	0x200056b8
 80019cc:	2000acf4 	.word	0x2000acf4
 80019d0:	20000004 	.word	0x20000004
 80019d4:	20000000 	.word	0x20000000
 80019d8:	55555556 	.word	0x55555556
 80019dc:	2000ace4 	.word	0x2000ace4
 80019e0:	48000400 	.word	0x48000400

080019e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d101      	bne.n	80019fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019f6:	f000 ff61 	bl	80028bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40014800 	.word	0x40014800

08001a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	__BKPT();
 8001a0c:	be00      	bkpt	0x0000

  /* USER CODE END Error_Handler_Debug */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8001a1e:	4b32      	ldr	r3, [pc, #200]	; (8001ae8 <BSP_QSPI_Init+0xd0>)
 8001a20:	4a32      	ldr	r2, [pc, #200]	; (8001aec <BSP_QSPI_Init+0xd4>)
 8001a22:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8001a24:	4830      	ldr	r0, [pc, #192]	; (8001ae8 <BSP_QSPI_Init+0xd0>)
 8001a26:	f002 f90d 	bl	8003c44 <HAL_QSPI_DeInit>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e054      	b.n	8001ade <BSP_QSPI_Init+0xc6>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8001a34:	f000 f964 	bl	8001d00 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 2; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 26.67MHz */
 8001a38:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <BSP_QSPI_Init+0xd0>)
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8001a3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ae8 <BSP_QSPI_Init+0xd0>)
 8001a40:	2204      	movs	r2, #4
 8001a42:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001a44:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <BSP_QSPI_Init+0xd0>)
 8001a46:	2210      	movs	r2, #16
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001a4e:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	fa93 f3a3 	rbit	r3, r3
 8001a56:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 8001a62:	2320      	movs	r3, #32
 8001a64:	e003      	b.n	8001a6e <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	fab3 f383 	clz	r3, r3
 8001a6c:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25R6435F_FLASH_SIZE) - 1;
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <BSP_QSPI_Init+0xd0>)
 8001a74:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001a76:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <BSP_QSPI_Init+0xd0>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <BSP_QSPI_Init+0xd0>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8001a82:	4819      	ldr	r0, [pc, #100]	; (8001ae8 <BSP_QSPI_Init+0xd0>)
 8001a84:	f002 f868 	bl	8003b58 <HAL_QSPI_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e025      	b.n	8001ade <BSP_QSPI_Init+0xc6>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8001a92:	4815      	ldr	r0, [pc, #84]	; (8001ae8 <BSP_QSPI_Init+0xd0>)
 8001a94:	f000 f974 	bl	8001d80 <QSPI_ResetMemory>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	e01d      	b.n	8001ade <BSP_QSPI_Init+0xc6>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&QSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	4810      	ldr	r0, [pc, #64]	; (8001ae8 <BSP_QSPI_Init+0xd0>)
 8001aa6:	f000 fa35 	bl	8001f14 <QSPI_QuadMode>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <BSP_QSPI_Init+0x9c>
  {
    return QSPI_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e014      	b.n	8001ade <BSP_QSPI_Init+0xc6>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&QSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <BSP_QSPI_Init+0xd0>)
 8001ab8:	f000 fad4 	bl	8002064 <QSPI_HighPerfMode>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <BSP_QSPI_Init+0xae>
  {
    return QSPI_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e00b      	b.n	8001ade <BSP_QSPI_Init+0xc6>
  }
  
  /* Re-configure the clock for the high performance mode */
  QSPIHandle.Init.ClockPrescaler = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 8001ac6:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <BSP_QSPI_Init+0xd0>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	605a      	str	r2, [r3, #4]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8001acc:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <BSP_QSPI_Init+0xd0>)
 8001ace:	f002 f843 	bl	8003b58 <HAL_QSPI_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <BSP_QSPI_Init+0xc4>
  {
    return QSPI_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e000      	b.n	8001ade <BSP_QSPI_Init+0xc6>
  }

  return QSPI_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2000af34 	.word	0x2000af34
 8001aec:	a0001000 	.word	0xa0001000

08001af0 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b092      	sub	sp, #72	; 0x48
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 8001afc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction        = QUAD_INOUT_READ_CMD;
 8001b02:	23eb      	movs	r3, #235	; 0xeb
 8001b04:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = QSPI_ADDRESS_4_LINES;
 8001b06:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = QSPI_ADDRESS_24_BITS;
 8001b0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b10:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = ReadAddr;
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 8001b16:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b1a:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytes     = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8001b20:	23aa      	movs	r3, #170	; 0xaa
 8001b22:	61bb      	str	r3, [r7, #24]
  sCommand.DataMode           = QSPI_DATA_4_LINES;
 8001b24:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001b28:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles        = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData             = Size;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode            = QSPI_DDR_MODE_DISABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 8001b36:	2300      	movs	r3, #0
 8001b38:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b3e:	f107 0310 	add.w	r3, r7, #16
 8001b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b46:	4619      	mov	r1, r3
 8001b48:	480b      	ldr	r0, [pc, #44]	; (8001b78 <BSP_QSPI_Read+0x88>)
 8001b4a:	f002 f89f 	bl	8003c8c <HAL_QSPI_Command>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <BSP_QSPI_Read+0x68>
  {
    return QSPI_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e00b      	b.n	8001b70 <BSP_QSPI_Read+0x80>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5c:	68f9      	ldr	r1, [r7, #12]
 8001b5e:	4806      	ldr	r0, [pc, #24]	; (8001b78 <BSP_QSPI_Read+0x88>)
 8001b60:	f002 f989 	bl	8003e76 <HAL_QSPI_Receive>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <BSP_QSPI_Read+0x80>
  }

  return QSPI_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3748      	adds	r7, #72	; 0x48
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	2000af34 	.word	0x2000af34

08001b7c <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b096      	sub	sp, #88	; 0x58
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001b90:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8001b92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d901      	bls.n	8001b9e <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = QUAD_PAGE_PROG_CMD;
 8001bb0:	2338      	movs	r3, #56	; 0x38
 8001bb2:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001bb4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bb8:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001bba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bbe:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8001bc4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8001bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bdc:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 8001bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be0:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001be2:	4824      	ldr	r0, [pc, #144]	; (8001c74 <BSP_QSPI_Write+0xf8>)
 8001be4:	f000 f910 	bl	8001e08 <QSPI_WriteEnable>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e03b      	b.n	8001c6a <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	481d      	ldr	r0, [pc, #116]	; (8001c74 <BSP_QSPI_Write+0xf8>)
 8001bfe:	f002 f845 	bl	8003c8c <HAL_QSPI_Command>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e02e      	b.n	8001c6a <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c10:	68f9      	ldr	r1, [r7, #12]
 8001c12:	4818      	ldr	r0, [pc, #96]	; (8001c74 <BSP_QSPI_Write+0xf8>)
 8001c14:	f002 f898 	bl	8003d48 <HAL_QSPI_Transmit>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e023      	b.n	8001c6a <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001c22:	f241 3188 	movw	r1, #5000	; 0x1388
 8001c26:	4813      	ldr	r0, [pc, #76]	; (8001c74 <BSP_QSPI_Write+0xf8>)
 8001c28:	f000 f93a 	bl	8001ea0 <QSPI_AutoPollingMemReady>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e019      	b.n	8001c6a <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8001c36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c3a:	4413      	add	r3, r2
 8001c3c:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c42:	4413      	add	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8001c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c48:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001c4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d203      	bcs.n	8001c5a <BSP_QSPI_Write+0xde>
 8001c52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	e001      	b.n	8001c5e <BSP_QSPI_Write+0xe2>
 8001c5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c5e:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8001c60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d3b8      	bcc.n	8001bda <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3758      	adds	r7, #88	; 0x58
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	2000af34 	.word	0x2000af34

08001c78 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b090      	sub	sp, #64	; 0x40
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001c80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c84:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = BLOCK_ERASE_CMD;
 8001c86:	23d8      	movs	r3, #216	; 0xd8
 8001c88:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 8001c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001c90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c94:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001caa:	2300      	movs	r3, #0
 8001cac:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001cb2:	4812      	ldr	r0, [pc, #72]	; (8001cfc <BSP_QSPI_Erase_Block+0x84>)
 8001cb4:	f000 f8a8 	bl	8001e08 <QSPI_WriteEnable>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e017      	b.n	8001cf2 <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001cc2:	f107 0308 	add.w	r3, r7, #8
 8001cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cca:	4619      	mov	r1, r3
 8001ccc:	480b      	ldr	r0, [pc, #44]	; (8001cfc <BSP_QSPI_Erase_Block+0x84>)
 8001cce:	f001 ffdd 	bl	8003c8c <HAL_QSPI_Command>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e00a      	b.n	8001cf2 <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 8001cdc:	f640 51ac 	movw	r1, #3500	; 0xdac
 8001ce0:	4806      	ldr	r0, [pc, #24]	; (8001cfc <BSP_QSPI_Erase_Block+0x84>)
 8001ce2:	f000 f8dd 	bl	8001ea0 <QSPI_AutoPollingMemReady>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3740      	adds	r7, #64	; 0x40
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	2000af34 	.word	0x2000af34

08001d00 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 8001d06:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <BSP_QSPI_MspInit+0x78>)
 8001d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d0a:	4a1b      	ldr	r2, [pc, #108]	; (8001d78 <BSP_QSPI_MspInit+0x78>)
 8001d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d10:	6513      	str	r3, [r2, #80]	; 0x50
 8001d12:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <BSP_QSPI_MspInit+0x78>)
 8001d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 8001d1e:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <BSP_QSPI_MspInit+0x78>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a15      	ldr	r2, [pc, #84]	; (8001d78 <BSP_QSPI_MspInit+0x78>)
 8001d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 8001d2a:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <BSP_QSPI_MspInit+0x78>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <BSP_QSPI_MspInit+0x78>)
 8001d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <BSP_QSPI_MspInit+0x78>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3a:	4a0f      	ldr	r2, [pc, #60]	; (8001d78 <BSP_QSPI_MspInit+0x78>)
 8001d3c:	f043 0310 	orr.w	r3, r3, #16
 8001d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d42:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <BSP_QSPI_MspInit+0x78>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8001d4e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001d52:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d60:	230a      	movs	r3, #10
 8001d62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d64:	f107 030c 	add.w	r3, r7, #12
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4804      	ldr	r0, [pc, #16]	; (8001d7c <BSP_QSPI_MspInit+0x7c>)
 8001d6c:	f001 fba8 	bl	80034c0 <HAL_GPIO_Init>
}
 8001d70:	bf00      	nop
 8001d72:	3720      	adds	r7, #32
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	48001000 	.word	0x48001000

08001d80 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b090      	sub	sp, #64	; 0x40
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001d88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d8c:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8001d8e:	2366      	movs	r3, #102	; 0x66
 8001d90:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001da6:	2300      	movs	r3, #0
 8001da8:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001daa:	2300      	movs	r3, #0
 8001dac:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001dae:	f107 0308 	add.w	r3, r7, #8
 8001db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db6:	4619      	mov	r1, r3
 8001db8:	4812      	ldr	r0, [pc, #72]	; (8001e04 <QSPI_ResetMemory+0x84>)
 8001dba:	f001 ff67 	bl	8003c8c <HAL_QSPI_Command>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e019      	b.n	8001dfc <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8001dc8:	2399      	movs	r3, #153	; 0x99
 8001dca:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001dcc:	f107 0308 	add.w	r3, r7, #8
 8001dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	480b      	ldr	r0, [pc, #44]	; (8001e04 <QSPI_ResetMemory+0x84>)
 8001dd8:	f001 ff58 	bl	8003c8c <HAL_QSPI_Command>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00a      	b.n	8001dfc <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001de6:	f241 3188 	movw	r1, #5000	; 0x1388
 8001dea:	4806      	ldr	r0, [pc, #24]	; (8001e04 <QSPI_ResetMemory+0x84>)
 8001dec:	f000 f858 	bl	8001ea0 <QSPI_AutoPollingMemReady>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3740      	adds	r7, #64	; 0x40
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	2000af34 	.word	0x2000af34

08001e08 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b096      	sub	sp, #88	; 0x58
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e14:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8001e16:	2306      	movs	r3, #6
 8001e18:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001e32:	2300      	movs	r3, #0
 8001e34:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e36:	f107 0320 	add.w	r3, r7, #32
 8001e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4816      	ldr	r0, [pc, #88]	; (8001e9c <QSPI_WriteEnable+0x94>)
 8001e42:	f001 ff23 	bl	8003c8c <HAL_QSPI_Command>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e020      	b.n	8001e92 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = MX25R6435F_SR_WEL;
 8001e50:	2302      	movs	r3, #2
 8001e52:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WEL;
 8001e54:	2302      	movs	r3, #2
 8001e56:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8001e60:	2310      	movs	r3, #16
 8001e62:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001e64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e68:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8001e6a:	2305      	movs	r3, #5
 8001e6c:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8001e6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e72:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e74:	f107 0208 	add.w	r2, r7, #8
 8001e78:	f107 0120 	add.w	r1, r7, #32
 8001e7c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e80:	4806      	ldr	r0, [pc, #24]	; (8001e9c <QSPI_WriteEnable+0x94>)
 8001e82:	f002 f89a 	bl	8003fba <HAL_QSPI_AutoPolling>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3758      	adds	r7, #88	; 0x58
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	2000af34 	.word	0x2000af34

08001ea0 <QSPI_AutoPollingMemReady>:
  * @param  hqspi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b096      	sub	sp, #88	; 0x58
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001eaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eae:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001eb0:	2305      	movs	r3, #5
 8001eb2:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001ebc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ec0:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WIP;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8001ee2:	2310      	movs	r3, #16
 8001ee4:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001ee6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001eea:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 8001eec:	f107 0208 	add.w	r2, r7, #8
 8001ef0:	f107 0120 	add.w	r1, r7, #32
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	4806      	ldr	r0, [pc, #24]	; (8001f10 <QSPI_AutoPollingMemReady+0x70>)
 8001ef8:	f002 f85f 	bl	8003fba <HAL_QSPI_AutoPolling>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3758      	adds	r7, #88	; 0x58
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	2000af34 	.word	0x2000af34

08001f14 <QSPI_QuadMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b092      	sub	sp, #72	; 0x48
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001f20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001f26:	2305      	movs	r3, #5
 8001f28:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001f32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f36:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001f44:	2300      	movs	r3, #0
 8001f46:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f54:	4619      	mov	r1, r3
 8001f56:	4842      	ldr	r0, [pc, #264]	; (8002060 <QSPI_QuadMode+0x14c>)
 8001f58:	f001 fe98 	bl	8003c8c <HAL_QSPI_Command>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <QSPI_QuadMode+0x52>
  {
    return QSPI_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e077      	b.n	8002056 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f66:	f107 030f 	add.w	r3, r7, #15
 8001f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6e:	4619      	mov	r1, r3
 8001f70:	483b      	ldr	r0, [pc, #236]	; (8002060 <QSPI_QuadMode+0x14c>)
 8001f72:	f001 ff80 	bl	8003e76 <HAL_QSPI_Receive>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <QSPI_QuadMode+0x6c>
  {
    return QSPI_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e06a      	b.n	8002056 <QSPI_QuadMode+0x142>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001f80:	4837      	ldr	r0, [pc, #220]	; (8002060 <QSPI_QuadMode+0x14c>)
 8001f82:	f7ff ff41 	bl	8001e08 <QSPI_WriteEnable>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <QSPI_QuadMode+0x7c>
  {
    return QSPI_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e062      	b.n	8002056 <QSPI_QuadMode+0x142>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d105      	bne.n	8001fa2 <QSPI_QuadMode+0x8e>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
 8001f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	73fb      	strb	r3, [r7, #15]
 8001fa0:	e004      	b.n	8001fac <QSPI_QuadMode+0x98>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8001fac:	2301      	movs	r3, #1
 8001fae:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001fb0:	f107 0310 	add.w	r3, r7, #16
 8001fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4829      	ldr	r0, [pc, #164]	; (8002060 <QSPI_QuadMode+0x14c>)
 8001fbc:	f001 fe66 	bl	8003c8c <HAL_QSPI_Command>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <QSPI_QuadMode+0xb6>
  {
    return QSPI_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e045      	b.n	8002056 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001fca:	f107 030f 	add.w	r3, r7, #15
 8001fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4822      	ldr	r0, [pc, #136]	; (8002060 <QSPI_QuadMode+0x14c>)
 8001fd6:	f001 feb7 	bl	8003d48 <HAL_QSPI_Transmit>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <QSPI_QuadMode+0xd0>
  {
    return QSPI_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e038      	b.n	8002056 <QSPI_QuadMode+0x142>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001fe4:	f241 3188 	movw	r1, #5000	; 0x1388
 8001fe8:	481d      	ldr	r0, [pc, #116]	; (8002060 <QSPI_QuadMode+0x14c>)
 8001fea:	f7ff ff59 	bl	8001ea0 <QSPI_AutoPollingMemReady>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <QSPI_QuadMode+0xe4>
  {
    return QSPI_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e02e      	b.n	8002056 <QSPI_QuadMode+0x142>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8001ff8:	2305      	movs	r3, #5
 8001ffa:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ffc:	f107 0310 	add.w	r3, r7, #16
 8002000:	f241 3288 	movw	r2, #5000	; 0x1388
 8002004:	4619      	mov	r1, r3
 8002006:	4816      	ldr	r0, [pc, #88]	; (8002060 <QSPI_QuadMode+0x14c>)
 8002008:	f001 fe40 	bl	8003c8c <HAL_QSPI_Command>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <QSPI_QuadMode+0x102>
  {
    return QSPI_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e01f      	b.n	8002056 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002016:	f107 030f 	add.w	r3, r7, #15
 800201a:	f241 3288 	movw	r2, #5000	; 0x1388
 800201e:	4619      	mov	r1, r3
 8002020:	480f      	ldr	r0, [pc, #60]	; (8002060 <QSPI_QuadMode+0x14c>)
 8002022:	f001 ff28 	bl	8003e76 <HAL_QSPI_Receive>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <QSPI_QuadMode+0x11c>
  {
    return QSPI_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e012      	b.n	8002056 <QSPI_QuadMode+0x142>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002036:	2b00      	cmp	r3, #0
 8002038:	d102      	bne.n	8002040 <QSPI_QuadMode+0x12c>
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d007      	beq.n	8002050 <QSPI_QuadMode+0x13c>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8002046:	2b00      	cmp	r3, #0
 8002048:	d004      	beq.n	8002054 <QSPI_QuadMode+0x140>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <QSPI_QuadMode+0x140>
  {
    return QSPI_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <QSPI_QuadMode+0x142>
  }

  return QSPI_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3748      	adds	r7, #72	; 0x48
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	2000af34 	.word	0x2000af34

08002064 <QSPI_HighPerfMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b092      	sub	sp, #72	; 0x48
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002070:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8002076:	2305      	movs	r3, #5
 8002078:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800207a:	2300      	movs	r3, #0
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800207e:	2300      	movs	r3, #0
 8002080:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8002082:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002086:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 800208c:	2301      	movs	r3, #1
 800208e:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002090:	2300      	movs	r3, #0
 8002092:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002094:	2300      	movs	r3, #0
 8002096:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002098:	2300      	movs	r3, #0
 800209a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800209c:	f107 0310 	add.w	r3, r7, #16
 80020a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a4:	4619      	mov	r1, r3
 80020a6:	4853      	ldr	r0, [pc, #332]	; (80021f4 <QSPI_HighPerfMode+0x190>)
 80020a8:	f001 fdf0 	bl	8003c8c <HAL_QSPI_Command>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <QSPI_HighPerfMode+0x52>
  {
    return QSPI_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e09a      	b.n	80021ec <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80020b6:	f107 030c 	add.w	r3, r7, #12
 80020ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80020be:	4619      	mov	r1, r3
 80020c0:	484c      	ldr	r0, [pc, #304]	; (80021f4 <QSPI_HighPerfMode+0x190>)
 80020c2:	f001 fed8 	bl	8003e76 <HAL_QSPI_Receive>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <QSPI_HighPerfMode+0x6c>
  {
    return QSPI_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e08d      	b.n	80021ec <QSPI_HighPerfMode+0x188>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 80020d0:	2315      	movs	r3, #21
 80020d2:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 80020d4:	2302      	movs	r3, #2
 80020d6:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80020d8:	f107 0310 	add.w	r3, r7, #16
 80020dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e0:	4619      	mov	r1, r3
 80020e2:	4844      	ldr	r0, [pc, #272]	; (80021f4 <QSPI_HighPerfMode+0x190>)
 80020e4:	f001 fdd2 	bl	8003c8c <HAL_QSPI_Command>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <QSPI_HighPerfMode+0x8e>
  {
    return QSPI_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e07c      	b.n	80021ec <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80020f2:	f107 030c 	add.w	r3, r7, #12
 80020f6:	3301      	adds	r3, #1
 80020f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fc:	4619      	mov	r1, r3
 80020fe:	483d      	ldr	r0, [pc, #244]	; (80021f4 <QSPI_HighPerfMode+0x190>)
 8002100:	f001 feb9 	bl	8003e76 <HAL_QSPI_Receive>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <QSPI_HighPerfMode+0xaa>
  {
    return QSPI_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e06e      	b.n	80021ec <QSPI_HighPerfMode+0x188>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 800210e:	4839      	ldr	r0, [pc, #228]	; (80021f4 <QSPI_HighPerfMode+0x190>)
 8002110:	f7ff fe7a 	bl	8001e08 <QSPI_WriteEnable>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <QSPI_HighPerfMode+0xba>
  {
    return QSPI_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e066      	b.n	80021ec <QSPI_HighPerfMode+0x188>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d105      	bne.n	8002130 <QSPI_HighPerfMode+0xcc>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8002124:	7bbb      	ldrb	r3, [r7, #14]
 8002126:	f043 0302 	orr.w	r3, r3, #2
 800212a:	b2db      	uxtb	r3, r3
 800212c:	73bb      	strb	r3, [r7, #14]
 800212e:	e004      	b.n	800213a <QSPI_HighPerfMode+0xd6>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8002130:	7bbb      	ldrb	r3, [r7, #14]
 8002132:	f023 0302 	bic.w	r3, r3, #2
 8002136:	b2db      	uxtb	r3, r3
 8002138:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 800213a:	2301      	movs	r3, #1
 800213c:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 3;
 800213e:	2303      	movs	r3, #3
 8002140:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002142:	f107 0310 	add.w	r3, r7, #16
 8002146:	f241 3288 	movw	r2, #5000	; 0x1388
 800214a:	4619      	mov	r1, r3
 800214c:	4829      	ldr	r0, [pc, #164]	; (80021f4 <QSPI_HighPerfMode+0x190>)
 800214e:	f001 fd9d 	bl	8003c8c <HAL_QSPI_Command>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <QSPI_HighPerfMode+0xf8>
  {
    return QSPI_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e047      	b.n	80021ec <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800215c:	f107 030c 	add.w	r3, r7, #12
 8002160:	f241 3288 	movw	r2, #5000	; 0x1388
 8002164:	4619      	mov	r1, r3
 8002166:	4823      	ldr	r0, [pc, #140]	; (80021f4 <QSPI_HighPerfMode+0x190>)
 8002168:	f001 fdee 	bl	8003d48 <HAL_QSPI_Transmit>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <QSPI_HighPerfMode+0x112>
  {
    return QSPI_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e03a      	b.n	80021ec <QSPI_HighPerfMode+0x188>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002176:	f241 3188 	movw	r1, #5000	; 0x1388
 800217a:	481e      	ldr	r0, [pc, #120]	; (80021f4 <QSPI_HighPerfMode+0x190>)
 800217c:	f7ff fe90 	bl	8001ea0 <QSPI_AutoPollingMemReady>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <QSPI_HighPerfMode+0x126>
  {
    return QSPI_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e030      	b.n	80021ec <QSPI_HighPerfMode+0x188>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 800218a:	2315      	movs	r3, #21
 800218c:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 800218e:	2302      	movs	r3, #2
 8002190:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002192:	f107 0310 	add.w	r3, r7, #16
 8002196:	f241 3288 	movw	r2, #5000	; 0x1388
 800219a:	4619      	mov	r1, r3
 800219c:	4815      	ldr	r0, [pc, #84]	; (80021f4 <QSPI_HighPerfMode+0x190>)
 800219e:	f001 fd75 	bl	8003c8c <HAL_QSPI_Command>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <QSPI_HighPerfMode+0x148>
  {
    return QSPI_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e01f      	b.n	80021ec <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80021ac:	f107 030c 	add.w	r3, r7, #12
 80021b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b4:	4619      	mov	r1, r3
 80021b6:	480f      	ldr	r0, [pc, #60]	; (80021f4 <QSPI_HighPerfMode+0x190>)
 80021b8:	f001 fe5d 	bl	8003e76 <HAL_QSPI_Receive>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <QSPI_HighPerfMode+0x162>
  {
    return QSPI_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e012      	b.n	80021ec <QSPI_HighPerfMode+0x188>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 80021c6:	7b7b      	ldrb	r3, [r7, #13]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d102      	bne.n	80021d6 <QSPI_HighPerfMode+0x172>
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d007      	beq.n	80021e6 <QSPI_HighPerfMode+0x182>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 80021d6:	7b7b      	ldrb	r3, [r7, #13]
 80021d8:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d004      	beq.n	80021ea <QSPI_HighPerfMode+0x186>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <QSPI_HighPerfMode+0x186>
  {
    return QSPI_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <QSPI_HighPerfMode+0x188>
  }

  return QSPI_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3748      	adds	r7, #72	; 0x48
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	2000af34 	.word	0x2000af34

080021f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fe:	4b0f      	ldr	r3, [pc, #60]	; (800223c <HAL_MspInit+0x44>)
 8002200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002202:	4a0e      	ldr	r2, [pc, #56]	; (800223c <HAL_MspInit+0x44>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6613      	str	r3, [r2, #96]	; 0x60
 800220a:	4b0c      	ldr	r3, [pc, #48]	; (800223c <HAL_MspInit+0x44>)
 800220c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	607b      	str	r3, [r7, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <HAL_MspInit+0x44>)
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	4a08      	ldr	r2, [pc, #32]	; (800223c <HAL_MspInit+0x44>)
 800221c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002220:	6593      	str	r3, [r2, #88]	; 0x58
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_MspInit+0x44>)
 8002224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000

08002240 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	; 0x28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a2a      	ldr	r2, [pc, #168]	; (8002308 <HAL_DAC_MspInit+0xc8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d14d      	bne.n	80022fe <HAL_DAC_MspInit+0xbe>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002262:	4b2a      	ldr	r3, [pc, #168]	; (800230c <HAL_DAC_MspInit+0xcc>)
 8002264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002266:	4a29      	ldr	r2, [pc, #164]	; (800230c <HAL_DAC_MspInit+0xcc>)
 8002268:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800226c:	6593      	str	r3, [r2, #88]	; 0x58
 800226e:	4b27      	ldr	r3, [pc, #156]	; (800230c <HAL_DAC_MspInit+0xcc>)
 8002270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002272:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227a:	4b24      	ldr	r3, [pc, #144]	; (800230c <HAL_DAC_MspInit+0xcc>)
 800227c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227e:	4a23      	ldr	r2, [pc, #140]	; (800230c <HAL_DAC_MspInit+0xcc>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002286:	4b21      	ldr	r3, [pc, #132]	; (800230c <HAL_DAC_MspInit+0xcc>)
 8002288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002292:	2310      	movs	r3, #16
 8002294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002296:	2303      	movs	r3, #3
 8002298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229e:	f107 0314 	add.w	r3, r7, #20
 80022a2:	4619      	mov	r1, r3
 80022a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a8:	f001 f90a 	bl	80034c0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80022ac:	4b18      	ldr	r3, [pc, #96]	; (8002310 <HAL_DAC_MspInit+0xd0>)
 80022ae:	4a19      	ldr	r2, [pc, #100]	; (8002314 <HAL_DAC_MspInit+0xd4>)
 80022b0:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80022b2:	4b17      	ldr	r3, [pc, #92]	; (8002310 <HAL_DAC_MspInit+0xd0>)
 80022b4:	2206      	movs	r2, #6
 80022b6:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022b8:	4b15      	ldr	r3, [pc, #84]	; (8002310 <HAL_DAC_MspInit+0xd0>)
 80022ba:	2210      	movs	r2, #16
 80022bc:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022be:	4b14      	ldr	r3, [pc, #80]	; (8002310 <HAL_DAC_MspInit+0xd0>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80022c4:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_DAC_MspInit+0xd0>)
 80022c6:	2280      	movs	r2, #128	; 0x80
 80022c8:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022ca:	4b11      	ldr	r3, [pc, #68]	; (8002310 <HAL_DAC_MspInit+0xd0>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <HAL_DAC_MspInit+0xd0>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80022d6:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <HAL_DAC_MspInit+0xd0>)
 80022d8:	2220      	movs	r2, #32
 80022da:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <HAL_DAC_MspInit+0xd0>)
 80022de:	2200      	movs	r2, #0
 80022e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80022e2:	480b      	ldr	r0, [pc, #44]	; (8002310 <HAL_DAC_MspInit+0xd0>)
 80022e4:	f000 feb6 	bl	8003054 <HAL_DMA_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 80022ee:	f7ff fb8b 	bl	8001a08 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a06      	ldr	r2, [pc, #24]	; (8002310 <HAL_DAC_MspInit+0xd0>)
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	4a05      	ldr	r2, [pc, #20]	; (8002310 <HAL_DAC_MspInit+0xd0>)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80022fe:	bf00      	nop
 8002300:	3728      	adds	r7, #40	; 0x28
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40007400 	.word	0x40007400
 800230c:	40021000 	.word	0x40021000
 8002310:	2000ad44 	.word	0x2000ad44
 8002314:	40020030 	.word	0x40020030

08002318 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a26      	ldr	r2, [pc, #152]	; (80023d0 <HAL_QSPI_MspInit+0xb8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d145      	bne.n	80023c6 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800233a:	4b26      	ldr	r3, [pc, #152]	; (80023d4 <HAL_QSPI_MspInit+0xbc>)
 800233c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800233e:	4a25      	ldr	r2, [pc, #148]	; (80023d4 <HAL_QSPI_MspInit+0xbc>)
 8002340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002344:	6513      	str	r3, [r2, #80]	; 0x50
 8002346:	4b23      	ldr	r3, [pc, #140]	; (80023d4 <HAL_QSPI_MspInit+0xbc>)
 8002348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800234a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <HAL_QSPI_MspInit+0xbc>)
 8002354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002356:	4a1f      	ldr	r2, [pc, #124]	; (80023d4 <HAL_QSPI_MspInit+0xbc>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800235e:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <HAL_QSPI_MspInit+0xbc>)
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800236a:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <HAL_QSPI_MspInit+0xbc>)
 800236c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236e:	4a19      	ldr	r2, [pc, #100]	; (80023d4 <HAL_QSPI_MspInit+0xbc>)
 8002370:	f043 0310 	orr.w	r3, r3, #16
 8002374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002376:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <HAL_QSPI_MspInit+0xbc>)
 8002378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
    PE10     ------> QUADSPI_CLK
    PE11     ------> QUADSPI_NCS
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002382:	23c0      	movs	r3, #192	; 0xc0
 8002384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002386:	2302      	movs	r3, #2
 8002388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238e:	2303      	movs	r3, #3
 8002390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002392:	230a      	movs	r3, #10
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002396:	f107 0314 	add.w	r3, r7, #20
 800239a:	4619      	mov	r1, r3
 800239c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023a0:	f001 f88e 	bl	80034c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80023a4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80023a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b2:	2303      	movs	r3, #3
 80023b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80023b6:	230a      	movs	r3, #10
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	4619      	mov	r1, r3
 80023c0:	4805      	ldr	r0, [pc, #20]	; (80023d8 <HAL_QSPI_MspInit+0xc0>)
 80023c2:	f001 f87d 	bl	80034c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80023c6:	bf00      	nop
 80023c8:	3728      	adds	r7, #40	; 0x28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	a0001000 	.word	0xa0001000
 80023d4:	40021000 	.word	0x40021000
 80023d8:	48001000 	.word	0x48001000

080023dc <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0b      	ldr	r2, [pc, #44]	; (8002418 <HAL_QSPI_MspDeInit+0x3c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d10f      	bne.n	800240e <HAL_QSPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_QSPI_MspDeInit+0x40>)
 80023f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f2:	4a0a      	ldr	r2, [pc, #40]	; (800241c <HAL_QSPI_MspDeInit+0x40>)
 80023f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023f8:	6513      	str	r3, [r2, #80]	; 0x50
    PE10     ------> QUADSPI_CLK
    PE11     ------> QUADSPI_NCS
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6|GPIO_PIN_7);
 80023fa:	21c0      	movs	r1, #192	; 0xc0
 80023fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002400:	f001 fa08 	bl	8003814 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13);
 8002404:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8002408:	4805      	ldr	r0, [pc, #20]	; (8002420 <HAL_QSPI_MspDeInit+0x44>)
 800240a:	f001 fa03 	bl	8003814 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	a0001000 	.word	0xa0001000
 800241c:	40021000 	.word	0x40021000
 8002420:	48001000 	.word	0x48001000

08002424 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002434:	d10b      	bne.n	800244e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_TIM_Base_MspInit+0x38>)
 8002438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243a:	4a08      	ldr	r2, [pc, #32]	; (800245c <HAL_TIM_Base_MspInit+0x38>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6593      	str	r3, [r2, #88]	; 0x58
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_TIM_Base_MspInit+0x38>)
 8002444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800244e:	bf00      	nop
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40021000 	.word	0x40021000

08002460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b0ac      	sub	sp, #176	; 0xb0
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	2288      	movs	r2, #136	; 0x88
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f004 fc83 	bl	8006d8c <memset>
  if(huart->Instance==USART1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a21      	ldr	r2, [pc, #132]	; (8002510 <HAL_UART_MspInit+0xb0>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d13a      	bne.n	8002506 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002490:	2301      	movs	r3, #1
 8002492:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002494:	2300      	movs	r3, #0
 8002496:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	4618      	mov	r0, r3
 800249e:	f002 fe59 	bl	8005154 <HAL_RCCEx_PeriphCLKConfig>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024a8:	f7ff faae 	bl	8001a08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024ac:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_UART_MspInit+0xb4>)
 80024ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b0:	4a18      	ldr	r2, [pc, #96]	; (8002514 <HAL_UART_MspInit+0xb4>)
 80024b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b6:	6613      	str	r3, [r2, #96]	; 0x60
 80024b8:	4b16      	ldr	r3, [pc, #88]	; (8002514 <HAL_UART_MspInit+0xb4>)
 80024ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <HAL_UART_MspInit+0xb4>)
 80024c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c8:	4a12      	ldr	r2, [pc, #72]	; (8002514 <HAL_UART_MspInit+0xb4>)
 80024ca:	f043 0302 	orr.w	r3, r3, #2
 80024ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024d0:	4b10      	ldr	r3, [pc, #64]	; (8002514 <HAL_UART_MspInit+0xb4>)
 80024d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024dc:	23c0      	movs	r3, #192	; 0xc0
 80024de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e2:	2302      	movs	r3, #2
 80024e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ee:	2303      	movs	r3, #3
 80024f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024f4:	2307      	movs	r3, #7
 80024f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024fe:	4619      	mov	r1, r3
 8002500:	4805      	ldr	r0, [pc, #20]	; (8002518 <HAL_UART_MspInit+0xb8>)
 8002502:	f000 ffdd 	bl	80034c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002506:	bf00      	nop
 8002508:	37b0      	adds	r7, #176	; 0xb0
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40013800 	.word	0x40013800
 8002514:	40021000 	.word	0x40021000
 8002518:	48000400 	.word	0x48000400

0800251c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08c      	sub	sp, #48	; 0x30
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 800252c:	2200      	movs	r2, #0
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	201a      	movs	r0, #26
 8002532:	f000 fabf 	bl	8002ab4 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002536:	201a      	movs	r0, #26
 8002538:	f000 fad8 	bl	8002aec <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800253c:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <HAL_InitTick+0x9c>)
 800253e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002540:	4a1d      	ldr	r2, [pc, #116]	; (80025b8 <HAL_InitTick+0x9c>)
 8002542:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002546:	6613      	str	r3, [r2, #96]	; 0x60
 8002548:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <HAL_InitTick+0x9c>)
 800254a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800254c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002554:	f107 0210 	add.w	r2, r7, #16
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	4611      	mov	r1, r2
 800255e:	4618      	mov	r0, r3
 8002560:	f002 fd66 	bl	8005030 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002564:	f002 fd4e 	bl	8005004 <HAL_RCC_GetPCLK2Freq>
 8002568:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256c:	4a13      	ldr	r2, [pc, #76]	; (80025bc <HAL_InitTick+0xa0>)
 800256e:	fba2 2303 	umull	r2, r3, r2, r3
 8002572:	0c9b      	lsrs	r3, r3, #18
 8002574:	3b01      	subs	r3, #1
 8002576:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <HAL_InitTick+0xa4>)
 800257a:	4a12      	ldr	r2, [pc, #72]	; (80025c4 <HAL_InitTick+0xa8>)
 800257c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <HAL_InitTick+0xa4>)
 8002580:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002584:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8002586:	4a0e      	ldr	r2, [pc, #56]	; (80025c0 <HAL_InitTick+0xa4>)
 8002588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258a:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800258c:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <HAL_InitTick+0xa4>)
 800258e:	2200      	movs	r2, #0
 8002590:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002592:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_InitTick+0xa4>)
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8002598:	4809      	ldr	r0, [pc, #36]	; (80025c0 <HAL_InitTick+0xa4>)
 800259a:	f003 fa97 	bl	8005acc <HAL_TIM_Base_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d104      	bne.n	80025ae <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80025a4:	4806      	ldr	r0, [pc, #24]	; (80025c0 <HAL_InitTick+0xa4>)
 80025a6:	f003 fae9 	bl	8005b7c <HAL_TIM_Base_Start_IT>
 80025aa:	4603      	mov	r3, r0
 80025ac:	e000      	b.n	80025b0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3730      	adds	r7, #48	; 0x30
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40021000 	.word	0x40021000
 80025bc:	431bde83 	.word	0x431bde83
 80025c0:	2000af78 	.word	0x2000af78
 80025c4:	40014800 	.word	0x40014800

080025c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025cc:	e7fe      	b.n	80025cc <NMI_Handler+0x4>

080025ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025d2:	e7fe      	b.n	80025d2 <HardFault_Handler+0x4>

080025d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025d8:	e7fe      	b.n	80025d8 <MemManage_Handler+0x4>

080025da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025de:	e7fe      	b.n	80025de <BusFault_Handler+0x4>

080025e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025e4:	e7fe      	b.n	80025e4 <UsageFault_Handler+0x4>

080025e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025e6:	b480      	push	{r7}
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
	...

08002620 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8002624:	4802      	ldr	r0, [pc, #8]	; (8002630 <DMA1_Channel3_IRQHandler+0x10>)
 8002626:	f000 fe6b 	bl	8003300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	2000ad44 	.word	0x2000ad44

08002634 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002638:	4802      	ldr	r0, [pc, #8]	; (8002644 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800263a:	f003 fb0f 	bl	8005c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	2000af78 	.word	0x2000af78

08002648 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
	return 1;
 800264c:	2301      	movs	r3, #1
}
 800264e:	4618      	mov	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <_kill>:

int _kill(int pid, int sig)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002662:	f004 fb69 	bl	8006d38 <__errno>
 8002666:	4603      	mov	r3, r0
 8002668:	2216      	movs	r2, #22
 800266a:	601a      	str	r2, [r3, #0]
	return -1;
 800266c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <_exit>:

void _exit (int status)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002680:	f04f 31ff 	mov.w	r1, #4294967295
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ffe7 	bl	8002658 <_kill>
	while (1) {}		/* Make sure we hang here */
 800268a:	e7fe      	b.n	800268a <_exit+0x12>

0800268c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	e00a      	b.n	80026b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800269e:	f3af 8000 	nop.w
 80026a2:	4601      	mov	r1, r0
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	1c5a      	adds	r2, r3, #1
 80026a8:	60ba      	str	r2, [r7, #8]
 80026aa:	b2ca      	uxtb	r2, r1
 80026ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	3301      	adds	r3, #1
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	dbf0      	blt.n	800269e <_read+0x12>
	}

return len;
 80026bc:	687b      	ldr	r3, [r7, #4]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b086      	sub	sp, #24
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	e009      	b.n	80026ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	60ba      	str	r2, [r7, #8]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	3301      	adds	r3, #1
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	dbf1      	blt.n	80026d8 <_write+0x12>
	}
	return len;
 80026f4:	687b      	ldr	r3, [r7, #4]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <_close>:

int _close(int file)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
	return -1;
 8002706:	f04f 33ff 	mov.w	r3, #4294967295
}
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002726:	605a      	str	r2, [r3, #4]
	return 0;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <_isatty>:

int _isatty(int file)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
	return 1;
 800273e:	2301      	movs	r3, #1
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
	return 0;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002770:	4a14      	ldr	r2, [pc, #80]	; (80027c4 <_sbrk+0x5c>)
 8002772:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <_sbrk+0x60>)
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800277c:	4b13      	ldr	r3, [pc, #76]	; (80027cc <_sbrk+0x64>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d102      	bne.n	800278a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002784:	4b11      	ldr	r3, [pc, #68]	; (80027cc <_sbrk+0x64>)
 8002786:	4a12      	ldr	r2, [pc, #72]	; (80027d0 <_sbrk+0x68>)
 8002788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800278a:	4b10      	ldr	r3, [pc, #64]	; (80027cc <_sbrk+0x64>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	429a      	cmp	r2, r3
 8002796:	d207      	bcs.n	80027a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002798:	f004 face 	bl	8006d38 <__errno>
 800279c:	4603      	mov	r3, r0
 800279e:	220c      	movs	r2, #12
 80027a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027a2:	f04f 33ff 	mov.w	r3, #4294967295
 80027a6:	e009      	b.n	80027bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027a8:	4b08      	ldr	r3, [pc, #32]	; (80027cc <_sbrk+0x64>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ae:	4b07      	ldr	r3, [pc, #28]	; (80027cc <_sbrk+0x64>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	4a05      	ldr	r2, [pc, #20]	; (80027cc <_sbrk+0x64>)
 80027b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ba:	68fb      	ldr	r3, [r7, #12]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20018000 	.word	0x20018000
 80027c8:	00000400 	.word	0x00000400
 80027cc:	2000ace8 	.word	0x2000ace8
 80027d0:	2000afd8 	.word	0x2000afd8

080027d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80027d8:	4b15      	ldr	r3, [pc, #84]	; (8002830 <SystemInit+0x5c>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027de:	4a14      	ldr	r2, [pc, #80]	; (8002830 <SystemInit+0x5c>)
 80027e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80027e8:	4b12      	ldr	r3, [pc, #72]	; (8002834 <SystemInit+0x60>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a11      	ldr	r2, [pc, #68]	; (8002834 <SystemInit+0x60>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80027f4:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <SystemInit+0x60>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80027fa:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <SystemInit+0x60>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a0d      	ldr	r2, [pc, #52]	; (8002834 <SystemInit+0x60>)
 8002800:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002804:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002808:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800280a:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <SystemInit+0x60>)
 800280c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002810:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002812:	4b08      	ldr	r3, [pc, #32]	; (8002834 <SystemInit+0x60>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a07      	ldr	r2, [pc, #28]	; (8002834 <SystemInit+0x60>)
 8002818:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800281c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800281e:	4b05      	ldr	r3, [pc, #20]	; (8002834 <SystemInit+0x60>)
 8002820:	2200      	movs	r2, #0
 8002822:	619a      	str	r2, [r3, #24]
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	e000ed00 	.word	0xe000ed00
 8002834:	40021000 	.word	0x40021000

08002838 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002838:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002870 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800283c:	f7ff ffca 	bl	80027d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002840:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002842:	e003      	b.n	800284c <LoopCopyDataInit>

08002844 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002846:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002848:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800284a:	3104      	adds	r1, #4

0800284c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800284c:	480a      	ldr	r0, [pc, #40]	; (8002878 <LoopForever+0xa>)
	ldr	r3, =_edata
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002850:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002852:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002854:	d3f6      	bcc.n	8002844 <CopyDataInit>
	ldr	r2, =_sbss
 8002856:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002858:	e002      	b.n	8002860 <LoopFillZerobss>

0800285a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800285a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800285c:	f842 3b04 	str.w	r3, [r2], #4

08002860 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002860:	4b08      	ldr	r3, [pc, #32]	; (8002884 <LoopForever+0x16>)
	cmp	r2, r3
 8002862:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002864:	d3f9      	bcc.n	800285a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002866:	f004 fa6d 	bl	8006d44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800286a:	f7fe fd13 	bl	8001294 <main>

0800286e <LoopForever>:

LoopForever:
    b LoopForever
 800286e:	e7fe      	b.n	800286e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002870:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002874:	08008760 	.word	0x08008760
	ldr	r0, =_sdata
 8002878:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800287c:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8002880:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8002884:	2000afd8 	.word	0x2000afd8

08002888 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002888:	e7fe      	b.n	8002888 <ADC1_2_IRQHandler>

0800288a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002894:	2003      	movs	r0, #3
 8002896:	f000 f902 	bl	8002a9e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800289a:	200f      	movs	r0, #15
 800289c:	f7ff fe3e 	bl	800251c <HAL_InitTick>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	71fb      	strb	r3, [r7, #7]
 80028aa:	e001      	b.n	80028b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028ac:	f7ff fca4 	bl	80021f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028b0:	79fb      	ldrb	r3, [r7, #7]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HAL_IncTick+0x20>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_IncTick+0x24>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4413      	add	r3, r2
 80028cc:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <HAL_IncTick+0x24>)
 80028ce:	6013      	str	r3, [r2, #0]
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000010 	.word	0x20000010
 80028e0:	2000afc4 	.word	0x2000afc4

080028e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return uwTick;
 80028e8:	4b03      	ldr	r3, [pc, #12]	; (80028f8 <HAL_GetTick+0x14>)
 80028ea:	681b      	ldr	r3, [r3, #0]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	2000afc4 	.word	0x2000afc4

080028fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002904:	f7ff ffee 	bl	80028e4 <HAL_GetTick>
 8002908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002914:	d005      	beq.n	8002922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <HAL_Delay+0x44>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4413      	add	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002922:	bf00      	nop
 8002924:	f7ff ffde 	bl	80028e4 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	429a      	cmp	r2, r3
 8002932:	d8f7      	bhi.n	8002924 <HAL_Delay+0x28>
  {
  }
}
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000010 	.word	0x20000010

08002944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <__NVIC_SetPriorityGrouping+0x44>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002960:	4013      	ands	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800296c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002976:	4a04      	ldr	r2, [pc, #16]	; (8002988 <__NVIC_SetPriorityGrouping+0x44>)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	60d3      	str	r3, [r2, #12]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002990:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	0a1b      	lsrs	r3, r3, #8
 8002996:	f003 0307 	and.w	r3, r3, #7
}
 800299a:	4618      	mov	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	db0b      	blt.n	80029d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	f003 021f 	and.w	r2, r3, #31
 80029c0:	4907      	ldr	r1, [pc, #28]	; (80029e0 <__NVIC_EnableIRQ+0x38>)
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	2001      	movs	r0, #1
 80029ca:	fa00 f202 	lsl.w	r2, r0, r2
 80029ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	e000e100 	.word	0xe000e100

080029e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	6039      	str	r1, [r7, #0]
 80029ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	db0a      	blt.n	8002a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	490c      	ldr	r1, [pc, #48]	; (8002a30 <__NVIC_SetPriority+0x4c>)
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	0112      	lsls	r2, r2, #4
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	440b      	add	r3, r1
 8002a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a0c:	e00a      	b.n	8002a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	4908      	ldr	r1, [pc, #32]	; (8002a34 <__NVIC_SetPriority+0x50>)
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	3b04      	subs	r3, #4
 8002a1c:	0112      	lsls	r2, r2, #4
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	440b      	add	r3, r1
 8002a22:	761a      	strb	r2, [r3, #24]
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	e000e100 	.word	0xe000e100
 8002a34:	e000ed00 	.word	0xe000ed00

08002a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b089      	sub	sp, #36	; 0x24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f1c3 0307 	rsb	r3, r3, #7
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	bf28      	it	cs
 8002a56:	2304      	movcs	r3, #4
 8002a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	2b06      	cmp	r3, #6
 8002a60:	d902      	bls.n	8002a68 <NVIC_EncodePriority+0x30>
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3b03      	subs	r3, #3
 8002a66:	e000      	b.n	8002a6a <NVIC_EncodePriority+0x32>
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	43da      	mvns	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	401a      	ands	r2, r3
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a80:	f04f 31ff 	mov.w	r1, #4294967295
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8a:	43d9      	mvns	r1, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a90:	4313      	orrs	r3, r2
         );
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3724      	adds	r7, #36	; 0x24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff ff4c 	bl	8002944 <__NVIC_SetPriorityGrouping>
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ac6:	f7ff ff61 	bl	800298c <__NVIC_GetPriorityGrouping>
 8002aca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	68b9      	ldr	r1, [r7, #8]
 8002ad0:	6978      	ldr	r0, [r7, #20]
 8002ad2:	f7ff ffb1 	bl	8002a38 <NVIC_EncodePriority>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002adc:	4611      	mov	r1, r2
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff ff80 	bl	80029e4 <__NVIC_SetPriority>
}
 8002ae4:	bf00      	nop
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff ff54 	bl	80029a8 <__NVIC_EnableIRQ>
}
 8002b00:	bf00      	nop
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e014      	b.n	8002b44 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	791b      	ldrb	r3, [r3, #4]
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d105      	bne.n	8002b30 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff fb88 	bl	8002240 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
 8002b58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	795b      	ldrb	r3, [r3, #5]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_DAC_Start_DMA+0x1e>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e0ab      	b.n	8002cc2 <HAL_DAC_Start_DMA+0x176>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2202      	movs	r2, #2
 8002b74:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d12f      	bne.n	8002bdc <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	4a52      	ldr	r2, [pc, #328]	; (8002ccc <HAL_DAC_Start_DMA+0x180>)
 8002b82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	4a51      	ldr	r2, [pc, #324]	; (8002cd0 <HAL_DAC_Start_DMA+0x184>)
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	4a50      	ldr	r2, [pc, #320]	; (8002cd4 <HAL_DAC_Start_DMA+0x188>)
 8002b92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ba2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d013      	beq.n	8002bd2 <HAL_DAC_Start_DMA+0x86>
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d845      	bhi.n	8002c3c <HAL_DAC_Start_DMA+0xf0>
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_DAC_Start_DMA+0x72>
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d005      	beq.n	8002bc8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002bbc:	e03e      	b.n	8002c3c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3308      	adds	r3, #8
 8002bc4:	613b      	str	r3, [r7, #16]
        break;
 8002bc6:	e03c      	b.n	8002c42 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	330c      	adds	r3, #12
 8002bce:	613b      	str	r3, [r7, #16]
        break;
 8002bd0:	e037      	b.n	8002c42 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3310      	adds	r3, #16
 8002bd8:	613b      	str	r3, [r7, #16]
        break;
 8002bda:	e032      	b.n	8002c42 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4a3d      	ldr	r2, [pc, #244]	; (8002cd8 <HAL_DAC_Start_DMA+0x18c>)
 8002be2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	4a3c      	ldr	r2, [pc, #240]	; (8002cdc <HAL_DAC_Start_DMA+0x190>)
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4a3b      	ldr	r2, [pc, #236]	; (8002ce0 <HAL_DAC_Start_DMA+0x194>)
 8002bf2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c02:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d013      	beq.n	8002c32 <HAL_DAC_Start_DMA+0xe6>
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d817      	bhi.n	8002c40 <HAL_DAC_Start_DMA+0xf4>
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_DAC_Start_DMA+0xd2>
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d005      	beq.n	8002c28 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002c1c:	e010      	b.n	8002c40 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	3314      	adds	r3, #20
 8002c24:	613b      	str	r3, [r7, #16]
        break;
 8002c26:	e00c      	b.n	8002c42 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	3318      	adds	r3, #24
 8002c2e:	613b      	str	r3, [r7, #16]
        break;
 8002c30:	e007      	b.n	8002c42 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	331c      	adds	r3, #28
 8002c38:	613b      	str	r3, [r7, #16]
        break;
 8002c3a:	e002      	b.n	8002c42 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002c3c:	bf00      	nop
 8002c3e:	e000      	b.n	8002c42 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002c40:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d111      	bne.n	8002c6c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c56:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6898      	ldr	r0, [r3, #8]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	f000 faaf 	bl	80031c4 <HAL_DMA_Start_IT>
 8002c66:	4603      	mov	r3, r0
 8002c68:	75fb      	strb	r3, [r7, #23]
 8002c6a:	e010      	b.n	8002c8e <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002c7a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	68d8      	ldr	r0, [r3, #12]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	f000 fa9d 	bl	80031c4 <HAL_DMA_Start_IT>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002c94:	7dfb      	ldrb	r3, [r7, #23]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10c      	bne.n	8002cb4 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6819      	ldr	r1, [r3, #0]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f003 0310 	and.w	r3, r3, #16
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	409a      	lsls	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	e005      	b.n	8002cc0 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	f043 0204 	orr.w	r2, r3, #4
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	08002f41 	.word	0x08002f41
 8002cd0:	08002f63 	.word	0x08002f63
 8002cd4:	08002f7f 	.word	0x08002f7f
 8002cd8:	08002fe9 	.word	0x08002fe9
 8002cdc:	0800300b 	.word	0x0800300b
 8002ce0:	08003027 	.word	0x08003027

08002ce4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	795b      	ldrb	r3, [r3, #5]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <HAL_DAC_ConfigChannel+0x1c>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e107      	b.n	8002f38 <HAL_DAC_ConfigChannel+0x22c>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2202      	movs	r2, #2
 8002d32:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d174      	bne.n	8002e26 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002d3c:	f7ff fdd2 	bl	80028e4 <HAL_GetTick>
 8002d40:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d134      	bne.n	8002db2 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d48:	e011      	b.n	8002d6e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002d4a:	f7ff fdcb 	bl	80028e4 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d90a      	bls.n	8002d6e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	f043 0208 	orr.w	r2, r3, #8
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2203      	movs	r2, #3
 8002d68:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e0e4      	b.n	8002f38 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1e6      	bne.n	8002d4a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	f7ff fdbd 	bl	80028fc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	6992      	ldr	r2, [r2, #24]
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40
 8002d8c:	e01e      	b.n	8002dcc <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002d8e:	f7ff fda9 	bl	80028e4 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d90a      	bls.n	8002db2 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	f043 0208 	orr.w	r2, r3, #8
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2203      	movs	r2, #3
 8002dac:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e0c2      	b.n	8002f38 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	dbe8      	blt.n	8002d8e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	f7ff fd9d 	bl	80028fc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	6992      	ldr	r2, [r2, #24]
 8002dca:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f003 0310 	and.w	r3, r3, #16
 8002dd8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	ea02 0103 	and.w	r1, r2, r3
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	69da      	ldr	r2, [r3, #28]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	409a      	lsls	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	21ff      	movs	r1, #255	; 0xff
 8002e08:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	ea02 0103 	and.w	r1, r2, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	6a1a      	ldr	r2, [r3, #32]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d11d      	bne.n	8002e6a <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e34:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	221f      	movs	r2, #31
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e70:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	2207      	movs	r2, #7
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4013      	ands	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f003 0310 	and.w	r3, r3, #16
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6819      	ldr	r1, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43da      	mvns	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	400a      	ands	r2, r1
 8002ece:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f003 0310 	and.w	r3, r3, #16
 8002ede:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4013      	ands	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6819      	ldr	r1, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	22c0      	movs	r2, #192	; 0xc0
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43da      	mvns	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	400a      	ands	r2, r1
 8002f28:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3720      	adds	r7, #32
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f7fe fcc2 	bl	80018d8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2201      	movs	r2, #1
 8002f58:	711a      	strb	r2, [r3, #4]
}
 8002f5a:	bf00      	nop
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b084      	sub	sp, #16
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f7ff feb7 	bl	8002ce4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002f76:	bf00      	nop
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b084      	sub	sp, #16
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	f043 0204 	orr.w	r2, r3, #4
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f7ff fead 	bl	8002cf8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	711a      	strb	r2, [r3, #4]
}
 8002fa4:	bf00      	nop
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f7ff ffd8 	bl	8002fac <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2201      	movs	r2, #1
 8003000:	711a      	strb	r2, [r3, #4]
}
 8003002:	bf00      	nop
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f7ff ffd1 	bl	8002fc0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b084      	sub	sp, #16
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	f043 0204 	orr.w	r2, r3, #4
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f7ff ffc7 	bl	8002fd4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2201      	movs	r2, #1
 800304a:	711a      	strb	r2, [r3, #4]
}
 800304c:	bf00      	nop
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e098      	b.n	8003198 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	4b4d      	ldr	r3, [pc, #308]	; (80031a4 <HAL_DMA_Init+0x150>)
 800306e:	429a      	cmp	r2, r3
 8003070:	d80f      	bhi.n	8003092 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	4b4b      	ldr	r3, [pc, #300]	; (80031a8 <HAL_DMA_Init+0x154>)
 800307a:	4413      	add	r3, r2
 800307c:	4a4b      	ldr	r2, [pc, #300]	; (80031ac <HAL_DMA_Init+0x158>)
 800307e:	fba2 2303 	umull	r2, r3, r2, r3
 8003082:	091b      	lsrs	r3, r3, #4
 8003084:	009a      	lsls	r2, r3, #2
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a48      	ldr	r2, [pc, #288]	; (80031b0 <HAL_DMA_Init+0x15c>)
 800308e:	641a      	str	r2, [r3, #64]	; 0x40
 8003090:	e00e      	b.n	80030b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	461a      	mov	r2, r3
 8003098:	4b46      	ldr	r3, [pc, #280]	; (80031b4 <HAL_DMA_Init+0x160>)
 800309a:	4413      	add	r3, r2
 800309c:	4a43      	ldr	r2, [pc, #268]	; (80031ac <HAL_DMA_Init+0x158>)
 800309e:	fba2 2303 	umull	r2, r3, r2, r3
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	009a      	lsls	r2, r3, #2
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a42      	ldr	r2, [pc, #264]	; (80031b8 <HAL_DMA_Init+0x164>)
 80030ae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80030c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80030d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800310a:	d039      	beq.n	8003180 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	4a27      	ldr	r2, [pc, #156]	; (80031b0 <HAL_DMA_Init+0x15c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d11a      	bne.n	800314c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003116:	4b29      	ldr	r3, [pc, #164]	; (80031bc <HAL_DMA_Init+0x168>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	f003 031c 	and.w	r3, r3, #28
 8003122:	210f      	movs	r1, #15
 8003124:	fa01 f303 	lsl.w	r3, r1, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	4924      	ldr	r1, [pc, #144]	; (80031bc <HAL_DMA_Init+0x168>)
 800312c:	4013      	ands	r3, r2
 800312e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003130:	4b22      	ldr	r3, [pc, #136]	; (80031bc <HAL_DMA_Init+0x168>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6859      	ldr	r1, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313c:	f003 031c 	and.w	r3, r3, #28
 8003140:	fa01 f303 	lsl.w	r3, r1, r3
 8003144:	491d      	ldr	r1, [pc, #116]	; (80031bc <HAL_DMA_Init+0x168>)
 8003146:	4313      	orrs	r3, r2
 8003148:	600b      	str	r3, [r1, #0]
 800314a:	e019      	b.n	8003180 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800314c:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <HAL_DMA_Init+0x16c>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003154:	f003 031c 	and.w	r3, r3, #28
 8003158:	210f      	movs	r1, #15
 800315a:	fa01 f303 	lsl.w	r3, r1, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	4917      	ldr	r1, [pc, #92]	; (80031c0 <HAL_DMA_Init+0x16c>)
 8003162:	4013      	ands	r3, r2
 8003164:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003166:	4b16      	ldr	r3, [pc, #88]	; (80031c0 <HAL_DMA_Init+0x16c>)
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6859      	ldr	r1, [r3, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	f003 031c 	and.w	r3, r3, #28
 8003176:	fa01 f303 	lsl.w	r3, r1, r3
 800317a:	4911      	ldr	r1, [pc, #68]	; (80031c0 <HAL_DMA_Init+0x16c>)
 800317c:	4313      	orrs	r3, r2
 800317e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	40020407 	.word	0x40020407
 80031a8:	bffdfff8 	.word	0xbffdfff8
 80031ac:	cccccccd 	.word	0xcccccccd
 80031b0:	40020000 	.word	0x40020000
 80031b4:	bffdfbf8 	.word	0xbffdfbf8
 80031b8:	40020400 	.word	0x40020400
 80031bc:	400200a8 	.word	0x400200a8
 80031c0:	400204a8 	.word	0x400204a8

080031c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031d2:	2300      	movs	r3, #0
 80031d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_DMA_Start_IT+0x20>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e04b      	b.n	800327c <HAL_DMA_Start_IT+0xb8>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d13a      	bne.n	800326e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0201 	bic.w	r2, r2, #1
 8003214:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	68b9      	ldr	r1, [r7, #8]
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 f91e 	bl	800345e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	2b00      	cmp	r3, #0
 8003228:	d008      	beq.n	800323c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f042 020e 	orr.w	r2, r2, #14
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	e00f      	b.n	800325c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0204 	bic.w	r2, r2, #4
 800324a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 020a 	orr.w	r2, r2, #10
 800325a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	e005      	b.n	800327a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003276:	2302      	movs	r3, #2
 8003278:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800327a:	7dfb      	ldrb	r3, [r7, #23]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d008      	beq.n	80032ae <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2204      	movs	r2, #4
 80032a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e022      	b.n	80032f4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 020e 	bic.w	r2, r2, #14
 80032bc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0201 	bic.w	r2, r2, #1
 80032cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d2:	f003 021c 	and.w	r2, r3, #28
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	2101      	movs	r1, #1
 80032dc:	fa01 f202 	lsl.w	r2, r1, r2
 80032e0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331c:	f003 031c 	and.w	r3, r3, #28
 8003320:	2204      	movs	r2, #4
 8003322:	409a      	lsls	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d026      	beq.n	800337a <HAL_DMA_IRQHandler+0x7a>
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	2b00      	cmp	r3, #0
 8003334:	d021      	beq.n	800337a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0320 	and.w	r3, r3, #32
 8003340:	2b00      	cmp	r3, #0
 8003342:	d107      	bne.n	8003354 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0204 	bic.w	r2, r2, #4
 8003352:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003358:	f003 021c 	and.w	r2, r3, #28
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	2104      	movs	r1, #4
 8003362:	fa01 f202 	lsl.w	r2, r1, r2
 8003366:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336c:	2b00      	cmp	r3, #0
 800336e:	d071      	beq.n	8003454 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003378:	e06c      	b.n	8003454 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	f003 031c 	and.w	r3, r3, #28
 8003382:	2202      	movs	r2, #2
 8003384:	409a      	lsls	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4013      	ands	r3, r2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d02e      	beq.n	80033ec <HAL_DMA_IRQHandler+0xec>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d029      	beq.n	80033ec <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0320 	and.w	r3, r3, #32
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10b      	bne.n	80033be <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 020a 	bic.w	r2, r2, #10
 80033b4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	f003 021c 	and.w	r2, r3, #28
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	2102      	movs	r1, #2
 80033cc:	fa01 f202 	lsl.w	r2, r1, r2
 80033d0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d038      	beq.n	8003454 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80033ea:	e033      	b.n	8003454 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f0:	f003 031c 	and.w	r3, r3, #28
 80033f4:	2208      	movs	r2, #8
 80033f6:	409a      	lsls	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d02a      	beq.n	8003456 <HAL_DMA_IRQHandler+0x156>
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d025      	beq.n	8003456 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 020e 	bic.w	r2, r2, #14
 8003418:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	f003 021c 	and.w	r2, r3, #28
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	2101      	movs	r1, #1
 8003428:	fa01 f202 	lsl.w	r2, r1, r2
 800342c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003448:	2b00      	cmp	r3, #0
 800344a:	d004      	beq.n	8003456 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003454:	bf00      	nop
 8003456:	bf00      	nop
}
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800345e:	b480      	push	{r7}
 8003460:	b085      	sub	sp, #20
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003470:	f003 021c 	and.w	r2, r3, #28
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	2101      	movs	r1, #1
 800347a:	fa01 f202 	lsl.w	r2, r1, r2
 800347e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b10      	cmp	r3, #16
 800348e:	d108      	bne.n	80034a2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034a0:	e007      	b.n	80034b2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	60da      	str	r2, [r3, #12]
}
 80034b2:	bf00      	nop
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
	...

080034c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034ca:	2300      	movs	r3, #0
 80034cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ce:	e17f      	b.n	80037d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	2101      	movs	r1, #1
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	fa01 f303 	lsl.w	r3, r1, r3
 80034dc:	4013      	ands	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 8171 	beq.w	80037ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d00b      	beq.n	8003508 <HAL_GPIO_Init+0x48>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d007      	beq.n	8003508 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034fc:	2b11      	cmp	r3, #17
 80034fe:	d003      	beq.n	8003508 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b12      	cmp	r3, #18
 8003506:	d130      	bne.n	800356a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	2203      	movs	r2, #3
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43db      	mvns	r3, r3
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4013      	ands	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800353e:	2201      	movs	r2, #1
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43db      	mvns	r3, r3
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4013      	ands	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	091b      	lsrs	r3, r3, #4
 8003554:	f003 0201 	and.w	r2, r3, #1
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	2b03      	cmp	r3, #3
 8003574:	d118      	bne.n	80035a8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800357c:	2201      	movs	r2, #1
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4013      	ands	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	08db      	lsrs	r3, r3, #3
 8003592:	f003 0201 	and.w	r2, r3, #1
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	2203      	movs	r2, #3
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	43db      	mvns	r3, r3
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4013      	ands	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d003      	beq.n	80035e8 <HAL_GPIO_Init+0x128>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b12      	cmp	r3, #18
 80035e6:	d123      	bne.n	8003630 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	08da      	lsrs	r2, r3, #3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3208      	adds	r2, #8
 80035f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	220f      	movs	r2, #15
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4013      	ands	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	08da      	lsrs	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3208      	adds	r2, #8
 800362a:	6939      	ldr	r1, [r7, #16]
 800362c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	2203      	movs	r2, #3
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4013      	ands	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 0203 	and.w	r2, r3, #3
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80ac 	beq.w	80037ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003672:	4b5f      	ldr	r3, [pc, #380]	; (80037f0 <HAL_GPIO_Init+0x330>)
 8003674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003676:	4a5e      	ldr	r2, [pc, #376]	; (80037f0 <HAL_GPIO_Init+0x330>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6613      	str	r3, [r2, #96]	; 0x60
 800367e:	4b5c      	ldr	r3, [pc, #368]	; (80037f0 <HAL_GPIO_Init+0x330>)
 8003680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	60bb      	str	r3, [r7, #8]
 8003688:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800368a:	4a5a      	ldr	r2, [pc, #360]	; (80037f4 <HAL_GPIO_Init+0x334>)
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	089b      	lsrs	r3, r3, #2
 8003690:	3302      	adds	r3, #2
 8003692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003696:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	220f      	movs	r2, #15
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4013      	ands	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036b4:	d025      	beq.n	8003702 <HAL_GPIO_Init+0x242>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a4f      	ldr	r2, [pc, #316]	; (80037f8 <HAL_GPIO_Init+0x338>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d01f      	beq.n	80036fe <HAL_GPIO_Init+0x23e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a4e      	ldr	r2, [pc, #312]	; (80037fc <HAL_GPIO_Init+0x33c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d019      	beq.n	80036fa <HAL_GPIO_Init+0x23a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a4d      	ldr	r2, [pc, #308]	; (8003800 <HAL_GPIO_Init+0x340>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <HAL_GPIO_Init+0x236>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a4c      	ldr	r2, [pc, #304]	; (8003804 <HAL_GPIO_Init+0x344>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00d      	beq.n	80036f2 <HAL_GPIO_Init+0x232>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a4b      	ldr	r2, [pc, #300]	; (8003808 <HAL_GPIO_Init+0x348>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d007      	beq.n	80036ee <HAL_GPIO_Init+0x22e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a4a      	ldr	r2, [pc, #296]	; (800380c <HAL_GPIO_Init+0x34c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d101      	bne.n	80036ea <HAL_GPIO_Init+0x22a>
 80036e6:	2306      	movs	r3, #6
 80036e8:	e00c      	b.n	8003704 <HAL_GPIO_Init+0x244>
 80036ea:	2307      	movs	r3, #7
 80036ec:	e00a      	b.n	8003704 <HAL_GPIO_Init+0x244>
 80036ee:	2305      	movs	r3, #5
 80036f0:	e008      	b.n	8003704 <HAL_GPIO_Init+0x244>
 80036f2:	2304      	movs	r3, #4
 80036f4:	e006      	b.n	8003704 <HAL_GPIO_Init+0x244>
 80036f6:	2303      	movs	r3, #3
 80036f8:	e004      	b.n	8003704 <HAL_GPIO_Init+0x244>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e002      	b.n	8003704 <HAL_GPIO_Init+0x244>
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <HAL_GPIO_Init+0x244>
 8003702:	2300      	movs	r3, #0
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	f002 0203 	and.w	r2, r2, #3
 800370a:	0092      	lsls	r2, r2, #2
 800370c:	4093      	lsls	r3, r2
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003714:	4937      	ldr	r1, [pc, #220]	; (80037f4 <HAL_GPIO_Init+0x334>)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	089b      	lsrs	r3, r3, #2
 800371a:	3302      	adds	r3, #2
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003722:	4b3b      	ldr	r3, [pc, #236]	; (8003810 <HAL_GPIO_Init+0x350>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	43db      	mvns	r3, r3
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4013      	ands	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003746:	4a32      	ldr	r2, [pc, #200]	; (8003810 <HAL_GPIO_Init+0x350>)
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800374c:	4b30      	ldr	r3, [pc, #192]	; (8003810 <HAL_GPIO_Init+0x350>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	43db      	mvns	r3, r3
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4013      	ands	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003770:	4a27      	ldr	r2, [pc, #156]	; (8003810 <HAL_GPIO_Init+0x350>)
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003776:	4b26      	ldr	r3, [pc, #152]	; (8003810 <HAL_GPIO_Init+0x350>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	43db      	mvns	r3, r3
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4013      	ands	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800379a:	4a1d      	ldr	r2, [pc, #116]	; (8003810 <HAL_GPIO_Init+0x350>)
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037a0:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <HAL_GPIO_Init+0x350>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	43db      	mvns	r3, r3
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4013      	ands	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037c4:	4a12      	ldr	r2, [pc, #72]	; (8003810 <HAL_GPIO_Init+0x350>)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	3301      	adds	r3, #1
 80037ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	fa22 f303 	lsr.w	r3, r2, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f47f ae78 	bne.w	80034d0 <HAL_GPIO_Init+0x10>
  }
}
 80037e0:	bf00      	nop
 80037e2:	bf00      	nop
 80037e4:	371c      	adds	r7, #28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40021000 	.word	0x40021000
 80037f4:	40010000 	.word	0x40010000
 80037f8:	48000400 	.word	0x48000400
 80037fc:	48000800 	.word	0x48000800
 8003800:	48000c00 	.word	0x48000c00
 8003804:	48001000 	.word	0x48001000
 8003808:	48001400 	.word	0x48001400
 800380c:	48001800 	.word	0x48001800
 8003810:	40010400 	.word	0x40010400

08003814 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800381e:	2300      	movs	r3, #0
 8003820:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003822:	e0cd      	b.n	80039c0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003824:	2201      	movs	r2, #1
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	4013      	ands	r3, r2
 8003830:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80c0 	beq.w	80039ba <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800383a:	4a68      	ldr	r2, [pc, #416]	; (80039dc <HAL_GPIO_DeInit+0x1c8>)
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	089b      	lsrs	r3, r3, #2
 8003840:	3302      	adds	r3, #2
 8003842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003846:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	220f      	movs	r2, #15
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4013      	ands	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003862:	d025      	beq.n	80038b0 <HAL_GPIO_DeInit+0x9c>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a5e      	ldr	r2, [pc, #376]	; (80039e0 <HAL_GPIO_DeInit+0x1cc>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d01f      	beq.n	80038ac <HAL_GPIO_DeInit+0x98>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a5d      	ldr	r2, [pc, #372]	; (80039e4 <HAL_GPIO_DeInit+0x1d0>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d019      	beq.n	80038a8 <HAL_GPIO_DeInit+0x94>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a5c      	ldr	r2, [pc, #368]	; (80039e8 <HAL_GPIO_DeInit+0x1d4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d013      	beq.n	80038a4 <HAL_GPIO_DeInit+0x90>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a5b      	ldr	r2, [pc, #364]	; (80039ec <HAL_GPIO_DeInit+0x1d8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d00d      	beq.n	80038a0 <HAL_GPIO_DeInit+0x8c>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a5a      	ldr	r2, [pc, #360]	; (80039f0 <HAL_GPIO_DeInit+0x1dc>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d007      	beq.n	800389c <HAL_GPIO_DeInit+0x88>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a59      	ldr	r2, [pc, #356]	; (80039f4 <HAL_GPIO_DeInit+0x1e0>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d101      	bne.n	8003898 <HAL_GPIO_DeInit+0x84>
 8003894:	2306      	movs	r3, #6
 8003896:	e00c      	b.n	80038b2 <HAL_GPIO_DeInit+0x9e>
 8003898:	2307      	movs	r3, #7
 800389a:	e00a      	b.n	80038b2 <HAL_GPIO_DeInit+0x9e>
 800389c:	2305      	movs	r3, #5
 800389e:	e008      	b.n	80038b2 <HAL_GPIO_DeInit+0x9e>
 80038a0:	2304      	movs	r3, #4
 80038a2:	e006      	b.n	80038b2 <HAL_GPIO_DeInit+0x9e>
 80038a4:	2303      	movs	r3, #3
 80038a6:	e004      	b.n	80038b2 <HAL_GPIO_DeInit+0x9e>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e002      	b.n	80038b2 <HAL_GPIO_DeInit+0x9e>
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <HAL_GPIO_DeInit+0x9e>
 80038b0:	2300      	movs	r3, #0
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	f002 0203 	and.w	r2, r2, #3
 80038b8:	0092      	lsls	r2, r2, #2
 80038ba:	4093      	lsls	r3, r2
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d132      	bne.n	8003928 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80038c2:	4b4d      	ldr	r3, [pc, #308]	; (80039f8 <HAL_GPIO_DeInit+0x1e4>)
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	43db      	mvns	r3, r3
 80038ca:	494b      	ldr	r1, [pc, #300]	; (80039f8 <HAL_GPIO_DeInit+0x1e4>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80038d0:	4b49      	ldr	r3, [pc, #292]	; (80039f8 <HAL_GPIO_DeInit+0x1e4>)
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	43db      	mvns	r3, r3
 80038d8:	4947      	ldr	r1, [pc, #284]	; (80039f8 <HAL_GPIO_DeInit+0x1e4>)
 80038da:	4013      	ands	r3, r2
 80038dc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80038de:	4b46      	ldr	r3, [pc, #280]	; (80039f8 <HAL_GPIO_DeInit+0x1e4>)
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	43db      	mvns	r3, r3
 80038e6:	4944      	ldr	r1, [pc, #272]	; (80039f8 <HAL_GPIO_DeInit+0x1e4>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80038ec:	4b42      	ldr	r3, [pc, #264]	; (80039f8 <HAL_GPIO_DeInit+0x1e4>)
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	43db      	mvns	r3, r3
 80038f4:	4940      	ldr	r1, [pc, #256]	; (80039f8 <HAL_GPIO_DeInit+0x1e4>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	220f      	movs	r2, #15
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800390a:	4a34      	ldr	r2, [pc, #208]	; (80039dc <HAL_GPIO_DeInit+0x1c8>)
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	089b      	lsrs	r3, r3, #2
 8003910:	3302      	adds	r3, #2
 8003912:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	43da      	mvns	r2, r3
 800391a:	4830      	ldr	r0, [pc, #192]	; (80039dc <HAL_GPIO_DeInit+0x1c8>)
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	089b      	lsrs	r3, r3, #2
 8003920:	400a      	ands	r2, r1
 8003922:	3302      	adds	r3, #2
 8003924:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	2103      	movs	r1, #3
 8003932:	fa01 f303 	lsl.w	r3, r1, r3
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	08da      	lsrs	r2, r3, #3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3208      	adds	r2, #8
 8003944:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	220f      	movs	r2, #15
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43db      	mvns	r3, r3
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	08d2      	lsrs	r2, r2, #3
 800395c:	4019      	ands	r1, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3208      	adds	r2, #8
 8003962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	2103      	movs	r1, #3
 8003970:	fa01 f303 	lsl.w	r3, r1, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	401a      	ands	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	2101      	movs	r1, #1
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	fa01 f303 	lsl.w	r3, r1, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	401a      	ands	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	2103      	movs	r1, #3
 800399a:	fa01 f303 	lsl.w	r3, r1, r3
 800399e:	43db      	mvns	r3, r3
 80039a0:	401a      	ands	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039aa:	2101      	movs	r1, #1
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	fa01 f303 	lsl.w	r3, r1, r3
 80039b2:	43db      	mvns	r3, r3
 80039b4:	401a      	ands	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	3301      	adds	r3, #1
 80039be:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	fa22 f303 	lsr.w	r3, r2, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f47f af2b 	bne.w	8003824 <HAL_GPIO_DeInit+0x10>
  }
}
 80039ce:	bf00      	nop
 80039d0:	bf00      	nop
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	40010000 	.word	0x40010000
 80039e0:	48000400 	.word	0x48000400
 80039e4:	48000800 	.word	0x48000800
 80039e8:	48000c00 	.word	0x48000c00
 80039ec:	48001000 	.word	0x48001000
 80039f0:	48001400 	.word	0x48001400
 80039f4:	48001800 	.word	0x48001800
 80039f8:	40010400 	.word	0x40010400

080039fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	887b      	ldrh	r3, [r7, #2]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a14:	2301      	movs	r3, #1
 8003a16:	73fb      	strb	r3, [r7, #15]
 8003a18:	e001      	b.n	8003a1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	807b      	strh	r3, [r7, #2]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a3c:	787b      	ldrb	r3, [r7, #1]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a42:	887a      	ldrh	r2, [r7, #2]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a48:	e002      	b.n	8003a50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a4a:	887a      	ldrh	r2, [r7, #2]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a6e:	887a      	ldrh	r2, [r7, #2]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4013      	ands	r3, r2
 8003a74:	041a      	lsls	r2, r3, #16
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	43d9      	mvns	r1, r3
 8003a7a:	887b      	ldrh	r3, [r7, #2]
 8003a7c:	400b      	ands	r3, r1
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	619a      	str	r2, [r3, #24]
}
 8003a84:	bf00      	nop
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a94:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40007000 	.word	0x40007000

08003aac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aba:	d130      	bne.n	8003b1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003abc:	4b23      	ldr	r3, [pc, #140]	; (8003b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ac8:	d038      	beq.n	8003b3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003aca:	4b20      	ldr	r3, [pc, #128]	; (8003b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ad2:	4a1e      	ldr	r2, [pc, #120]	; (8003b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ad4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ad8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ada:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2232      	movs	r2, #50	; 0x32
 8003ae0:	fb02 f303 	mul.w	r3, r2, r3
 8003ae4:	4a1b      	ldr	r2, [pc, #108]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	0c9b      	lsrs	r3, r3, #18
 8003aec:	3301      	adds	r3, #1
 8003aee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003af0:	e002      	b.n	8003af8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	3b01      	subs	r3, #1
 8003af6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003af8:	4b14      	ldr	r3, [pc, #80]	; (8003b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b04:	d102      	bne.n	8003b0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1f2      	bne.n	8003af2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b0c:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b18:	d110      	bne.n	8003b3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e00f      	b.n	8003b3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b1e:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2a:	d007      	beq.n	8003b3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b2c:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b34:	4a05      	ldr	r2, [pc, #20]	; (8003b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40007000 	.word	0x40007000
 8003b50:	20000008 	.word	0x20000008
 8003b54:	431bde83 	.word	0x431bde83

08003b58 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003b60:	f7fe fec0 	bl	80028e4 <HAL_GetTick>
 8003b64:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e063      	b.n	8003c38 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10b      	bne.n	8003b94 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7fe fbc7 	bl	8002318 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003b8a:	f241 3188 	movw	r1, #5000	; 0x1388
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 faf7 	bl	8004182 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	021a      	lsls	r2, r3, #8
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2120      	movs	r1, #32
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 faef 	bl	800419e <QSPI_WaitFlagStateUntilTimeout>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003bc4:	7afb      	ldrb	r3, [r7, #11]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d131      	bne.n	8003c2e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003bd4:	f023 0310 	bic.w	r3, r3, #16
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6852      	ldr	r2, [r2, #4]
 8003bdc:	0611      	lsls	r1, r2, #24
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	68d2      	ldr	r2, [r2, #12]
 8003be2:	4311      	orrs	r1, r2
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6812      	ldr	r2, [r2, #0]
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	4b13      	ldr	r3, [pc, #76]	; (8003c40 <HAL_QSPI_Init+0xe8>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6912      	ldr	r2, [r2, #16]
 8003bfa:	0411      	lsls	r1, r2, #16
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6952      	ldr	r2, [r2, #20]
 8003c00:	4311      	orrs	r1, r2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6992      	ldr	r2, [r2, #24]
 8003c06:	4311      	orrs	r1, r2
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6812      	ldr	r2, [r2, #0]
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0201 	orr.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003c36:	7afb      	ldrb	r3, [r7, #11]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	ffe0f8fe 	.word	0xffe0f8fe

08003c44 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e016      	b.n	8003c84 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0201 	bic.w	r2, r2, #1
 8003c64:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fe fbb8 	bl	80023dc <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b088      	sub	sp, #32
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003c98:	f7fe fe24 	bl	80028e4 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <HAL_QSPI_Command+0x22>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e048      	b.n	8003d40 <HAL_QSPI_Command+0xb4>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d137      	bne.n	8003d32 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	2120      	movs	r1, #32
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 fa5f 	bl	800419e <QSPI_WaitFlagStateUntilTimeout>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003ce4:	7dfb      	ldrb	r3, [r7, #23]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d125      	bne.n	8003d36 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003cea:	2200      	movs	r2, #0
 8003cec:	68b9      	ldr	r1, [r7, #8]
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 fa8c 	bl	800420c <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d115      	bne.n	8003d28 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	2201      	movs	r2, #1
 8003d04:	2102      	movs	r1, #2
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 fa49 	bl	800419e <QSPI_WaitFlagStateUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003d10:	7dfb      	ldrb	r3, [r7, #23]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10f      	bne.n	8003d36 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003d26:	e006      	b.n	8003d36 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003d30:	e001      	b.n	8003d36 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003d32:	2302      	movs	r3, #2
 8003d34:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08a      	sub	sp, #40	; 0x28
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003d58:	f7fe fdc4 	bl	80028e4 <HAL_GetTick>
 8003d5c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3320      	adds	r3, #32
 8003d64:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d101      	bne.n	8003d76 <HAL_QSPI_Transmit+0x2e>
 8003d72:	2302      	movs	r3, #2
 8003d74:	e07b      	b.n	8003e6e <HAL_QSPI_Transmit+0x126>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d16a      	bne.n	8003e60 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d05b      	beq.n	8003e4e <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2212      	movs	r2, #18
 8003d9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695a      	ldr	r2, [r3, #20]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003dca:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8003dcc:	e01b      	b.n	8003e06 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	2104      	movs	r1, #4
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f9e0 	bl	800419e <QSPI_WaitFlagStateUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003de2:	7ffb      	ldrb	r3, [r7, #31]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d113      	bne.n	8003e10 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	781a      	ldrb	r2, [r3, #0]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	1e5a      	subs	r2, r3, #1
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1df      	bne.n	8003dce <HAL_QSPI_Transmit+0x86>
 8003e0e:	e000      	b.n	8003e12 <HAL_QSPI_Transmit+0xca>
          break;
 8003e10:	bf00      	nop
      }

      if (status == HAL_OK)
 8003e12:	7ffb      	ldrb	r3, [r7, #31]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d115      	bne.n	8003e44 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	2102      	movs	r1, #2
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 f9bb 	bl	800419e <QSPI_WaitFlagStateUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003e2c:	7ffb      	ldrb	r3, [r7, #31]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d108      	bne.n	8003e44 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2202      	movs	r2, #2
 8003e38:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 f934 	bl	80040a8 <HAL_QSPI_Abort>
 8003e40:	4603      	mov	r3, r0
 8003e42:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003e4c:	e00a      	b.n	8003e64 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e52:	f043 0208 	orr.w	r2, r3, #8
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	77fb      	strb	r3, [r7, #31]
 8003e5e:	e001      	b.n	8003e64 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003e60:	2302      	movs	r3, #2
 8003e62:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003e6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3720      	adds	r7, #32
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b08a      	sub	sp, #40	; 0x28
 8003e7a:	af02      	add	r7, sp, #8
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003e86:	f7fe fd2d 	bl	80028e4 <HAL_GetTick>
 8003e8a:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3320      	adds	r3, #32
 8003e9a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_QSPI_Receive+0x36>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e082      	b.n	8003fb2 <HAL_QSPI_Receive+0x13c>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d171      	bne.n	8003fa4 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d062      	beq.n	8003f92 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2222      	movs	r2, #34	; 0x22
 8003ed0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003f04:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8003f0e:	e01c      	b.n	8003f4a <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	2201      	movs	r2, #1
 8003f18:	2106      	movs	r1, #6
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f93f 	bl	800419e <QSPI_WaitFlagStateUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8003f24:	7ffb      	ldrb	r3, [r7, #31]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d114      	bne.n	8003f54 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	7812      	ldrb	r2, [r2, #0]
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f44:	1e5a      	subs	r2, r3, #1
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1de      	bne.n	8003f10 <HAL_QSPI_Receive+0x9a>
 8003f52:	e000      	b.n	8003f56 <HAL_QSPI_Receive+0xe0>
          break;
 8003f54:	bf00      	nop
      }

      if (status == HAL_OK)
 8003f56:	7ffb      	ldrb	r3, [r7, #31]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d115      	bne.n	8003f88 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	2201      	movs	r2, #1
 8003f64:	2102      	movs	r1, #2
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 f919 	bl	800419e <QSPI_WaitFlagStateUntilTimeout>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8003f70:	7ffb      	ldrb	r3, [r7, #31]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d108      	bne.n	8003f88 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f892 	bl	80040a8 <HAL_QSPI_Abort>
 8003f84:	4603      	mov	r3, r0
 8003f86:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003f90:	e00a      	b.n	8003fa8 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f96:	f043 0208 	orr.w	r2, r3, #8
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	77fb      	strb	r3, [r7, #31]
 8003fa2:	e001      	b.n	8003fa8 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003fb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3720      	adds	r7, #32
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b088      	sub	sp, #32
 8003fbe:	af02      	add	r7, sp, #8
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	607a      	str	r2, [r7, #4]
 8003fc6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003fc8:	f7fe fc8c 	bl	80028e4 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d101      	bne.n	8003fde <HAL_QSPI_AutoPolling+0x24>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e060      	b.n	80040a0 <HAL_QSPI_AutoPolling+0xe6>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d14f      	bne.n	8004092 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2242      	movs	r2, #66	; 0x42
 8003ffc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	2200      	movs	r2, #0
 8004008:	2120      	movs	r1, #32
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 f8c7 	bl	800419e <QSPI_WaitFlagStateUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004014:	7dfb      	ldrb	r3, [r7, #23]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d13d      	bne.n	8004096 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6852      	ldr	r2, [r2, #4]
 800402c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6892      	ldr	r2, [r2, #8]
 8004036:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	431a      	orrs	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004050:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800405a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 f8d3 	bl	800420c <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	2201      	movs	r2, #1
 800406e:	2108      	movs	r1, #8
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 f894 	bl	800419e <QSPI_WaitFlagStateUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800407a:	7dfb      	ldrb	r3, [r7, #23]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10a      	bne.n	8004096 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2208      	movs	r2, #8
 8004086:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004090:	e001      	b.n	8004096 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8004092:	2302      	movs	r3, #2
 8004094:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800409e:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80040b4:	f7fe fc16 	bl	80028e4 <HAL_GetTick>
 80040b8:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d056      	beq.n	8004178 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d017      	beq.n	8004110 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0204 	bic.w	r2, r2, #4
 80040ee:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff f8c5 	bl	8003284 <HAL_DMA_Abort>
 80040fa:	4603      	mov	r3, r0
 80040fc:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004108:	f043 0204 	orr.w	r2, r3, #4
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0202 	orr.w	r2, r2, #2
 800411e:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2201      	movs	r2, #1
 800412a:	2102      	movs	r1, #2
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f836 	bl	800419e <QSPI_WaitFlagStateUntilTimeout>
 8004132:	4603      	mov	r3, r0
 8004134:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004136:	7bfb      	ldrb	r3, [r7, #15]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10e      	bne.n	800415a <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2202      	movs	r2, #2
 8004142:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2200      	movs	r2, #0
 800414e:	2120      	movs	r1, #32
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f824 	bl	800419e <QSPI_WaitFlagStateUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800415a:	7bfb      	ldrb	r3, [r7, #15]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10b      	bne.n	8004178 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695a      	ldr	r2, [r3, #20]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800416e:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8004178:	7bfb      	ldrb	r3, [r7, #15]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b084      	sub	sp, #16
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	603b      	str	r3, [r7, #0]
 80041aa:	4613      	mov	r3, r2
 80041ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80041ae:	e01a      	b.n	80041e6 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b6:	d016      	beq.n	80041e6 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b8:	f7fe fb94 	bl	80028e4 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d302      	bcc.n	80041ce <QSPI_WaitFlagStateUntilTimeout+0x30>
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10b      	bne.n	80041e6 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2204      	movs	r2, #4
 80041d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041da:	f043 0201 	orr.w	r2, r3, #1
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e00e      	b.n	8004204 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	4013      	ands	r3, r2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	bf14      	ite	ne
 80041f4:	2301      	movne	r3, #1
 80041f6:	2300      	moveq	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	461a      	mov	r2, r3
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d1d6      	bne.n	80041b0 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	2b00      	cmp	r3, #0
 800421e:	d009      	beq.n	8004234 <QSPI_Config+0x28>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004226:	d005      	beq.n	8004234 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3a01      	subs	r2, #1
 8004232:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 80b9 	beq.w	80043b0 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d05f      	beq.n	8004306 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	6892      	ldr	r2, [r2, #8]
 800424e:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d031      	beq.n	80042bc <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	431a      	orrs	r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004266:	431a      	orrs	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	431a      	orrs	r2, r3
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	049b      	lsls	r3, r3, #18
 8004274:	431a      	orrs	r2, r3
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	431a      	orrs	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	431a      	orrs	r2, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	431a      	orrs	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	431a      	orrs	r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	431a      	orrs	r2, r3
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	ea42 0103 	orr.w	r1, r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80042ac:	f000 812e 	beq.w	800450c <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	6852      	ldr	r2, [r2, #4]
 80042b8:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80042ba:	e127      	b.n	800450c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c4:	431a      	orrs	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ca:	431a      	orrs	r2, r3
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	431a      	orrs	r2, r3
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	049b      	lsls	r3, r3, #18
 80042d8:	431a      	orrs	r2, r3
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	431a      	orrs	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	431a      	orrs	r2, r3
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	431a      	orrs	r2, r3
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	431a      	orrs	r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	ea42 0103 	orr.w	r1, r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	430a      	orrs	r2, r1
 8004302:	615a      	str	r2, [r3, #20]
}
 8004304:	e102      	b.n	800450c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d02e      	beq.n	800436c <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	431a      	orrs	r2, r3
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431c:	431a      	orrs	r2, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	431a      	orrs	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	049b      	lsls	r3, r3, #18
 800432a:	431a      	orrs	r2, r3
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	431a      	orrs	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	431a      	orrs	r2, r3
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	431a      	orrs	r2, r3
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	431a      	orrs	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	ea42 0103 	orr.w	r1, r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	430a      	orrs	r2, r1
 8004354:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800435c:	f000 80d6 	beq.w	800450c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	6852      	ldr	r2, [r2, #4]
 8004368:	619a      	str	r2, [r3, #24]
}
 800436a:	e0cf      	b.n	800450c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004374:	431a      	orrs	r2, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437a:	431a      	orrs	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	431a      	orrs	r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	049b      	lsls	r3, r3, #18
 8004388:	431a      	orrs	r2, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	431a      	orrs	r2, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	431a      	orrs	r2, r3
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	431a      	orrs	r2, r3
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	ea42 0103 	orr.w	r1, r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	615a      	str	r2, [r3, #20]
}
 80043ae:	e0ad      	b.n	800450c <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d058      	beq.n	800446a <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	6892      	ldr	r2, [r2, #8]
 80043c0:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d02d      	beq.n	8004426 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	431a      	orrs	r2, r3
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d8:	431a      	orrs	r2, r3
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	431a      	orrs	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	049b      	lsls	r3, r3, #18
 80043e6:	431a      	orrs	r2, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	431a      	orrs	r2, r3
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	431a      	orrs	r2, r3
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	431a      	orrs	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	431a      	orrs	r2, r3
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	ea42 0103 	orr.w	r1, r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	430a      	orrs	r2, r1
 8004410:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004418:	d078      	beq.n	800450c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	6852      	ldr	r2, [r2, #4]
 8004422:	619a      	str	r2, [r3, #24]
}
 8004424:	e072      	b.n	800450c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	431a      	orrs	r2, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004434:	431a      	orrs	r2, r3
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	431a      	orrs	r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	049b      	lsls	r3, r3, #18
 8004442:	431a      	orrs	r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	431a      	orrs	r2, r3
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	431a      	orrs	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	431a      	orrs	r2, r3
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	ea42 0103 	orr.w	r1, r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	430a      	orrs	r2, r1
 8004466:	615a      	str	r2, [r3, #20]
}
 8004468:	e050      	b.n	800450c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d02a      	beq.n	80044c8 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	431a      	orrs	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004480:	431a      	orrs	r2, r3
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	431a      	orrs	r2, r3
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	049b      	lsls	r3, r3, #18
 800448e:	431a      	orrs	r2, r3
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	431a      	orrs	r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	431a      	orrs	r2, r3
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	431a      	orrs	r2, r3
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	ea42 0103 	orr.w	r1, r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80044ba:	d027      	beq.n	800450c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	6852      	ldr	r2, [r2, #4]
 80044c4:	619a      	str	r2, [r3, #24]
}
 80044c6:	e021      	b.n	800450c <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d01d      	beq.n	800450c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	431a      	orrs	r2, r3
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044de:	431a      	orrs	r2, r3
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	431a      	orrs	r2, r3
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	049b      	lsls	r3, r3, #18
 80044ec:	431a      	orrs	r2, r3
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	431a      	orrs	r2, r3
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	ea42 0103 	orr.w	r1, r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	430a      	orrs	r2, r1
 800450a:	615a      	str	r2, [r3, #20]
}
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e3d4      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800452a:	4ba1      	ldr	r3, [pc, #644]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 030c 	and.w	r3, r3, #12
 8004532:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004534:	4b9e      	ldr	r3, [pc, #632]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f003 0303 	and.w	r3, r3, #3
 800453c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0310 	and.w	r3, r3, #16
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 80e4 	beq.w	8004714 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d007      	beq.n	8004562 <HAL_RCC_OscConfig+0x4a>
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b0c      	cmp	r3, #12
 8004556:	f040 808b 	bne.w	8004670 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2b01      	cmp	r3, #1
 800455e:	f040 8087 	bne.w	8004670 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004562:	4b93      	ldr	r3, [pc, #588]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d005      	beq.n	800457a <HAL_RCC_OscConfig+0x62>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e3ac      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1a      	ldr	r2, [r3, #32]
 800457e:	4b8c      	ldr	r3, [pc, #560]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b00      	cmp	r3, #0
 8004588:	d004      	beq.n	8004594 <HAL_RCC_OscConfig+0x7c>
 800458a:	4b89      	ldr	r3, [pc, #548]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004592:	e005      	b.n	80045a0 <HAL_RCC_OscConfig+0x88>
 8004594:	4b86      	ldr	r3, [pc, #536]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 8004596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800459a:	091b      	lsrs	r3, r3, #4
 800459c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d223      	bcs.n	80045ec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 fd73 	bl	8005094 <RCC_SetFlashLatencyFromMSIRange>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e38d      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045b8:	4b7d      	ldr	r3, [pc, #500]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a7c      	ldr	r2, [pc, #496]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 80045be:	f043 0308 	orr.w	r3, r3, #8
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	4b7a      	ldr	r3, [pc, #488]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	4977      	ldr	r1, [pc, #476]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045d6:	4b76      	ldr	r3, [pc, #472]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	021b      	lsls	r3, r3, #8
 80045e4:	4972      	ldr	r1, [pc, #456]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	604b      	str	r3, [r1, #4]
 80045ea:	e025      	b.n	8004638 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045ec:	4b70      	ldr	r3, [pc, #448]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a6f      	ldr	r2, [pc, #444]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 80045f2:	f043 0308 	orr.w	r3, r3, #8
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	4b6d      	ldr	r3, [pc, #436]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	496a      	ldr	r1, [pc, #424]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 8004606:	4313      	orrs	r3, r2
 8004608:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800460a:	4b69      	ldr	r3, [pc, #420]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	021b      	lsls	r3, r3, #8
 8004618:	4965      	ldr	r1, [pc, #404]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 800461a:	4313      	orrs	r3, r2
 800461c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d109      	bne.n	8004638 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	4618      	mov	r0, r3
 800462a:	f000 fd33 	bl	8005094 <RCC_SetFlashLatencyFromMSIRange>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e34d      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004638:	f000 fc36 	bl	8004ea8 <HAL_RCC_GetSysClockFreq>
 800463c:	4602      	mov	r2, r0
 800463e:	4b5c      	ldr	r3, [pc, #368]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	091b      	lsrs	r3, r3, #4
 8004644:	f003 030f 	and.w	r3, r3, #15
 8004648:	495a      	ldr	r1, [pc, #360]	; (80047b4 <HAL_RCC_OscConfig+0x29c>)
 800464a:	5ccb      	ldrb	r3, [r1, r3]
 800464c:	f003 031f 	and.w	r3, r3, #31
 8004650:	fa22 f303 	lsr.w	r3, r2, r3
 8004654:	4a58      	ldr	r2, [pc, #352]	; (80047b8 <HAL_RCC_OscConfig+0x2a0>)
 8004656:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004658:	4b58      	ldr	r3, [pc, #352]	; (80047bc <HAL_RCC_OscConfig+0x2a4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f7fd ff5d 	bl	800251c <HAL_InitTick>
 8004662:	4603      	mov	r3, r0
 8004664:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004666:	7bfb      	ldrb	r3, [r7, #15]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d052      	beq.n	8004712 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800466c:	7bfb      	ldrb	r3, [r7, #15]
 800466e:	e331      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d032      	beq.n	80046de <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004678:	4b4d      	ldr	r3, [pc, #308]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a4c      	ldr	r2, [pc, #304]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 800467e:	f043 0301 	orr.w	r3, r3, #1
 8004682:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004684:	f7fe f92e 	bl	80028e4 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800468c:	f7fe f92a 	bl	80028e4 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e31a      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800469e:	4b44      	ldr	r3, [pc, #272]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f0      	beq.n	800468c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046aa:	4b41      	ldr	r3, [pc, #260]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a40      	ldr	r2, [pc, #256]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 80046b0:	f043 0308 	orr.w	r3, r3, #8
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	4b3e      	ldr	r3, [pc, #248]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	493b      	ldr	r1, [pc, #236]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046c8:	4b39      	ldr	r3, [pc, #228]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	021b      	lsls	r3, r3, #8
 80046d6:	4936      	ldr	r1, [pc, #216]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	604b      	str	r3, [r1, #4]
 80046dc:	e01a      	b.n	8004714 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046de:	4b34      	ldr	r3, [pc, #208]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a33      	ldr	r2, [pc, #204]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 80046e4:	f023 0301 	bic.w	r3, r3, #1
 80046e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046ea:	f7fe f8fb 	bl	80028e4 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046f2:	f7fe f8f7 	bl	80028e4 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e2e7      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004704:	4b2a      	ldr	r3, [pc, #168]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1f0      	bne.n	80046f2 <HAL_RCC_OscConfig+0x1da>
 8004710:	e000      	b.n	8004714 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004712:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d074      	beq.n	800480a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	2b08      	cmp	r3, #8
 8004724:	d005      	beq.n	8004732 <HAL_RCC_OscConfig+0x21a>
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	2b0c      	cmp	r3, #12
 800472a:	d10e      	bne.n	800474a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2b03      	cmp	r3, #3
 8004730:	d10b      	bne.n	800474a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004732:	4b1f      	ldr	r3, [pc, #124]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d064      	beq.n	8004808 <HAL_RCC_OscConfig+0x2f0>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d160      	bne.n	8004808 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e2c4      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004752:	d106      	bne.n	8004762 <HAL_RCC_OscConfig+0x24a>
 8004754:	4b16      	ldr	r3, [pc, #88]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a15      	ldr	r2, [pc, #84]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 800475a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	e01d      	b.n	800479e <HAL_RCC_OscConfig+0x286>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800476a:	d10c      	bne.n	8004786 <HAL_RCC_OscConfig+0x26e>
 800476c:	4b10      	ldr	r3, [pc, #64]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a0f      	ldr	r2, [pc, #60]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 8004772:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	4b0d      	ldr	r3, [pc, #52]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a0c      	ldr	r2, [pc, #48]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 800477e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	e00b      	b.n	800479e <HAL_RCC_OscConfig+0x286>
 8004786:	4b0a      	ldr	r3, [pc, #40]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a09      	ldr	r2, [pc, #36]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 800478c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a06      	ldr	r2, [pc, #24]	; (80047b0 <HAL_RCC_OscConfig+0x298>)
 8004798:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800479c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d01c      	beq.n	80047e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a6:	f7fe f89d 	bl	80028e4 <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047ac:	e011      	b.n	80047d2 <HAL_RCC_OscConfig+0x2ba>
 80047ae:	bf00      	nop
 80047b0:	40021000 	.word	0x40021000
 80047b4:	08007db8 	.word	0x08007db8
 80047b8:	20000008 	.word	0x20000008
 80047bc:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c0:	f7fe f890 	bl	80028e4 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b64      	cmp	r3, #100	; 0x64
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e280      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047d2:	4baf      	ldr	r3, [pc, #700]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0f0      	beq.n	80047c0 <HAL_RCC_OscConfig+0x2a8>
 80047de:	e014      	b.n	800480a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e0:	f7fe f880 	bl	80028e4 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e8:	f7fe f87c 	bl	80028e4 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b64      	cmp	r3, #100	; 0x64
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e26c      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047fa:	4ba5      	ldr	r3, [pc, #660]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f0      	bne.n	80047e8 <HAL_RCC_OscConfig+0x2d0>
 8004806:	e000      	b.n	800480a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d060      	beq.n	80048d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	2b04      	cmp	r3, #4
 800481a:	d005      	beq.n	8004828 <HAL_RCC_OscConfig+0x310>
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	2b0c      	cmp	r3, #12
 8004820:	d119      	bne.n	8004856 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b02      	cmp	r3, #2
 8004826:	d116      	bne.n	8004856 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004828:	4b99      	ldr	r3, [pc, #612]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004830:	2b00      	cmp	r3, #0
 8004832:	d005      	beq.n	8004840 <HAL_RCC_OscConfig+0x328>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e249      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004840:	4b93      	ldr	r3, [pc, #588]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	061b      	lsls	r3, r3, #24
 800484e:	4990      	ldr	r1, [pc, #576]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 8004850:	4313      	orrs	r3, r2
 8004852:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004854:	e040      	b.n	80048d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d023      	beq.n	80048a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800485e:	4b8c      	ldr	r3, [pc, #560]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a8b      	ldr	r2, [pc, #556]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 8004864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486a:	f7fe f83b 	bl	80028e4 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004872:	f7fe f837 	bl	80028e4 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e227      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004884:	4b82      	ldr	r3, [pc, #520]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0f0      	beq.n	8004872 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004890:	4b7f      	ldr	r3, [pc, #508]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	061b      	lsls	r3, r3, #24
 800489e:	497c      	ldr	r1, [pc, #496]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	604b      	str	r3, [r1, #4]
 80048a4:	e018      	b.n	80048d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048a6:	4b7a      	ldr	r3, [pc, #488]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a79      	ldr	r2, [pc, #484]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 80048ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b2:	f7fe f817 	bl	80028e4 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ba:	f7fe f813 	bl	80028e4 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e203      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048cc:	4b70      	ldr	r3, [pc, #448]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1f0      	bne.n	80048ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d03c      	beq.n	800495e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d01c      	beq.n	8004926 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ec:	4b68      	ldr	r3, [pc, #416]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 80048ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048f2:	4a67      	ldr	r2, [pc, #412]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 80048f4:	f043 0301 	orr.w	r3, r3, #1
 80048f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048fc:	f7fd fff2 	bl	80028e4 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004904:	f7fd ffee 	bl	80028e4 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e1de      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004916:	4b5e      	ldr	r3, [pc, #376]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 8004918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0ef      	beq.n	8004904 <HAL_RCC_OscConfig+0x3ec>
 8004924:	e01b      	b.n	800495e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004926:	4b5a      	ldr	r3, [pc, #360]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 8004928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800492c:	4a58      	ldr	r2, [pc, #352]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 800492e:	f023 0301 	bic.w	r3, r3, #1
 8004932:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004936:	f7fd ffd5 	bl	80028e4 <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800493c:	e008      	b.n	8004950 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800493e:	f7fd ffd1 	bl	80028e4 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e1c1      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004950:	4b4f      	ldr	r3, [pc, #316]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 8004952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1ef      	bne.n	800493e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 80a6 	beq.w	8004ab8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800496c:	2300      	movs	r3, #0
 800496e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004970:	4b47      	ldr	r3, [pc, #284]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 8004972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10d      	bne.n	8004998 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800497c:	4b44      	ldr	r3, [pc, #272]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 800497e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004980:	4a43      	ldr	r2, [pc, #268]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 8004982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004986:	6593      	str	r3, [r2, #88]	; 0x58
 8004988:	4b41      	ldr	r3, [pc, #260]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 800498a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004990:	60bb      	str	r3, [r7, #8]
 8004992:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004994:	2301      	movs	r3, #1
 8004996:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004998:	4b3e      	ldr	r3, [pc, #248]	; (8004a94 <HAL_RCC_OscConfig+0x57c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d118      	bne.n	80049d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049a4:	4b3b      	ldr	r3, [pc, #236]	; (8004a94 <HAL_RCC_OscConfig+0x57c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a3a      	ldr	r2, [pc, #232]	; (8004a94 <HAL_RCC_OscConfig+0x57c>)
 80049aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049b0:	f7fd ff98 	bl	80028e4 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b8:	f7fd ff94 	bl	80028e4 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e184      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049ca:	4b32      	ldr	r3, [pc, #200]	; (8004a94 <HAL_RCC_OscConfig+0x57c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0f0      	beq.n	80049b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d108      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4d8>
 80049de:	4b2c      	ldr	r3, [pc, #176]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 80049e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e4:	4a2a      	ldr	r2, [pc, #168]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 80049e6:	f043 0301 	orr.w	r3, r3, #1
 80049ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049ee:	e024      	b.n	8004a3a <HAL_RCC_OscConfig+0x522>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b05      	cmp	r3, #5
 80049f6:	d110      	bne.n	8004a1a <HAL_RCC_OscConfig+0x502>
 80049f8:	4b25      	ldr	r3, [pc, #148]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 80049fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fe:	4a24      	ldr	r2, [pc, #144]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 8004a00:	f043 0304 	orr.w	r3, r3, #4
 8004a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a08:	4b21      	ldr	r3, [pc, #132]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 8004a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0e:	4a20      	ldr	r2, [pc, #128]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 8004a10:	f043 0301 	orr.w	r3, r3, #1
 8004a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a18:	e00f      	b.n	8004a3a <HAL_RCC_OscConfig+0x522>
 8004a1a:	4b1d      	ldr	r3, [pc, #116]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 8004a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a20:	4a1b      	ldr	r2, [pc, #108]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 8004a22:	f023 0301 	bic.w	r3, r3, #1
 8004a26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a2a:	4b19      	ldr	r3, [pc, #100]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 8004a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a30:	4a17      	ldr	r2, [pc, #92]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 8004a32:	f023 0304 	bic.w	r3, r3, #4
 8004a36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d016      	beq.n	8004a70 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a42:	f7fd ff4f 	bl	80028e4 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a48:	e00a      	b.n	8004a60 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4a:	f7fd ff4b 	bl	80028e4 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e139      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a60:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <HAL_RCC_OscConfig+0x578>)
 8004a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0ed      	beq.n	8004a4a <HAL_RCC_OscConfig+0x532>
 8004a6e:	e01a      	b.n	8004aa6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a70:	f7fd ff38 	bl	80028e4 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a76:	e00f      	b.n	8004a98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a78:	f7fd ff34 	bl	80028e4 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d906      	bls.n	8004a98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e122      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7bc>
 8004a8e:	bf00      	nop
 8004a90:	40021000 	.word	0x40021000
 8004a94:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a98:	4b90      	ldr	r3, [pc, #576]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1e8      	bne.n	8004a78 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aa6:	7ffb      	ldrb	r3, [r7, #31]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d105      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aac:	4b8b      	ldr	r3, [pc, #556]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab0:	4a8a      	ldr	r2, [pc, #552]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004ab2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ab6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8108 	beq.w	8004cd2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	f040 80d0 	bne.w	8004c6c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004acc:	4b83      	ldr	r3, [pc, #524]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f003 0203 	and.w	r2, r3, #3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d130      	bne.n	8004b42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	3b01      	subs	r3, #1
 8004aec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d127      	bne.n	8004b42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d11f      	bne.n	8004b42 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b0c:	2a07      	cmp	r2, #7
 8004b0e:	bf14      	ite	ne
 8004b10:	2201      	movne	r2, #1
 8004b12:	2200      	moveq	r2, #0
 8004b14:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d113      	bne.n	8004b42 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b24:	085b      	lsrs	r3, r3, #1
 8004b26:	3b01      	subs	r3, #1
 8004b28:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d109      	bne.n	8004b42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b38:	085b      	lsrs	r3, r3, #1
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d06e      	beq.n	8004c20 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	2b0c      	cmp	r3, #12
 8004b46:	d069      	beq.n	8004c1c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b48:	4b64      	ldr	r3, [pc, #400]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d105      	bne.n	8004b60 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b54:	4b61      	ldr	r3, [pc, #388]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e0b7      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b64:	4b5d      	ldr	r3, [pc, #372]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a5c      	ldr	r2, [pc, #368]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004b6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b6e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b70:	f7fd feb8 	bl	80028e4 <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b78:	f7fd feb4 	bl	80028e4 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e0a4      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b8a:	4b54      	ldr	r3, [pc, #336]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1f0      	bne.n	8004b78 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b96:	4b51      	ldr	r3, [pc, #324]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	4b51      	ldr	r3, [pc, #324]	; (8004ce0 <HAL_RCC_OscConfig+0x7c8>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ba6:	3a01      	subs	r2, #1
 8004ba8:	0112      	lsls	r2, r2, #4
 8004baa:	4311      	orrs	r1, r2
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bb0:	0212      	lsls	r2, r2, #8
 8004bb2:	4311      	orrs	r1, r2
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004bb8:	0852      	lsrs	r2, r2, #1
 8004bba:	3a01      	subs	r2, #1
 8004bbc:	0552      	lsls	r2, r2, #21
 8004bbe:	4311      	orrs	r1, r2
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004bc4:	0852      	lsrs	r2, r2, #1
 8004bc6:	3a01      	subs	r2, #1
 8004bc8:	0652      	lsls	r2, r2, #25
 8004bca:	4311      	orrs	r1, r2
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bd0:	0912      	lsrs	r2, r2, #4
 8004bd2:	0452      	lsls	r2, r2, #17
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	4941      	ldr	r1, [pc, #260]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004bdc:	4b3f      	ldr	r3, [pc, #252]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a3e      	ldr	r2, [pc, #248]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004be6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004be8:	4b3c      	ldr	r3, [pc, #240]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	4a3b      	ldr	r2, [pc, #236]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bf2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bf4:	f7fd fe76 	bl	80028e4 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bfc:	f7fd fe72 	bl	80028e4 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e062      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c0e:	4b33      	ldr	r3, [pc, #204]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0f0      	beq.n	8004bfc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c1a:	e05a      	b.n	8004cd2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e059      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c20:	4b2e      	ldr	r3, [pc, #184]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d152      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c2c:	4b2b      	ldr	r3, [pc, #172]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a2a      	ldr	r2, [pc, #168]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c38:	4b28      	ldr	r3, [pc, #160]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	4a27      	ldr	r2, [pc, #156]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c44:	f7fd fe4e 	bl	80028e4 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c4c:	f7fd fe4a 	bl	80028e4 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e03a      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c5e:	4b1f      	ldr	r3, [pc, #124]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0f0      	beq.n	8004c4c <HAL_RCC_OscConfig+0x734>
 8004c6a:	e032      	b.n	8004cd2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	2b0c      	cmp	r3, #12
 8004c70:	d02d      	beq.n	8004cce <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c72:	4b1a      	ldr	r3, [pc, #104]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a19      	ldr	r2, [pc, #100]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004c78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c7c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004c7e:	4b17      	ldr	r3, [pc, #92]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d105      	bne.n	8004c96 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004c8a:	4b14      	ldr	r3, [pc, #80]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	4a13      	ldr	r2, [pc, #76]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004c90:	f023 0303 	bic.w	r3, r3, #3
 8004c94:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c96:	4b11      	ldr	r3, [pc, #68]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	4a10      	ldr	r2, [pc, #64]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004c9c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ca4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca6:	f7fd fe1d 	bl	80028e4 <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cae:	f7fd fe19 	bl	80028e4 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e009      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cc0:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <HAL_RCC_OscConfig+0x7c4>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1f0      	bne.n	8004cae <HAL_RCC_OscConfig+0x796>
 8004ccc:	e001      	b.n	8004cd2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3720      	adds	r7, #32
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	f99d808c 	.word	0xf99d808c

08004ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e0c8      	b.n	8004e8a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf8:	4b66      	ldr	r3, [pc, #408]	; (8004e94 <HAL_RCC_ClockConfig+0x1b0>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d910      	bls.n	8004d28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d06:	4b63      	ldr	r3, [pc, #396]	; (8004e94 <HAL_RCC_ClockConfig+0x1b0>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f023 0207 	bic.w	r2, r3, #7
 8004d0e:	4961      	ldr	r1, [pc, #388]	; (8004e94 <HAL_RCC_ClockConfig+0x1b0>)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d16:	4b5f      	ldr	r3, [pc, #380]	; (8004e94 <HAL_RCC_ClockConfig+0x1b0>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d001      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e0b0      	b.n	8004e8a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d04c      	beq.n	8004dce <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	2b03      	cmp	r3, #3
 8004d3a:	d107      	bne.n	8004d4c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d3c:	4b56      	ldr	r3, [pc, #344]	; (8004e98 <HAL_RCC_ClockConfig+0x1b4>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d121      	bne.n	8004d8c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e09e      	b.n	8004e8a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d107      	bne.n	8004d64 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d54:	4b50      	ldr	r3, [pc, #320]	; (8004e98 <HAL_RCC_ClockConfig+0x1b4>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d115      	bne.n	8004d8c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e092      	b.n	8004e8a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d107      	bne.n	8004d7c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d6c:	4b4a      	ldr	r3, [pc, #296]	; (8004e98 <HAL_RCC_ClockConfig+0x1b4>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d109      	bne.n	8004d8c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e086      	b.n	8004e8a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d7c:	4b46      	ldr	r3, [pc, #280]	; (8004e98 <HAL_RCC_ClockConfig+0x1b4>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e07e      	b.n	8004e8a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d8c:	4b42      	ldr	r3, [pc, #264]	; (8004e98 <HAL_RCC_ClockConfig+0x1b4>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f023 0203 	bic.w	r2, r3, #3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	493f      	ldr	r1, [pc, #252]	; (8004e98 <HAL_RCC_ClockConfig+0x1b4>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d9e:	f7fd fda1 	bl	80028e4 <HAL_GetTick>
 8004da2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da4:	e00a      	b.n	8004dbc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da6:	f7fd fd9d 	bl	80028e4 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e066      	b.n	8004e8a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dbc:	4b36      	ldr	r3, [pc, #216]	; (8004e98 <HAL_RCC_ClockConfig+0x1b4>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f003 020c 	and.w	r2, r3, #12
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d1eb      	bne.n	8004da6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d008      	beq.n	8004dec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dda:	4b2f      	ldr	r3, [pc, #188]	; (8004e98 <HAL_RCC_ClockConfig+0x1b4>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	492c      	ldr	r1, [pc, #176]	; (8004e98 <HAL_RCC_ClockConfig+0x1b4>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dec:	4b29      	ldr	r3, [pc, #164]	; (8004e94 <HAL_RCC_ClockConfig+0x1b0>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d210      	bcs.n	8004e1c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dfa:	4b26      	ldr	r3, [pc, #152]	; (8004e94 <HAL_RCC_ClockConfig+0x1b0>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f023 0207 	bic.w	r2, r3, #7
 8004e02:	4924      	ldr	r1, [pc, #144]	; (8004e94 <HAL_RCC_ClockConfig+0x1b0>)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e0a:	4b22      	ldr	r3, [pc, #136]	; (8004e94 <HAL_RCC_ClockConfig+0x1b0>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d001      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e036      	b.n	8004e8a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d008      	beq.n	8004e3a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e28:	4b1b      	ldr	r3, [pc, #108]	; (8004e98 <HAL_RCC_ClockConfig+0x1b4>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	4918      	ldr	r1, [pc, #96]	; (8004e98 <HAL_RCC_ClockConfig+0x1b4>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d009      	beq.n	8004e5a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e46:	4b14      	ldr	r3, [pc, #80]	; (8004e98 <HAL_RCC_ClockConfig+0x1b4>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	4910      	ldr	r1, [pc, #64]	; (8004e98 <HAL_RCC_ClockConfig+0x1b4>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e5a:	f000 f825 	bl	8004ea8 <HAL_RCC_GetSysClockFreq>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	4b0d      	ldr	r3, [pc, #52]	; (8004e98 <HAL_RCC_ClockConfig+0x1b4>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	091b      	lsrs	r3, r3, #4
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	490c      	ldr	r1, [pc, #48]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004e6c:	5ccb      	ldrb	r3, [r1, r3]
 8004e6e:	f003 031f 	and.w	r3, r3, #31
 8004e72:	fa22 f303 	lsr.w	r3, r2, r3
 8004e76:	4a0a      	ldr	r2, [pc, #40]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fd fb4c 	bl	800251c <HAL_InitTick>
 8004e84:	4603      	mov	r3, r0
 8004e86:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e88:	7afb      	ldrb	r3, [r7, #11]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	40022000 	.word	0x40022000
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	08007db8 	.word	0x08007db8
 8004ea0:	20000008 	.word	0x20000008
 8004ea4:	2000000c 	.word	0x2000000c

08004ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b089      	sub	sp, #36	; 0x24
 8004eac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61fb      	str	r3, [r7, #28]
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eb6:	4b3e      	ldr	r3, [pc, #248]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 030c 	and.w	r3, r3, #12
 8004ebe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ec0:	4b3b      	ldr	r3, [pc, #236]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f003 0303 	and.w	r3, r3, #3
 8004ec8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <HAL_RCC_GetSysClockFreq+0x34>
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	2b0c      	cmp	r3, #12
 8004ed4:	d121      	bne.n	8004f1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d11e      	bne.n	8004f1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004edc:	4b34      	ldr	r3, [pc, #208]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0308 	and.w	r3, r3, #8
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d107      	bne.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ee8:	4b31      	ldr	r3, [pc, #196]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eee:	0a1b      	lsrs	r3, r3, #8
 8004ef0:	f003 030f 	and.w	r3, r3, #15
 8004ef4:	61fb      	str	r3, [r7, #28]
 8004ef6:	e005      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ef8:	4b2d      	ldr	r3, [pc, #180]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	091b      	lsrs	r3, r3, #4
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f04:	4a2b      	ldr	r2, [pc, #172]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10d      	bne.n	8004f30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f18:	e00a      	b.n	8004f30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d102      	bne.n	8004f26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f20:	4b25      	ldr	r3, [pc, #148]	; (8004fb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f22:	61bb      	str	r3, [r7, #24]
 8004f24:	e004      	b.n	8004f30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d101      	bne.n	8004f30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f2c:	4b23      	ldr	r3, [pc, #140]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x114>)
 8004f2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	2b0c      	cmp	r3, #12
 8004f34:	d134      	bne.n	8004fa0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f36:	4b1e      	ldr	r3, [pc, #120]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d003      	beq.n	8004f4e <HAL_RCC_GetSysClockFreq+0xa6>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b03      	cmp	r3, #3
 8004f4a:	d003      	beq.n	8004f54 <HAL_RCC_GetSysClockFreq+0xac>
 8004f4c:	e005      	b.n	8004f5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f4e:	4b1a      	ldr	r3, [pc, #104]	; (8004fb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f50:	617b      	str	r3, [r7, #20]
      break;
 8004f52:	e005      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f54:	4b19      	ldr	r3, [pc, #100]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x114>)
 8004f56:	617b      	str	r3, [r7, #20]
      break;
 8004f58:	e002      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	617b      	str	r3, [r7, #20]
      break;
 8004f5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f60:	4b13      	ldr	r3, [pc, #76]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	091b      	lsrs	r3, r3, #4
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f6e:	4b10      	ldr	r3, [pc, #64]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	0a1b      	lsrs	r3, r3, #8
 8004f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	fb02 f203 	mul.w	r2, r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f86:	4b0a      	ldr	r3, [pc, #40]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	0e5b      	lsrs	r3, r3, #25
 8004f8c:	f003 0303 	and.w	r3, r3, #3
 8004f90:	3301      	adds	r3, #1
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004fa0:	69bb      	ldr	r3, [r7, #24]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3724      	adds	r7, #36	; 0x24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	08007dd0 	.word	0x08007dd0
 8004fb8:	00f42400 	.word	0x00f42400
 8004fbc:	007a1200 	.word	0x007a1200

08004fc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fc4:	4b03      	ldr	r3, [pc, #12]	; (8004fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	20000008 	.word	0x20000008

08004fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004fdc:	f7ff fff0 	bl	8004fc0 <HAL_RCC_GetHCLKFreq>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	0a1b      	lsrs	r3, r3, #8
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	4904      	ldr	r1, [pc, #16]	; (8005000 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fee:	5ccb      	ldrb	r3, [r1, r3]
 8004ff0:	f003 031f 	and.w	r3, r3, #31
 8004ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40021000 	.word	0x40021000
 8005000:	08007dc8 	.word	0x08007dc8

08005004 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005008:	f7ff ffda 	bl	8004fc0 <HAL_RCC_GetHCLKFreq>
 800500c:	4602      	mov	r2, r0
 800500e:	4b06      	ldr	r3, [pc, #24]	; (8005028 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	0adb      	lsrs	r3, r3, #11
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	4904      	ldr	r1, [pc, #16]	; (800502c <HAL_RCC_GetPCLK2Freq+0x28>)
 800501a:	5ccb      	ldrb	r3, [r1, r3]
 800501c:	f003 031f 	and.w	r3, r3, #31
 8005020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005024:	4618      	mov	r0, r3
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40021000 	.word	0x40021000
 800502c:	08007dc8 	.word	0x08007dc8

08005030 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	220f      	movs	r2, #15
 800503e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005040:	4b12      	ldr	r3, [pc, #72]	; (800508c <HAL_RCC_GetClockConfig+0x5c>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f003 0203 	and.w	r2, r3, #3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800504c:	4b0f      	ldr	r3, [pc, #60]	; (800508c <HAL_RCC_GetClockConfig+0x5c>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005058:	4b0c      	ldr	r3, [pc, #48]	; (800508c <HAL_RCC_GetClockConfig+0x5c>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005064:	4b09      	ldr	r3, [pc, #36]	; (800508c <HAL_RCC_GetClockConfig+0x5c>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	08db      	lsrs	r3, r3, #3
 800506a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005072:	4b07      	ldr	r3, [pc, #28]	; (8005090 <HAL_RCC_GetClockConfig+0x60>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0207 	and.w	r2, r3, #7
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	601a      	str	r2, [r3, #0]
}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	40021000 	.word	0x40021000
 8005090:	40022000 	.word	0x40022000

08005094 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800509c:	2300      	movs	r3, #0
 800509e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80050a0:	4b2a      	ldr	r3, [pc, #168]	; (800514c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d003      	beq.n	80050b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80050ac:	f7fe fcf0 	bl	8003a90 <HAL_PWREx_GetVoltageRange>
 80050b0:	6178      	str	r0, [r7, #20]
 80050b2:	e014      	b.n	80050de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050b4:	4b25      	ldr	r3, [pc, #148]	; (800514c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b8:	4a24      	ldr	r2, [pc, #144]	; (800514c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050be:	6593      	str	r3, [r2, #88]	; 0x58
 80050c0:	4b22      	ldr	r3, [pc, #136]	; (800514c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050cc:	f7fe fce0 	bl	8003a90 <HAL_PWREx_GetVoltageRange>
 80050d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050d2:	4b1e      	ldr	r3, [pc, #120]	; (800514c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d6:	4a1d      	ldr	r2, [pc, #116]	; (800514c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050e4:	d10b      	bne.n	80050fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b80      	cmp	r3, #128	; 0x80
 80050ea:	d919      	bls.n	8005120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2ba0      	cmp	r3, #160	; 0xa0
 80050f0:	d902      	bls.n	80050f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050f2:	2302      	movs	r3, #2
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	e013      	b.n	8005120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050f8:	2301      	movs	r3, #1
 80050fa:	613b      	str	r3, [r7, #16]
 80050fc:	e010      	b.n	8005120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b80      	cmp	r3, #128	; 0x80
 8005102:	d902      	bls.n	800510a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005104:	2303      	movs	r3, #3
 8005106:	613b      	str	r3, [r7, #16]
 8005108:	e00a      	b.n	8005120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b80      	cmp	r3, #128	; 0x80
 800510e:	d102      	bne.n	8005116 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005110:	2302      	movs	r3, #2
 8005112:	613b      	str	r3, [r7, #16]
 8005114:	e004      	b.n	8005120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b70      	cmp	r3, #112	; 0x70
 800511a:	d101      	bne.n	8005120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800511c:	2301      	movs	r3, #1
 800511e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005120:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f023 0207 	bic.w	r2, r3, #7
 8005128:	4909      	ldr	r1, [pc, #36]	; (8005150 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005130:	4b07      	ldr	r3, [pc, #28]	; (8005150 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	429a      	cmp	r2, r3
 800513c:	d001      	beq.n	8005142 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e000      	b.n	8005144 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3718      	adds	r7, #24
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	40021000 	.word	0x40021000
 8005150:	40022000 	.word	0x40022000

08005154 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800515c:	2300      	movs	r3, #0
 800515e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005160:	2300      	movs	r3, #0
 8005162:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800516c:	2b00      	cmp	r3, #0
 800516e:	d041      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005174:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005178:	d02a      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800517a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800517e:	d824      	bhi.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005180:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005184:	d008      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005186:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800518a:	d81e      	bhi.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00a      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005190:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005194:	d010      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005196:	e018      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005198:	4b86      	ldr	r3, [pc, #536]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	4a85      	ldr	r2, [pc, #532]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800519e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051a4:	e015      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	3304      	adds	r3, #4
 80051aa:	2100      	movs	r1, #0
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 fabb 	bl	8005728 <RCCEx_PLLSAI1_Config>
 80051b2:	4603      	mov	r3, r0
 80051b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051b6:	e00c      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3320      	adds	r3, #32
 80051bc:	2100      	movs	r1, #0
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fba6 	bl	8005910 <RCCEx_PLLSAI2_Config>
 80051c4:	4603      	mov	r3, r0
 80051c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051c8:	e003      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	74fb      	strb	r3, [r7, #19]
      break;
 80051ce:	e000      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80051d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051d2:	7cfb      	ldrb	r3, [r7, #19]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10b      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051d8:	4b76      	ldr	r3, [pc, #472]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051e6:	4973      	ldr	r1, [pc, #460]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051ee:	e001      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f0:	7cfb      	ldrb	r3, [r7, #19]
 80051f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d041      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005204:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005208:	d02a      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800520a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800520e:	d824      	bhi.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005210:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005214:	d008      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005216:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800521a:	d81e      	bhi.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005224:	d010      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005226:	e018      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005228:	4b62      	ldr	r3, [pc, #392]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	4a61      	ldr	r2, [pc, #388]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800522e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005232:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005234:	e015      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3304      	adds	r3, #4
 800523a:	2100      	movs	r1, #0
 800523c:	4618      	mov	r0, r3
 800523e:	f000 fa73 	bl	8005728 <RCCEx_PLLSAI1_Config>
 8005242:	4603      	mov	r3, r0
 8005244:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005246:	e00c      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3320      	adds	r3, #32
 800524c:	2100      	movs	r1, #0
 800524e:	4618      	mov	r0, r3
 8005250:	f000 fb5e 	bl	8005910 <RCCEx_PLLSAI2_Config>
 8005254:	4603      	mov	r3, r0
 8005256:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005258:	e003      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	74fb      	strb	r3, [r7, #19]
      break;
 800525e:	e000      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005260:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005262:	7cfb      	ldrb	r3, [r7, #19]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10b      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005268:	4b52      	ldr	r3, [pc, #328]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800526a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005276:	494f      	ldr	r1, [pc, #316]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800527e:	e001      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005280:	7cfb      	ldrb	r3, [r7, #19]
 8005282:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 80a0 	beq.w	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005292:	2300      	movs	r3, #0
 8005294:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005296:	4b47      	ldr	r3, [pc, #284]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80052a6:	2300      	movs	r3, #0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00d      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ac:	4b41      	ldr	r3, [pc, #260]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b0:	4a40      	ldr	r2, [pc, #256]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b6:	6593      	str	r3, [r2, #88]	; 0x58
 80052b8:	4b3e      	ldr	r3, [pc, #248]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c0:	60bb      	str	r3, [r7, #8]
 80052c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052c4:	2301      	movs	r3, #1
 80052c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052c8:	4b3b      	ldr	r3, [pc, #236]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a3a      	ldr	r2, [pc, #232]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052d4:	f7fd fb06 	bl	80028e4 <HAL_GetTick>
 80052d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052da:	e009      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052dc:	f7fd fb02 	bl	80028e4 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d902      	bls.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	74fb      	strb	r3, [r7, #19]
        break;
 80052ee:	e005      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052f0:	4b31      	ldr	r3, [pc, #196]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0ef      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80052fc:	7cfb      	ldrb	r3, [r7, #19]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d15c      	bne.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005302:	4b2c      	ldr	r3, [pc, #176]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005308:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800530c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d01f      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	429a      	cmp	r2, r3
 800531e:	d019      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005320:	4b24      	ldr	r3, [pc, #144]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800532a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800532c:	4b21      	ldr	r3, [pc, #132]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800532e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005332:	4a20      	ldr	r2, [pc, #128]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800533c:	4b1d      	ldr	r3, [pc, #116]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800533e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005342:	4a1c      	ldr	r2, [pc, #112]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800534c:	4a19      	ldr	r2, [pc, #100]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d016      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535e:	f7fd fac1 	bl	80028e4 <HAL_GetTick>
 8005362:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005364:	e00b      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005366:	f7fd fabd 	bl	80028e4 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	f241 3288 	movw	r2, #5000	; 0x1388
 8005374:	4293      	cmp	r3, r2
 8005376:	d902      	bls.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	74fb      	strb	r3, [r7, #19]
            break;
 800537c:	e006      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800537e:	4b0d      	ldr	r3, [pc, #52]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0ec      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800538c:	7cfb      	ldrb	r3, [r7, #19]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10c      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005392:	4b08      	ldr	r3, [pc, #32]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005398:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053a2:	4904      	ldr	r1, [pc, #16]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80053aa:	e009      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053ac:	7cfb      	ldrb	r3, [r7, #19]
 80053ae:	74bb      	strb	r3, [r7, #18]
 80053b0:	e006      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80053b2:	bf00      	nop
 80053b4:	40021000 	.word	0x40021000
 80053b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053bc:	7cfb      	ldrb	r3, [r7, #19]
 80053be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053c0:	7c7b      	ldrb	r3, [r7, #17]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d105      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053c6:	4b9e      	ldr	r3, [pc, #632]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ca:	4a9d      	ldr	r2, [pc, #628]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00a      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053de:	4b98      	ldr	r3, [pc, #608]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e4:	f023 0203 	bic.w	r2, r3, #3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	4994      	ldr	r1, [pc, #592]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00a      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005400:	4b8f      	ldr	r3, [pc, #572]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005406:	f023 020c 	bic.w	r2, r3, #12
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540e:	498c      	ldr	r1, [pc, #560]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005410:	4313      	orrs	r3, r2
 8005412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00a      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005422:	4b87      	ldr	r3, [pc, #540]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005428:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005430:	4983      	ldr	r1, [pc, #524]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005432:	4313      	orrs	r3, r2
 8005434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00a      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005444:	4b7e      	ldr	r3, [pc, #504]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005452:	497b      	ldr	r1, [pc, #492]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005454:	4313      	orrs	r3, r2
 8005456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0310 	and.w	r3, r3, #16
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00a      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005466:	4b76      	ldr	r3, [pc, #472]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005474:	4972      	ldr	r1, [pc, #456]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0320 	and.w	r3, r3, #32
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00a      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005488:	4b6d      	ldr	r3, [pc, #436]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800548a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005496:	496a      	ldr	r1, [pc, #424]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005498:	4313      	orrs	r3, r2
 800549a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054aa:	4b65      	ldr	r3, [pc, #404]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b8:	4961      	ldr	r1, [pc, #388]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054cc:	4b5c      	ldr	r3, [pc, #368]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054da:	4959      	ldr	r1, [pc, #356]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054ee:	4b54      	ldr	r3, [pc, #336]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054fc:	4950      	ldr	r1, [pc, #320]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00a      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005510:	4b4b      	ldr	r3, [pc, #300]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005516:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551e:	4948      	ldr	r1, [pc, #288]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005520:	4313      	orrs	r3, r2
 8005522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00a      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005532:	4b43      	ldr	r3, [pc, #268]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005538:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005540:	493f      	ldr	r1, [pc, #252]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005542:	4313      	orrs	r3, r2
 8005544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d028      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005554:	4b3a      	ldr	r3, [pc, #232]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005562:	4937      	ldr	r1, [pc, #220]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005564:	4313      	orrs	r3, r2
 8005566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800556e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005572:	d106      	bne.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005574:	4b32      	ldr	r3, [pc, #200]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	4a31      	ldr	r2, [pc, #196]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800557a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800557e:	60d3      	str	r3, [r2, #12]
 8005580:	e011      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005586:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800558a:	d10c      	bne.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3304      	adds	r3, #4
 8005590:	2101      	movs	r1, #1
 8005592:	4618      	mov	r0, r3
 8005594:	f000 f8c8 	bl	8005728 <RCCEx_PLLSAI1_Config>
 8005598:	4603      	mov	r3, r0
 800559a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800559c:	7cfb      	ldrb	r3, [r7, #19]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80055a2:	7cfb      	ldrb	r3, [r7, #19]
 80055a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d028      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80055b2:	4b23      	ldr	r3, [pc, #140]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c0:	491f      	ldr	r1, [pc, #124]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055d0:	d106      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055d2:	4b1b      	ldr	r3, [pc, #108]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	4a1a      	ldr	r2, [pc, #104]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055dc:	60d3      	str	r3, [r2, #12]
 80055de:	e011      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055e8:	d10c      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3304      	adds	r3, #4
 80055ee:	2101      	movs	r1, #1
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 f899 	bl	8005728 <RCCEx_PLLSAI1_Config>
 80055f6:	4603      	mov	r3, r0
 80055f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055fa:	7cfb      	ldrb	r3, [r7, #19]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005600:	7cfb      	ldrb	r3, [r7, #19]
 8005602:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d02b      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005610:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005616:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800561e:	4908      	ldr	r1, [pc, #32]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005620:	4313      	orrs	r3, r2
 8005622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800562a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800562e:	d109      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005630:	4b03      	ldr	r3, [pc, #12]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	4a02      	ldr	r2, [pc, #8]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005636:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800563a:	60d3      	str	r3, [r2, #12]
 800563c:	e014      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800563e:	bf00      	nop
 8005640:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005648:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800564c:	d10c      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3304      	adds	r3, #4
 8005652:	2101      	movs	r1, #1
 8005654:	4618      	mov	r0, r3
 8005656:	f000 f867 	bl	8005728 <RCCEx_PLLSAI1_Config>
 800565a:	4603      	mov	r3, r0
 800565c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800565e:	7cfb      	ldrb	r3, [r7, #19]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005664:	7cfb      	ldrb	r3, [r7, #19]
 8005666:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d02f      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005674:	4b2b      	ldr	r3, [pc, #172]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005682:	4928      	ldr	r1, [pc, #160]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005684:	4313      	orrs	r3, r2
 8005686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800568e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005692:	d10d      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3304      	adds	r3, #4
 8005698:	2102      	movs	r1, #2
 800569a:	4618      	mov	r0, r3
 800569c:	f000 f844 	bl	8005728 <RCCEx_PLLSAI1_Config>
 80056a0:	4603      	mov	r3, r0
 80056a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056a4:	7cfb      	ldrb	r3, [r7, #19]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d014      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80056aa:	7cfb      	ldrb	r3, [r7, #19]
 80056ac:	74bb      	strb	r3, [r7, #18]
 80056ae:	e011      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056b8:	d10c      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3320      	adds	r3, #32
 80056be:	2102      	movs	r1, #2
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 f925 	bl	8005910 <RCCEx_PLLSAI2_Config>
 80056c6:	4603      	mov	r3, r0
 80056c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056ca:	7cfb      	ldrb	r3, [r7, #19]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80056d0:	7cfb      	ldrb	r3, [r7, #19]
 80056d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00a      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80056e0:	4b10      	ldr	r3, [pc, #64]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056ee:	490d      	ldr	r1, [pc, #52]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00b      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005702:	4b08      	ldr	r3, [pc, #32]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005708:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005712:	4904      	ldr	r1, [pc, #16]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800571a:	7cbb      	ldrb	r3, [r7, #18]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	40021000 	.word	0x40021000

08005728 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005736:	4b75      	ldr	r3, [pc, #468]	; (800590c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f003 0303 	and.w	r3, r3, #3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d018      	beq.n	8005774 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005742:	4b72      	ldr	r3, [pc, #456]	; (800590c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f003 0203 	and.w	r2, r3, #3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	429a      	cmp	r2, r3
 8005750:	d10d      	bne.n	800576e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
       ||
 8005756:	2b00      	cmp	r3, #0
 8005758:	d009      	beq.n	800576e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800575a:	4b6c      	ldr	r3, [pc, #432]	; (800590c <RCCEx_PLLSAI1_Config+0x1e4>)
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	091b      	lsrs	r3, r3, #4
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
       ||
 800576a:	429a      	cmp	r2, r3
 800576c:	d047      	beq.n	80057fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	73fb      	strb	r3, [r7, #15]
 8005772:	e044      	b.n	80057fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b03      	cmp	r3, #3
 800577a:	d018      	beq.n	80057ae <RCCEx_PLLSAI1_Config+0x86>
 800577c:	2b03      	cmp	r3, #3
 800577e:	d825      	bhi.n	80057cc <RCCEx_PLLSAI1_Config+0xa4>
 8005780:	2b01      	cmp	r3, #1
 8005782:	d002      	beq.n	800578a <RCCEx_PLLSAI1_Config+0x62>
 8005784:	2b02      	cmp	r3, #2
 8005786:	d009      	beq.n	800579c <RCCEx_PLLSAI1_Config+0x74>
 8005788:	e020      	b.n	80057cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800578a:	4b60      	ldr	r3, [pc, #384]	; (800590c <RCCEx_PLLSAI1_Config+0x1e4>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d11d      	bne.n	80057d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800579a:	e01a      	b.n	80057d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800579c:	4b5b      	ldr	r3, [pc, #364]	; (800590c <RCCEx_PLLSAI1_Config+0x1e4>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d116      	bne.n	80057d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057ac:	e013      	b.n	80057d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057ae:	4b57      	ldr	r3, [pc, #348]	; (800590c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10f      	bne.n	80057da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057ba:	4b54      	ldr	r3, [pc, #336]	; (800590c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d109      	bne.n	80057da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057ca:	e006      	b.n	80057da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	73fb      	strb	r3, [r7, #15]
      break;
 80057d0:	e004      	b.n	80057dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057d2:	bf00      	nop
 80057d4:	e002      	b.n	80057dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057d6:	bf00      	nop
 80057d8:	e000      	b.n	80057dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057da:	bf00      	nop
    }

    if(status == HAL_OK)
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10d      	bne.n	80057fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057e2:	4b4a      	ldr	r3, [pc, #296]	; (800590c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6819      	ldr	r1, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	430b      	orrs	r3, r1
 80057f8:	4944      	ldr	r1, [pc, #272]	; (800590c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d17d      	bne.n	8005900 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005804:	4b41      	ldr	r3, [pc, #260]	; (800590c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a40      	ldr	r2, [pc, #256]	; (800590c <RCCEx_PLLSAI1_Config+0x1e4>)
 800580a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800580e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005810:	f7fd f868 	bl	80028e4 <HAL_GetTick>
 8005814:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005816:	e009      	b.n	800582c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005818:	f7fd f864 	bl	80028e4 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b02      	cmp	r3, #2
 8005824:	d902      	bls.n	800582c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	73fb      	strb	r3, [r7, #15]
        break;
 800582a:	e005      	b.n	8005838 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800582c:	4b37      	ldr	r3, [pc, #220]	; (800590c <RCCEx_PLLSAI1_Config+0x1e4>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1ef      	bne.n	8005818 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005838:	7bfb      	ldrb	r3, [r7, #15]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d160      	bne.n	8005900 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d111      	bne.n	8005868 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005844:	4b31      	ldr	r3, [pc, #196]	; (800590c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800584c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6892      	ldr	r2, [r2, #8]
 8005854:	0211      	lsls	r1, r2, #8
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	68d2      	ldr	r2, [r2, #12]
 800585a:	0912      	lsrs	r2, r2, #4
 800585c:	0452      	lsls	r2, r2, #17
 800585e:	430a      	orrs	r2, r1
 8005860:	492a      	ldr	r1, [pc, #168]	; (800590c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005862:	4313      	orrs	r3, r2
 8005864:	610b      	str	r3, [r1, #16]
 8005866:	e027      	b.n	80058b8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d112      	bne.n	8005894 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800586e:	4b27      	ldr	r3, [pc, #156]	; (800590c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005876:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	6892      	ldr	r2, [r2, #8]
 800587e:	0211      	lsls	r1, r2, #8
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6912      	ldr	r2, [r2, #16]
 8005884:	0852      	lsrs	r2, r2, #1
 8005886:	3a01      	subs	r2, #1
 8005888:	0552      	lsls	r2, r2, #21
 800588a:	430a      	orrs	r2, r1
 800588c:	491f      	ldr	r1, [pc, #124]	; (800590c <RCCEx_PLLSAI1_Config+0x1e4>)
 800588e:	4313      	orrs	r3, r2
 8005890:	610b      	str	r3, [r1, #16]
 8005892:	e011      	b.n	80058b8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005894:	4b1d      	ldr	r3, [pc, #116]	; (800590c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800589c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6892      	ldr	r2, [r2, #8]
 80058a4:	0211      	lsls	r1, r2, #8
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6952      	ldr	r2, [r2, #20]
 80058aa:	0852      	lsrs	r2, r2, #1
 80058ac:	3a01      	subs	r2, #1
 80058ae:	0652      	lsls	r2, r2, #25
 80058b0:	430a      	orrs	r2, r1
 80058b2:	4916      	ldr	r1, [pc, #88]	; (800590c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80058b8:	4b14      	ldr	r3, [pc, #80]	; (800590c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a13      	ldr	r2, [pc, #76]	; (800590c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c4:	f7fd f80e 	bl	80028e4 <HAL_GetTick>
 80058c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058ca:	e009      	b.n	80058e0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058cc:	f7fd f80a 	bl	80028e4 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d902      	bls.n	80058e0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	73fb      	strb	r3, [r7, #15]
          break;
 80058de:	e005      	b.n	80058ec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058e0:	4b0a      	ldr	r3, [pc, #40]	; (800590c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0ef      	beq.n	80058cc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d106      	bne.n	8005900 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80058f2:	4b06      	ldr	r3, [pc, #24]	; (800590c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058f4:	691a      	ldr	r2, [r3, #16]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	4904      	ldr	r1, [pc, #16]	; (800590c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005900:	7bfb      	ldrb	r3, [r7, #15]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	40021000 	.word	0x40021000

08005910 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800591e:	4b6a      	ldr	r3, [pc, #424]	; (8005ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d018      	beq.n	800595c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800592a:	4b67      	ldr	r3, [pc, #412]	; (8005ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f003 0203 	and.w	r2, r3, #3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d10d      	bne.n	8005956 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
       ||
 800593e:	2b00      	cmp	r3, #0
 8005940:	d009      	beq.n	8005956 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005942:	4b61      	ldr	r3, [pc, #388]	; (8005ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	091b      	lsrs	r3, r3, #4
 8005948:	f003 0307 	and.w	r3, r3, #7
 800594c:	1c5a      	adds	r2, r3, #1
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
       ||
 8005952:	429a      	cmp	r2, r3
 8005954:	d047      	beq.n	80059e6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	73fb      	strb	r3, [r7, #15]
 800595a:	e044      	b.n	80059e6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b03      	cmp	r3, #3
 8005962:	d018      	beq.n	8005996 <RCCEx_PLLSAI2_Config+0x86>
 8005964:	2b03      	cmp	r3, #3
 8005966:	d825      	bhi.n	80059b4 <RCCEx_PLLSAI2_Config+0xa4>
 8005968:	2b01      	cmp	r3, #1
 800596a:	d002      	beq.n	8005972 <RCCEx_PLLSAI2_Config+0x62>
 800596c:	2b02      	cmp	r3, #2
 800596e:	d009      	beq.n	8005984 <RCCEx_PLLSAI2_Config+0x74>
 8005970:	e020      	b.n	80059b4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005972:	4b55      	ldr	r3, [pc, #340]	; (8005ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d11d      	bne.n	80059ba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005982:	e01a      	b.n	80059ba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005984:	4b50      	ldr	r3, [pc, #320]	; (8005ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800598c:	2b00      	cmp	r3, #0
 800598e:	d116      	bne.n	80059be <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005994:	e013      	b.n	80059be <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005996:	4b4c      	ldr	r3, [pc, #304]	; (8005ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10f      	bne.n	80059c2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059a2:	4b49      	ldr	r3, [pc, #292]	; (8005ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d109      	bne.n	80059c2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059b2:	e006      	b.n	80059c2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	73fb      	strb	r3, [r7, #15]
      break;
 80059b8:	e004      	b.n	80059c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059ba:	bf00      	nop
 80059bc:	e002      	b.n	80059c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059be:	bf00      	nop
 80059c0:	e000      	b.n	80059c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10d      	bne.n	80059e6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80059ca:	4b3f      	ldr	r3, [pc, #252]	; (8005ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6819      	ldr	r1, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	3b01      	subs	r3, #1
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	430b      	orrs	r3, r1
 80059e0:	4939      	ldr	r1, [pc, #228]	; (8005ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d167      	bne.n	8005abc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80059ec:	4b36      	ldr	r3, [pc, #216]	; (8005ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a35      	ldr	r2, [pc, #212]	; (8005ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059f8:	f7fc ff74 	bl	80028e4 <HAL_GetTick>
 80059fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059fe:	e009      	b.n	8005a14 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a00:	f7fc ff70 	bl	80028e4 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d902      	bls.n	8005a14 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	73fb      	strb	r3, [r7, #15]
        break;
 8005a12:	e005      	b.n	8005a20 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a14:	4b2c      	ldr	r3, [pc, #176]	; (8005ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1ef      	bne.n	8005a00 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d14a      	bne.n	8005abc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d111      	bne.n	8005a50 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a2c:	4b26      	ldr	r3, [pc, #152]	; (8005ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6892      	ldr	r2, [r2, #8]
 8005a3c:	0211      	lsls	r1, r2, #8
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	68d2      	ldr	r2, [r2, #12]
 8005a42:	0912      	lsrs	r2, r2, #4
 8005a44:	0452      	lsls	r2, r2, #17
 8005a46:	430a      	orrs	r2, r1
 8005a48:	491f      	ldr	r1, [pc, #124]	; (8005ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	614b      	str	r3, [r1, #20]
 8005a4e:	e011      	b.n	8005a74 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a50:	4b1d      	ldr	r3, [pc, #116]	; (8005ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	6892      	ldr	r2, [r2, #8]
 8005a60:	0211      	lsls	r1, r2, #8
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	6912      	ldr	r2, [r2, #16]
 8005a66:	0852      	lsrs	r2, r2, #1
 8005a68:	3a01      	subs	r2, #1
 8005a6a:	0652      	lsls	r2, r2, #25
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	4916      	ldr	r1, [pc, #88]	; (8005ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a74:	4b14      	ldr	r3, [pc, #80]	; (8005ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a13      	ldr	r2, [pc, #76]	; (8005ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a80:	f7fc ff30 	bl	80028e4 <HAL_GetTick>
 8005a84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a86:	e009      	b.n	8005a9c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a88:	f7fc ff2c 	bl	80028e4 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d902      	bls.n	8005a9c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	73fb      	strb	r3, [r7, #15]
          break;
 8005a9a:	e005      	b.n	8005aa8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0ef      	beq.n	8005a88 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d106      	bne.n	8005abc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005aae:	4b06      	ldr	r3, [pc, #24]	; (8005ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ab0:	695a      	ldr	r2, [r3, #20]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	4904      	ldr	r1, [pc, #16]	; (8005ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	40021000 	.word	0x40021000

08005acc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e049      	b.n	8005b72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d106      	bne.n	8005af8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7fc fc96 	bl	8002424 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	3304      	adds	r3, #4
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	f000 fab4 	bl	8006078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
	...

08005b7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d001      	beq.n	8005b94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e04f      	b.n	8005c34 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0201 	orr.w	r2, r2, #1
 8005baa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a23      	ldr	r2, [pc, #140]	; (8005c40 <HAL_TIM_Base_Start_IT+0xc4>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d01d      	beq.n	8005bf2 <HAL_TIM_Base_Start_IT+0x76>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bbe:	d018      	beq.n	8005bf2 <HAL_TIM_Base_Start_IT+0x76>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a1f      	ldr	r2, [pc, #124]	; (8005c44 <HAL_TIM_Base_Start_IT+0xc8>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d013      	beq.n	8005bf2 <HAL_TIM_Base_Start_IT+0x76>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a1e      	ldr	r2, [pc, #120]	; (8005c48 <HAL_TIM_Base_Start_IT+0xcc>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d00e      	beq.n	8005bf2 <HAL_TIM_Base_Start_IT+0x76>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a1c      	ldr	r2, [pc, #112]	; (8005c4c <HAL_TIM_Base_Start_IT+0xd0>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d009      	beq.n	8005bf2 <HAL_TIM_Base_Start_IT+0x76>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a1b      	ldr	r2, [pc, #108]	; (8005c50 <HAL_TIM_Base_Start_IT+0xd4>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d004      	beq.n	8005bf2 <HAL_TIM_Base_Start_IT+0x76>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a19      	ldr	r2, [pc, #100]	; (8005c54 <HAL_TIM_Base_Start_IT+0xd8>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d115      	bne.n	8005c1e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	4b17      	ldr	r3, [pc, #92]	; (8005c58 <HAL_TIM_Base_Start_IT+0xdc>)
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b06      	cmp	r3, #6
 8005c02:	d015      	beq.n	8005c30 <HAL_TIM_Base_Start_IT+0xb4>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c0a:	d011      	beq.n	8005c30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0201 	orr.w	r2, r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c1c:	e008      	b.n	8005c30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f042 0201 	orr.w	r2, r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	e000      	b.n	8005c32 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	40012c00 	.word	0x40012c00
 8005c44:	40000400 	.word	0x40000400
 8005c48:	40000800 	.word	0x40000800
 8005c4c:	40000c00 	.word	0x40000c00
 8005c50:	40013400 	.word	0x40013400
 8005c54:	40014000 	.word	0x40014000
 8005c58:	00010007 	.word	0x00010007

08005c5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d122      	bne.n	8005cb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d11b      	bne.n	8005cb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f06f 0202 	mvn.w	r2, #2
 8005c88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	f003 0303 	and.w	r3, r3, #3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f9cb 	bl	800603a <HAL_TIM_IC_CaptureCallback>
 8005ca4:	e005      	b.n	8005cb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f9bd 	bl	8006026 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f9ce 	bl	800604e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	f003 0304 	and.w	r3, r3, #4
 8005cc2:	2b04      	cmp	r3, #4
 8005cc4:	d122      	bne.n	8005d0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f003 0304 	and.w	r3, r3, #4
 8005cd0:	2b04      	cmp	r3, #4
 8005cd2:	d11b      	bne.n	8005d0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f06f 0204 	mvn.w	r2, #4
 8005cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f9a1 	bl	800603a <HAL_TIM_IC_CaptureCallback>
 8005cf8:	e005      	b.n	8005d06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f993 	bl	8006026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f9a4 	bl	800604e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	f003 0308 	and.w	r3, r3, #8
 8005d16:	2b08      	cmp	r3, #8
 8005d18:	d122      	bne.n	8005d60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	f003 0308 	and.w	r3, r3, #8
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d11b      	bne.n	8005d60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f06f 0208 	mvn.w	r2, #8
 8005d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2204      	movs	r2, #4
 8005d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	f003 0303 	and.w	r3, r3, #3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f977 	bl	800603a <HAL_TIM_IC_CaptureCallback>
 8005d4c:	e005      	b.n	8005d5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f969 	bl	8006026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f97a 	bl	800604e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f003 0310 	and.w	r3, r3, #16
 8005d6a:	2b10      	cmp	r3, #16
 8005d6c:	d122      	bne.n	8005db4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f003 0310 	and.w	r3, r3, #16
 8005d78:	2b10      	cmp	r3, #16
 8005d7a:	d11b      	bne.n	8005db4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f06f 0210 	mvn.w	r2, #16
 8005d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2208      	movs	r2, #8
 8005d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f94d 	bl	800603a <HAL_TIM_IC_CaptureCallback>
 8005da0:	e005      	b.n	8005dae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f93f 	bl	8006026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 f950 	bl	800604e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d10e      	bne.n	8005de0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d107      	bne.n	8005de0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f06f 0201 	mvn.w	r2, #1
 8005dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7fb fe02 	bl	80019e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dea:	2b80      	cmp	r3, #128	; 0x80
 8005dec:	d10e      	bne.n	8005e0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df8:	2b80      	cmp	r3, #128	; 0x80
 8005dfa:	d107      	bne.n	8005e0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fafc 	bl	8006404 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e1a:	d10e      	bne.n	8005e3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e26:	2b80      	cmp	r3, #128	; 0x80
 8005e28:	d107      	bne.n	8005e3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 faef 	bl	8006418 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e44:	2b40      	cmp	r3, #64	; 0x40
 8005e46:	d10e      	bne.n	8005e66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e52:	2b40      	cmp	r3, #64	; 0x40
 8005e54:	d107      	bne.n	8005e66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f8fe 	bl	8006062 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	f003 0320 	and.w	r3, r3, #32
 8005e70:	2b20      	cmp	r3, #32
 8005e72:	d10e      	bne.n	8005e92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f003 0320 	and.w	r3, r3, #32
 8005e7e:	2b20      	cmp	r3, #32
 8005e80:	d107      	bne.n	8005e92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f06f 0220 	mvn.w	r2, #32
 8005e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 faaf 	bl	80063f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e92:	bf00      	nop
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d101      	bne.n	8005eb2 <HAL_TIM_ConfigClockSource+0x18>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	e0b5      	b.n	800601e <HAL_TIM_ConfigClockSource+0x184>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ed0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ed4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005edc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eee:	d03e      	beq.n	8005f6e <HAL_TIM_ConfigClockSource+0xd4>
 8005ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ef4:	f200 8087 	bhi.w	8006006 <HAL_TIM_ConfigClockSource+0x16c>
 8005ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005efc:	f000 8085 	beq.w	800600a <HAL_TIM_ConfigClockSource+0x170>
 8005f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f04:	d87f      	bhi.n	8006006 <HAL_TIM_ConfigClockSource+0x16c>
 8005f06:	2b70      	cmp	r3, #112	; 0x70
 8005f08:	d01a      	beq.n	8005f40 <HAL_TIM_ConfigClockSource+0xa6>
 8005f0a:	2b70      	cmp	r3, #112	; 0x70
 8005f0c:	d87b      	bhi.n	8006006 <HAL_TIM_ConfigClockSource+0x16c>
 8005f0e:	2b60      	cmp	r3, #96	; 0x60
 8005f10:	d050      	beq.n	8005fb4 <HAL_TIM_ConfigClockSource+0x11a>
 8005f12:	2b60      	cmp	r3, #96	; 0x60
 8005f14:	d877      	bhi.n	8006006 <HAL_TIM_ConfigClockSource+0x16c>
 8005f16:	2b50      	cmp	r3, #80	; 0x50
 8005f18:	d03c      	beq.n	8005f94 <HAL_TIM_ConfigClockSource+0xfa>
 8005f1a:	2b50      	cmp	r3, #80	; 0x50
 8005f1c:	d873      	bhi.n	8006006 <HAL_TIM_ConfigClockSource+0x16c>
 8005f1e:	2b40      	cmp	r3, #64	; 0x40
 8005f20:	d058      	beq.n	8005fd4 <HAL_TIM_ConfigClockSource+0x13a>
 8005f22:	2b40      	cmp	r3, #64	; 0x40
 8005f24:	d86f      	bhi.n	8006006 <HAL_TIM_ConfigClockSource+0x16c>
 8005f26:	2b30      	cmp	r3, #48	; 0x30
 8005f28:	d064      	beq.n	8005ff4 <HAL_TIM_ConfigClockSource+0x15a>
 8005f2a:	2b30      	cmp	r3, #48	; 0x30
 8005f2c:	d86b      	bhi.n	8006006 <HAL_TIM_ConfigClockSource+0x16c>
 8005f2e:	2b20      	cmp	r3, #32
 8005f30:	d060      	beq.n	8005ff4 <HAL_TIM_ConfigClockSource+0x15a>
 8005f32:	2b20      	cmp	r3, #32
 8005f34:	d867      	bhi.n	8006006 <HAL_TIM_ConfigClockSource+0x16c>
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d05c      	beq.n	8005ff4 <HAL_TIM_ConfigClockSource+0x15a>
 8005f3a:	2b10      	cmp	r3, #16
 8005f3c:	d05a      	beq.n	8005ff4 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005f3e:	e062      	b.n	8006006 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6818      	ldr	r0, [r3, #0]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	6899      	ldr	r1, [r3, #8]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f000 f9a6 	bl	80062a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f62:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	609a      	str	r2, [r3, #8]
      break;
 8005f6c:	e04e      	b.n	800600c <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6818      	ldr	r0, [r3, #0]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	6899      	ldr	r1, [r3, #8]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	f000 f98f 	bl	80062a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f90:	609a      	str	r2, [r3, #8]
      break;
 8005f92:	e03b      	b.n	800600c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6818      	ldr	r0, [r3, #0]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	6859      	ldr	r1, [r3, #4]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	f000 f903 	bl	80061ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2150      	movs	r1, #80	; 0x50
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 f95c 	bl	800626a <TIM_ITRx_SetConfig>
      break;
 8005fb2:	e02b      	b.n	800600c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6818      	ldr	r0, [r3, #0]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	6859      	ldr	r1, [r3, #4]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	f000 f922 	bl	800620a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2160      	movs	r1, #96	; 0x60
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f000 f94c 	bl	800626a <TIM_ITRx_SetConfig>
      break;
 8005fd2:	e01b      	b.n	800600c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6818      	ldr	r0, [r3, #0]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	6859      	ldr	r1, [r3, #4]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	f000 f8e3 	bl	80061ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2140      	movs	r1, #64	; 0x40
 8005fec:	4618      	mov	r0, r3
 8005fee:	f000 f93c 	bl	800626a <TIM_ITRx_SetConfig>
      break;
 8005ff2:	e00b      	b.n	800600c <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	4610      	mov	r0, r2
 8006000:	f000 f933 	bl	800626a <TIM_ITRx_SetConfig>
        break;
 8006004:	e002      	b.n	800600c <HAL_TIM_ConfigClockSource+0x172>
      break;
 8006006:	bf00      	nop
 8006008:	e000      	b.n	800600c <HAL_TIM_ConfigClockSource+0x172>
      break;
 800600a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800602e:	bf00      	nop
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006042:	bf00      	nop
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800604e:	b480      	push	{r7}
 8006050:	b083      	sub	sp, #12
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800606a:	bf00      	nop
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
	...

08006078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a40      	ldr	r2, [pc, #256]	; (800618c <TIM_Base_SetConfig+0x114>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d013      	beq.n	80060b8 <TIM_Base_SetConfig+0x40>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006096:	d00f      	beq.n	80060b8 <TIM_Base_SetConfig+0x40>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a3d      	ldr	r2, [pc, #244]	; (8006190 <TIM_Base_SetConfig+0x118>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d00b      	beq.n	80060b8 <TIM_Base_SetConfig+0x40>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a3c      	ldr	r2, [pc, #240]	; (8006194 <TIM_Base_SetConfig+0x11c>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d007      	beq.n	80060b8 <TIM_Base_SetConfig+0x40>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a3b      	ldr	r2, [pc, #236]	; (8006198 <TIM_Base_SetConfig+0x120>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d003      	beq.n	80060b8 <TIM_Base_SetConfig+0x40>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a3a      	ldr	r2, [pc, #232]	; (800619c <TIM_Base_SetConfig+0x124>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d108      	bne.n	80060ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a2f      	ldr	r2, [pc, #188]	; (800618c <TIM_Base_SetConfig+0x114>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d01f      	beq.n	8006112 <TIM_Base_SetConfig+0x9a>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d8:	d01b      	beq.n	8006112 <TIM_Base_SetConfig+0x9a>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a2c      	ldr	r2, [pc, #176]	; (8006190 <TIM_Base_SetConfig+0x118>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d017      	beq.n	8006112 <TIM_Base_SetConfig+0x9a>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a2b      	ldr	r2, [pc, #172]	; (8006194 <TIM_Base_SetConfig+0x11c>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d013      	beq.n	8006112 <TIM_Base_SetConfig+0x9a>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a2a      	ldr	r2, [pc, #168]	; (8006198 <TIM_Base_SetConfig+0x120>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d00f      	beq.n	8006112 <TIM_Base_SetConfig+0x9a>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a29      	ldr	r2, [pc, #164]	; (800619c <TIM_Base_SetConfig+0x124>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d00b      	beq.n	8006112 <TIM_Base_SetConfig+0x9a>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a28      	ldr	r2, [pc, #160]	; (80061a0 <TIM_Base_SetConfig+0x128>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d007      	beq.n	8006112 <TIM_Base_SetConfig+0x9a>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a27      	ldr	r2, [pc, #156]	; (80061a4 <TIM_Base_SetConfig+0x12c>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d003      	beq.n	8006112 <TIM_Base_SetConfig+0x9a>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a26      	ldr	r2, [pc, #152]	; (80061a8 <TIM_Base_SetConfig+0x130>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d108      	bne.n	8006124 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	4313      	orrs	r3, r2
 8006122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a10      	ldr	r2, [pc, #64]	; (800618c <TIM_Base_SetConfig+0x114>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d00f      	beq.n	8006170 <TIM_Base_SetConfig+0xf8>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a12      	ldr	r2, [pc, #72]	; (800619c <TIM_Base_SetConfig+0x124>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d00b      	beq.n	8006170 <TIM_Base_SetConfig+0xf8>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a11      	ldr	r2, [pc, #68]	; (80061a0 <TIM_Base_SetConfig+0x128>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d007      	beq.n	8006170 <TIM_Base_SetConfig+0xf8>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a10      	ldr	r2, [pc, #64]	; (80061a4 <TIM_Base_SetConfig+0x12c>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d003      	beq.n	8006170 <TIM_Base_SetConfig+0xf8>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a0f      	ldr	r2, [pc, #60]	; (80061a8 <TIM_Base_SetConfig+0x130>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d103      	bne.n	8006178 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	691a      	ldr	r2, [r3, #16]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	615a      	str	r2, [r3, #20]
}
 800617e:	bf00      	nop
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	40012c00 	.word	0x40012c00
 8006190:	40000400 	.word	0x40000400
 8006194:	40000800 	.word	0x40000800
 8006198:	40000c00 	.word	0x40000c00
 800619c:	40013400 	.word	0x40013400
 80061a0:	40014000 	.word	0x40014000
 80061a4:	40014400 	.word	0x40014400
 80061a8:	40014800 	.word	0x40014800

080061ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	f023 0201 	bic.w	r2, r3, #1
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	4313      	orrs	r3, r2
 80061e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f023 030a 	bic.w	r3, r3, #10
 80061e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	621a      	str	r2, [r3, #32]
}
 80061fe:	bf00      	nop
 8006200:	371c      	adds	r7, #28
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800620a:	b480      	push	{r7}
 800620c:	b087      	sub	sp, #28
 800620e:	af00      	add	r7, sp, #0
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	f023 0210 	bic.w	r2, r3, #16
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006234:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	031b      	lsls	r3, r3, #12
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	4313      	orrs	r3, r2
 800623e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006246:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	011b      	lsls	r3, r3, #4
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	4313      	orrs	r3, r2
 8006250:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	621a      	str	r2, [r3, #32]
}
 800625e:	bf00      	nop
 8006260:	371c      	adds	r7, #28
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800626a:	b480      	push	{r7}
 800626c:	b085      	sub	sp, #20
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006280:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4313      	orrs	r3, r2
 8006288:	f043 0307 	orr.w	r3, r3, #7
 800628c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	609a      	str	r2, [r3, #8]
}
 8006294:	bf00      	nop
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b087      	sub	sp, #28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	021a      	lsls	r2, r3, #8
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	431a      	orrs	r2, r3
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	609a      	str	r2, [r3, #8]
}
 80062d4:	bf00      	nop
 80062d6:	371c      	adds	r7, #28
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d101      	bne.n	80062f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062f4:	2302      	movs	r3, #2
 80062f6:	e068      	b.n	80063ca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2202      	movs	r2, #2
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a2e      	ldr	r2, [pc, #184]	; (80063d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d004      	beq.n	800632c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a2d      	ldr	r2, [pc, #180]	; (80063dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d108      	bne.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006332:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006344:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	4313      	orrs	r3, r2
 800634e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a1e      	ldr	r2, [pc, #120]	; (80063d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d01d      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800636a:	d018      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a1b      	ldr	r2, [pc, #108]	; (80063e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d013      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a1a      	ldr	r2, [pc, #104]	; (80063e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d00e      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a18      	ldr	r2, [pc, #96]	; (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d009      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a13      	ldr	r2, [pc, #76]	; (80063dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d004      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a14      	ldr	r2, [pc, #80]	; (80063ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d10c      	bne.n	80063b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	40012c00 	.word	0x40012c00
 80063dc:	40013400 	.word	0x40013400
 80063e0:	40000400 	.word	0x40000400
 80063e4:	40000800 	.word	0x40000800
 80063e8:	40000c00 	.word	0x40000c00
 80063ec:	40014000 	.word	0x40014000

080063f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e040      	b.n	80064c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006442:	2b00      	cmp	r3, #0
 8006444:	d106      	bne.n	8006454 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7fc f806 	bl	8002460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2224      	movs	r2, #36	; 0x24
 8006458:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f022 0201 	bic.w	r2, r2, #1
 8006468:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f82c 	bl	80064c8 <UART_SetConfig>
 8006470:	4603      	mov	r3, r0
 8006472:	2b01      	cmp	r3, #1
 8006474:	d101      	bne.n	800647a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e022      	b.n	80064c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647e:	2b00      	cmp	r3, #0
 8006480:	d002      	beq.n	8006488 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 faaa 	bl	80069dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006496:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689a      	ldr	r2, [r3, #8]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0201 	orr.w	r2, r2, #1
 80064b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fb31 	bl	8006b20 <UART_CheckIdleState>
 80064be:	4603      	mov	r3, r0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064c8:	b5b0      	push	{r4, r5, r7, lr}
 80064ca:	b088      	sub	sp, #32
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	431a      	orrs	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	69db      	ldr	r3, [r3, #28]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	4bad      	ldr	r3, [pc, #692]	; (80067a8 <UART_SetConfig+0x2e0>)
 80064f4:	4013      	ands	r3, r2
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	6812      	ldr	r2, [r2, #0]
 80064fa:	69f9      	ldr	r1, [r7, #28]
 80064fc:	430b      	orrs	r3, r1
 80064fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68da      	ldr	r2, [r3, #12]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4aa2      	ldr	r2, [pc, #648]	; (80067ac <UART_SetConfig+0x2e4>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d004      	beq.n	8006530 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	69fa      	ldr	r2, [r7, #28]
 800652c:	4313      	orrs	r3, r2
 800652e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	69fa      	ldr	r2, [r7, #28]
 8006540:	430a      	orrs	r2, r1
 8006542:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a99      	ldr	r2, [pc, #612]	; (80067b0 <UART_SetConfig+0x2e8>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d121      	bne.n	8006592 <UART_SetConfig+0xca>
 800654e:	4b99      	ldr	r3, [pc, #612]	; (80067b4 <UART_SetConfig+0x2ec>)
 8006550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006554:	f003 0303 	and.w	r3, r3, #3
 8006558:	2b03      	cmp	r3, #3
 800655a:	d817      	bhi.n	800658c <UART_SetConfig+0xc4>
 800655c:	a201      	add	r2, pc, #4	; (adr r2, 8006564 <UART_SetConfig+0x9c>)
 800655e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006562:	bf00      	nop
 8006564:	08006575 	.word	0x08006575
 8006568:	08006581 	.word	0x08006581
 800656c:	0800657b 	.word	0x0800657b
 8006570:	08006587 	.word	0x08006587
 8006574:	2301      	movs	r3, #1
 8006576:	76fb      	strb	r3, [r7, #27]
 8006578:	e0e7      	b.n	800674a <UART_SetConfig+0x282>
 800657a:	2302      	movs	r3, #2
 800657c:	76fb      	strb	r3, [r7, #27]
 800657e:	e0e4      	b.n	800674a <UART_SetConfig+0x282>
 8006580:	2304      	movs	r3, #4
 8006582:	76fb      	strb	r3, [r7, #27]
 8006584:	e0e1      	b.n	800674a <UART_SetConfig+0x282>
 8006586:	2308      	movs	r3, #8
 8006588:	76fb      	strb	r3, [r7, #27]
 800658a:	e0de      	b.n	800674a <UART_SetConfig+0x282>
 800658c:	2310      	movs	r3, #16
 800658e:	76fb      	strb	r3, [r7, #27]
 8006590:	e0db      	b.n	800674a <UART_SetConfig+0x282>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a88      	ldr	r2, [pc, #544]	; (80067b8 <UART_SetConfig+0x2f0>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d132      	bne.n	8006602 <UART_SetConfig+0x13a>
 800659c:	4b85      	ldr	r3, [pc, #532]	; (80067b4 <UART_SetConfig+0x2ec>)
 800659e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a2:	f003 030c 	and.w	r3, r3, #12
 80065a6:	2b0c      	cmp	r3, #12
 80065a8:	d828      	bhi.n	80065fc <UART_SetConfig+0x134>
 80065aa:	a201      	add	r2, pc, #4	; (adr r2, 80065b0 <UART_SetConfig+0xe8>)
 80065ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b0:	080065e5 	.word	0x080065e5
 80065b4:	080065fd 	.word	0x080065fd
 80065b8:	080065fd 	.word	0x080065fd
 80065bc:	080065fd 	.word	0x080065fd
 80065c0:	080065f1 	.word	0x080065f1
 80065c4:	080065fd 	.word	0x080065fd
 80065c8:	080065fd 	.word	0x080065fd
 80065cc:	080065fd 	.word	0x080065fd
 80065d0:	080065eb 	.word	0x080065eb
 80065d4:	080065fd 	.word	0x080065fd
 80065d8:	080065fd 	.word	0x080065fd
 80065dc:	080065fd 	.word	0x080065fd
 80065e0:	080065f7 	.word	0x080065f7
 80065e4:	2300      	movs	r3, #0
 80065e6:	76fb      	strb	r3, [r7, #27]
 80065e8:	e0af      	b.n	800674a <UART_SetConfig+0x282>
 80065ea:	2302      	movs	r3, #2
 80065ec:	76fb      	strb	r3, [r7, #27]
 80065ee:	e0ac      	b.n	800674a <UART_SetConfig+0x282>
 80065f0:	2304      	movs	r3, #4
 80065f2:	76fb      	strb	r3, [r7, #27]
 80065f4:	e0a9      	b.n	800674a <UART_SetConfig+0x282>
 80065f6:	2308      	movs	r3, #8
 80065f8:	76fb      	strb	r3, [r7, #27]
 80065fa:	e0a6      	b.n	800674a <UART_SetConfig+0x282>
 80065fc:	2310      	movs	r3, #16
 80065fe:	76fb      	strb	r3, [r7, #27]
 8006600:	e0a3      	b.n	800674a <UART_SetConfig+0x282>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a6d      	ldr	r2, [pc, #436]	; (80067bc <UART_SetConfig+0x2f4>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d120      	bne.n	800664e <UART_SetConfig+0x186>
 800660c:	4b69      	ldr	r3, [pc, #420]	; (80067b4 <UART_SetConfig+0x2ec>)
 800660e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006612:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006616:	2b30      	cmp	r3, #48	; 0x30
 8006618:	d013      	beq.n	8006642 <UART_SetConfig+0x17a>
 800661a:	2b30      	cmp	r3, #48	; 0x30
 800661c:	d814      	bhi.n	8006648 <UART_SetConfig+0x180>
 800661e:	2b20      	cmp	r3, #32
 8006620:	d009      	beq.n	8006636 <UART_SetConfig+0x16e>
 8006622:	2b20      	cmp	r3, #32
 8006624:	d810      	bhi.n	8006648 <UART_SetConfig+0x180>
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <UART_SetConfig+0x168>
 800662a:	2b10      	cmp	r3, #16
 800662c:	d006      	beq.n	800663c <UART_SetConfig+0x174>
 800662e:	e00b      	b.n	8006648 <UART_SetConfig+0x180>
 8006630:	2300      	movs	r3, #0
 8006632:	76fb      	strb	r3, [r7, #27]
 8006634:	e089      	b.n	800674a <UART_SetConfig+0x282>
 8006636:	2302      	movs	r3, #2
 8006638:	76fb      	strb	r3, [r7, #27]
 800663a:	e086      	b.n	800674a <UART_SetConfig+0x282>
 800663c:	2304      	movs	r3, #4
 800663e:	76fb      	strb	r3, [r7, #27]
 8006640:	e083      	b.n	800674a <UART_SetConfig+0x282>
 8006642:	2308      	movs	r3, #8
 8006644:	76fb      	strb	r3, [r7, #27]
 8006646:	e080      	b.n	800674a <UART_SetConfig+0x282>
 8006648:	2310      	movs	r3, #16
 800664a:	76fb      	strb	r3, [r7, #27]
 800664c:	e07d      	b.n	800674a <UART_SetConfig+0x282>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a5b      	ldr	r2, [pc, #364]	; (80067c0 <UART_SetConfig+0x2f8>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d120      	bne.n	800669a <UART_SetConfig+0x1d2>
 8006658:	4b56      	ldr	r3, [pc, #344]	; (80067b4 <UART_SetConfig+0x2ec>)
 800665a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800665e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006662:	2bc0      	cmp	r3, #192	; 0xc0
 8006664:	d013      	beq.n	800668e <UART_SetConfig+0x1c6>
 8006666:	2bc0      	cmp	r3, #192	; 0xc0
 8006668:	d814      	bhi.n	8006694 <UART_SetConfig+0x1cc>
 800666a:	2b80      	cmp	r3, #128	; 0x80
 800666c:	d009      	beq.n	8006682 <UART_SetConfig+0x1ba>
 800666e:	2b80      	cmp	r3, #128	; 0x80
 8006670:	d810      	bhi.n	8006694 <UART_SetConfig+0x1cc>
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <UART_SetConfig+0x1b4>
 8006676:	2b40      	cmp	r3, #64	; 0x40
 8006678:	d006      	beq.n	8006688 <UART_SetConfig+0x1c0>
 800667a:	e00b      	b.n	8006694 <UART_SetConfig+0x1cc>
 800667c:	2300      	movs	r3, #0
 800667e:	76fb      	strb	r3, [r7, #27]
 8006680:	e063      	b.n	800674a <UART_SetConfig+0x282>
 8006682:	2302      	movs	r3, #2
 8006684:	76fb      	strb	r3, [r7, #27]
 8006686:	e060      	b.n	800674a <UART_SetConfig+0x282>
 8006688:	2304      	movs	r3, #4
 800668a:	76fb      	strb	r3, [r7, #27]
 800668c:	e05d      	b.n	800674a <UART_SetConfig+0x282>
 800668e:	2308      	movs	r3, #8
 8006690:	76fb      	strb	r3, [r7, #27]
 8006692:	e05a      	b.n	800674a <UART_SetConfig+0x282>
 8006694:	2310      	movs	r3, #16
 8006696:	76fb      	strb	r3, [r7, #27]
 8006698:	e057      	b.n	800674a <UART_SetConfig+0x282>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a49      	ldr	r2, [pc, #292]	; (80067c4 <UART_SetConfig+0x2fc>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d125      	bne.n	80066f0 <UART_SetConfig+0x228>
 80066a4:	4b43      	ldr	r3, [pc, #268]	; (80067b4 <UART_SetConfig+0x2ec>)
 80066a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066b2:	d017      	beq.n	80066e4 <UART_SetConfig+0x21c>
 80066b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066b8:	d817      	bhi.n	80066ea <UART_SetConfig+0x222>
 80066ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066be:	d00b      	beq.n	80066d8 <UART_SetConfig+0x210>
 80066c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066c4:	d811      	bhi.n	80066ea <UART_SetConfig+0x222>
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <UART_SetConfig+0x20a>
 80066ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ce:	d006      	beq.n	80066de <UART_SetConfig+0x216>
 80066d0:	e00b      	b.n	80066ea <UART_SetConfig+0x222>
 80066d2:	2300      	movs	r3, #0
 80066d4:	76fb      	strb	r3, [r7, #27]
 80066d6:	e038      	b.n	800674a <UART_SetConfig+0x282>
 80066d8:	2302      	movs	r3, #2
 80066da:	76fb      	strb	r3, [r7, #27]
 80066dc:	e035      	b.n	800674a <UART_SetConfig+0x282>
 80066de:	2304      	movs	r3, #4
 80066e0:	76fb      	strb	r3, [r7, #27]
 80066e2:	e032      	b.n	800674a <UART_SetConfig+0x282>
 80066e4:	2308      	movs	r3, #8
 80066e6:	76fb      	strb	r3, [r7, #27]
 80066e8:	e02f      	b.n	800674a <UART_SetConfig+0x282>
 80066ea:	2310      	movs	r3, #16
 80066ec:	76fb      	strb	r3, [r7, #27]
 80066ee:	e02c      	b.n	800674a <UART_SetConfig+0x282>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a2d      	ldr	r2, [pc, #180]	; (80067ac <UART_SetConfig+0x2e4>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d125      	bne.n	8006746 <UART_SetConfig+0x27e>
 80066fa:	4b2e      	ldr	r3, [pc, #184]	; (80067b4 <UART_SetConfig+0x2ec>)
 80066fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006700:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006704:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006708:	d017      	beq.n	800673a <UART_SetConfig+0x272>
 800670a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800670e:	d817      	bhi.n	8006740 <UART_SetConfig+0x278>
 8006710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006714:	d00b      	beq.n	800672e <UART_SetConfig+0x266>
 8006716:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800671a:	d811      	bhi.n	8006740 <UART_SetConfig+0x278>
 800671c:	2b00      	cmp	r3, #0
 800671e:	d003      	beq.n	8006728 <UART_SetConfig+0x260>
 8006720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006724:	d006      	beq.n	8006734 <UART_SetConfig+0x26c>
 8006726:	e00b      	b.n	8006740 <UART_SetConfig+0x278>
 8006728:	2300      	movs	r3, #0
 800672a:	76fb      	strb	r3, [r7, #27]
 800672c:	e00d      	b.n	800674a <UART_SetConfig+0x282>
 800672e:	2302      	movs	r3, #2
 8006730:	76fb      	strb	r3, [r7, #27]
 8006732:	e00a      	b.n	800674a <UART_SetConfig+0x282>
 8006734:	2304      	movs	r3, #4
 8006736:	76fb      	strb	r3, [r7, #27]
 8006738:	e007      	b.n	800674a <UART_SetConfig+0x282>
 800673a:	2308      	movs	r3, #8
 800673c:	76fb      	strb	r3, [r7, #27]
 800673e:	e004      	b.n	800674a <UART_SetConfig+0x282>
 8006740:	2310      	movs	r3, #16
 8006742:	76fb      	strb	r3, [r7, #27]
 8006744:	e001      	b.n	800674a <UART_SetConfig+0x282>
 8006746:	2310      	movs	r3, #16
 8006748:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a17      	ldr	r2, [pc, #92]	; (80067ac <UART_SetConfig+0x2e4>)
 8006750:	4293      	cmp	r3, r2
 8006752:	f040 8087 	bne.w	8006864 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006756:	7efb      	ldrb	r3, [r7, #27]
 8006758:	2b08      	cmp	r3, #8
 800675a:	d837      	bhi.n	80067cc <UART_SetConfig+0x304>
 800675c:	a201      	add	r2, pc, #4	; (adr r2, 8006764 <UART_SetConfig+0x29c>)
 800675e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006762:	bf00      	nop
 8006764:	08006789 	.word	0x08006789
 8006768:	080067cd 	.word	0x080067cd
 800676c:	08006791 	.word	0x08006791
 8006770:	080067cd 	.word	0x080067cd
 8006774:	08006797 	.word	0x08006797
 8006778:	080067cd 	.word	0x080067cd
 800677c:	080067cd 	.word	0x080067cd
 8006780:	080067cd 	.word	0x080067cd
 8006784:	0800679f 	.word	0x0800679f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006788:	f7fe fc26 	bl	8004fd8 <HAL_RCC_GetPCLK1Freq>
 800678c:	6178      	str	r0, [r7, #20]
        break;
 800678e:	e022      	b.n	80067d6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006790:	4b0d      	ldr	r3, [pc, #52]	; (80067c8 <UART_SetConfig+0x300>)
 8006792:	617b      	str	r3, [r7, #20]
        break;
 8006794:	e01f      	b.n	80067d6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006796:	f7fe fb87 	bl	8004ea8 <HAL_RCC_GetSysClockFreq>
 800679a:	6178      	str	r0, [r7, #20]
        break;
 800679c:	e01b      	b.n	80067d6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800679e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067a2:	617b      	str	r3, [r7, #20]
        break;
 80067a4:	e017      	b.n	80067d6 <UART_SetConfig+0x30e>
 80067a6:	bf00      	nop
 80067a8:	efff69f3 	.word	0xefff69f3
 80067ac:	40008000 	.word	0x40008000
 80067b0:	40013800 	.word	0x40013800
 80067b4:	40021000 	.word	0x40021000
 80067b8:	40004400 	.word	0x40004400
 80067bc:	40004800 	.word	0x40004800
 80067c0:	40004c00 	.word	0x40004c00
 80067c4:	40005000 	.word	0x40005000
 80067c8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80067cc:	2300      	movs	r3, #0
 80067ce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	76bb      	strb	r3, [r7, #26]
        break;
 80067d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 80f1 	beq.w	80069c0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685a      	ldr	r2, [r3, #4]
 80067e2:	4613      	mov	r3, r2
 80067e4:	005b      	lsls	r3, r3, #1
 80067e6:	4413      	add	r3, r2
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d305      	bcc.n	80067fa <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d902      	bls.n	8006800 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	76bb      	strb	r3, [r7, #26]
 80067fe:	e0df      	b.n	80069c0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	4618      	mov	r0, r3
 8006804:	f04f 0100 	mov.w	r1, #0
 8006808:	f04f 0200 	mov.w	r2, #0
 800680c:	f04f 0300 	mov.w	r3, #0
 8006810:	020b      	lsls	r3, r1, #8
 8006812:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006816:	0202      	lsls	r2, r0, #8
 8006818:	6879      	ldr	r1, [r7, #4]
 800681a:	6849      	ldr	r1, [r1, #4]
 800681c:	0849      	lsrs	r1, r1, #1
 800681e:	4608      	mov	r0, r1
 8006820:	f04f 0100 	mov.w	r1, #0
 8006824:	1814      	adds	r4, r2, r0
 8006826:	eb43 0501 	adc.w	r5, r3, r1
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	461a      	mov	r2, r3
 8006830:	f04f 0300 	mov.w	r3, #0
 8006834:	4620      	mov	r0, r4
 8006836:	4629      	mov	r1, r5
 8006838:	f7fa f958 	bl	8000aec <__aeabi_uldivmod>
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	4613      	mov	r3, r2
 8006842:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800684a:	d308      	bcc.n	800685e <UART_SetConfig+0x396>
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006852:	d204      	bcs.n	800685e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	60da      	str	r2, [r3, #12]
 800685c:	e0b0      	b.n	80069c0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	76bb      	strb	r3, [r7, #26]
 8006862:	e0ad      	b.n	80069c0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	69db      	ldr	r3, [r3, #28]
 8006868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800686c:	d15c      	bne.n	8006928 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800686e:	7efb      	ldrb	r3, [r7, #27]
 8006870:	2b08      	cmp	r3, #8
 8006872:	d828      	bhi.n	80068c6 <UART_SetConfig+0x3fe>
 8006874:	a201      	add	r2, pc, #4	; (adr r2, 800687c <UART_SetConfig+0x3b4>)
 8006876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687a:	bf00      	nop
 800687c:	080068a1 	.word	0x080068a1
 8006880:	080068a9 	.word	0x080068a9
 8006884:	080068b1 	.word	0x080068b1
 8006888:	080068c7 	.word	0x080068c7
 800688c:	080068b7 	.word	0x080068b7
 8006890:	080068c7 	.word	0x080068c7
 8006894:	080068c7 	.word	0x080068c7
 8006898:	080068c7 	.word	0x080068c7
 800689c:	080068bf 	.word	0x080068bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068a0:	f7fe fb9a 	bl	8004fd8 <HAL_RCC_GetPCLK1Freq>
 80068a4:	6178      	str	r0, [r7, #20]
        break;
 80068a6:	e013      	b.n	80068d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068a8:	f7fe fbac 	bl	8005004 <HAL_RCC_GetPCLK2Freq>
 80068ac:	6178      	str	r0, [r7, #20]
        break;
 80068ae:	e00f      	b.n	80068d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068b0:	4b49      	ldr	r3, [pc, #292]	; (80069d8 <UART_SetConfig+0x510>)
 80068b2:	617b      	str	r3, [r7, #20]
        break;
 80068b4:	e00c      	b.n	80068d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068b6:	f7fe faf7 	bl	8004ea8 <HAL_RCC_GetSysClockFreq>
 80068ba:	6178      	str	r0, [r7, #20]
        break;
 80068bc:	e008      	b.n	80068d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068c2:	617b      	str	r3, [r7, #20]
        break;
 80068c4:	e004      	b.n	80068d0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	76bb      	strb	r3, [r7, #26]
        break;
 80068ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d074      	beq.n	80069c0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	005a      	lsls	r2, r3, #1
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	085b      	lsrs	r3, r3, #1
 80068e0:	441a      	add	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	2b0f      	cmp	r3, #15
 80068f2:	d916      	bls.n	8006922 <UART_SetConfig+0x45a>
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068fa:	d212      	bcs.n	8006922 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	b29b      	uxth	r3, r3
 8006900:	f023 030f 	bic.w	r3, r3, #15
 8006904:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	085b      	lsrs	r3, r3, #1
 800690a:	b29b      	uxth	r3, r3
 800690c:	f003 0307 	and.w	r3, r3, #7
 8006910:	b29a      	uxth	r2, r3
 8006912:	89fb      	ldrh	r3, [r7, #14]
 8006914:	4313      	orrs	r3, r2
 8006916:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	89fa      	ldrh	r2, [r7, #14]
 800691e:	60da      	str	r2, [r3, #12]
 8006920:	e04e      	b.n	80069c0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	76bb      	strb	r3, [r7, #26]
 8006926:	e04b      	b.n	80069c0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006928:	7efb      	ldrb	r3, [r7, #27]
 800692a:	2b08      	cmp	r3, #8
 800692c:	d827      	bhi.n	800697e <UART_SetConfig+0x4b6>
 800692e:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <UART_SetConfig+0x46c>)
 8006930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006934:	08006959 	.word	0x08006959
 8006938:	08006961 	.word	0x08006961
 800693c:	08006969 	.word	0x08006969
 8006940:	0800697f 	.word	0x0800697f
 8006944:	0800696f 	.word	0x0800696f
 8006948:	0800697f 	.word	0x0800697f
 800694c:	0800697f 	.word	0x0800697f
 8006950:	0800697f 	.word	0x0800697f
 8006954:	08006977 	.word	0x08006977
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006958:	f7fe fb3e 	bl	8004fd8 <HAL_RCC_GetPCLK1Freq>
 800695c:	6178      	str	r0, [r7, #20]
        break;
 800695e:	e013      	b.n	8006988 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006960:	f7fe fb50 	bl	8005004 <HAL_RCC_GetPCLK2Freq>
 8006964:	6178      	str	r0, [r7, #20]
        break;
 8006966:	e00f      	b.n	8006988 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006968:	4b1b      	ldr	r3, [pc, #108]	; (80069d8 <UART_SetConfig+0x510>)
 800696a:	617b      	str	r3, [r7, #20]
        break;
 800696c:	e00c      	b.n	8006988 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800696e:	f7fe fa9b 	bl	8004ea8 <HAL_RCC_GetSysClockFreq>
 8006972:	6178      	str	r0, [r7, #20]
        break;
 8006974:	e008      	b.n	8006988 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800697a:	617b      	str	r3, [r7, #20]
        break;
 800697c:	e004      	b.n	8006988 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800697e:	2300      	movs	r3, #0
 8006980:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	76bb      	strb	r3, [r7, #26]
        break;
 8006986:	bf00      	nop
    }

    if (pclk != 0U)
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d018      	beq.n	80069c0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	085a      	lsrs	r2, r3, #1
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	441a      	add	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	2b0f      	cmp	r3, #15
 80069a8:	d908      	bls.n	80069bc <UART_SetConfig+0x4f4>
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b0:	d204      	bcs.n	80069bc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	60da      	str	r2, [r3, #12]
 80069ba:	e001      	b.n	80069c0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80069cc:	7ebb      	ldrb	r3, [r7, #26]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3720      	adds	r7, #32
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bdb0      	pop	{r4, r5, r7, pc}
 80069d6:	bf00      	nop
 80069d8:	00f42400 	.word	0x00f42400

080069dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00a      	beq.n	8006a06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	f003 0302 	and.w	r3, r3, #2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00a      	beq.n	8006a28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2c:	f003 0304 	and.w	r3, r3, #4
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00a      	beq.n	8006a4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	f003 0308 	and.w	r3, r3, #8
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	f003 0310 	and.w	r3, r3, #16
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00a      	beq.n	8006a8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a92:	f003 0320 	and.w	r3, r3, #32
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00a      	beq.n	8006ab0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d01a      	beq.n	8006af2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ada:	d10a      	bne.n	8006af2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00a      	beq.n	8006b14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	430a      	orrs	r2, r1
 8006b12:	605a      	str	r2, [r3, #4]
  }
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b086      	sub	sp, #24
 8006b24:	af02      	add	r7, sp, #8
 8006b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b30:	f7fb fed8 	bl	80028e4 <HAL_GetTick>
 8006b34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0308 	and.w	r3, r3, #8
 8006b40:	2b08      	cmp	r3, #8
 8006b42:	d10e      	bne.n	8006b62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f82d 	bl	8006bb2 <UART_WaitOnFlagUntilTimeout>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e023      	b.n	8006baa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0304 	and.w	r3, r3, #4
 8006b6c:	2b04      	cmp	r3, #4
 8006b6e:	d10e      	bne.n	8006b8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f817 	bl	8006bb2 <UART_WaitOnFlagUntilTimeout>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e00d      	b.n	8006baa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2220      	movs	r2, #32
 8006b92:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2220      	movs	r2, #32
 8006b98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b084      	sub	sp, #16
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	60f8      	str	r0, [r7, #12]
 8006bba:	60b9      	str	r1, [r7, #8]
 8006bbc:	603b      	str	r3, [r7, #0]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bc2:	e05e      	b.n	8006c82 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bca:	d05a      	beq.n	8006c82 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bcc:	f7fb fe8a 	bl	80028e4 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	69ba      	ldr	r2, [r7, #24]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d302      	bcc.n	8006be2 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d11b      	bne.n	8006c1a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006bf0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	689a      	ldr	r2, [r3, #8]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 0201 	bic.w	r2, r2, #1
 8006c00:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2220      	movs	r2, #32
 8006c06:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e043      	b.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0304 	and.w	r3, r3, #4
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d02c      	beq.n	8006c82 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c36:	d124      	bne.n	8006c82 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c40:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c50:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 0201 	bic.w	r2, r2, #1
 8006c60:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2220      	movs	r2, #32
 8006c66:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2220      	movs	r2, #32
 8006c72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e00f      	b.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69da      	ldr	r2, [r3, #28]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	bf0c      	ite	eq
 8006c92:	2301      	moveq	r3, #1
 8006c94:	2300      	movne	r3, #0
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	461a      	mov	r2, r3
 8006c9a:	79fb      	ldrb	r3, [r7, #7]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d091      	beq.n	8006bc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
	...

08006cac <arm_sin_f32>:
 8006cac:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006d2c <arm_sin_f32+0x80>
 8006cb0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006cb4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cbc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006cc0:	d504      	bpl.n	8006ccc <arm_sin_f32+0x20>
 8006cc2:	ee17 3a90 	vmov	r3, s15
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	ee07 3a90 	vmov	s15, r3
 8006ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cd0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006d30 <arm_sin_f32+0x84>
 8006cd4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006cd8:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006cdc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006ce0:	ee17 3a90 	vmov	r3, s15
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cea:	d21a      	bcs.n	8006d22 <arm_sin_f32+0x76>
 8006cec:	ee07 3a90 	vmov	s15, r3
 8006cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf4:	1c59      	adds	r1, r3, #1
 8006cf6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006cfa:	4a0e      	ldr	r2, [pc, #56]	; (8006d34 <arm_sin_f32+0x88>)
 8006cfc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006d00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006d04:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006d08:	ed93 7a00 	vldr	s14, [r3]
 8006d0c:	edd2 6a00 	vldr	s13, [r2]
 8006d10:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006d14:	ee20 0a26 	vmul.f32	s0, s0, s13
 8006d18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d1c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006d20:	4770      	bx	lr
 8006d22:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006d26:	2101      	movs	r1, #1
 8006d28:	2300      	movs	r3, #0
 8006d2a:	e7e6      	b.n	8006cfa <arm_sin_f32+0x4e>
 8006d2c:	3e22f983 	.word	0x3e22f983
 8006d30:	44000000 	.word	0x44000000
 8006d34:	08007e00 	.word	0x08007e00

08006d38 <__errno>:
 8006d38:	4b01      	ldr	r3, [pc, #4]	; (8006d40 <__errno+0x8>)
 8006d3a:	6818      	ldr	r0, [r3, #0]
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	20000014 	.word	0x20000014

08006d44 <__libc_init_array>:
 8006d44:	b570      	push	{r4, r5, r6, lr}
 8006d46:	4d0d      	ldr	r5, [pc, #52]	; (8006d7c <__libc_init_array+0x38>)
 8006d48:	4c0d      	ldr	r4, [pc, #52]	; (8006d80 <__libc_init_array+0x3c>)
 8006d4a:	1b64      	subs	r4, r4, r5
 8006d4c:	10a4      	asrs	r4, r4, #2
 8006d4e:	2600      	movs	r6, #0
 8006d50:	42a6      	cmp	r6, r4
 8006d52:	d109      	bne.n	8006d68 <__libc_init_array+0x24>
 8006d54:	4d0b      	ldr	r5, [pc, #44]	; (8006d84 <__libc_init_array+0x40>)
 8006d56:	4c0c      	ldr	r4, [pc, #48]	; (8006d88 <__libc_init_array+0x44>)
 8006d58:	f001 f822 	bl	8007da0 <_init>
 8006d5c:	1b64      	subs	r4, r4, r5
 8006d5e:	10a4      	asrs	r4, r4, #2
 8006d60:	2600      	movs	r6, #0
 8006d62:	42a6      	cmp	r6, r4
 8006d64:	d105      	bne.n	8006d72 <__libc_init_array+0x2e>
 8006d66:	bd70      	pop	{r4, r5, r6, pc}
 8006d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d6c:	4798      	blx	r3
 8006d6e:	3601      	adds	r6, #1
 8006d70:	e7ee      	b.n	8006d50 <__libc_init_array+0xc>
 8006d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d76:	4798      	blx	r3
 8006d78:	3601      	adds	r6, #1
 8006d7a:	e7f2      	b.n	8006d62 <__libc_init_array+0x1e>
 8006d7c:	08008758 	.word	0x08008758
 8006d80:	08008758 	.word	0x08008758
 8006d84:	08008758 	.word	0x08008758
 8006d88:	0800875c 	.word	0x0800875c

08006d8c <memset>:
 8006d8c:	4402      	add	r2, r0
 8006d8e:	4603      	mov	r3, r0
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d100      	bne.n	8006d96 <memset+0xa>
 8006d94:	4770      	bx	lr
 8006d96:	f803 1b01 	strb.w	r1, [r3], #1
 8006d9a:	e7f9      	b.n	8006d90 <memset+0x4>

08006d9c <rand>:
 8006d9c:	4b17      	ldr	r3, [pc, #92]	; (8006dfc <rand+0x60>)
 8006d9e:	b510      	push	{r4, lr}
 8006da0:	681c      	ldr	r4, [r3, #0]
 8006da2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006da4:	b9b3      	cbnz	r3, 8006dd4 <rand+0x38>
 8006da6:	2018      	movs	r0, #24
 8006da8:	f000 f868 	bl	8006e7c <malloc>
 8006dac:	63a0      	str	r0, [r4, #56]	; 0x38
 8006dae:	b928      	cbnz	r0, 8006dbc <rand+0x20>
 8006db0:	4602      	mov	r2, r0
 8006db2:	4b13      	ldr	r3, [pc, #76]	; (8006e00 <rand+0x64>)
 8006db4:	4813      	ldr	r0, [pc, #76]	; (8006e04 <rand+0x68>)
 8006db6:	214e      	movs	r1, #78	; 0x4e
 8006db8:	f000 f830 	bl	8006e1c <__assert_func>
 8006dbc:	4a12      	ldr	r2, [pc, #72]	; (8006e08 <rand+0x6c>)
 8006dbe:	4b13      	ldr	r3, [pc, #76]	; (8006e0c <rand+0x70>)
 8006dc0:	e9c0 2300 	strd	r2, r3, [r0]
 8006dc4:	4b12      	ldr	r3, [pc, #72]	; (8006e10 <rand+0x74>)
 8006dc6:	6083      	str	r3, [r0, #8]
 8006dc8:	230b      	movs	r3, #11
 8006dca:	8183      	strh	r3, [r0, #12]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	2300      	movs	r3, #0
 8006dd0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006dd4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006dd6:	480f      	ldr	r0, [pc, #60]	; (8006e14 <rand+0x78>)
 8006dd8:	690a      	ldr	r2, [r1, #16]
 8006dda:	694b      	ldr	r3, [r1, #20]
 8006ddc:	4c0e      	ldr	r4, [pc, #56]	; (8006e18 <rand+0x7c>)
 8006dde:	4350      	muls	r0, r2
 8006de0:	fb04 0003 	mla	r0, r4, r3, r0
 8006de4:	fba2 3404 	umull	r3, r4, r2, r4
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	4404      	add	r4, r0
 8006dec:	f144 0000 	adc.w	r0, r4, #0
 8006df0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8006df4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006df8:	bd10      	pop	{r4, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20000014 	.word	0x20000014
 8006e00:	08008608 	.word	0x08008608
 8006e04:	0800861f 	.word	0x0800861f
 8006e08:	abcd330e 	.word	0xabcd330e
 8006e0c:	e66d1234 	.word	0xe66d1234
 8006e10:	0005deec 	.word	0x0005deec
 8006e14:	5851f42d 	.word	0x5851f42d
 8006e18:	4c957f2d 	.word	0x4c957f2d

08006e1c <__assert_func>:
 8006e1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e1e:	4614      	mov	r4, r2
 8006e20:	461a      	mov	r2, r3
 8006e22:	4b09      	ldr	r3, [pc, #36]	; (8006e48 <__assert_func+0x2c>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4605      	mov	r5, r0
 8006e28:	68d8      	ldr	r0, [r3, #12]
 8006e2a:	b14c      	cbz	r4, 8006e40 <__assert_func+0x24>
 8006e2c:	4b07      	ldr	r3, [pc, #28]	; (8006e4c <__assert_func+0x30>)
 8006e2e:	9100      	str	r1, [sp, #0]
 8006e30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e34:	4906      	ldr	r1, [pc, #24]	; (8006e50 <__assert_func+0x34>)
 8006e36:	462b      	mov	r3, r5
 8006e38:	f000 f80e 	bl	8006e58 <fiprintf>
 8006e3c:	f000 fc8e 	bl	800775c <abort>
 8006e40:	4b04      	ldr	r3, [pc, #16]	; (8006e54 <__assert_func+0x38>)
 8006e42:	461c      	mov	r4, r3
 8006e44:	e7f3      	b.n	8006e2e <__assert_func+0x12>
 8006e46:	bf00      	nop
 8006e48:	20000014 	.word	0x20000014
 8006e4c:	0800867e 	.word	0x0800867e
 8006e50:	0800868b 	.word	0x0800868b
 8006e54:	080086b9 	.word	0x080086b9

08006e58 <fiprintf>:
 8006e58:	b40e      	push	{r1, r2, r3}
 8006e5a:	b503      	push	{r0, r1, lr}
 8006e5c:	4601      	mov	r1, r0
 8006e5e:	ab03      	add	r3, sp, #12
 8006e60:	4805      	ldr	r0, [pc, #20]	; (8006e78 <fiprintf+0x20>)
 8006e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e66:	6800      	ldr	r0, [r0, #0]
 8006e68:	9301      	str	r3, [sp, #4]
 8006e6a:	f000 f8e3 	bl	8007034 <_vfiprintf_r>
 8006e6e:	b002      	add	sp, #8
 8006e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e74:	b003      	add	sp, #12
 8006e76:	4770      	bx	lr
 8006e78:	20000014 	.word	0x20000014

08006e7c <malloc>:
 8006e7c:	4b02      	ldr	r3, [pc, #8]	; (8006e88 <malloc+0xc>)
 8006e7e:	4601      	mov	r1, r0
 8006e80:	6818      	ldr	r0, [r3, #0]
 8006e82:	f000 b853 	b.w	8006f2c <_malloc_r>
 8006e86:	bf00      	nop
 8006e88:	20000014 	.word	0x20000014

08006e8c <_free_r>:
 8006e8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e8e:	2900      	cmp	r1, #0
 8006e90:	d048      	beq.n	8006f24 <_free_r+0x98>
 8006e92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e96:	9001      	str	r0, [sp, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f1a1 0404 	sub.w	r4, r1, #4
 8006e9e:	bfb8      	it	lt
 8006ea0:	18e4      	addlt	r4, r4, r3
 8006ea2:	f000 fe81 	bl	8007ba8 <__malloc_lock>
 8006ea6:	4a20      	ldr	r2, [pc, #128]	; (8006f28 <_free_r+0x9c>)
 8006ea8:	9801      	ldr	r0, [sp, #4]
 8006eaa:	6813      	ldr	r3, [r2, #0]
 8006eac:	4615      	mov	r5, r2
 8006eae:	b933      	cbnz	r3, 8006ebe <_free_r+0x32>
 8006eb0:	6063      	str	r3, [r4, #4]
 8006eb2:	6014      	str	r4, [r2, #0]
 8006eb4:	b003      	add	sp, #12
 8006eb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006eba:	f000 be7b 	b.w	8007bb4 <__malloc_unlock>
 8006ebe:	42a3      	cmp	r3, r4
 8006ec0:	d90b      	bls.n	8006eda <_free_r+0x4e>
 8006ec2:	6821      	ldr	r1, [r4, #0]
 8006ec4:	1862      	adds	r2, r4, r1
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	bf04      	itt	eq
 8006eca:	681a      	ldreq	r2, [r3, #0]
 8006ecc:	685b      	ldreq	r3, [r3, #4]
 8006ece:	6063      	str	r3, [r4, #4]
 8006ed0:	bf04      	itt	eq
 8006ed2:	1852      	addeq	r2, r2, r1
 8006ed4:	6022      	streq	r2, [r4, #0]
 8006ed6:	602c      	str	r4, [r5, #0]
 8006ed8:	e7ec      	b.n	8006eb4 <_free_r+0x28>
 8006eda:	461a      	mov	r2, r3
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	b10b      	cbz	r3, 8006ee4 <_free_r+0x58>
 8006ee0:	42a3      	cmp	r3, r4
 8006ee2:	d9fa      	bls.n	8006eda <_free_r+0x4e>
 8006ee4:	6811      	ldr	r1, [r2, #0]
 8006ee6:	1855      	adds	r5, r2, r1
 8006ee8:	42a5      	cmp	r5, r4
 8006eea:	d10b      	bne.n	8006f04 <_free_r+0x78>
 8006eec:	6824      	ldr	r4, [r4, #0]
 8006eee:	4421      	add	r1, r4
 8006ef0:	1854      	adds	r4, r2, r1
 8006ef2:	42a3      	cmp	r3, r4
 8006ef4:	6011      	str	r1, [r2, #0]
 8006ef6:	d1dd      	bne.n	8006eb4 <_free_r+0x28>
 8006ef8:	681c      	ldr	r4, [r3, #0]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	6053      	str	r3, [r2, #4]
 8006efe:	4421      	add	r1, r4
 8006f00:	6011      	str	r1, [r2, #0]
 8006f02:	e7d7      	b.n	8006eb4 <_free_r+0x28>
 8006f04:	d902      	bls.n	8006f0c <_free_r+0x80>
 8006f06:	230c      	movs	r3, #12
 8006f08:	6003      	str	r3, [r0, #0]
 8006f0a:	e7d3      	b.n	8006eb4 <_free_r+0x28>
 8006f0c:	6825      	ldr	r5, [r4, #0]
 8006f0e:	1961      	adds	r1, r4, r5
 8006f10:	428b      	cmp	r3, r1
 8006f12:	bf04      	itt	eq
 8006f14:	6819      	ldreq	r1, [r3, #0]
 8006f16:	685b      	ldreq	r3, [r3, #4]
 8006f18:	6063      	str	r3, [r4, #4]
 8006f1a:	bf04      	itt	eq
 8006f1c:	1949      	addeq	r1, r1, r5
 8006f1e:	6021      	streq	r1, [r4, #0]
 8006f20:	6054      	str	r4, [r2, #4]
 8006f22:	e7c7      	b.n	8006eb4 <_free_r+0x28>
 8006f24:	b003      	add	sp, #12
 8006f26:	bd30      	pop	{r4, r5, pc}
 8006f28:	2000acec 	.word	0x2000acec

08006f2c <_malloc_r>:
 8006f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f2e:	1ccd      	adds	r5, r1, #3
 8006f30:	f025 0503 	bic.w	r5, r5, #3
 8006f34:	3508      	adds	r5, #8
 8006f36:	2d0c      	cmp	r5, #12
 8006f38:	bf38      	it	cc
 8006f3a:	250c      	movcc	r5, #12
 8006f3c:	2d00      	cmp	r5, #0
 8006f3e:	4606      	mov	r6, r0
 8006f40:	db01      	blt.n	8006f46 <_malloc_r+0x1a>
 8006f42:	42a9      	cmp	r1, r5
 8006f44:	d903      	bls.n	8006f4e <_malloc_r+0x22>
 8006f46:	230c      	movs	r3, #12
 8006f48:	6033      	str	r3, [r6, #0]
 8006f4a:	2000      	movs	r0, #0
 8006f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f4e:	f000 fe2b 	bl	8007ba8 <__malloc_lock>
 8006f52:	4921      	ldr	r1, [pc, #132]	; (8006fd8 <_malloc_r+0xac>)
 8006f54:	680a      	ldr	r2, [r1, #0]
 8006f56:	4614      	mov	r4, r2
 8006f58:	b99c      	cbnz	r4, 8006f82 <_malloc_r+0x56>
 8006f5a:	4f20      	ldr	r7, [pc, #128]	; (8006fdc <_malloc_r+0xb0>)
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	b923      	cbnz	r3, 8006f6a <_malloc_r+0x3e>
 8006f60:	4621      	mov	r1, r4
 8006f62:	4630      	mov	r0, r6
 8006f64:	f000 fb2a 	bl	80075bc <_sbrk_r>
 8006f68:	6038      	str	r0, [r7, #0]
 8006f6a:	4629      	mov	r1, r5
 8006f6c:	4630      	mov	r0, r6
 8006f6e:	f000 fb25 	bl	80075bc <_sbrk_r>
 8006f72:	1c43      	adds	r3, r0, #1
 8006f74:	d123      	bne.n	8006fbe <_malloc_r+0x92>
 8006f76:	230c      	movs	r3, #12
 8006f78:	6033      	str	r3, [r6, #0]
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	f000 fe1a 	bl	8007bb4 <__malloc_unlock>
 8006f80:	e7e3      	b.n	8006f4a <_malloc_r+0x1e>
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	1b5b      	subs	r3, r3, r5
 8006f86:	d417      	bmi.n	8006fb8 <_malloc_r+0x8c>
 8006f88:	2b0b      	cmp	r3, #11
 8006f8a:	d903      	bls.n	8006f94 <_malloc_r+0x68>
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	441c      	add	r4, r3
 8006f90:	6025      	str	r5, [r4, #0]
 8006f92:	e004      	b.n	8006f9e <_malloc_r+0x72>
 8006f94:	6863      	ldr	r3, [r4, #4]
 8006f96:	42a2      	cmp	r2, r4
 8006f98:	bf0c      	ite	eq
 8006f9a:	600b      	streq	r3, [r1, #0]
 8006f9c:	6053      	strne	r3, [r2, #4]
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	f000 fe08 	bl	8007bb4 <__malloc_unlock>
 8006fa4:	f104 000b 	add.w	r0, r4, #11
 8006fa8:	1d23      	adds	r3, r4, #4
 8006faa:	f020 0007 	bic.w	r0, r0, #7
 8006fae:	1ac2      	subs	r2, r0, r3
 8006fb0:	d0cc      	beq.n	8006f4c <_malloc_r+0x20>
 8006fb2:	1a1b      	subs	r3, r3, r0
 8006fb4:	50a3      	str	r3, [r4, r2]
 8006fb6:	e7c9      	b.n	8006f4c <_malloc_r+0x20>
 8006fb8:	4622      	mov	r2, r4
 8006fba:	6864      	ldr	r4, [r4, #4]
 8006fbc:	e7cc      	b.n	8006f58 <_malloc_r+0x2c>
 8006fbe:	1cc4      	adds	r4, r0, #3
 8006fc0:	f024 0403 	bic.w	r4, r4, #3
 8006fc4:	42a0      	cmp	r0, r4
 8006fc6:	d0e3      	beq.n	8006f90 <_malloc_r+0x64>
 8006fc8:	1a21      	subs	r1, r4, r0
 8006fca:	4630      	mov	r0, r6
 8006fcc:	f000 faf6 	bl	80075bc <_sbrk_r>
 8006fd0:	3001      	adds	r0, #1
 8006fd2:	d1dd      	bne.n	8006f90 <_malloc_r+0x64>
 8006fd4:	e7cf      	b.n	8006f76 <_malloc_r+0x4a>
 8006fd6:	bf00      	nop
 8006fd8:	2000acec 	.word	0x2000acec
 8006fdc:	2000acf0 	.word	0x2000acf0

08006fe0 <__sfputc_r>:
 8006fe0:	6893      	ldr	r3, [r2, #8]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	b410      	push	{r4}
 8006fe8:	6093      	str	r3, [r2, #8]
 8006fea:	da08      	bge.n	8006ffe <__sfputc_r+0x1e>
 8006fec:	6994      	ldr	r4, [r2, #24]
 8006fee:	42a3      	cmp	r3, r4
 8006ff0:	db01      	blt.n	8006ff6 <__sfputc_r+0x16>
 8006ff2:	290a      	cmp	r1, #10
 8006ff4:	d103      	bne.n	8006ffe <__sfputc_r+0x1e>
 8006ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ffa:	f000 baef 	b.w	80075dc <__swbuf_r>
 8006ffe:	6813      	ldr	r3, [r2, #0]
 8007000:	1c58      	adds	r0, r3, #1
 8007002:	6010      	str	r0, [r2, #0]
 8007004:	7019      	strb	r1, [r3, #0]
 8007006:	4608      	mov	r0, r1
 8007008:	f85d 4b04 	ldr.w	r4, [sp], #4
 800700c:	4770      	bx	lr

0800700e <__sfputs_r>:
 800700e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007010:	4606      	mov	r6, r0
 8007012:	460f      	mov	r7, r1
 8007014:	4614      	mov	r4, r2
 8007016:	18d5      	adds	r5, r2, r3
 8007018:	42ac      	cmp	r4, r5
 800701a:	d101      	bne.n	8007020 <__sfputs_r+0x12>
 800701c:	2000      	movs	r0, #0
 800701e:	e007      	b.n	8007030 <__sfputs_r+0x22>
 8007020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007024:	463a      	mov	r2, r7
 8007026:	4630      	mov	r0, r6
 8007028:	f7ff ffda 	bl	8006fe0 <__sfputc_r>
 800702c:	1c43      	adds	r3, r0, #1
 800702e:	d1f3      	bne.n	8007018 <__sfputs_r+0xa>
 8007030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007034 <_vfiprintf_r>:
 8007034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007038:	460d      	mov	r5, r1
 800703a:	b09d      	sub	sp, #116	; 0x74
 800703c:	4614      	mov	r4, r2
 800703e:	4698      	mov	r8, r3
 8007040:	4606      	mov	r6, r0
 8007042:	b118      	cbz	r0, 800704c <_vfiprintf_r+0x18>
 8007044:	6983      	ldr	r3, [r0, #24]
 8007046:	b90b      	cbnz	r3, 800704c <_vfiprintf_r+0x18>
 8007048:	f000 fcaa 	bl	80079a0 <__sinit>
 800704c:	4b89      	ldr	r3, [pc, #548]	; (8007274 <_vfiprintf_r+0x240>)
 800704e:	429d      	cmp	r5, r3
 8007050:	d11b      	bne.n	800708a <_vfiprintf_r+0x56>
 8007052:	6875      	ldr	r5, [r6, #4]
 8007054:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007056:	07d9      	lsls	r1, r3, #31
 8007058:	d405      	bmi.n	8007066 <_vfiprintf_r+0x32>
 800705a:	89ab      	ldrh	r3, [r5, #12]
 800705c:	059a      	lsls	r2, r3, #22
 800705e:	d402      	bmi.n	8007066 <_vfiprintf_r+0x32>
 8007060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007062:	f000 fd3b 	bl	8007adc <__retarget_lock_acquire_recursive>
 8007066:	89ab      	ldrh	r3, [r5, #12]
 8007068:	071b      	lsls	r3, r3, #28
 800706a:	d501      	bpl.n	8007070 <_vfiprintf_r+0x3c>
 800706c:	692b      	ldr	r3, [r5, #16]
 800706e:	b9eb      	cbnz	r3, 80070ac <_vfiprintf_r+0x78>
 8007070:	4629      	mov	r1, r5
 8007072:	4630      	mov	r0, r6
 8007074:	f000 fb04 	bl	8007680 <__swsetup_r>
 8007078:	b1c0      	cbz	r0, 80070ac <_vfiprintf_r+0x78>
 800707a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800707c:	07dc      	lsls	r4, r3, #31
 800707e:	d50e      	bpl.n	800709e <_vfiprintf_r+0x6a>
 8007080:	f04f 30ff 	mov.w	r0, #4294967295
 8007084:	b01d      	add	sp, #116	; 0x74
 8007086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800708a:	4b7b      	ldr	r3, [pc, #492]	; (8007278 <_vfiprintf_r+0x244>)
 800708c:	429d      	cmp	r5, r3
 800708e:	d101      	bne.n	8007094 <_vfiprintf_r+0x60>
 8007090:	68b5      	ldr	r5, [r6, #8]
 8007092:	e7df      	b.n	8007054 <_vfiprintf_r+0x20>
 8007094:	4b79      	ldr	r3, [pc, #484]	; (800727c <_vfiprintf_r+0x248>)
 8007096:	429d      	cmp	r5, r3
 8007098:	bf08      	it	eq
 800709a:	68f5      	ldreq	r5, [r6, #12]
 800709c:	e7da      	b.n	8007054 <_vfiprintf_r+0x20>
 800709e:	89ab      	ldrh	r3, [r5, #12]
 80070a0:	0598      	lsls	r0, r3, #22
 80070a2:	d4ed      	bmi.n	8007080 <_vfiprintf_r+0x4c>
 80070a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070a6:	f000 fd1a 	bl	8007ade <__retarget_lock_release_recursive>
 80070aa:	e7e9      	b.n	8007080 <_vfiprintf_r+0x4c>
 80070ac:	2300      	movs	r3, #0
 80070ae:	9309      	str	r3, [sp, #36]	; 0x24
 80070b0:	2320      	movs	r3, #32
 80070b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80070ba:	2330      	movs	r3, #48	; 0x30
 80070bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007280 <_vfiprintf_r+0x24c>
 80070c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070c4:	f04f 0901 	mov.w	r9, #1
 80070c8:	4623      	mov	r3, r4
 80070ca:	469a      	mov	sl, r3
 80070cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070d0:	b10a      	cbz	r2, 80070d6 <_vfiprintf_r+0xa2>
 80070d2:	2a25      	cmp	r2, #37	; 0x25
 80070d4:	d1f9      	bne.n	80070ca <_vfiprintf_r+0x96>
 80070d6:	ebba 0b04 	subs.w	fp, sl, r4
 80070da:	d00b      	beq.n	80070f4 <_vfiprintf_r+0xc0>
 80070dc:	465b      	mov	r3, fp
 80070de:	4622      	mov	r2, r4
 80070e0:	4629      	mov	r1, r5
 80070e2:	4630      	mov	r0, r6
 80070e4:	f7ff ff93 	bl	800700e <__sfputs_r>
 80070e8:	3001      	adds	r0, #1
 80070ea:	f000 80aa 	beq.w	8007242 <_vfiprintf_r+0x20e>
 80070ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070f0:	445a      	add	r2, fp
 80070f2:	9209      	str	r2, [sp, #36]	; 0x24
 80070f4:	f89a 3000 	ldrb.w	r3, [sl]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 80a2 	beq.w	8007242 <_vfiprintf_r+0x20e>
 80070fe:	2300      	movs	r3, #0
 8007100:	f04f 32ff 	mov.w	r2, #4294967295
 8007104:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007108:	f10a 0a01 	add.w	sl, sl, #1
 800710c:	9304      	str	r3, [sp, #16]
 800710e:	9307      	str	r3, [sp, #28]
 8007110:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007114:	931a      	str	r3, [sp, #104]	; 0x68
 8007116:	4654      	mov	r4, sl
 8007118:	2205      	movs	r2, #5
 800711a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800711e:	4858      	ldr	r0, [pc, #352]	; (8007280 <_vfiprintf_r+0x24c>)
 8007120:	f7f9 f856 	bl	80001d0 <memchr>
 8007124:	9a04      	ldr	r2, [sp, #16]
 8007126:	b9d8      	cbnz	r0, 8007160 <_vfiprintf_r+0x12c>
 8007128:	06d1      	lsls	r1, r2, #27
 800712a:	bf44      	itt	mi
 800712c:	2320      	movmi	r3, #32
 800712e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007132:	0713      	lsls	r3, r2, #28
 8007134:	bf44      	itt	mi
 8007136:	232b      	movmi	r3, #43	; 0x2b
 8007138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800713c:	f89a 3000 	ldrb.w	r3, [sl]
 8007140:	2b2a      	cmp	r3, #42	; 0x2a
 8007142:	d015      	beq.n	8007170 <_vfiprintf_r+0x13c>
 8007144:	9a07      	ldr	r2, [sp, #28]
 8007146:	4654      	mov	r4, sl
 8007148:	2000      	movs	r0, #0
 800714a:	f04f 0c0a 	mov.w	ip, #10
 800714e:	4621      	mov	r1, r4
 8007150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007154:	3b30      	subs	r3, #48	; 0x30
 8007156:	2b09      	cmp	r3, #9
 8007158:	d94e      	bls.n	80071f8 <_vfiprintf_r+0x1c4>
 800715a:	b1b0      	cbz	r0, 800718a <_vfiprintf_r+0x156>
 800715c:	9207      	str	r2, [sp, #28]
 800715e:	e014      	b.n	800718a <_vfiprintf_r+0x156>
 8007160:	eba0 0308 	sub.w	r3, r0, r8
 8007164:	fa09 f303 	lsl.w	r3, r9, r3
 8007168:	4313      	orrs	r3, r2
 800716a:	9304      	str	r3, [sp, #16]
 800716c:	46a2      	mov	sl, r4
 800716e:	e7d2      	b.n	8007116 <_vfiprintf_r+0xe2>
 8007170:	9b03      	ldr	r3, [sp, #12]
 8007172:	1d19      	adds	r1, r3, #4
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	9103      	str	r1, [sp, #12]
 8007178:	2b00      	cmp	r3, #0
 800717a:	bfbb      	ittet	lt
 800717c:	425b      	neglt	r3, r3
 800717e:	f042 0202 	orrlt.w	r2, r2, #2
 8007182:	9307      	strge	r3, [sp, #28]
 8007184:	9307      	strlt	r3, [sp, #28]
 8007186:	bfb8      	it	lt
 8007188:	9204      	strlt	r2, [sp, #16]
 800718a:	7823      	ldrb	r3, [r4, #0]
 800718c:	2b2e      	cmp	r3, #46	; 0x2e
 800718e:	d10c      	bne.n	80071aa <_vfiprintf_r+0x176>
 8007190:	7863      	ldrb	r3, [r4, #1]
 8007192:	2b2a      	cmp	r3, #42	; 0x2a
 8007194:	d135      	bne.n	8007202 <_vfiprintf_r+0x1ce>
 8007196:	9b03      	ldr	r3, [sp, #12]
 8007198:	1d1a      	adds	r2, r3, #4
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	9203      	str	r2, [sp, #12]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	bfb8      	it	lt
 80071a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80071a6:	3402      	adds	r4, #2
 80071a8:	9305      	str	r3, [sp, #20]
 80071aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007290 <_vfiprintf_r+0x25c>
 80071ae:	7821      	ldrb	r1, [r4, #0]
 80071b0:	2203      	movs	r2, #3
 80071b2:	4650      	mov	r0, sl
 80071b4:	f7f9 f80c 	bl	80001d0 <memchr>
 80071b8:	b140      	cbz	r0, 80071cc <_vfiprintf_r+0x198>
 80071ba:	2340      	movs	r3, #64	; 0x40
 80071bc:	eba0 000a 	sub.w	r0, r0, sl
 80071c0:	fa03 f000 	lsl.w	r0, r3, r0
 80071c4:	9b04      	ldr	r3, [sp, #16]
 80071c6:	4303      	orrs	r3, r0
 80071c8:	3401      	adds	r4, #1
 80071ca:	9304      	str	r3, [sp, #16]
 80071cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071d0:	482c      	ldr	r0, [pc, #176]	; (8007284 <_vfiprintf_r+0x250>)
 80071d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071d6:	2206      	movs	r2, #6
 80071d8:	f7f8 fffa 	bl	80001d0 <memchr>
 80071dc:	2800      	cmp	r0, #0
 80071de:	d03f      	beq.n	8007260 <_vfiprintf_r+0x22c>
 80071e0:	4b29      	ldr	r3, [pc, #164]	; (8007288 <_vfiprintf_r+0x254>)
 80071e2:	bb1b      	cbnz	r3, 800722c <_vfiprintf_r+0x1f8>
 80071e4:	9b03      	ldr	r3, [sp, #12]
 80071e6:	3307      	adds	r3, #7
 80071e8:	f023 0307 	bic.w	r3, r3, #7
 80071ec:	3308      	adds	r3, #8
 80071ee:	9303      	str	r3, [sp, #12]
 80071f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071f2:	443b      	add	r3, r7
 80071f4:	9309      	str	r3, [sp, #36]	; 0x24
 80071f6:	e767      	b.n	80070c8 <_vfiprintf_r+0x94>
 80071f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80071fc:	460c      	mov	r4, r1
 80071fe:	2001      	movs	r0, #1
 8007200:	e7a5      	b.n	800714e <_vfiprintf_r+0x11a>
 8007202:	2300      	movs	r3, #0
 8007204:	3401      	adds	r4, #1
 8007206:	9305      	str	r3, [sp, #20]
 8007208:	4619      	mov	r1, r3
 800720a:	f04f 0c0a 	mov.w	ip, #10
 800720e:	4620      	mov	r0, r4
 8007210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007214:	3a30      	subs	r2, #48	; 0x30
 8007216:	2a09      	cmp	r2, #9
 8007218:	d903      	bls.n	8007222 <_vfiprintf_r+0x1ee>
 800721a:	2b00      	cmp	r3, #0
 800721c:	d0c5      	beq.n	80071aa <_vfiprintf_r+0x176>
 800721e:	9105      	str	r1, [sp, #20]
 8007220:	e7c3      	b.n	80071aa <_vfiprintf_r+0x176>
 8007222:	fb0c 2101 	mla	r1, ip, r1, r2
 8007226:	4604      	mov	r4, r0
 8007228:	2301      	movs	r3, #1
 800722a:	e7f0      	b.n	800720e <_vfiprintf_r+0x1da>
 800722c:	ab03      	add	r3, sp, #12
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	462a      	mov	r2, r5
 8007232:	4b16      	ldr	r3, [pc, #88]	; (800728c <_vfiprintf_r+0x258>)
 8007234:	a904      	add	r1, sp, #16
 8007236:	4630      	mov	r0, r6
 8007238:	f3af 8000 	nop.w
 800723c:	4607      	mov	r7, r0
 800723e:	1c78      	adds	r0, r7, #1
 8007240:	d1d6      	bne.n	80071f0 <_vfiprintf_r+0x1bc>
 8007242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007244:	07d9      	lsls	r1, r3, #31
 8007246:	d405      	bmi.n	8007254 <_vfiprintf_r+0x220>
 8007248:	89ab      	ldrh	r3, [r5, #12]
 800724a:	059a      	lsls	r2, r3, #22
 800724c:	d402      	bmi.n	8007254 <_vfiprintf_r+0x220>
 800724e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007250:	f000 fc45 	bl	8007ade <__retarget_lock_release_recursive>
 8007254:	89ab      	ldrh	r3, [r5, #12]
 8007256:	065b      	lsls	r3, r3, #25
 8007258:	f53f af12 	bmi.w	8007080 <_vfiprintf_r+0x4c>
 800725c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800725e:	e711      	b.n	8007084 <_vfiprintf_r+0x50>
 8007260:	ab03      	add	r3, sp, #12
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	462a      	mov	r2, r5
 8007266:	4b09      	ldr	r3, [pc, #36]	; (800728c <_vfiprintf_r+0x258>)
 8007268:	a904      	add	r1, sp, #16
 800726a:	4630      	mov	r0, r6
 800726c:	f000 f880 	bl	8007370 <_printf_i>
 8007270:	e7e4      	b.n	800723c <_vfiprintf_r+0x208>
 8007272:	bf00      	nop
 8007274:	08008710 	.word	0x08008710
 8007278:	08008730 	.word	0x08008730
 800727c:	080086f0 	.word	0x080086f0
 8007280:	080086ba 	.word	0x080086ba
 8007284:	080086c4 	.word	0x080086c4
 8007288:	00000000 	.word	0x00000000
 800728c:	0800700f 	.word	0x0800700f
 8007290:	080086c0 	.word	0x080086c0

08007294 <_printf_common>:
 8007294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007298:	4616      	mov	r6, r2
 800729a:	4699      	mov	r9, r3
 800729c:	688a      	ldr	r2, [r1, #8]
 800729e:	690b      	ldr	r3, [r1, #16]
 80072a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072a4:	4293      	cmp	r3, r2
 80072a6:	bfb8      	it	lt
 80072a8:	4613      	movlt	r3, r2
 80072aa:	6033      	str	r3, [r6, #0]
 80072ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072b0:	4607      	mov	r7, r0
 80072b2:	460c      	mov	r4, r1
 80072b4:	b10a      	cbz	r2, 80072ba <_printf_common+0x26>
 80072b6:	3301      	adds	r3, #1
 80072b8:	6033      	str	r3, [r6, #0]
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	0699      	lsls	r1, r3, #26
 80072be:	bf42      	ittt	mi
 80072c0:	6833      	ldrmi	r3, [r6, #0]
 80072c2:	3302      	addmi	r3, #2
 80072c4:	6033      	strmi	r3, [r6, #0]
 80072c6:	6825      	ldr	r5, [r4, #0]
 80072c8:	f015 0506 	ands.w	r5, r5, #6
 80072cc:	d106      	bne.n	80072dc <_printf_common+0x48>
 80072ce:	f104 0a19 	add.w	sl, r4, #25
 80072d2:	68e3      	ldr	r3, [r4, #12]
 80072d4:	6832      	ldr	r2, [r6, #0]
 80072d6:	1a9b      	subs	r3, r3, r2
 80072d8:	42ab      	cmp	r3, r5
 80072da:	dc26      	bgt.n	800732a <_printf_common+0x96>
 80072dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072e0:	1e13      	subs	r3, r2, #0
 80072e2:	6822      	ldr	r2, [r4, #0]
 80072e4:	bf18      	it	ne
 80072e6:	2301      	movne	r3, #1
 80072e8:	0692      	lsls	r2, r2, #26
 80072ea:	d42b      	bmi.n	8007344 <_printf_common+0xb0>
 80072ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072f0:	4649      	mov	r1, r9
 80072f2:	4638      	mov	r0, r7
 80072f4:	47c0      	blx	r8
 80072f6:	3001      	adds	r0, #1
 80072f8:	d01e      	beq.n	8007338 <_printf_common+0xa4>
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	68e5      	ldr	r5, [r4, #12]
 80072fe:	6832      	ldr	r2, [r6, #0]
 8007300:	f003 0306 	and.w	r3, r3, #6
 8007304:	2b04      	cmp	r3, #4
 8007306:	bf08      	it	eq
 8007308:	1aad      	subeq	r5, r5, r2
 800730a:	68a3      	ldr	r3, [r4, #8]
 800730c:	6922      	ldr	r2, [r4, #16]
 800730e:	bf0c      	ite	eq
 8007310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007314:	2500      	movne	r5, #0
 8007316:	4293      	cmp	r3, r2
 8007318:	bfc4      	itt	gt
 800731a:	1a9b      	subgt	r3, r3, r2
 800731c:	18ed      	addgt	r5, r5, r3
 800731e:	2600      	movs	r6, #0
 8007320:	341a      	adds	r4, #26
 8007322:	42b5      	cmp	r5, r6
 8007324:	d11a      	bne.n	800735c <_printf_common+0xc8>
 8007326:	2000      	movs	r0, #0
 8007328:	e008      	b.n	800733c <_printf_common+0xa8>
 800732a:	2301      	movs	r3, #1
 800732c:	4652      	mov	r2, sl
 800732e:	4649      	mov	r1, r9
 8007330:	4638      	mov	r0, r7
 8007332:	47c0      	blx	r8
 8007334:	3001      	adds	r0, #1
 8007336:	d103      	bne.n	8007340 <_printf_common+0xac>
 8007338:	f04f 30ff 	mov.w	r0, #4294967295
 800733c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007340:	3501      	adds	r5, #1
 8007342:	e7c6      	b.n	80072d2 <_printf_common+0x3e>
 8007344:	18e1      	adds	r1, r4, r3
 8007346:	1c5a      	adds	r2, r3, #1
 8007348:	2030      	movs	r0, #48	; 0x30
 800734a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800734e:	4422      	add	r2, r4
 8007350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007358:	3302      	adds	r3, #2
 800735a:	e7c7      	b.n	80072ec <_printf_common+0x58>
 800735c:	2301      	movs	r3, #1
 800735e:	4622      	mov	r2, r4
 8007360:	4649      	mov	r1, r9
 8007362:	4638      	mov	r0, r7
 8007364:	47c0      	blx	r8
 8007366:	3001      	adds	r0, #1
 8007368:	d0e6      	beq.n	8007338 <_printf_common+0xa4>
 800736a:	3601      	adds	r6, #1
 800736c:	e7d9      	b.n	8007322 <_printf_common+0x8e>
	...

08007370 <_printf_i>:
 8007370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007374:	460c      	mov	r4, r1
 8007376:	4691      	mov	r9, r2
 8007378:	7e27      	ldrb	r7, [r4, #24]
 800737a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800737c:	2f78      	cmp	r7, #120	; 0x78
 800737e:	4680      	mov	r8, r0
 8007380:	469a      	mov	sl, r3
 8007382:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007386:	d807      	bhi.n	8007398 <_printf_i+0x28>
 8007388:	2f62      	cmp	r7, #98	; 0x62
 800738a:	d80a      	bhi.n	80073a2 <_printf_i+0x32>
 800738c:	2f00      	cmp	r7, #0
 800738e:	f000 80d8 	beq.w	8007542 <_printf_i+0x1d2>
 8007392:	2f58      	cmp	r7, #88	; 0x58
 8007394:	f000 80a3 	beq.w	80074de <_printf_i+0x16e>
 8007398:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800739c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073a0:	e03a      	b.n	8007418 <_printf_i+0xa8>
 80073a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073a6:	2b15      	cmp	r3, #21
 80073a8:	d8f6      	bhi.n	8007398 <_printf_i+0x28>
 80073aa:	a001      	add	r0, pc, #4	; (adr r0, 80073b0 <_printf_i+0x40>)
 80073ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80073b0:	08007409 	.word	0x08007409
 80073b4:	0800741d 	.word	0x0800741d
 80073b8:	08007399 	.word	0x08007399
 80073bc:	08007399 	.word	0x08007399
 80073c0:	08007399 	.word	0x08007399
 80073c4:	08007399 	.word	0x08007399
 80073c8:	0800741d 	.word	0x0800741d
 80073cc:	08007399 	.word	0x08007399
 80073d0:	08007399 	.word	0x08007399
 80073d4:	08007399 	.word	0x08007399
 80073d8:	08007399 	.word	0x08007399
 80073dc:	08007529 	.word	0x08007529
 80073e0:	0800744d 	.word	0x0800744d
 80073e4:	0800750b 	.word	0x0800750b
 80073e8:	08007399 	.word	0x08007399
 80073ec:	08007399 	.word	0x08007399
 80073f0:	0800754b 	.word	0x0800754b
 80073f4:	08007399 	.word	0x08007399
 80073f8:	0800744d 	.word	0x0800744d
 80073fc:	08007399 	.word	0x08007399
 8007400:	08007399 	.word	0x08007399
 8007404:	08007513 	.word	0x08007513
 8007408:	680b      	ldr	r3, [r1, #0]
 800740a:	1d1a      	adds	r2, r3, #4
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	600a      	str	r2, [r1, #0]
 8007410:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007418:	2301      	movs	r3, #1
 800741a:	e0a3      	b.n	8007564 <_printf_i+0x1f4>
 800741c:	6825      	ldr	r5, [r4, #0]
 800741e:	6808      	ldr	r0, [r1, #0]
 8007420:	062e      	lsls	r6, r5, #24
 8007422:	f100 0304 	add.w	r3, r0, #4
 8007426:	d50a      	bpl.n	800743e <_printf_i+0xce>
 8007428:	6805      	ldr	r5, [r0, #0]
 800742a:	600b      	str	r3, [r1, #0]
 800742c:	2d00      	cmp	r5, #0
 800742e:	da03      	bge.n	8007438 <_printf_i+0xc8>
 8007430:	232d      	movs	r3, #45	; 0x2d
 8007432:	426d      	negs	r5, r5
 8007434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007438:	485e      	ldr	r0, [pc, #376]	; (80075b4 <_printf_i+0x244>)
 800743a:	230a      	movs	r3, #10
 800743c:	e019      	b.n	8007472 <_printf_i+0x102>
 800743e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007442:	6805      	ldr	r5, [r0, #0]
 8007444:	600b      	str	r3, [r1, #0]
 8007446:	bf18      	it	ne
 8007448:	b22d      	sxthne	r5, r5
 800744a:	e7ef      	b.n	800742c <_printf_i+0xbc>
 800744c:	680b      	ldr	r3, [r1, #0]
 800744e:	6825      	ldr	r5, [r4, #0]
 8007450:	1d18      	adds	r0, r3, #4
 8007452:	6008      	str	r0, [r1, #0]
 8007454:	0628      	lsls	r0, r5, #24
 8007456:	d501      	bpl.n	800745c <_printf_i+0xec>
 8007458:	681d      	ldr	r5, [r3, #0]
 800745a:	e002      	b.n	8007462 <_printf_i+0xf2>
 800745c:	0669      	lsls	r1, r5, #25
 800745e:	d5fb      	bpl.n	8007458 <_printf_i+0xe8>
 8007460:	881d      	ldrh	r5, [r3, #0]
 8007462:	4854      	ldr	r0, [pc, #336]	; (80075b4 <_printf_i+0x244>)
 8007464:	2f6f      	cmp	r7, #111	; 0x6f
 8007466:	bf0c      	ite	eq
 8007468:	2308      	moveq	r3, #8
 800746a:	230a      	movne	r3, #10
 800746c:	2100      	movs	r1, #0
 800746e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007472:	6866      	ldr	r6, [r4, #4]
 8007474:	60a6      	str	r6, [r4, #8]
 8007476:	2e00      	cmp	r6, #0
 8007478:	bfa2      	ittt	ge
 800747a:	6821      	ldrge	r1, [r4, #0]
 800747c:	f021 0104 	bicge.w	r1, r1, #4
 8007480:	6021      	strge	r1, [r4, #0]
 8007482:	b90d      	cbnz	r5, 8007488 <_printf_i+0x118>
 8007484:	2e00      	cmp	r6, #0
 8007486:	d04d      	beq.n	8007524 <_printf_i+0x1b4>
 8007488:	4616      	mov	r6, r2
 800748a:	fbb5 f1f3 	udiv	r1, r5, r3
 800748e:	fb03 5711 	mls	r7, r3, r1, r5
 8007492:	5dc7      	ldrb	r7, [r0, r7]
 8007494:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007498:	462f      	mov	r7, r5
 800749a:	42bb      	cmp	r3, r7
 800749c:	460d      	mov	r5, r1
 800749e:	d9f4      	bls.n	800748a <_printf_i+0x11a>
 80074a0:	2b08      	cmp	r3, #8
 80074a2:	d10b      	bne.n	80074bc <_printf_i+0x14c>
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	07df      	lsls	r7, r3, #31
 80074a8:	d508      	bpl.n	80074bc <_printf_i+0x14c>
 80074aa:	6923      	ldr	r3, [r4, #16]
 80074ac:	6861      	ldr	r1, [r4, #4]
 80074ae:	4299      	cmp	r1, r3
 80074b0:	bfde      	ittt	le
 80074b2:	2330      	movle	r3, #48	; 0x30
 80074b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80074b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80074bc:	1b92      	subs	r2, r2, r6
 80074be:	6122      	str	r2, [r4, #16]
 80074c0:	f8cd a000 	str.w	sl, [sp]
 80074c4:	464b      	mov	r3, r9
 80074c6:	aa03      	add	r2, sp, #12
 80074c8:	4621      	mov	r1, r4
 80074ca:	4640      	mov	r0, r8
 80074cc:	f7ff fee2 	bl	8007294 <_printf_common>
 80074d0:	3001      	adds	r0, #1
 80074d2:	d14c      	bne.n	800756e <_printf_i+0x1fe>
 80074d4:	f04f 30ff 	mov.w	r0, #4294967295
 80074d8:	b004      	add	sp, #16
 80074da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074de:	4835      	ldr	r0, [pc, #212]	; (80075b4 <_printf_i+0x244>)
 80074e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80074e4:	6823      	ldr	r3, [r4, #0]
 80074e6:	680e      	ldr	r6, [r1, #0]
 80074e8:	061f      	lsls	r7, r3, #24
 80074ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80074ee:	600e      	str	r6, [r1, #0]
 80074f0:	d514      	bpl.n	800751c <_printf_i+0x1ac>
 80074f2:	07d9      	lsls	r1, r3, #31
 80074f4:	bf44      	itt	mi
 80074f6:	f043 0320 	orrmi.w	r3, r3, #32
 80074fa:	6023      	strmi	r3, [r4, #0]
 80074fc:	b91d      	cbnz	r5, 8007506 <_printf_i+0x196>
 80074fe:	6823      	ldr	r3, [r4, #0]
 8007500:	f023 0320 	bic.w	r3, r3, #32
 8007504:	6023      	str	r3, [r4, #0]
 8007506:	2310      	movs	r3, #16
 8007508:	e7b0      	b.n	800746c <_printf_i+0xfc>
 800750a:	6823      	ldr	r3, [r4, #0]
 800750c:	f043 0320 	orr.w	r3, r3, #32
 8007510:	6023      	str	r3, [r4, #0]
 8007512:	2378      	movs	r3, #120	; 0x78
 8007514:	4828      	ldr	r0, [pc, #160]	; (80075b8 <_printf_i+0x248>)
 8007516:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800751a:	e7e3      	b.n	80074e4 <_printf_i+0x174>
 800751c:	065e      	lsls	r6, r3, #25
 800751e:	bf48      	it	mi
 8007520:	b2ad      	uxthmi	r5, r5
 8007522:	e7e6      	b.n	80074f2 <_printf_i+0x182>
 8007524:	4616      	mov	r6, r2
 8007526:	e7bb      	b.n	80074a0 <_printf_i+0x130>
 8007528:	680b      	ldr	r3, [r1, #0]
 800752a:	6826      	ldr	r6, [r4, #0]
 800752c:	6960      	ldr	r0, [r4, #20]
 800752e:	1d1d      	adds	r5, r3, #4
 8007530:	600d      	str	r5, [r1, #0]
 8007532:	0635      	lsls	r5, r6, #24
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	d501      	bpl.n	800753c <_printf_i+0x1cc>
 8007538:	6018      	str	r0, [r3, #0]
 800753a:	e002      	b.n	8007542 <_printf_i+0x1d2>
 800753c:	0671      	lsls	r1, r6, #25
 800753e:	d5fb      	bpl.n	8007538 <_printf_i+0x1c8>
 8007540:	8018      	strh	r0, [r3, #0]
 8007542:	2300      	movs	r3, #0
 8007544:	6123      	str	r3, [r4, #16]
 8007546:	4616      	mov	r6, r2
 8007548:	e7ba      	b.n	80074c0 <_printf_i+0x150>
 800754a:	680b      	ldr	r3, [r1, #0]
 800754c:	1d1a      	adds	r2, r3, #4
 800754e:	600a      	str	r2, [r1, #0]
 8007550:	681e      	ldr	r6, [r3, #0]
 8007552:	6862      	ldr	r2, [r4, #4]
 8007554:	2100      	movs	r1, #0
 8007556:	4630      	mov	r0, r6
 8007558:	f7f8 fe3a 	bl	80001d0 <memchr>
 800755c:	b108      	cbz	r0, 8007562 <_printf_i+0x1f2>
 800755e:	1b80      	subs	r0, r0, r6
 8007560:	6060      	str	r0, [r4, #4]
 8007562:	6863      	ldr	r3, [r4, #4]
 8007564:	6123      	str	r3, [r4, #16]
 8007566:	2300      	movs	r3, #0
 8007568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800756c:	e7a8      	b.n	80074c0 <_printf_i+0x150>
 800756e:	6923      	ldr	r3, [r4, #16]
 8007570:	4632      	mov	r2, r6
 8007572:	4649      	mov	r1, r9
 8007574:	4640      	mov	r0, r8
 8007576:	47d0      	blx	sl
 8007578:	3001      	adds	r0, #1
 800757a:	d0ab      	beq.n	80074d4 <_printf_i+0x164>
 800757c:	6823      	ldr	r3, [r4, #0]
 800757e:	079b      	lsls	r3, r3, #30
 8007580:	d413      	bmi.n	80075aa <_printf_i+0x23a>
 8007582:	68e0      	ldr	r0, [r4, #12]
 8007584:	9b03      	ldr	r3, [sp, #12]
 8007586:	4298      	cmp	r0, r3
 8007588:	bfb8      	it	lt
 800758a:	4618      	movlt	r0, r3
 800758c:	e7a4      	b.n	80074d8 <_printf_i+0x168>
 800758e:	2301      	movs	r3, #1
 8007590:	4632      	mov	r2, r6
 8007592:	4649      	mov	r1, r9
 8007594:	4640      	mov	r0, r8
 8007596:	47d0      	blx	sl
 8007598:	3001      	adds	r0, #1
 800759a:	d09b      	beq.n	80074d4 <_printf_i+0x164>
 800759c:	3501      	adds	r5, #1
 800759e:	68e3      	ldr	r3, [r4, #12]
 80075a0:	9903      	ldr	r1, [sp, #12]
 80075a2:	1a5b      	subs	r3, r3, r1
 80075a4:	42ab      	cmp	r3, r5
 80075a6:	dcf2      	bgt.n	800758e <_printf_i+0x21e>
 80075a8:	e7eb      	b.n	8007582 <_printf_i+0x212>
 80075aa:	2500      	movs	r5, #0
 80075ac:	f104 0619 	add.w	r6, r4, #25
 80075b0:	e7f5      	b.n	800759e <_printf_i+0x22e>
 80075b2:	bf00      	nop
 80075b4:	080086cb 	.word	0x080086cb
 80075b8:	080086dc 	.word	0x080086dc

080075bc <_sbrk_r>:
 80075bc:	b538      	push	{r3, r4, r5, lr}
 80075be:	4d06      	ldr	r5, [pc, #24]	; (80075d8 <_sbrk_r+0x1c>)
 80075c0:	2300      	movs	r3, #0
 80075c2:	4604      	mov	r4, r0
 80075c4:	4608      	mov	r0, r1
 80075c6:	602b      	str	r3, [r5, #0]
 80075c8:	f7fb f8ce 	bl	8002768 <_sbrk>
 80075cc:	1c43      	adds	r3, r0, #1
 80075ce:	d102      	bne.n	80075d6 <_sbrk_r+0x1a>
 80075d0:	682b      	ldr	r3, [r5, #0]
 80075d2:	b103      	cbz	r3, 80075d6 <_sbrk_r+0x1a>
 80075d4:	6023      	str	r3, [r4, #0]
 80075d6:	bd38      	pop	{r3, r4, r5, pc}
 80075d8:	2000afd4 	.word	0x2000afd4

080075dc <__swbuf_r>:
 80075dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075de:	460e      	mov	r6, r1
 80075e0:	4614      	mov	r4, r2
 80075e2:	4605      	mov	r5, r0
 80075e4:	b118      	cbz	r0, 80075ee <__swbuf_r+0x12>
 80075e6:	6983      	ldr	r3, [r0, #24]
 80075e8:	b90b      	cbnz	r3, 80075ee <__swbuf_r+0x12>
 80075ea:	f000 f9d9 	bl	80079a0 <__sinit>
 80075ee:	4b21      	ldr	r3, [pc, #132]	; (8007674 <__swbuf_r+0x98>)
 80075f0:	429c      	cmp	r4, r3
 80075f2:	d12b      	bne.n	800764c <__swbuf_r+0x70>
 80075f4:	686c      	ldr	r4, [r5, #4]
 80075f6:	69a3      	ldr	r3, [r4, #24]
 80075f8:	60a3      	str	r3, [r4, #8]
 80075fa:	89a3      	ldrh	r3, [r4, #12]
 80075fc:	071a      	lsls	r2, r3, #28
 80075fe:	d52f      	bpl.n	8007660 <__swbuf_r+0x84>
 8007600:	6923      	ldr	r3, [r4, #16]
 8007602:	b36b      	cbz	r3, 8007660 <__swbuf_r+0x84>
 8007604:	6923      	ldr	r3, [r4, #16]
 8007606:	6820      	ldr	r0, [r4, #0]
 8007608:	1ac0      	subs	r0, r0, r3
 800760a:	6963      	ldr	r3, [r4, #20]
 800760c:	b2f6      	uxtb	r6, r6
 800760e:	4283      	cmp	r3, r0
 8007610:	4637      	mov	r7, r6
 8007612:	dc04      	bgt.n	800761e <__swbuf_r+0x42>
 8007614:	4621      	mov	r1, r4
 8007616:	4628      	mov	r0, r5
 8007618:	f000 f92e 	bl	8007878 <_fflush_r>
 800761c:	bb30      	cbnz	r0, 800766c <__swbuf_r+0x90>
 800761e:	68a3      	ldr	r3, [r4, #8]
 8007620:	3b01      	subs	r3, #1
 8007622:	60a3      	str	r3, [r4, #8]
 8007624:	6823      	ldr	r3, [r4, #0]
 8007626:	1c5a      	adds	r2, r3, #1
 8007628:	6022      	str	r2, [r4, #0]
 800762a:	701e      	strb	r6, [r3, #0]
 800762c:	6963      	ldr	r3, [r4, #20]
 800762e:	3001      	adds	r0, #1
 8007630:	4283      	cmp	r3, r0
 8007632:	d004      	beq.n	800763e <__swbuf_r+0x62>
 8007634:	89a3      	ldrh	r3, [r4, #12]
 8007636:	07db      	lsls	r3, r3, #31
 8007638:	d506      	bpl.n	8007648 <__swbuf_r+0x6c>
 800763a:	2e0a      	cmp	r6, #10
 800763c:	d104      	bne.n	8007648 <__swbuf_r+0x6c>
 800763e:	4621      	mov	r1, r4
 8007640:	4628      	mov	r0, r5
 8007642:	f000 f919 	bl	8007878 <_fflush_r>
 8007646:	b988      	cbnz	r0, 800766c <__swbuf_r+0x90>
 8007648:	4638      	mov	r0, r7
 800764a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800764c:	4b0a      	ldr	r3, [pc, #40]	; (8007678 <__swbuf_r+0x9c>)
 800764e:	429c      	cmp	r4, r3
 8007650:	d101      	bne.n	8007656 <__swbuf_r+0x7a>
 8007652:	68ac      	ldr	r4, [r5, #8]
 8007654:	e7cf      	b.n	80075f6 <__swbuf_r+0x1a>
 8007656:	4b09      	ldr	r3, [pc, #36]	; (800767c <__swbuf_r+0xa0>)
 8007658:	429c      	cmp	r4, r3
 800765a:	bf08      	it	eq
 800765c:	68ec      	ldreq	r4, [r5, #12]
 800765e:	e7ca      	b.n	80075f6 <__swbuf_r+0x1a>
 8007660:	4621      	mov	r1, r4
 8007662:	4628      	mov	r0, r5
 8007664:	f000 f80c 	bl	8007680 <__swsetup_r>
 8007668:	2800      	cmp	r0, #0
 800766a:	d0cb      	beq.n	8007604 <__swbuf_r+0x28>
 800766c:	f04f 37ff 	mov.w	r7, #4294967295
 8007670:	e7ea      	b.n	8007648 <__swbuf_r+0x6c>
 8007672:	bf00      	nop
 8007674:	08008710 	.word	0x08008710
 8007678:	08008730 	.word	0x08008730
 800767c:	080086f0 	.word	0x080086f0

08007680 <__swsetup_r>:
 8007680:	4b32      	ldr	r3, [pc, #200]	; (800774c <__swsetup_r+0xcc>)
 8007682:	b570      	push	{r4, r5, r6, lr}
 8007684:	681d      	ldr	r5, [r3, #0]
 8007686:	4606      	mov	r6, r0
 8007688:	460c      	mov	r4, r1
 800768a:	b125      	cbz	r5, 8007696 <__swsetup_r+0x16>
 800768c:	69ab      	ldr	r3, [r5, #24]
 800768e:	b913      	cbnz	r3, 8007696 <__swsetup_r+0x16>
 8007690:	4628      	mov	r0, r5
 8007692:	f000 f985 	bl	80079a0 <__sinit>
 8007696:	4b2e      	ldr	r3, [pc, #184]	; (8007750 <__swsetup_r+0xd0>)
 8007698:	429c      	cmp	r4, r3
 800769a:	d10f      	bne.n	80076bc <__swsetup_r+0x3c>
 800769c:	686c      	ldr	r4, [r5, #4]
 800769e:	89a3      	ldrh	r3, [r4, #12]
 80076a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076a4:	0719      	lsls	r1, r3, #28
 80076a6:	d42c      	bmi.n	8007702 <__swsetup_r+0x82>
 80076a8:	06dd      	lsls	r5, r3, #27
 80076aa:	d411      	bmi.n	80076d0 <__swsetup_r+0x50>
 80076ac:	2309      	movs	r3, #9
 80076ae:	6033      	str	r3, [r6, #0]
 80076b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80076b4:	81a3      	strh	r3, [r4, #12]
 80076b6:	f04f 30ff 	mov.w	r0, #4294967295
 80076ba:	e03e      	b.n	800773a <__swsetup_r+0xba>
 80076bc:	4b25      	ldr	r3, [pc, #148]	; (8007754 <__swsetup_r+0xd4>)
 80076be:	429c      	cmp	r4, r3
 80076c0:	d101      	bne.n	80076c6 <__swsetup_r+0x46>
 80076c2:	68ac      	ldr	r4, [r5, #8]
 80076c4:	e7eb      	b.n	800769e <__swsetup_r+0x1e>
 80076c6:	4b24      	ldr	r3, [pc, #144]	; (8007758 <__swsetup_r+0xd8>)
 80076c8:	429c      	cmp	r4, r3
 80076ca:	bf08      	it	eq
 80076cc:	68ec      	ldreq	r4, [r5, #12]
 80076ce:	e7e6      	b.n	800769e <__swsetup_r+0x1e>
 80076d0:	0758      	lsls	r0, r3, #29
 80076d2:	d512      	bpl.n	80076fa <__swsetup_r+0x7a>
 80076d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076d6:	b141      	cbz	r1, 80076ea <__swsetup_r+0x6a>
 80076d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076dc:	4299      	cmp	r1, r3
 80076de:	d002      	beq.n	80076e6 <__swsetup_r+0x66>
 80076e0:	4630      	mov	r0, r6
 80076e2:	f7ff fbd3 	bl	8006e8c <_free_r>
 80076e6:	2300      	movs	r3, #0
 80076e8:	6363      	str	r3, [r4, #52]	; 0x34
 80076ea:	89a3      	ldrh	r3, [r4, #12]
 80076ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80076f0:	81a3      	strh	r3, [r4, #12]
 80076f2:	2300      	movs	r3, #0
 80076f4:	6063      	str	r3, [r4, #4]
 80076f6:	6923      	ldr	r3, [r4, #16]
 80076f8:	6023      	str	r3, [r4, #0]
 80076fa:	89a3      	ldrh	r3, [r4, #12]
 80076fc:	f043 0308 	orr.w	r3, r3, #8
 8007700:	81a3      	strh	r3, [r4, #12]
 8007702:	6923      	ldr	r3, [r4, #16]
 8007704:	b94b      	cbnz	r3, 800771a <__swsetup_r+0x9a>
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800770c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007710:	d003      	beq.n	800771a <__swsetup_r+0x9a>
 8007712:	4621      	mov	r1, r4
 8007714:	4630      	mov	r0, r6
 8007716:	f000 fa07 	bl	8007b28 <__smakebuf_r>
 800771a:	89a0      	ldrh	r0, [r4, #12]
 800771c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007720:	f010 0301 	ands.w	r3, r0, #1
 8007724:	d00a      	beq.n	800773c <__swsetup_r+0xbc>
 8007726:	2300      	movs	r3, #0
 8007728:	60a3      	str	r3, [r4, #8]
 800772a:	6963      	ldr	r3, [r4, #20]
 800772c:	425b      	negs	r3, r3
 800772e:	61a3      	str	r3, [r4, #24]
 8007730:	6923      	ldr	r3, [r4, #16]
 8007732:	b943      	cbnz	r3, 8007746 <__swsetup_r+0xc6>
 8007734:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007738:	d1ba      	bne.n	80076b0 <__swsetup_r+0x30>
 800773a:	bd70      	pop	{r4, r5, r6, pc}
 800773c:	0781      	lsls	r1, r0, #30
 800773e:	bf58      	it	pl
 8007740:	6963      	ldrpl	r3, [r4, #20]
 8007742:	60a3      	str	r3, [r4, #8]
 8007744:	e7f4      	b.n	8007730 <__swsetup_r+0xb0>
 8007746:	2000      	movs	r0, #0
 8007748:	e7f7      	b.n	800773a <__swsetup_r+0xba>
 800774a:	bf00      	nop
 800774c:	20000014 	.word	0x20000014
 8007750:	08008710 	.word	0x08008710
 8007754:	08008730 	.word	0x08008730
 8007758:	080086f0 	.word	0x080086f0

0800775c <abort>:
 800775c:	b508      	push	{r3, lr}
 800775e:	2006      	movs	r0, #6
 8007760:	f000 fa56 	bl	8007c10 <raise>
 8007764:	2001      	movs	r0, #1
 8007766:	f7fa ff87 	bl	8002678 <_exit>
	...

0800776c <__sflush_r>:
 800776c:	898a      	ldrh	r2, [r1, #12]
 800776e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007772:	4605      	mov	r5, r0
 8007774:	0710      	lsls	r0, r2, #28
 8007776:	460c      	mov	r4, r1
 8007778:	d458      	bmi.n	800782c <__sflush_r+0xc0>
 800777a:	684b      	ldr	r3, [r1, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	dc05      	bgt.n	800778c <__sflush_r+0x20>
 8007780:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007782:	2b00      	cmp	r3, #0
 8007784:	dc02      	bgt.n	800778c <__sflush_r+0x20>
 8007786:	2000      	movs	r0, #0
 8007788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800778c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800778e:	2e00      	cmp	r6, #0
 8007790:	d0f9      	beq.n	8007786 <__sflush_r+0x1a>
 8007792:	2300      	movs	r3, #0
 8007794:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007798:	682f      	ldr	r7, [r5, #0]
 800779a:	602b      	str	r3, [r5, #0]
 800779c:	d032      	beq.n	8007804 <__sflush_r+0x98>
 800779e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80077a0:	89a3      	ldrh	r3, [r4, #12]
 80077a2:	075a      	lsls	r2, r3, #29
 80077a4:	d505      	bpl.n	80077b2 <__sflush_r+0x46>
 80077a6:	6863      	ldr	r3, [r4, #4]
 80077a8:	1ac0      	subs	r0, r0, r3
 80077aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077ac:	b10b      	cbz	r3, 80077b2 <__sflush_r+0x46>
 80077ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80077b0:	1ac0      	subs	r0, r0, r3
 80077b2:	2300      	movs	r3, #0
 80077b4:	4602      	mov	r2, r0
 80077b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077b8:	6a21      	ldr	r1, [r4, #32]
 80077ba:	4628      	mov	r0, r5
 80077bc:	47b0      	blx	r6
 80077be:	1c43      	adds	r3, r0, #1
 80077c0:	89a3      	ldrh	r3, [r4, #12]
 80077c2:	d106      	bne.n	80077d2 <__sflush_r+0x66>
 80077c4:	6829      	ldr	r1, [r5, #0]
 80077c6:	291d      	cmp	r1, #29
 80077c8:	d82c      	bhi.n	8007824 <__sflush_r+0xb8>
 80077ca:	4a2a      	ldr	r2, [pc, #168]	; (8007874 <__sflush_r+0x108>)
 80077cc:	40ca      	lsrs	r2, r1
 80077ce:	07d6      	lsls	r6, r2, #31
 80077d0:	d528      	bpl.n	8007824 <__sflush_r+0xb8>
 80077d2:	2200      	movs	r2, #0
 80077d4:	6062      	str	r2, [r4, #4]
 80077d6:	04d9      	lsls	r1, r3, #19
 80077d8:	6922      	ldr	r2, [r4, #16]
 80077da:	6022      	str	r2, [r4, #0]
 80077dc:	d504      	bpl.n	80077e8 <__sflush_r+0x7c>
 80077de:	1c42      	adds	r2, r0, #1
 80077e0:	d101      	bne.n	80077e6 <__sflush_r+0x7a>
 80077e2:	682b      	ldr	r3, [r5, #0]
 80077e4:	b903      	cbnz	r3, 80077e8 <__sflush_r+0x7c>
 80077e6:	6560      	str	r0, [r4, #84]	; 0x54
 80077e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077ea:	602f      	str	r7, [r5, #0]
 80077ec:	2900      	cmp	r1, #0
 80077ee:	d0ca      	beq.n	8007786 <__sflush_r+0x1a>
 80077f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077f4:	4299      	cmp	r1, r3
 80077f6:	d002      	beq.n	80077fe <__sflush_r+0x92>
 80077f8:	4628      	mov	r0, r5
 80077fa:	f7ff fb47 	bl	8006e8c <_free_r>
 80077fe:	2000      	movs	r0, #0
 8007800:	6360      	str	r0, [r4, #52]	; 0x34
 8007802:	e7c1      	b.n	8007788 <__sflush_r+0x1c>
 8007804:	6a21      	ldr	r1, [r4, #32]
 8007806:	2301      	movs	r3, #1
 8007808:	4628      	mov	r0, r5
 800780a:	47b0      	blx	r6
 800780c:	1c41      	adds	r1, r0, #1
 800780e:	d1c7      	bne.n	80077a0 <__sflush_r+0x34>
 8007810:	682b      	ldr	r3, [r5, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d0c4      	beq.n	80077a0 <__sflush_r+0x34>
 8007816:	2b1d      	cmp	r3, #29
 8007818:	d001      	beq.n	800781e <__sflush_r+0xb2>
 800781a:	2b16      	cmp	r3, #22
 800781c:	d101      	bne.n	8007822 <__sflush_r+0xb6>
 800781e:	602f      	str	r7, [r5, #0]
 8007820:	e7b1      	b.n	8007786 <__sflush_r+0x1a>
 8007822:	89a3      	ldrh	r3, [r4, #12]
 8007824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007828:	81a3      	strh	r3, [r4, #12]
 800782a:	e7ad      	b.n	8007788 <__sflush_r+0x1c>
 800782c:	690f      	ldr	r7, [r1, #16]
 800782e:	2f00      	cmp	r7, #0
 8007830:	d0a9      	beq.n	8007786 <__sflush_r+0x1a>
 8007832:	0793      	lsls	r3, r2, #30
 8007834:	680e      	ldr	r6, [r1, #0]
 8007836:	bf08      	it	eq
 8007838:	694b      	ldreq	r3, [r1, #20]
 800783a:	600f      	str	r7, [r1, #0]
 800783c:	bf18      	it	ne
 800783e:	2300      	movne	r3, #0
 8007840:	eba6 0807 	sub.w	r8, r6, r7
 8007844:	608b      	str	r3, [r1, #8]
 8007846:	f1b8 0f00 	cmp.w	r8, #0
 800784a:	dd9c      	ble.n	8007786 <__sflush_r+0x1a>
 800784c:	6a21      	ldr	r1, [r4, #32]
 800784e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007850:	4643      	mov	r3, r8
 8007852:	463a      	mov	r2, r7
 8007854:	4628      	mov	r0, r5
 8007856:	47b0      	blx	r6
 8007858:	2800      	cmp	r0, #0
 800785a:	dc06      	bgt.n	800786a <__sflush_r+0xfe>
 800785c:	89a3      	ldrh	r3, [r4, #12]
 800785e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007862:	81a3      	strh	r3, [r4, #12]
 8007864:	f04f 30ff 	mov.w	r0, #4294967295
 8007868:	e78e      	b.n	8007788 <__sflush_r+0x1c>
 800786a:	4407      	add	r7, r0
 800786c:	eba8 0800 	sub.w	r8, r8, r0
 8007870:	e7e9      	b.n	8007846 <__sflush_r+0xda>
 8007872:	bf00      	nop
 8007874:	20400001 	.word	0x20400001

08007878 <_fflush_r>:
 8007878:	b538      	push	{r3, r4, r5, lr}
 800787a:	690b      	ldr	r3, [r1, #16]
 800787c:	4605      	mov	r5, r0
 800787e:	460c      	mov	r4, r1
 8007880:	b913      	cbnz	r3, 8007888 <_fflush_r+0x10>
 8007882:	2500      	movs	r5, #0
 8007884:	4628      	mov	r0, r5
 8007886:	bd38      	pop	{r3, r4, r5, pc}
 8007888:	b118      	cbz	r0, 8007892 <_fflush_r+0x1a>
 800788a:	6983      	ldr	r3, [r0, #24]
 800788c:	b90b      	cbnz	r3, 8007892 <_fflush_r+0x1a>
 800788e:	f000 f887 	bl	80079a0 <__sinit>
 8007892:	4b14      	ldr	r3, [pc, #80]	; (80078e4 <_fflush_r+0x6c>)
 8007894:	429c      	cmp	r4, r3
 8007896:	d11b      	bne.n	80078d0 <_fflush_r+0x58>
 8007898:	686c      	ldr	r4, [r5, #4]
 800789a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d0ef      	beq.n	8007882 <_fflush_r+0xa>
 80078a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80078a4:	07d0      	lsls	r0, r2, #31
 80078a6:	d404      	bmi.n	80078b2 <_fflush_r+0x3a>
 80078a8:	0599      	lsls	r1, r3, #22
 80078aa:	d402      	bmi.n	80078b2 <_fflush_r+0x3a>
 80078ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078ae:	f000 f915 	bl	8007adc <__retarget_lock_acquire_recursive>
 80078b2:	4628      	mov	r0, r5
 80078b4:	4621      	mov	r1, r4
 80078b6:	f7ff ff59 	bl	800776c <__sflush_r>
 80078ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078bc:	07da      	lsls	r2, r3, #31
 80078be:	4605      	mov	r5, r0
 80078c0:	d4e0      	bmi.n	8007884 <_fflush_r+0xc>
 80078c2:	89a3      	ldrh	r3, [r4, #12]
 80078c4:	059b      	lsls	r3, r3, #22
 80078c6:	d4dd      	bmi.n	8007884 <_fflush_r+0xc>
 80078c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078ca:	f000 f908 	bl	8007ade <__retarget_lock_release_recursive>
 80078ce:	e7d9      	b.n	8007884 <_fflush_r+0xc>
 80078d0:	4b05      	ldr	r3, [pc, #20]	; (80078e8 <_fflush_r+0x70>)
 80078d2:	429c      	cmp	r4, r3
 80078d4:	d101      	bne.n	80078da <_fflush_r+0x62>
 80078d6:	68ac      	ldr	r4, [r5, #8]
 80078d8:	e7df      	b.n	800789a <_fflush_r+0x22>
 80078da:	4b04      	ldr	r3, [pc, #16]	; (80078ec <_fflush_r+0x74>)
 80078dc:	429c      	cmp	r4, r3
 80078de:	bf08      	it	eq
 80078e0:	68ec      	ldreq	r4, [r5, #12]
 80078e2:	e7da      	b.n	800789a <_fflush_r+0x22>
 80078e4:	08008710 	.word	0x08008710
 80078e8:	08008730 	.word	0x08008730
 80078ec:	080086f0 	.word	0x080086f0

080078f0 <std>:
 80078f0:	2300      	movs	r3, #0
 80078f2:	b510      	push	{r4, lr}
 80078f4:	4604      	mov	r4, r0
 80078f6:	e9c0 3300 	strd	r3, r3, [r0]
 80078fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078fe:	6083      	str	r3, [r0, #8]
 8007900:	8181      	strh	r1, [r0, #12]
 8007902:	6643      	str	r3, [r0, #100]	; 0x64
 8007904:	81c2      	strh	r2, [r0, #14]
 8007906:	6183      	str	r3, [r0, #24]
 8007908:	4619      	mov	r1, r3
 800790a:	2208      	movs	r2, #8
 800790c:	305c      	adds	r0, #92	; 0x5c
 800790e:	f7ff fa3d 	bl	8006d8c <memset>
 8007912:	4b05      	ldr	r3, [pc, #20]	; (8007928 <std+0x38>)
 8007914:	6263      	str	r3, [r4, #36]	; 0x24
 8007916:	4b05      	ldr	r3, [pc, #20]	; (800792c <std+0x3c>)
 8007918:	62a3      	str	r3, [r4, #40]	; 0x28
 800791a:	4b05      	ldr	r3, [pc, #20]	; (8007930 <std+0x40>)
 800791c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800791e:	4b05      	ldr	r3, [pc, #20]	; (8007934 <std+0x44>)
 8007920:	6224      	str	r4, [r4, #32]
 8007922:	6323      	str	r3, [r4, #48]	; 0x30
 8007924:	bd10      	pop	{r4, pc}
 8007926:	bf00      	nop
 8007928:	08007c49 	.word	0x08007c49
 800792c:	08007c6b 	.word	0x08007c6b
 8007930:	08007ca3 	.word	0x08007ca3
 8007934:	08007cc7 	.word	0x08007cc7

08007938 <_cleanup_r>:
 8007938:	4901      	ldr	r1, [pc, #4]	; (8007940 <_cleanup_r+0x8>)
 800793a:	f000 b8af 	b.w	8007a9c <_fwalk_reent>
 800793e:	bf00      	nop
 8007940:	08007879 	.word	0x08007879

08007944 <__sfmoreglue>:
 8007944:	b570      	push	{r4, r5, r6, lr}
 8007946:	1e4a      	subs	r2, r1, #1
 8007948:	2568      	movs	r5, #104	; 0x68
 800794a:	4355      	muls	r5, r2
 800794c:	460e      	mov	r6, r1
 800794e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007952:	f7ff faeb 	bl	8006f2c <_malloc_r>
 8007956:	4604      	mov	r4, r0
 8007958:	b140      	cbz	r0, 800796c <__sfmoreglue+0x28>
 800795a:	2100      	movs	r1, #0
 800795c:	e9c0 1600 	strd	r1, r6, [r0]
 8007960:	300c      	adds	r0, #12
 8007962:	60a0      	str	r0, [r4, #8]
 8007964:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007968:	f7ff fa10 	bl	8006d8c <memset>
 800796c:	4620      	mov	r0, r4
 800796e:	bd70      	pop	{r4, r5, r6, pc}

08007970 <__sfp_lock_acquire>:
 8007970:	4801      	ldr	r0, [pc, #4]	; (8007978 <__sfp_lock_acquire+0x8>)
 8007972:	f000 b8b3 	b.w	8007adc <__retarget_lock_acquire_recursive>
 8007976:	bf00      	nop
 8007978:	2000afd0 	.word	0x2000afd0

0800797c <__sfp_lock_release>:
 800797c:	4801      	ldr	r0, [pc, #4]	; (8007984 <__sfp_lock_release+0x8>)
 800797e:	f000 b8ae 	b.w	8007ade <__retarget_lock_release_recursive>
 8007982:	bf00      	nop
 8007984:	2000afd0 	.word	0x2000afd0

08007988 <__sinit_lock_acquire>:
 8007988:	4801      	ldr	r0, [pc, #4]	; (8007990 <__sinit_lock_acquire+0x8>)
 800798a:	f000 b8a7 	b.w	8007adc <__retarget_lock_acquire_recursive>
 800798e:	bf00      	nop
 8007990:	2000afcb 	.word	0x2000afcb

08007994 <__sinit_lock_release>:
 8007994:	4801      	ldr	r0, [pc, #4]	; (800799c <__sinit_lock_release+0x8>)
 8007996:	f000 b8a2 	b.w	8007ade <__retarget_lock_release_recursive>
 800799a:	bf00      	nop
 800799c:	2000afcb 	.word	0x2000afcb

080079a0 <__sinit>:
 80079a0:	b510      	push	{r4, lr}
 80079a2:	4604      	mov	r4, r0
 80079a4:	f7ff fff0 	bl	8007988 <__sinit_lock_acquire>
 80079a8:	69a3      	ldr	r3, [r4, #24]
 80079aa:	b11b      	cbz	r3, 80079b4 <__sinit+0x14>
 80079ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079b0:	f7ff bff0 	b.w	8007994 <__sinit_lock_release>
 80079b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80079b8:	6523      	str	r3, [r4, #80]	; 0x50
 80079ba:	4b13      	ldr	r3, [pc, #76]	; (8007a08 <__sinit+0x68>)
 80079bc:	4a13      	ldr	r2, [pc, #76]	; (8007a0c <__sinit+0x6c>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80079c2:	42a3      	cmp	r3, r4
 80079c4:	bf04      	itt	eq
 80079c6:	2301      	moveq	r3, #1
 80079c8:	61a3      	streq	r3, [r4, #24]
 80079ca:	4620      	mov	r0, r4
 80079cc:	f000 f820 	bl	8007a10 <__sfp>
 80079d0:	6060      	str	r0, [r4, #4]
 80079d2:	4620      	mov	r0, r4
 80079d4:	f000 f81c 	bl	8007a10 <__sfp>
 80079d8:	60a0      	str	r0, [r4, #8]
 80079da:	4620      	mov	r0, r4
 80079dc:	f000 f818 	bl	8007a10 <__sfp>
 80079e0:	2200      	movs	r2, #0
 80079e2:	60e0      	str	r0, [r4, #12]
 80079e4:	2104      	movs	r1, #4
 80079e6:	6860      	ldr	r0, [r4, #4]
 80079e8:	f7ff ff82 	bl	80078f0 <std>
 80079ec:	68a0      	ldr	r0, [r4, #8]
 80079ee:	2201      	movs	r2, #1
 80079f0:	2109      	movs	r1, #9
 80079f2:	f7ff ff7d 	bl	80078f0 <std>
 80079f6:	68e0      	ldr	r0, [r4, #12]
 80079f8:	2202      	movs	r2, #2
 80079fa:	2112      	movs	r1, #18
 80079fc:	f7ff ff78 	bl	80078f0 <std>
 8007a00:	2301      	movs	r3, #1
 8007a02:	61a3      	str	r3, [r4, #24]
 8007a04:	e7d2      	b.n	80079ac <__sinit+0xc>
 8007a06:	bf00      	nop
 8007a08:	08008604 	.word	0x08008604
 8007a0c:	08007939 	.word	0x08007939

08007a10 <__sfp>:
 8007a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a12:	4607      	mov	r7, r0
 8007a14:	f7ff ffac 	bl	8007970 <__sfp_lock_acquire>
 8007a18:	4b1e      	ldr	r3, [pc, #120]	; (8007a94 <__sfp+0x84>)
 8007a1a:	681e      	ldr	r6, [r3, #0]
 8007a1c:	69b3      	ldr	r3, [r6, #24]
 8007a1e:	b913      	cbnz	r3, 8007a26 <__sfp+0x16>
 8007a20:	4630      	mov	r0, r6
 8007a22:	f7ff ffbd 	bl	80079a0 <__sinit>
 8007a26:	3648      	adds	r6, #72	; 0x48
 8007a28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	d503      	bpl.n	8007a38 <__sfp+0x28>
 8007a30:	6833      	ldr	r3, [r6, #0]
 8007a32:	b30b      	cbz	r3, 8007a78 <__sfp+0x68>
 8007a34:	6836      	ldr	r6, [r6, #0]
 8007a36:	e7f7      	b.n	8007a28 <__sfp+0x18>
 8007a38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a3c:	b9d5      	cbnz	r5, 8007a74 <__sfp+0x64>
 8007a3e:	4b16      	ldr	r3, [pc, #88]	; (8007a98 <__sfp+0x88>)
 8007a40:	60e3      	str	r3, [r4, #12]
 8007a42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a46:	6665      	str	r5, [r4, #100]	; 0x64
 8007a48:	f000 f847 	bl	8007ada <__retarget_lock_init_recursive>
 8007a4c:	f7ff ff96 	bl	800797c <__sfp_lock_release>
 8007a50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a58:	6025      	str	r5, [r4, #0]
 8007a5a:	61a5      	str	r5, [r4, #24]
 8007a5c:	2208      	movs	r2, #8
 8007a5e:	4629      	mov	r1, r5
 8007a60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a64:	f7ff f992 	bl	8006d8c <memset>
 8007a68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a70:	4620      	mov	r0, r4
 8007a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a74:	3468      	adds	r4, #104	; 0x68
 8007a76:	e7d9      	b.n	8007a2c <__sfp+0x1c>
 8007a78:	2104      	movs	r1, #4
 8007a7a:	4638      	mov	r0, r7
 8007a7c:	f7ff ff62 	bl	8007944 <__sfmoreglue>
 8007a80:	4604      	mov	r4, r0
 8007a82:	6030      	str	r0, [r6, #0]
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d1d5      	bne.n	8007a34 <__sfp+0x24>
 8007a88:	f7ff ff78 	bl	800797c <__sfp_lock_release>
 8007a8c:	230c      	movs	r3, #12
 8007a8e:	603b      	str	r3, [r7, #0]
 8007a90:	e7ee      	b.n	8007a70 <__sfp+0x60>
 8007a92:	bf00      	nop
 8007a94:	08008604 	.word	0x08008604
 8007a98:	ffff0001 	.word	0xffff0001

08007a9c <_fwalk_reent>:
 8007a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007aa0:	4606      	mov	r6, r0
 8007aa2:	4688      	mov	r8, r1
 8007aa4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007aa8:	2700      	movs	r7, #0
 8007aaa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007aae:	f1b9 0901 	subs.w	r9, r9, #1
 8007ab2:	d505      	bpl.n	8007ac0 <_fwalk_reent+0x24>
 8007ab4:	6824      	ldr	r4, [r4, #0]
 8007ab6:	2c00      	cmp	r4, #0
 8007ab8:	d1f7      	bne.n	8007aaa <_fwalk_reent+0xe>
 8007aba:	4638      	mov	r0, r7
 8007abc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ac0:	89ab      	ldrh	r3, [r5, #12]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d907      	bls.n	8007ad6 <_fwalk_reent+0x3a>
 8007ac6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007aca:	3301      	adds	r3, #1
 8007acc:	d003      	beq.n	8007ad6 <_fwalk_reent+0x3a>
 8007ace:	4629      	mov	r1, r5
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	47c0      	blx	r8
 8007ad4:	4307      	orrs	r7, r0
 8007ad6:	3568      	adds	r5, #104	; 0x68
 8007ad8:	e7e9      	b.n	8007aae <_fwalk_reent+0x12>

08007ada <__retarget_lock_init_recursive>:
 8007ada:	4770      	bx	lr

08007adc <__retarget_lock_acquire_recursive>:
 8007adc:	4770      	bx	lr

08007ade <__retarget_lock_release_recursive>:
 8007ade:	4770      	bx	lr

08007ae0 <__swhatbuf_r>:
 8007ae0:	b570      	push	{r4, r5, r6, lr}
 8007ae2:	460e      	mov	r6, r1
 8007ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ae8:	2900      	cmp	r1, #0
 8007aea:	b096      	sub	sp, #88	; 0x58
 8007aec:	4614      	mov	r4, r2
 8007aee:	461d      	mov	r5, r3
 8007af0:	da07      	bge.n	8007b02 <__swhatbuf_r+0x22>
 8007af2:	2300      	movs	r3, #0
 8007af4:	602b      	str	r3, [r5, #0]
 8007af6:	89b3      	ldrh	r3, [r6, #12]
 8007af8:	061a      	lsls	r2, r3, #24
 8007afa:	d410      	bmi.n	8007b1e <__swhatbuf_r+0x3e>
 8007afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b00:	e00e      	b.n	8007b20 <__swhatbuf_r+0x40>
 8007b02:	466a      	mov	r2, sp
 8007b04:	f000 f906 	bl	8007d14 <_fstat_r>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	dbf2      	blt.n	8007af2 <__swhatbuf_r+0x12>
 8007b0c:	9a01      	ldr	r2, [sp, #4]
 8007b0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b16:	425a      	negs	r2, r3
 8007b18:	415a      	adcs	r2, r3
 8007b1a:	602a      	str	r2, [r5, #0]
 8007b1c:	e7ee      	b.n	8007afc <__swhatbuf_r+0x1c>
 8007b1e:	2340      	movs	r3, #64	; 0x40
 8007b20:	2000      	movs	r0, #0
 8007b22:	6023      	str	r3, [r4, #0]
 8007b24:	b016      	add	sp, #88	; 0x58
 8007b26:	bd70      	pop	{r4, r5, r6, pc}

08007b28 <__smakebuf_r>:
 8007b28:	898b      	ldrh	r3, [r1, #12]
 8007b2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b2c:	079d      	lsls	r5, r3, #30
 8007b2e:	4606      	mov	r6, r0
 8007b30:	460c      	mov	r4, r1
 8007b32:	d507      	bpl.n	8007b44 <__smakebuf_r+0x1c>
 8007b34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b38:	6023      	str	r3, [r4, #0]
 8007b3a:	6123      	str	r3, [r4, #16]
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	6163      	str	r3, [r4, #20]
 8007b40:	b002      	add	sp, #8
 8007b42:	bd70      	pop	{r4, r5, r6, pc}
 8007b44:	ab01      	add	r3, sp, #4
 8007b46:	466a      	mov	r2, sp
 8007b48:	f7ff ffca 	bl	8007ae0 <__swhatbuf_r>
 8007b4c:	9900      	ldr	r1, [sp, #0]
 8007b4e:	4605      	mov	r5, r0
 8007b50:	4630      	mov	r0, r6
 8007b52:	f7ff f9eb 	bl	8006f2c <_malloc_r>
 8007b56:	b948      	cbnz	r0, 8007b6c <__smakebuf_r+0x44>
 8007b58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b5c:	059a      	lsls	r2, r3, #22
 8007b5e:	d4ef      	bmi.n	8007b40 <__smakebuf_r+0x18>
 8007b60:	f023 0303 	bic.w	r3, r3, #3
 8007b64:	f043 0302 	orr.w	r3, r3, #2
 8007b68:	81a3      	strh	r3, [r4, #12]
 8007b6a:	e7e3      	b.n	8007b34 <__smakebuf_r+0xc>
 8007b6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ba4 <__smakebuf_r+0x7c>)
 8007b6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b70:	89a3      	ldrh	r3, [r4, #12]
 8007b72:	6020      	str	r0, [r4, #0]
 8007b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b78:	81a3      	strh	r3, [r4, #12]
 8007b7a:	9b00      	ldr	r3, [sp, #0]
 8007b7c:	6163      	str	r3, [r4, #20]
 8007b7e:	9b01      	ldr	r3, [sp, #4]
 8007b80:	6120      	str	r0, [r4, #16]
 8007b82:	b15b      	cbz	r3, 8007b9c <__smakebuf_r+0x74>
 8007b84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b88:	4630      	mov	r0, r6
 8007b8a:	f000 f8d5 	bl	8007d38 <_isatty_r>
 8007b8e:	b128      	cbz	r0, 8007b9c <__smakebuf_r+0x74>
 8007b90:	89a3      	ldrh	r3, [r4, #12]
 8007b92:	f023 0303 	bic.w	r3, r3, #3
 8007b96:	f043 0301 	orr.w	r3, r3, #1
 8007b9a:	81a3      	strh	r3, [r4, #12]
 8007b9c:	89a0      	ldrh	r0, [r4, #12]
 8007b9e:	4305      	orrs	r5, r0
 8007ba0:	81a5      	strh	r5, [r4, #12]
 8007ba2:	e7cd      	b.n	8007b40 <__smakebuf_r+0x18>
 8007ba4:	08007939 	.word	0x08007939

08007ba8 <__malloc_lock>:
 8007ba8:	4801      	ldr	r0, [pc, #4]	; (8007bb0 <__malloc_lock+0x8>)
 8007baa:	f7ff bf97 	b.w	8007adc <__retarget_lock_acquire_recursive>
 8007bae:	bf00      	nop
 8007bb0:	2000afcc 	.word	0x2000afcc

08007bb4 <__malloc_unlock>:
 8007bb4:	4801      	ldr	r0, [pc, #4]	; (8007bbc <__malloc_unlock+0x8>)
 8007bb6:	f7ff bf92 	b.w	8007ade <__retarget_lock_release_recursive>
 8007bba:	bf00      	nop
 8007bbc:	2000afcc 	.word	0x2000afcc

08007bc0 <_raise_r>:
 8007bc0:	291f      	cmp	r1, #31
 8007bc2:	b538      	push	{r3, r4, r5, lr}
 8007bc4:	4604      	mov	r4, r0
 8007bc6:	460d      	mov	r5, r1
 8007bc8:	d904      	bls.n	8007bd4 <_raise_r+0x14>
 8007bca:	2316      	movs	r3, #22
 8007bcc:	6003      	str	r3, [r0, #0]
 8007bce:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd2:	bd38      	pop	{r3, r4, r5, pc}
 8007bd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007bd6:	b112      	cbz	r2, 8007bde <_raise_r+0x1e>
 8007bd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007bdc:	b94b      	cbnz	r3, 8007bf2 <_raise_r+0x32>
 8007bde:	4620      	mov	r0, r4
 8007be0:	f000 f830 	bl	8007c44 <_getpid_r>
 8007be4:	462a      	mov	r2, r5
 8007be6:	4601      	mov	r1, r0
 8007be8:	4620      	mov	r0, r4
 8007bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bee:	f000 b817 	b.w	8007c20 <_kill_r>
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d00a      	beq.n	8007c0c <_raise_r+0x4c>
 8007bf6:	1c59      	adds	r1, r3, #1
 8007bf8:	d103      	bne.n	8007c02 <_raise_r+0x42>
 8007bfa:	2316      	movs	r3, #22
 8007bfc:	6003      	str	r3, [r0, #0]
 8007bfe:	2001      	movs	r0, #1
 8007c00:	e7e7      	b.n	8007bd2 <_raise_r+0x12>
 8007c02:	2400      	movs	r4, #0
 8007c04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c08:	4628      	mov	r0, r5
 8007c0a:	4798      	blx	r3
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	e7e0      	b.n	8007bd2 <_raise_r+0x12>

08007c10 <raise>:
 8007c10:	4b02      	ldr	r3, [pc, #8]	; (8007c1c <raise+0xc>)
 8007c12:	4601      	mov	r1, r0
 8007c14:	6818      	ldr	r0, [r3, #0]
 8007c16:	f7ff bfd3 	b.w	8007bc0 <_raise_r>
 8007c1a:	bf00      	nop
 8007c1c:	20000014 	.word	0x20000014

08007c20 <_kill_r>:
 8007c20:	b538      	push	{r3, r4, r5, lr}
 8007c22:	4d07      	ldr	r5, [pc, #28]	; (8007c40 <_kill_r+0x20>)
 8007c24:	2300      	movs	r3, #0
 8007c26:	4604      	mov	r4, r0
 8007c28:	4608      	mov	r0, r1
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	602b      	str	r3, [r5, #0]
 8007c2e:	f7fa fd13 	bl	8002658 <_kill>
 8007c32:	1c43      	adds	r3, r0, #1
 8007c34:	d102      	bne.n	8007c3c <_kill_r+0x1c>
 8007c36:	682b      	ldr	r3, [r5, #0]
 8007c38:	b103      	cbz	r3, 8007c3c <_kill_r+0x1c>
 8007c3a:	6023      	str	r3, [r4, #0]
 8007c3c:	bd38      	pop	{r3, r4, r5, pc}
 8007c3e:	bf00      	nop
 8007c40:	2000afd4 	.word	0x2000afd4

08007c44 <_getpid_r>:
 8007c44:	f7fa bd00 	b.w	8002648 <_getpid>

08007c48 <__sread>:
 8007c48:	b510      	push	{r4, lr}
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c50:	f000 f894 	bl	8007d7c <_read_r>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	bfab      	itete	ge
 8007c58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c5a:	89a3      	ldrhlt	r3, [r4, #12]
 8007c5c:	181b      	addge	r3, r3, r0
 8007c5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c62:	bfac      	ite	ge
 8007c64:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c66:	81a3      	strhlt	r3, [r4, #12]
 8007c68:	bd10      	pop	{r4, pc}

08007c6a <__swrite>:
 8007c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c6e:	461f      	mov	r7, r3
 8007c70:	898b      	ldrh	r3, [r1, #12]
 8007c72:	05db      	lsls	r3, r3, #23
 8007c74:	4605      	mov	r5, r0
 8007c76:	460c      	mov	r4, r1
 8007c78:	4616      	mov	r6, r2
 8007c7a:	d505      	bpl.n	8007c88 <__swrite+0x1e>
 8007c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c80:	2302      	movs	r3, #2
 8007c82:	2200      	movs	r2, #0
 8007c84:	f000 f868 	bl	8007d58 <_lseek_r>
 8007c88:	89a3      	ldrh	r3, [r4, #12]
 8007c8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c92:	81a3      	strh	r3, [r4, #12]
 8007c94:	4632      	mov	r2, r6
 8007c96:	463b      	mov	r3, r7
 8007c98:	4628      	mov	r0, r5
 8007c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9e:	f000 b817 	b.w	8007cd0 <_write_r>

08007ca2 <__sseek>:
 8007ca2:	b510      	push	{r4, lr}
 8007ca4:	460c      	mov	r4, r1
 8007ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007caa:	f000 f855 	bl	8007d58 <_lseek_r>
 8007cae:	1c43      	adds	r3, r0, #1
 8007cb0:	89a3      	ldrh	r3, [r4, #12]
 8007cb2:	bf15      	itete	ne
 8007cb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007cb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007cba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007cbe:	81a3      	strheq	r3, [r4, #12]
 8007cc0:	bf18      	it	ne
 8007cc2:	81a3      	strhne	r3, [r4, #12]
 8007cc4:	bd10      	pop	{r4, pc}

08007cc6 <__sclose>:
 8007cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cca:	f000 b813 	b.w	8007cf4 <_close_r>
	...

08007cd0 <_write_r>:
 8007cd0:	b538      	push	{r3, r4, r5, lr}
 8007cd2:	4d07      	ldr	r5, [pc, #28]	; (8007cf0 <_write_r+0x20>)
 8007cd4:	4604      	mov	r4, r0
 8007cd6:	4608      	mov	r0, r1
 8007cd8:	4611      	mov	r1, r2
 8007cda:	2200      	movs	r2, #0
 8007cdc:	602a      	str	r2, [r5, #0]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	f7fa fcf1 	bl	80026c6 <_write>
 8007ce4:	1c43      	adds	r3, r0, #1
 8007ce6:	d102      	bne.n	8007cee <_write_r+0x1e>
 8007ce8:	682b      	ldr	r3, [r5, #0]
 8007cea:	b103      	cbz	r3, 8007cee <_write_r+0x1e>
 8007cec:	6023      	str	r3, [r4, #0]
 8007cee:	bd38      	pop	{r3, r4, r5, pc}
 8007cf0:	2000afd4 	.word	0x2000afd4

08007cf4 <_close_r>:
 8007cf4:	b538      	push	{r3, r4, r5, lr}
 8007cf6:	4d06      	ldr	r5, [pc, #24]	; (8007d10 <_close_r+0x1c>)
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	4608      	mov	r0, r1
 8007cfe:	602b      	str	r3, [r5, #0]
 8007d00:	f7fa fcfd 	bl	80026fe <_close>
 8007d04:	1c43      	adds	r3, r0, #1
 8007d06:	d102      	bne.n	8007d0e <_close_r+0x1a>
 8007d08:	682b      	ldr	r3, [r5, #0]
 8007d0a:	b103      	cbz	r3, 8007d0e <_close_r+0x1a>
 8007d0c:	6023      	str	r3, [r4, #0]
 8007d0e:	bd38      	pop	{r3, r4, r5, pc}
 8007d10:	2000afd4 	.word	0x2000afd4

08007d14 <_fstat_r>:
 8007d14:	b538      	push	{r3, r4, r5, lr}
 8007d16:	4d07      	ldr	r5, [pc, #28]	; (8007d34 <_fstat_r+0x20>)
 8007d18:	2300      	movs	r3, #0
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	4608      	mov	r0, r1
 8007d1e:	4611      	mov	r1, r2
 8007d20:	602b      	str	r3, [r5, #0]
 8007d22:	f7fa fcf8 	bl	8002716 <_fstat>
 8007d26:	1c43      	adds	r3, r0, #1
 8007d28:	d102      	bne.n	8007d30 <_fstat_r+0x1c>
 8007d2a:	682b      	ldr	r3, [r5, #0]
 8007d2c:	b103      	cbz	r3, 8007d30 <_fstat_r+0x1c>
 8007d2e:	6023      	str	r3, [r4, #0]
 8007d30:	bd38      	pop	{r3, r4, r5, pc}
 8007d32:	bf00      	nop
 8007d34:	2000afd4 	.word	0x2000afd4

08007d38 <_isatty_r>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	4d06      	ldr	r5, [pc, #24]	; (8007d54 <_isatty_r+0x1c>)
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	4604      	mov	r4, r0
 8007d40:	4608      	mov	r0, r1
 8007d42:	602b      	str	r3, [r5, #0]
 8007d44:	f7fa fcf7 	bl	8002736 <_isatty>
 8007d48:	1c43      	adds	r3, r0, #1
 8007d4a:	d102      	bne.n	8007d52 <_isatty_r+0x1a>
 8007d4c:	682b      	ldr	r3, [r5, #0]
 8007d4e:	b103      	cbz	r3, 8007d52 <_isatty_r+0x1a>
 8007d50:	6023      	str	r3, [r4, #0]
 8007d52:	bd38      	pop	{r3, r4, r5, pc}
 8007d54:	2000afd4 	.word	0x2000afd4

08007d58 <_lseek_r>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	4d07      	ldr	r5, [pc, #28]	; (8007d78 <_lseek_r+0x20>)
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	4608      	mov	r0, r1
 8007d60:	4611      	mov	r1, r2
 8007d62:	2200      	movs	r2, #0
 8007d64:	602a      	str	r2, [r5, #0]
 8007d66:	461a      	mov	r2, r3
 8007d68:	f7fa fcf0 	bl	800274c <_lseek>
 8007d6c:	1c43      	adds	r3, r0, #1
 8007d6e:	d102      	bne.n	8007d76 <_lseek_r+0x1e>
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	b103      	cbz	r3, 8007d76 <_lseek_r+0x1e>
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	bd38      	pop	{r3, r4, r5, pc}
 8007d78:	2000afd4 	.word	0x2000afd4

08007d7c <_read_r>:
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	4d07      	ldr	r5, [pc, #28]	; (8007d9c <_read_r+0x20>)
 8007d80:	4604      	mov	r4, r0
 8007d82:	4608      	mov	r0, r1
 8007d84:	4611      	mov	r1, r2
 8007d86:	2200      	movs	r2, #0
 8007d88:	602a      	str	r2, [r5, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	f7fa fc7e 	bl	800268c <_read>
 8007d90:	1c43      	adds	r3, r0, #1
 8007d92:	d102      	bne.n	8007d9a <_read_r+0x1e>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	b103      	cbz	r3, 8007d9a <_read_r+0x1e>
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	bd38      	pop	{r3, r4, r5, pc}
 8007d9c:	2000afd4 	.word	0x2000afd4

08007da0 <_init>:
 8007da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da2:	bf00      	nop
 8007da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da6:	bc08      	pop	{r3}
 8007da8:	469e      	mov	lr, r3
 8007daa:	4770      	bx	lr

08007dac <_fini>:
 8007dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dae:	bf00      	nop
 8007db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007db2:	bc08      	pop	{r3}
 8007db4:	469e      	mov	lr, r3
 8007db6:	4770      	bx	lr
