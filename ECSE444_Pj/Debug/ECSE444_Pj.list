
ECSE444_Pj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b18  08008d7c  08008d7c  00018d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009894  08009894  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009894  08009894  00019894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800989c  0800989c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800989c  0800989c  0001989c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098a0  080098a0  000198a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080098a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000affc  20000078  0800991c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b074  0800991c  0002b074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a3d8  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003338  00000000  00000000  0003a480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  0003d7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  0003eb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000291c3  00000000  00000000  0003fdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015541  00000000  00000000  00068f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faab5  00000000  00000000  0007e4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  00178f81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e98  00000000  00000000  0017904c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  0017eee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d64 	.word	0x08008d64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08008d64 	.word	0x08008d64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b96e 	b.w	8000df0 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	468c      	mov	ip, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f040 8083 	bne.w	8000c42 <__udivmoddi4+0x116>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4617      	mov	r7, r2
 8000b40:	d947      	bls.n	8000bd2 <__udivmoddi4+0xa6>
 8000b42:	fab2 f282 	clz	r2, r2
 8000b46:	b142      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b48:	f1c2 0020 	rsb	r0, r2, #32
 8000b4c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b50:	4091      	lsls	r1, r2
 8000b52:	4097      	lsls	r7, r2
 8000b54:	ea40 0c01 	orr.w	ip, r0, r1
 8000b58:	4094      	lsls	r4, r2
 8000b5a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fbbc f6f8 	udiv	r6, ip, r8
 8000b64:	fa1f fe87 	uxth.w	lr, r7
 8000b68:	fb08 c116 	mls	r1, r8, r6, ip
 8000b6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b70:	fb06 f10e 	mul.w	r1, r6, lr
 8000b74:	4299      	cmp	r1, r3
 8000b76:	d909      	bls.n	8000b8c <__udivmoddi4+0x60>
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b7e:	f080 8119 	bcs.w	8000db4 <__udivmoddi4+0x288>
 8000b82:	4299      	cmp	r1, r3
 8000b84:	f240 8116 	bls.w	8000db4 <__udivmoddi4+0x288>
 8000b88:	3e02      	subs	r6, #2
 8000b8a:	443b      	add	r3, r7
 8000b8c:	1a5b      	subs	r3, r3, r1
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b94:	fb08 3310 	mls	r3, r8, r0, r3
 8000b98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba0:	45a6      	cmp	lr, r4
 8000ba2:	d909      	bls.n	8000bb8 <__udivmoddi4+0x8c>
 8000ba4:	193c      	adds	r4, r7, r4
 8000ba6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000baa:	f080 8105 	bcs.w	8000db8 <__udivmoddi4+0x28c>
 8000bae:	45a6      	cmp	lr, r4
 8000bb0:	f240 8102 	bls.w	8000db8 <__udivmoddi4+0x28c>
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	443c      	add	r4, r7
 8000bb8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bbc:	eba4 040e 	sub.w	r4, r4, lr
 8000bc0:	2600      	movs	r6, #0
 8000bc2:	b11d      	cbz	r5, 8000bcc <__udivmoddi4+0xa0>
 8000bc4:	40d4      	lsrs	r4, r2
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bcc:	4631      	mov	r1, r6
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	b902      	cbnz	r2, 8000bd6 <__udivmoddi4+0xaa>
 8000bd4:	deff      	udf	#255	; 0xff
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	d150      	bne.n	8000c80 <__udivmoddi4+0x154>
 8000bde:	1bcb      	subs	r3, r1, r7
 8000be0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000be4:	fa1f f887 	uxth.w	r8, r7
 8000be8:	2601      	movs	r6, #1
 8000bea:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bee:	0c21      	lsrs	r1, r4, #16
 8000bf0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bf4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bf8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bfc:	428b      	cmp	r3, r1
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0xe4>
 8000c00:	1879      	adds	r1, r7, r1
 8000c02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0xe2>
 8000c08:	428b      	cmp	r3, r1
 8000c0a:	f200 80e9 	bhi.w	8000de0 <__udivmoddi4+0x2b4>
 8000c0e:	4684      	mov	ip, r0
 8000c10:	1ac9      	subs	r1, r1, r3
 8000c12:	b2a3      	uxth	r3, r4
 8000c14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c18:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c1c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c20:	fb08 f800 	mul.w	r8, r8, r0
 8000c24:	45a0      	cmp	r8, r4
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x10c>
 8000c28:	193c      	adds	r4, r7, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x10a>
 8000c30:	45a0      	cmp	r8, r4
 8000c32:	f200 80d9 	bhi.w	8000de8 <__udivmoddi4+0x2bc>
 8000c36:	4618      	mov	r0, r3
 8000c38:	eba4 0408 	sub.w	r4, r4, r8
 8000c3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c40:	e7bf      	b.n	8000bc2 <__udivmoddi4+0x96>
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0x12e>
 8000c46:	2d00      	cmp	r5, #0
 8000c48:	f000 80b1 	beq.w	8000dae <__udivmoddi4+0x282>
 8000c4c:	2600      	movs	r6, #0
 8000c4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c52:	4630      	mov	r0, r6
 8000c54:	4631      	mov	r1, r6
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	fab3 f683 	clz	r6, r3
 8000c5e:	2e00      	cmp	r6, #0
 8000c60:	d14a      	bne.n	8000cf8 <__udivmoddi4+0x1cc>
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d302      	bcc.n	8000c6c <__udivmoddi4+0x140>
 8000c66:	4282      	cmp	r2, r0
 8000c68:	f200 80b8 	bhi.w	8000ddc <__udivmoddi4+0x2b0>
 8000c6c:	1a84      	subs	r4, r0, r2
 8000c6e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c72:	2001      	movs	r0, #1
 8000c74:	468c      	mov	ip, r1
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	d0a8      	beq.n	8000bcc <__udivmoddi4+0xa0>
 8000c7a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c7e:	e7a5      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000c80:	f1c2 0320 	rsb	r3, r2, #32
 8000c84:	fa20 f603 	lsr.w	r6, r0, r3
 8000c88:	4097      	lsls	r7, r2
 8000c8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c8e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c92:	40d9      	lsrs	r1, r3
 8000c94:	4330      	orrs	r0, r6
 8000c96:	0c03      	lsrs	r3, r0, #16
 8000c98:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c9c:	fa1f f887 	uxth.w	r8, r7
 8000ca0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ca4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca8:	fb06 f108 	mul.w	r1, r6, r8
 8000cac:	4299      	cmp	r1, r3
 8000cae:	fa04 f402 	lsl.w	r4, r4, r2
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x19c>
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cba:	f080 808d 	bcs.w	8000dd8 <__udivmoddi4+0x2ac>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 808a 	bls.w	8000dd8 <__udivmoddi4+0x2ac>
 8000cc4:	3e02      	subs	r6, #2
 8000cc6:	443b      	add	r3, r7
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b281      	uxth	r1, r0
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd8:	fb00 f308 	mul.w	r3, r0, r8
 8000cdc:	428b      	cmp	r3, r1
 8000cde:	d907      	bls.n	8000cf0 <__udivmoddi4+0x1c4>
 8000ce0:	1879      	adds	r1, r7, r1
 8000ce2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ce6:	d273      	bcs.n	8000dd0 <__udivmoddi4+0x2a4>
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d971      	bls.n	8000dd0 <__udivmoddi4+0x2a4>
 8000cec:	3802      	subs	r0, #2
 8000cee:	4439      	add	r1, r7
 8000cf0:	1acb      	subs	r3, r1, r3
 8000cf2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cf6:	e778      	b.n	8000bea <__udivmoddi4+0xbe>
 8000cf8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cfc:	fa03 f406 	lsl.w	r4, r3, r6
 8000d00:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d04:	431c      	orrs	r4, r3
 8000d06:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d0e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d12:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d16:	431f      	orrs	r7, r3
 8000d18:	0c3b      	lsrs	r3, r7, #16
 8000d1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d1e:	fa1f f884 	uxth.w	r8, r4
 8000d22:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d26:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d2a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d2e:	458a      	cmp	sl, r1
 8000d30:	fa02 f206 	lsl.w	r2, r2, r6
 8000d34:	fa00 f306 	lsl.w	r3, r0, r6
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x220>
 8000d3a:	1861      	adds	r1, r4, r1
 8000d3c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d40:	d248      	bcs.n	8000dd4 <__udivmoddi4+0x2a8>
 8000d42:	458a      	cmp	sl, r1
 8000d44:	d946      	bls.n	8000dd4 <__udivmoddi4+0x2a8>
 8000d46:	f1a9 0902 	sub.w	r9, r9, #2
 8000d4a:	4421      	add	r1, r4
 8000d4c:	eba1 010a 	sub.w	r1, r1, sl
 8000d50:	b2bf      	uxth	r7, r7
 8000d52:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d56:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d5a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d5e:	fb00 f808 	mul.w	r8, r0, r8
 8000d62:	45b8      	cmp	r8, r7
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0x24a>
 8000d66:	19e7      	adds	r7, r4, r7
 8000d68:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d6c:	d22e      	bcs.n	8000dcc <__udivmoddi4+0x2a0>
 8000d6e:	45b8      	cmp	r8, r7
 8000d70:	d92c      	bls.n	8000dcc <__udivmoddi4+0x2a0>
 8000d72:	3802      	subs	r0, #2
 8000d74:	4427      	add	r7, r4
 8000d76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d7a:	eba7 0708 	sub.w	r7, r7, r8
 8000d7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d82:	454f      	cmp	r7, r9
 8000d84:	46c6      	mov	lr, r8
 8000d86:	4649      	mov	r1, r9
 8000d88:	d31a      	bcc.n	8000dc0 <__udivmoddi4+0x294>
 8000d8a:	d017      	beq.n	8000dbc <__udivmoddi4+0x290>
 8000d8c:	b15d      	cbz	r5, 8000da6 <__udivmoddi4+0x27a>
 8000d8e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d92:	eb67 0701 	sbc.w	r7, r7, r1
 8000d96:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d9a:	40f2      	lsrs	r2, r6
 8000d9c:	ea4c 0202 	orr.w	r2, ip, r2
 8000da0:	40f7      	lsrs	r7, r6
 8000da2:	e9c5 2700 	strd	r2, r7, [r5]
 8000da6:	2600      	movs	r6, #0
 8000da8:	4631      	mov	r1, r6
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	462e      	mov	r6, r5
 8000db0:	4628      	mov	r0, r5
 8000db2:	e70b      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000db4:	4606      	mov	r6, r0
 8000db6:	e6e9      	b.n	8000b8c <__udivmoddi4+0x60>
 8000db8:	4618      	mov	r0, r3
 8000dba:	e6fd      	b.n	8000bb8 <__udivmoddi4+0x8c>
 8000dbc:	4543      	cmp	r3, r8
 8000dbe:	d2e5      	bcs.n	8000d8c <__udivmoddi4+0x260>
 8000dc0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dc4:	eb69 0104 	sbc.w	r1, r9, r4
 8000dc8:	3801      	subs	r0, #1
 8000dca:	e7df      	b.n	8000d8c <__udivmoddi4+0x260>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	e7d2      	b.n	8000d76 <__udivmoddi4+0x24a>
 8000dd0:	4660      	mov	r0, ip
 8000dd2:	e78d      	b.n	8000cf0 <__udivmoddi4+0x1c4>
 8000dd4:	4681      	mov	r9, r0
 8000dd6:	e7b9      	b.n	8000d4c <__udivmoddi4+0x220>
 8000dd8:	4666      	mov	r6, ip
 8000dda:	e775      	b.n	8000cc8 <__udivmoddi4+0x19c>
 8000ddc:	4630      	mov	r0, r6
 8000dde:	e74a      	b.n	8000c76 <__udivmoddi4+0x14a>
 8000de0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000de4:	4439      	add	r1, r7
 8000de6:	e713      	b.n	8000c10 <__udivmoddi4+0xe4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	443c      	add	r4, r7
 8000dec:	e724      	b.n	8000c38 <__udivmoddi4+0x10c>
 8000dee:	bf00      	nop

08000df0 <__aeabi_idiv0>:
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfe:	2003      	movs	r0, #3
 8000e00:	f000 f901 	bl	8001006 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e04:	200f      	movs	r0, #15
 8000e06:	f006 fb8d 	bl	8007524 <HAL_InitTick>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d002      	beq.n	8000e16 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	71fb      	strb	r3, [r7, #7]
 8000e14:	e001      	b.n	8000e1a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e16:	f006 f9f3 	bl	8007200 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x20>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x24>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <HAL_IncTick+0x24>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000004 	.word	0x20000004
 8000e48:	2000ad68 	.word	0x2000ad68

08000e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e50:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <HAL_GetTick+0x14>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	2000ad68 	.word	0x2000ad68

08000e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e6c:	f7ff ffee 	bl	8000e4c <HAL_GetTick>
 8000e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e7c:	d005      	beq.n	8000e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <HAL_Delay+0x44>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4413      	add	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e8a:	bf00      	nop
 8000e8c:	f7ff ffde 	bl	8000e4c <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d8f7      	bhi.n	8000e8c <HAL_Delay+0x28>
  {
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000004 	.word	0x20000004

08000eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ede:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	60d3      	str	r3, [r2, #12]
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <__NVIC_GetPriorityGrouping+0x18>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	0a1b      	lsrs	r3, r3, #8
 8000efe:	f003 0307 	and.w	r3, r3, #7
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	db0b      	blt.n	8000f3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	f003 021f 	and.w	r2, r3, #31
 8000f28:	4907      	ldr	r1, [pc, #28]	; (8000f48 <__NVIC_EnableIRQ+0x38>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	095b      	lsrs	r3, r3, #5
 8000f30:	2001      	movs	r0, #1
 8000f32:	fa00 f202 	lsl.w	r2, r0, r2
 8000f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000e100 	.word	0xe000e100

08000f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	db0a      	blt.n	8000f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	490c      	ldr	r1, [pc, #48]	; (8000f98 <__NVIC_SetPriority+0x4c>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	0112      	lsls	r2, r2, #4
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	440b      	add	r3, r1
 8000f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f74:	e00a      	b.n	8000f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4908      	ldr	r1, [pc, #32]	; (8000f9c <__NVIC_SetPriority+0x50>)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	3b04      	subs	r3, #4
 8000f84:	0112      	lsls	r2, r2, #4
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	440b      	add	r3, r1
 8000f8a:	761a      	strb	r2, [r3, #24]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000e100 	.word	0xe000e100
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	; 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f1c3 0307 	rsb	r3, r3, #7
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	bf28      	it	cs
 8000fbe:	2304      	movcs	r3, #4
 8000fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	2b06      	cmp	r3, #6
 8000fc8:	d902      	bls.n	8000fd0 <NVIC_EncodePriority+0x30>
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3b03      	subs	r3, #3
 8000fce:	e000      	b.n	8000fd2 <NVIC_EncodePriority+0x32>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43d9      	mvns	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	4313      	orrs	r3, r2
         );
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3724      	adds	r7, #36	; 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ff4c 	bl	8000eac <__NVIC_SetPriorityGrouping>
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800102e:	f7ff ff61 	bl	8000ef4 <__NVIC_GetPriorityGrouping>
 8001032:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	68b9      	ldr	r1, [r7, #8]
 8001038:	6978      	ldr	r0, [r7, #20]
 800103a:	f7ff ffb1 	bl	8000fa0 <NVIC_EncodePriority>
 800103e:	4602      	mov	r2, r0
 8001040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001044:	4611      	mov	r1, r2
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff ff80 	bl	8000f4c <__NVIC_SetPriority>
}
 800104c:	bf00      	nop
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff54 	bl	8000f10 <__NVIC_EnableIRQ>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e014      	b.n	80010ac <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	791b      	ldrb	r3, [r3, #4]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d105      	bne.n	8001098 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f006 f8d8 	bl	8007248 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2202      	movs	r2, #2
 800109c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2201      	movs	r2, #1
 80010a8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
 80010c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	795b      	ldrb	r3, [r3, #5]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d101      	bne.n	80010d2 <HAL_DAC_Start_DMA+0x1e>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e0ab      	b.n	800122a <HAL_DAC_Start_DMA+0x176>
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2201      	movs	r2, #1
 80010d6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2202      	movs	r2, #2
 80010dc:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d12f      	bne.n	8001144 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	4a52      	ldr	r2, [pc, #328]	; (8001234 <HAL_DAC_Start_DMA+0x180>)
 80010ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	4a51      	ldr	r2, [pc, #324]	; (8001238 <HAL_DAC_Start_DMA+0x184>)
 80010f2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	4a50      	ldr	r2, [pc, #320]	; (800123c <HAL_DAC_Start_DMA+0x188>)
 80010fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800110a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800110c:	6a3b      	ldr	r3, [r7, #32]
 800110e:	2b08      	cmp	r3, #8
 8001110:	d013      	beq.n	800113a <HAL_DAC_Start_DMA+0x86>
 8001112:	6a3b      	ldr	r3, [r7, #32]
 8001114:	2b08      	cmp	r3, #8
 8001116:	d845      	bhi.n	80011a4 <HAL_DAC_Start_DMA+0xf0>
 8001118:	6a3b      	ldr	r3, [r7, #32]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_DAC_Start_DMA+0x72>
 800111e:	6a3b      	ldr	r3, [r7, #32]
 8001120:	2b04      	cmp	r3, #4
 8001122:	d005      	beq.n	8001130 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001124:	e03e      	b.n	80011a4 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	3308      	adds	r3, #8
 800112c:	613b      	str	r3, [r7, #16]
        break;
 800112e:	e03c      	b.n	80011aa <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	330c      	adds	r3, #12
 8001136:	613b      	str	r3, [r7, #16]
        break;
 8001138:	e037      	b.n	80011aa <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	3310      	adds	r3, #16
 8001140:	613b      	str	r3, [r7, #16]
        break;
 8001142:	e032      	b.n	80011aa <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	4a3d      	ldr	r2, [pc, #244]	; (8001240 <HAL_DAC_Start_DMA+0x18c>)
 800114a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	4a3c      	ldr	r2, [pc, #240]	; (8001244 <HAL_DAC_Start_DMA+0x190>)
 8001152:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	4a3b      	ldr	r2, [pc, #236]	; (8001248 <HAL_DAC_Start_DMA+0x194>)
 800115a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800116a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800116c:	6a3b      	ldr	r3, [r7, #32]
 800116e:	2b08      	cmp	r3, #8
 8001170:	d013      	beq.n	800119a <HAL_DAC_Start_DMA+0xe6>
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	2b08      	cmp	r3, #8
 8001176:	d817      	bhi.n	80011a8 <HAL_DAC_Start_DMA+0xf4>
 8001178:	6a3b      	ldr	r3, [r7, #32]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_DAC_Start_DMA+0xd2>
 800117e:	6a3b      	ldr	r3, [r7, #32]
 8001180:	2b04      	cmp	r3, #4
 8001182:	d005      	beq.n	8001190 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001184:	e010      	b.n	80011a8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	3314      	adds	r3, #20
 800118c:	613b      	str	r3, [r7, #16]
        break;
 800118e:	e00c      	b.n	80011aa <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	3318      	adds	r3, #24
 8001196:	613b      	str	r3, [r7, #16]
        break;
 8001198:	e007      	b.n	80011aa <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	331c      	adds	r3, #28
 80011a0:	613b      	str	r3, [r7, #16]
        break;
 80011a2:	e002      	b.n	80011aa <HAL_DAC_Start_DMA+0xf6>
        break;
 80011a4:	bf00      	nop
 80011a6:	e000      	b.n	80011aa <HAL_DAC_Start_DMA+0xf6>
        break;
 80011a8:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d111      	bne.n	80011d4 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80011be:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6898      	ldr	r0, [r3, #8]
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	f000 faaf 	bl	800172c <HAL_DMA_Start_IT>
 80011ce:	4603      	mov	r3, r0
 80011d0:	75fb      	strb	r3, [r7, #23]
 80011d2:	e010      	b.n	80011f6 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80011e2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	68d8      	ldr	r0, [r3, #12]
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	f000 fa9d 	bl	800172c <HAL_DMA_Start_IT>
 80011f2:	4603      	mov	r3, r0
 80011f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2200      	movs	r2, #0
 80011fa:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80011fc:	7dfb      	ldrb	r3, [r7, #23]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10c      	bne.n	800121c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6819      	ldr	r1, [r3, #0]
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	f003 0310 	and.w	r3, r3, #16
 800120e:	2201      	movs	r2, #1
 8001210:	409a      	lsls	r2, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	430a      	orrs	r2, r1
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	e005      	b.n	8001228 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	f043 0204 	orr.w	r2, r3, #4
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001228:	7dfb      	ldrb	r3, [r7, #23]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	080014a9 	.word	0x080014a9
 8001238:	080014cb 	.word	0x080014cb
 800123c:	080014e7 	.word	0x080014e7
 8001240:	08001551 	.word	0x08001551
 8001244:	08001573 	.word	0x08001573
 8001248:	0800158f 	.word	0x0800158f

0800124c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	795b      	ldrb	r3, [r3, #5]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d101      	bne.n	8001290 <HAL_DAC_ConfigChannel+0x1c>
 800128c:	2302      	movs	r3, #2
 800128e:	e107      	b.n	80014a0 <HAL_DAC_ConfigChannel+0x22c>
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2201      	movs	r2, #1
 8001294:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2202      	movs	r2, #2
 800129a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b04      	cmp	r3, #4
 80012a2:	d174      	bne.n	800138e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80012a4:	f7ff fdd2 	bl	8000e4c <HAL_GetTick>
 80012a8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d134      	bne.n	800131a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80012b0:	e011      	b.n	80012d6 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80012b2:	f7ff fdcb 	bl	8000e4c <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d90a      	bls.n	80012d6 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	f043 0208 	orr.w	r2, r3, #8
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2203      	movs	r2, #3
 80012d0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e0e4      	b.n	80014a0 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1e6      	bne.n	80012b2 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80012e4:	2001      	movs	r0, #1
 80012e6:	f7ff fdbd 	bl	8000e64 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	6992      	ldr	r2, [r2, #24]
 80012f2:	641a      	str	r2, [r3, #64]	; 0x40
 80012f4:	e01e      	b.n	8001334 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80012f6:	f7ff fda9 	bl	8000e4c <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b01      	cmp	r3, #1
 8001302:	d90a      	bls.n	800131a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	f043 0208 	orr.w	r2, r3, #8
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2203      	movs	r2, #3
 8001314:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e0c2      	b.n	80014a0 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001320:	2b00      	cmp	r3, #0
 8001322:	dbe8      	blt.n	80012f6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001324:	2001      	movs	r0, #1
 8001326:	f7ff fd9d 	bl	8000e64 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	6992      	ldr	r2, [r2, #24]
 8001332:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f003 0310 	and.w	r3, r3, #16
 8001340:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	ea02 0103 	and.w	r1, r2, r3
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	69da      	ldr	r2, [r3, #28]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f003 0310 	and.w	r3, r3, #16
 8001358:	409a      	lsls	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	430a      	orrs	r2, r1
 8001360:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	21ff      	movs	r1, #255	; 0xff
 8001370:	fa01 f303 	lsl.w	r3, r1, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	ea02 0103 	and.w	r1, r2, r3
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	6a1a      	ldr	r2, [r3, #32]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f003 0310 	and.w	r3, r3, #16
 8001384:	409a      	lsls	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d11d      	bne.n	80013d2 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800139c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f003 0310 	and.w	r3, r3, #16
 80013a4:	221f      	movs	r2, #31
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d8:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f003 0310 	and.w	r3, r3, #16
 80013e0:	2207      	movs	r2, #7
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	431a      	orrs	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6819      	ldr	r1, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43da      	mvns	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	400a      	ands	r2, r1
 8001436:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	f640 72fc 	movw	r2, #4092	; 0xffc
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f003 0310 	and.w	r3, r3, #16
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6819      	ldr	r1, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f003 0310 	and.w	r3, r3, #16
 8001482:	22c0      	movs	r2, #192	; 0xc0
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43da      	mvns	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	400a      	ands	r2, r1
 8001490:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2201      	movs	r2, #1
 8001496:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2200      	movs	r2, #0
 800149c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3720      	adds	r7, #32
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f005 f91a 	bl	80066f0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2201      	movs	r2, #1
 80014c0:	711a      	strb	r2, [r3, #4]
}
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b084      	sub	sp, #16
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f7ff feb7 	bl	800124c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b084      	sub	sp, #16
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	f043 0204 	orr.w	r2, r3, #4
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f7ff fead 	bl	8001260 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2201      	movs	r2, #1
 800150a:	711a      	strb	r2, [r3, #4]
}
 800150c:	bf00      	nop
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f7ff ffd8 	bl	8001514 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2201      	movs	r2, #1
 8001568:	711a      	strb	r2, [r3, #4]
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f7ff ffd1 	bl	8001528 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b084      	sub	sp, #16
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	f043 0204 	orr.w	r2, r3, #4
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f7ff ffc7 	bl	800153c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2201      	movs	r2, #1
 80015b2:	711a      	strb	r2, [r3, #4]
}
 80015b4:	bf00      	nop
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e098      	b.n	8001700 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b4d      	ldr	r3, [pc, #308]	; (800170c <HAL_DMA_Init+0x150>)
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d80f      	bhi.n	80015fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	4b4b      	ldr	r3, [pc, #300]	; (8001710 <HAL_DMA_Init+0x154>)
 80015e2:	4413      	add	r3, r2
 80015e4:	4a4b      	ldr	r2, [pc, #300]	; (8001714 <HAL_DMA_Init+0x158>)
 80015e6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	009a      	lsls	r2, r3, #2
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a48      	ldr	r2, [pc, #288]	; (8001718 <HAL_DMA_Init+0x15c>)
 80015f6:	641a      	str	r2, [r3, #64]	; 0x40
 80015f8:	e00e      	b.n	8001618 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	4b46      	ldr	r3, [pc, #280]	; (800171c <HAL_DMA_Init+0x160>)
 8001602:	4413      	add	r3, r2
 8001604:	4a43      	ldr	r2, [pc, #268]	; (8001714 <HAL_DMA_Init+0x158>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	091b      	lsrs	r3, r3, #4
 800160c:	009a      	lsls	r2, r3, #2
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a42      	ldr	r2, [pc, #264]	; (8001720 <HAL_DMA_Init+0x164>)
 8001616:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2202      	movs	r2, #2
 800161c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800162e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001632:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800163c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001648:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001654:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	4313      	orrs	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001672:	d039      	beq.n	80016e8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	4a27      	ldr	r2, [pc, #156]	; (8001718 <HAL_DMA_Init+0x15c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d11a      	bne.n	80016b4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800167e:	4b29      	ldr	r3, [pc, #164]	; (8001724 <HAL_DMA_Init+0x168>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f003 031c 	and.w	r3, r3, #28
 800168a:	210f      	movs	r1, #15
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	4924      	ldr	r1, [pc, #144]	; (8001724 <HAL_DMA_Init+0x168>)
 8001694:	4013      	ands	r3, r2
 8001696:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001698:	4b22      	ldr	r3, [pc, #136]	; (8001724 <HAL_DMA_Init+0x168>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6859      	ldr	r1, [r3, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a4:	f003 031c 	and.w	r3, r3, #28
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	491d      	ldr	r1, [pc, #116]	; (8001724 <HAL_DMA_Init+0x168>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]
 80016b2:	e019      	b.n	80016e8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80016b4:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <HAL_DMA_Init+0x16c>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016bc:	f003 031c 	and.w	r3, r3, #28
 80016c0:	210f      	movs	r1, #15
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	4917      	ldr	r1, [pc, #92]	; (8001728 <HAL_DMA_Init+0x16c>)
 80016ca:	4013      	ands	r3, r2
 80016cc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80016ce:	4b16      	ldr	r3, [pc, #88]	; (8001728 <HAL_DMA_Init+0x16c>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6859      	ldr	r1, [r3, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	f003 031c 	and.w	r3, r3, #28
 80016de:	fa01 f303 	lsl.w	r3, r1, r3
 80016e2:	4911      	ldr	r1, [pc, #68]	; (8001728 <HAL_DMA_Init+0x16c>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	40020407 	.word	0x40020407
 8001710:	bffdfff8 	.word	0xbffdfff8
 8001714:	cccccccd 	.word	0xcccccccd
 8001718:	40020000 	.word	0x40020000
 800171c:	bffdfbf8 	.word	0xbffdfbf8
 8001720:	40020400 	.word	0x40020400
 8001724:	400200a8 	.word	0x400200a8
 8001728:	400204a8 	.word	0x400204a8

0800172c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001744:	2b01      	cmp	r3, #1
 8001746:	d101      	bne.n	800174c <HAL_DMA_Start_IT+0x20>
 8001748:	2302      	movs	r3, #2
 800174a:	e04b      	b.n	80017e4 <HAL_DMA_Start_IT+0xb8>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b01      	cmp	r3, #1
 800175e:	d13a      	bne.n	80017d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2202      	movs	r2, #2
 8001764:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2200      	movs	r2, #0
 800176c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0201 	bic.w	r2, r2, #1
 800177c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	68b9      	ldr	r1, [r7, #8]
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f000 f91e 	bl	80019c6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	2b00      	cmp	r3, #0
 8001790:	d008      	beq.n	80017a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f042 020e 	orr.w	r2, r2, #14
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	e00f      	b.n	80017c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0204 	bic.w	r2, r2, #4
 80017b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 020a 	orr.w	r2, r2, #10
 80017c2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f042 0201 	orr.w	r2, r2, #1
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	e005      	b.n	80017e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80017de:	2302      	movs	r3, #2
 80017e0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80017e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d008      	beq.n	8001816 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2204      	movs	r2, #4
 8001808:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e022      	b.n	800185c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 020e 	bic.w	r2, r2, #14
 8001824:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 0201 	bic.w	r2, r2, #1
 8001834:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	f003 021c 	and.w	r2, r3, #28
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	2101      	movs	r1, #1
 8001844:	fa01 f202 	lsl.w	r2, r1, r2
 8001848:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800185a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800185c:	4618      	mov	r0, r3
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001884:	f003 031c 	and.w	r3, r3, #28
 8001888:	2204      	movs	r2, #4
 800188a:	409a      	lsls	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4013      	ands	r3, r2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d026      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x7a>
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	2b00      	cmp	r3, #0
 800189c:	d021      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0320 	and.w	r3, r3, #32
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d107      	bne.n	80018bc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0204 	bic.w	r2, r2, #4
 80018ba:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c0:	f003 021c 	and.w	r2, r3, #28
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	2104      	movs	r1, #4
 80018ca:	fa01 f202 	lsl.w	r2, r1, r2
 80018ce:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d071      	beq.n	80019bc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80018e0:	e06c      	b.n	80019bc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	f003 031c 	and.w	r3, r3, #28
 80018ea:	2202      	movs	r2, #2
 80018ec:	409a      	lsls	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4013      	ands	r3, r2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d02e      	beq.n	8001954 <HAL_DMA_IRQHandler+0xec>
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d029      	beq.n	8001954 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0320 	and.w	r3, r3, #32
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10b      	bne.n	8001926 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 020a 	bic.w	r2, r2, #10
 800191c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	f003 021c 	and.w	r2, r3, #28
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	2102      	movs	r1, #2
 8001934:	fa01 f202 	lsl.w	r2, r1, r2
 8001938:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	2b00      	cmp	r3, #0
 8001948:	d038      	beq.n	80019bc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001952:	e033      	b.n	80019bc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001958:	f003 031c 	and.w	r3, r3, #28
 800195c:	2208      	movs	r2, #8
 800195e:	409a      	lsls	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4013      	ands	r3, r2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d02a      	beq.n	80019be <HAL_DMA_IRQHandler+0x156>
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d025      	beq.n	80019be <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 020e 	bic.w	r2, r2, #14
 8001980:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	f003 021c 	and.w	r2, r3, #28
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	2101      	movs	r1, #1
 8001990:	fa01 f202 	lsl.w	r2, r1, r2
 8001994:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d004      	beq.n	80019be <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
}
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b085      	sub	sp, #20
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
 80019d2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d8:	f003 021c 	and.w	r2, r3, #28
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	2101      	movs	r1, #1
 80019e2:	fa01 f202 	lsl.w	r2, r1, r2
 80019e6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b10      	cmp	r3, #16
 80019f6:	d108      	bne.n	8001a0a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a08:	e007      	b.n	8001a1a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	60da      	str	r2, [r3, #12]
}
 8001a1a:	bf00      	nop
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a36:	e17f      	b.n	8001d38 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	fa01 f303 	lsl.w	r3, r1, r3
 8001a44:	4013      	ands	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 8171 	beq.w	8001d32 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d00b      	beq.n	8001a70 <HAL_GPIO_Init+0x48>
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d007      	beq.n	8001a70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a64:	2b11      	cmp	r3, #17
 8001a66:	d003      	beq.n	8001a70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b12      	cmp	r3, #18
 8001a6e:	d130      	bne.n	8001ad2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	091b      	lsrs	r3, r3, #4
 8001abc:	f003 0201 	and.w	r2, r3, #1
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d118      	bne.n	8001b10 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	08db      	lsrs	r3, r3, #3
 8001afa:	f003 0201 	and.w	r2, r3, #1
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x128>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b12      	cmp	r3, #18
 8001b4e:	d123      	bne.n	8001b98 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	08da      	lsrs	r2, r3, #3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3208      	adds	r2, #8
 8001b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	220f      	movs	r2, #15
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	691a      	ldr	r2, [r3, #16]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	08da      	lsrs	r2, r3, #3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3208      	adds	r2, #8
 8001b92:	6939      	ldr	r1, [r7, #16]
 8001b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0203 	and.w	r2, r3, #3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 80ac 	beq.w	8001d32 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bda:	4b5f      	ldr	r3, [pc, #380]	; (8001d58 <HAL_GPIO_Init+0x330>)
 8001bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bde:	4a5e      	ldr	r2, [pc, #376]	; (8001d58 <HAL_GPIO_Init+0x330>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6613      	str	r3, [r2, #96]	; 0x60
 8001be6:	4b5c      	ldr	r3, [pc, #368]	; (8001d58 <HAL_GPIO_Init+0x330>)
 8001be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bf2:	4a5a      	ldr	r2, [pc, #360]	; (8001d5c <HAL_GPIO_Init+0x334>)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	089b      	lsrs	r3, r3, #2
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	220f      	movs	r2, #15
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c1c:	d025      	beq.n	8001c6a <HAL_GPIO_Init+0x242>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4f      	ldr	r2, [pc, #316]	; (8001d60 <HAL_GPIO_Init+0x338>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d01f      	beq.n	8001c66 <HAL_GPIO_Init+0x23e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4e      	ldr	r2, [pc, #312]	; (8001d64 <HAL_GPIO_Init+0x33c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d019      	beq.n	8001c62 <HAL_GPIO_Init+0x23a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a4d      	ldr	r2, [pc, #308]	; (8001d68 <HAL_GPIO_Init+0x340>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d013      	beq.n	8001c5e <HAL_GPIO_Init+0x236>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4c      	ldr	r2, [pc, #304]	; (8001d6c <HAL_GPIO_Init+0x344>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d00d      	beq.n	8001c5a <HAL_GPIO_Init+0x232>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a4b      	ldr	r2, [pc, #300]	; (8001d70 <HAL_GPIO_Init+0x348>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d007      	beq.n	8001c56 <HAL_GPIO_Init+0x22e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a4a      	ldr	r2, [pc, #296]	; (8001d74 <HAL_GPIO_Init+0x34c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d101      	bne.n	8001c52 <HAL_GPIO_Init+0x22a>
 8001c4e:	2306      	movs	r3, #6
 8001c50:	e00c      	b.n	8001c6c <HAL_GPIO_Init+0x244>
 8001c52:	2307      	movs	r3, #7
 8001c54:	e00a      	b.n	8001c6c <HAL_GPIO_Init+0x244>
 8001c56:	2305      	movs	r3, #5
 8001c58:	e008      	b.n	8001c6c <HAL_GPIO_Init+0x244>
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	e006      	b.n	8001c6c <HAL_GPIO_Init+0x244>
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e004      	b.n	8001c6c <HAL_GPIO_Init+0x244>
 8001c62:	2302      	movs	r3, #2
 8001c64:	e002      	b.n	8001c6c <HAL_GPIO_Init+0x244>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <HAL_GPIO_Init+0x244>
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	f002 0203 	and.w	r2, r2, #3
 8001c72:	0092      	lsls	r2, r2, #2
 8001c74:	4093      	lsls	r3, r2
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c7c:	4937      	ldr	r1, [pc, #220]	; (8001d5c <HAL_GPIO_Init+0x334>)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	089b      	lsrs	r3, r3, #2
 8001c82:	3302      	adds	r3, #2
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c8a:	4b3b      	ldr	r3, [pc, #236]	; (8001d78 <HAL_GPIO_Init+0x350>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4013      	ands	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cae:	4a32      	ldr	r2, [pc, #200]	; (8001d78 <HAL_GPIO_Init+0x350>)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001cb4:	4b30      	ldr	r3, [pc, #192]	; (8001d78 <HAL_GPIO_Init+0x350>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cd8:	4a27      	ldr	r2, [pc, #156]	; (8001d78 <HAL_GPIO_Init+0x350>)
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cde:	4b26      	ldr	r3, [pc, #152]	; (8001d78 <HAL_GPIO_Init+0x350>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4013      	ands	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d02:	4a1d      	ldr	r2, [pc, #116]	; (8001d78 <HAL_GPIO_Init+0x350>)
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d08:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <HAL_GPIO_Init+0x350>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4013      	ands	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d2c:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <HAL_GPIO_Init+0x350>)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3301      	adds	r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f47f ae78 	bne.w	8001a38 <HAL_GPIO_Init+0x10>
  }
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	371c      	adds	r7, #28
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40010000 	.word	0x40010000
 8001d60:	48000400 	.word	0x48000400
 8001d64:	48000800 	.word	0x48000800
 8001d68:	48000c00 	.word	0x48000c00
 8001d6c:	48001000 	.word	0x48001000
 8001d70:	48001400 	.word	0x48001400
 8001d74:	48001800 	.word	0x48001800
 8001d78:	40010400 	.word	0x40010400

08001d7c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001d8a:	e0cd      	b.n	8001f28 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80c0 	beq.w	8001f22 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001da2:	4a68      	ldr	r2, [pc, #416]	; (8001f44 <HAL_GPIO_DeInit+0x1c8>)
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	089b      	lsrs	r3, r3, #2
 8001da8:	3302      	adds	r3, #2
 8001daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dae:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	220f      	movs	r2, #15
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dca:	d025      	beq.n	8001e18 <HAL_GPIO_DeInit+0x9c>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a5e      	ldr	r2, [pc, #376]	; (8001f48 <HAL_GPIO_DeInit+0x1cc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d01f      	beq.n	8001e14 <HAL_GPIO_DeInit+0x98>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a5d      	ldr	r2, [pc, #372]	; (8001f4c <HAL_GPIO_DeInit+0x1d0>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d019      	beq.n	8001e10 <HAL_GPIO_DeInit+0x94>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a5c      	ldr	r2, [pc, #368]	; (8001f50 <HAL_GPIO_DeInit+0x1d4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d013      	beq.n	8001e0c <HAL_GPIO_DeInit+0x90>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a5b      	ldr	r2, [pc, #364]	; (8001f54 <HAL_GPIO_DeInit+0x1d8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d00d      	beq.n	8001e08 <HAL_GPIO_DeInit+0x8c>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a5a      	ldr	r2, [pc, #360]	; (8001f58 <HAL_GPIO_DeInit+0x1dc>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d007      	beq.n	8001e04 <HAL_GPIO_DeInit+0x88>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a59      	ldr	r2, [pc, #356]	; (8001f5c <HAL_GPIO_DeInit+0x1e0>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d101      	bne.n	8001e00 <HAL_GPIO_DeInit+0x84>
 8001dfc:	2306      	movs	r3, #6
 8001dfe:	e00c      	b.n	8001e1a <HAL_GPIO_DeInit+0x9e>
 8001e00:	2307      	movs	r3, #7
 8001e02:	e00a      	b.n	8001e1a <HAL_GPIO_DeInit+0x9e>
 8001e04:	2305      	movs	r3, #5
 8001e06:	e008      	b.n	8001e1a <HAL_GPIO_DeInit+0x9e>
 8001e08:	2304      	movs	r3, #4
 8001e0a:	e006      	b.n	8001e1a <HAL_GPIO_DeInit+0x9e>
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e004      	b.n	8001e1a <HAL_GPIO_DeInit+0x9e>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e002      	b.n	8001e1a <HAL_GPIO_DeInit+0x9e>
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <HAL_GPIO_DeInit+0x9e>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	f002 0203 	and.w	r2, r2, #3
 8001e20:	0092      	lsls	r2, r2, #2
 8001e22:	4093      	lsls	r3, r2
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d132      	bne.n	8001e90 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001e2a:	4b4d      	ldr	r3, [pc, #308]	; (8001f60 <HAL_GPIO_DeInit+0x1e4>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	494b      	ldr	r1, [pc, #300]	; (8001f60 <HAL_GPIO_DeInit+0x1e4>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001e38:	4b49      	ldr	r3, [pc, #292]	; (8001f60 <HAL_GPIO_DeInit+0x1e4>)
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	4947      	ldr	r1, [pc, #284]	; (8001f60 <HAL_GPIO_DeInit+0x1e4>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001e46:	4b46      	ldr	r3, [pc, #280]	; (8001f60 <HAL_GPIO_DeInit+0x1e4>)
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	4944      	ldr	r1, [pc, #272]	; (8001f60 <HAL_GPIO_DeInit+0x1e4>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001e54:	4b42      	ldr	r3, [pc, #264]	; (8001f60 <HAL_GPIO_DeInit+0x1e4>)
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	4940      	ldr	r1, [pc, #256]	; (8001f60 <HAL_GPIO_DeInit+0x1e4>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001e72:	4a34      	ldr	r2, [pc, #208]	; (8001f44 <HAL_GPIO_DeInit+0x1c8>)
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	089b      	lsrs	r3, r3, #2
 8001e78:	3302      	adds	r3, #2
 8001e7a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	43da      	mvns	r2, r3
 8001e82:	4830      	ldr	r0, [pc, #192]	; (8001f44 <HAL_GPIO_DeInit+0x1c8>)
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	089b      	lsrs	r3, r3, #2
 8001e88:	400a      	ands	r2, r1
 8001e8a:	3302      	adds	r3, #2
 8001e8c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	2103      	movs	r1, #3
 8001e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	08da      	lsrs	r2, r3, #3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3208      	adds	r2, #8
 8001eac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	220f      	movs	r2, #15
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	08d2      	lsrs	r2, r2, #3
 8001ec4:	4019      	ands	r1, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3208      	adds	r2, #8
 8001eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	2103      	movs	r1, #3
 8001ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	401a      	ands	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	2101      	movs	r1, #1
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	2103      	movs	r1, #3
 8001f02:	fa01 f303 	lsl.w	r3, r1, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	401a      	ands	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f12:	2101      	movs	r1, #1
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	3301      	adds	r3, #1
 8001f26:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f47f af2b 	bne.w	8001d8c <HAL_GPIO_DeInit+0x10>
  }
}
 8001f36:	bf00      	nop
 8001f38:	bf00      	nop
 8001f3a:	371c      	adds	r7, #28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	40010000 	.word	0x40010000
 8001f48:	48000400 	.word	0x48000400
 8001f4c:	48000800 	.word	0x48000800
 8001f50:	48000c00 	.word	0x48000c00
 8001f54:	48001000 	.word	0x48001000
 8001f58:	48001400 	.word	0x48001400
 8001f5c:	48001800 	.word	0x48001800
 8001f60:	40010400 	.word	0x40010400

08001f64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	887b      	ldrh	r3, [r7, #2]
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d002      	beq.n	8001f82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	73fb      	strb	r3, [r7, #15]
 8001f80:	e001      	b.n	8001f86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f82:	2300      	movs	r3, #0
 8001f84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	807b      	strh	r3, [r7, #2]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fa4:	787b      	ldrb	r3, [r7, #1]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001faa:	887a      	ldrh	r2, [r7, #2]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fb0:	e002      	b.n	8001fb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fb2:	887a      	ldrh	r2, [r7, #2]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	88fb      	ldrh	r3, [r7, #6]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d006      	beq.n	8001fe8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fda:	4a05      	ldr	r2, [pc, #20]	; (8001ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 f806 	bl	8001ff4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40010400 	.word	0x40010400

08001ff4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002010:	4b04      	ldr	r3, [pc, #16]	; (8002024 <HAL_PWREx_GetVoltageRange+0x18>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40007000 	.word	0x40007000

08002028 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002036:	d130      	bne.n	800209a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002038:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002044:	d038      	beq.n	80020b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002046:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800204e:	4a1e      	ldr	r2, [pc, #120]	; (80020c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002050:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002054:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002056:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2232      	movs	r2, #50	; 0x32
 800205c:	fb02 f303 	mul.w	r3, r2, r3
 8002060:	4a1b      	ldr	r2, [pc, #108]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002062:	fba2 2303 	umull	r2, r3, r2, r3
 8002066:	0c9b      	lsrs	r3, r3, #18
 8002068:	3301      	adds	r3, #1
 800206a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800206c:	e002      	b.n	8002074 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	3b01      	subs	r3, #1
 8002072:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002074:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002080:	d102      	bne.n	8002088 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f2      	bne.n	800206e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002094:	d110      	bne.n	80020b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e00f      	b.n	80020ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a6:	d007      	beq.n	80020b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020a8:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020b0:	4a05      	ldr	r2, [pc, #20]	; (80020c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40007000 	.word	0x40007000
 80020cc:	20000010 	.word	0x20000010
 80020d0:	431bde83 	.word	0x431bde83

080020d4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af02      	add	r7, sp, #8
 80020da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80020dc:	f7fe feb6 	bl	8000e4c <HAL_GetTick>
 80020e0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e063      	b.n	80021b4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10b      	bne.n	8002110 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f005 f90d 	bl	8007320 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002106:	f241 3188 	movw	r1, #5000	; 0x1388
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 faf7 	bl	80026fe <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	3b01      	subs	r3, #1
 8002120:	021a      	lsls	r2, r3, #8
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	2120      	movs	r1, #32
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 faef 	bl	800271a <QSPI_WaitFlagStateUntilTimeout>
 800213c:	4603      	mov	r3, r0
 800213e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002140:	7afb      	ldrb	r3, [r7, #11]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d131      	bne.n	80021aa <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002150:	f023 0310 	bic.w	r3, r3, #16
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6852      	ldr	r2, [r2, #4]
 8002158:	0611      	lsls	r1, r2, #24
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68d2      	ldr	r2, [r2, #12]
 800215e:	4311      	orrs	r1, r2
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	430b      	orrs	r3, r1
 8002166:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	4b13      	ldr	r3, [pc, #76]	; (80021bc <HAL_QSPI_Init+0xe8>)
 8002170:	4013      	ands	r3, r2
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6912      	ldr	r2, [r2, #16]
 8002176:	0411      	lsls	r1, r2, #16
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6952      	ldr	r2, [r2, #20]
 800217c:	4311      	orrs	r1, r2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6992      	ldr	r2, [r2, #24]
 8002182:	4311      	orrs	r1, r2
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	430b      	orrs	r3, r1
 800218a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80021b2:	7afb      	ldrb	r3, [r7, #11]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	ffe0f8fe 	.word	0xffe0f8fe

080021c0 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e016      	b.n	8002200 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0201 	bic.w	r2, r2, #1
 80021e0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f005 f8fe 	bl	80073e4 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af02      	add	r7, sp, #8
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002214:	f7fe fe1a 	bl	8000e4c <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b01      	cmp	r3, #1
 8002224:	d101      	bne.n	800222a <HAL_QSPI_Command+0x22>
 8002226:	2302      	movs	r3, #2
 8002228:	e048      	b.n	80022bc <HAL_QSPI_Command+0xb4>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d137      	bne.n	80022ae <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	2200      	movs	r2, #0
 8002254:	2120      	movs	r1, #32
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 fa5f 	bl	800271a <QSPI_WaitFlagStateUntilTimeout>
 800225c:	4603      	mov	r3, r0
 800225e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002260:	7dfb      	ldrb	r3, [r7, #23]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d125      	bne.n	80022b2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002266:	2200      	movs	r2, #0
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 fa8c 	bl	8002788 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	2b00      	cmp	r3, #0
 8002276:	d115      	bne.n	80022a4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	2201      	movs	r2, #1
 8002280:	2102      	movs	r1, #2
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 fa49 	bl	800271a <QSPI_WaitFlagStateUntilTimeout>
 8002288:	4603      	mov	r3, r0
 800228a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800228c:	7dfb      	ldrb	r3, [r7, #23]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10f      	bne.n	80022b2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2202      	movs	r2, #2
 8002298:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80022a2:	e006      	b.n	80022b2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80022ac:	e001      	b.n	80022b2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80022ae:	2302      	movs	r3, #2
 80022b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80022ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08a      	sub	sp, #40	; 0x28
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80022d4:	f7fe fdba 	bl	8000e4c <HAL_GetTick>
 80022d8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	3320      	adds	r3, #32
 80022e0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_QSPI_Transmit+0x2e>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e07b      	b.n	80023ea <HAL_QSPI_Transmit+0x126>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b01      	cmp	r3, #1
 8002304:	d16a      	bne.n	80023dc <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d05b      	beq.n	80023ca <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2212      	movs	r2, #18
 8002316:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002346:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8002348:	e01b      	b.n	8002382 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	2201      	movs	r2, #1
 8002352:	2104      	movs	r1, #4
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 f9e0 	bl	800271a <QSPI_WaitFlagStateUntilTimeout>
 800235a:	4603      	mov	r3, r0
 800235c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800235e:	7ffb      	ldrb	r3, [r7, #31]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d113      	bne.n	800238c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	781a      	ldrb	r2, [r3, #0]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	1e5a      	subs	r2, r3, #1
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1df      	bne.n	800234a <HAL_QSPI_Transmit+0x86>
 800238a:	e000      	b.n	800238e <HAL_QSPI_Transmit+0xca>
          break;
 800238c:	bf00      	nop
      }

      if (status == HAL_OK)
 800238e:	7ffb      	ldrb	r3, [r7, #31]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d115      	bne.n	80023c0 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	2201      	movs	r2, #1
 800239c:	2102      	movs	r1, #2
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 f9bb 	bl	800271a <QSPI_WaitFlagStateUntilTimeout>
 80023a4:	4603      	mov	r3, r0
 80023a6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80023a8:	7ffb      	ldrb	r3, [r7, #31]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d108      	bne.n	80023c0 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2202      	movs	r2, #2
 80023b4:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f934 	bl	8002624 <HAL_QSPI_Abort>
 80023bc:	4603      	mov	r3, r0
 80023be:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80023c8:	e00a      	b.n	80023e0 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ce:	f043 0208 	orr.w	r2, r3, #8
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	77fb      	strb	r3, [r7, #31]
 80023da:	e001      	b.n	80023e0 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 80023dc:	2302      	movs	r3, #2
 80023de:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80023e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3720      	adds	r7, #32
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b08a      	sub	sp, #40	; 0x28
 80023f6:	af02      	add	r7, sp, #8
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8002402:	f7fe fd23 	bl	8000e4c <HAL_GetTick>
 8002406:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	3320      	adds	r3, #32
 8002416:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_QSPI_Receive+0x36>
 8002424:	2302      	movs	r3, #2
 8002426:	e082      	b.n	800252e <HAL_QSPI_Receive+0x13c>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b01      	cmp	r3, #1
 800243a:	d171      	bne.n	8002520 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d062      	beq.n	800250e <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2222      	movs	r2, #34	; 0x22
 800244c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002480:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800248a:	e01c      	b.n	80024c6 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	2201      	movs	r2, #1
 8002494:	2106      	movs	r1, #6
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 f93f 	bl	800271a <QSPI_WaitFlagStateUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80024a0:	7ffb      	ldrb	r3, [r7, #31]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d114      	bne.n	80024d0 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	7812      	ldrb	r2, [r2, #0]
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	1e5a      	subs	r2, r3, #1
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1de      	bne.n	800248c <HAL_QSPI_Receive+0x9a>
 80024ce:	e000      	b.n	80024d2 <HAL_QSPI_Receive+0xe0>
          break;
 80024d0:	bf00      	nop
      }

      if (status == HAL_OK)
 80024d2:	7ffb      	ldrb	r3, [r7, #31]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d115      	bne.n	8002504 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	2201      	movs	r2, #1
 80024e0:	2102      	movs	r1, #2
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 f919 	bl	800271a <QSPI_WaitFlagStateUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80024ec:	7ffb      	ldrb	r3, [r7, #31]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d108      	bne.n	8002504 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2202      	movs	r2, #2
 80024f8:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 f892 	bl	8002624 <HAL_QSPI_Abort>
 8002500:	4603      	mov	r3, r0
 8002502:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800250c:	e00a      	b.n	8002524 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002512:	f043 0208 	orr.w	r2, r3, #8
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	77fb      	strb	r3, [r7, #31]
 800251e:	e001      	b.n	8002524 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002520:	2302      	movs	r3, #2
 8002522:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 800252c:	7ffb      	ldrb	r3, [r7, #31]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3720      	adds	r7, #32
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b088      	sub	sp, #32
 800253a:	af02      	add	r7, sp, #8
 800253c:	60f8      	str	r0, [r7, #12]
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
 8002542:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002544:	f7fe fc82 	bl	8000e4c <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_QSPI_AutoPolling+0x24>
 8002556:	2302      	movs	r3, #2
 8002558:	e060      	b.n	800261c <HAL_QSPI_AutoPolling+0xe6>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b01      	cmp	r3, #1
 800256c:	d14f      	bne.n	800260e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2242      	movs	r2, #66	; 0x42
 8002578:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	2200      	movs	r2, #0
 8002584:	2120      	movs	r1, #32
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f8c7 	bl	800271a <QSPI_WaitFlagStateUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002590:	7dfb      	ldrb	r3, [r7, #23]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d13d      	bne.n	8002612 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6852      	ldr	r2, [r2, #4]
 80025a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6892      	ldr	r2, [r2, #8]
 80025b2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80025cc:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80025d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025da:	68b9      	ldr	r1, [r7, #8]
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 f8d3 	bl	8002788 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	2201      	movs	r2, #1
 80025ea:	2108      	movs	r1, #8
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 f894 	bl	800271a <QSPI_WaitFlagStateUntilTimeout>
 80025f2:	4603      	mov	r3, r0
 80025f4:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80025f6:	7dfb      	ldrb	r3, [r7, #23]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10a      	bne.n	8002612 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2208      	movs	r2, #8
 8002602:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800260c:	e001      	b.n	8002612 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800260e:	2302      	movs	r3, #2
 8002610:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800261a:	7dfb      	ldrb	r3, [r7, #23]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af02      	add	r7, sp, #8
 800262a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002630:	f7fe fc0c 	bl	8000e4c <HAL_GetTick>
 8002634:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800263c:	b2db      	uxtb	r3, r3
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d056      	beq.n	80026f4 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d017      	beq.n	800268c <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0204 	bic.w	r2, r2, #4
 800266a:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff f8bb 	bl	80017ec <HAL_DMA_Abort>
 8002676:	4603      	mov	r3, r0
 8002678:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002684:	f043 0204 	orr.w	r2, r3, #4
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0202 	orr.w	r2, r2, #2
 800269a:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2201      	movs	r2, #1
 80026a6:	2102      	movs	r1, #2
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f836 	bl	800271a <QSPI_WaitFlagStateUntilTimeout>
 80026ae:	4603      	mov	r3, r0
 80026b0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10e      	bne.n	80026d6 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2202      	movs	r2, #2
 80026be:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2200      	movs	r2, #0
 80026ca:	2120      	movs	r1, #32
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f824 	bl	800271a <QSPI_WaitFlagStateUntilTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10b      	bne.n	80026f4 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695a      	ldr	r2, [r3, #20]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80026ea:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b084      	sub	sp, #16
 800271e:	af00      	add	r7, sp, #0
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	603b      	str	r3, [r7, #0]
 8002726:	4613      	mov	r3, r2
 8002728:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800272a:	e01a      	b.n	8002762 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002732:	d016      	beq.n	8002762 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002734:	f7fe fb8a 	bl	8000e4c <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	429a      	cmp	r2, r3
 8002742:	d302      	bcc.n	800274a <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10b      	bne.n	8002762 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2204      	movs	r2, #4
 800274e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002756:	f043 0201 	orr.w	r2, r3, #1
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e00e      	b.n	8002780 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	4013      	ands	r3, r2
 800276c:	2b00      	cmp	r3, #0
 800276e:	bf14      	ite	ne
 8002770:	2301      	movne	r3, #1
 8002772:	2300      	moveq	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	429a      	cmp	r2, r3
 800277c:	d1d6      	bne.n	800272c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	2b00      	cmp	r3, #0
 800279a:	d009      	beq.n	80027b0 <QSPI_Config+0x28>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80027a2:	d005      	beq.n	80027b0 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	3a01      	subs	r2, #1
 80027ae:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 80b9 	beq.w	800292c <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d05f      	beq.n	8002882 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	6892      	ldr	r2, [r2, #8]
 80027ca:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d031      	beq.n	8002838 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027dc:	431a      	orrs	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e2:	431a      	orrs	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	431a      	orrs	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	049b      	lsls	r3, r3, #18
 80027f0:	431a      	orrs	r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	431a      	orrs	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	431a      	orrs	r2, r3
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	431a      	orrs	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	431a      	orrs	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	431a      	orrs	r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	ea42 0103 	orr.w	r1, r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	430a      	orrs	r2, r1
 8002820:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002828:	f000 812e 	beq.w	8002a88 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	6852      	ldr	r2, [r2, #4]
 8002834:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8002836:	e127      	b.n	8002a88 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002840:	431a      	orrs	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002846:	431a      	orrs	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	431a      	orrs	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	049b      	lsls	r3, r3, #18
 8002854:	431a      	orrs	r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	431a      	orrs	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	431a      	orrs	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	431a      	orrs	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	431a      	orrs	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	ea42 0103 	orr.w	r1, r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	430a      	orrs	r2, r1
 800287e:	615a      	str	r2, [r3, #20]
}
 8002880:	e102      	b.n	8002a88 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d02e      	beq.n	80028e8 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	431a      	orrs	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002898:	431a      	orrs	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	431a      	orrs	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	049b      	lsls	r3, r3, #18
 80028a6:	431a      	orrs	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	431a      	orrs	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	431a      	orrs	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	431a      	orrs	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	ea42 0103 	orr.w	r1, r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80028d8:	f000 80d6 	beq.w	8002a88 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	6852      	ldr	r2, [r2, #4]
 80028e4:	619a      	str	r2, [r3, #24]
}
 80028e6:	e0cf      	b.n	8002a88 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	431a      	orrs	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f6:	431a      	orrs	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	431a      	orrs	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	049b      	lsls	r3, r3, #18
 8002904:	431a      	orrs	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	431a      	orrs	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	431a      	orrs	r2, r3
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	431a      	orrs	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	ea42 0103 	orr.w	r1, r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	430a      	orrs	r2, r1
 8002928:	615a      	str	r2, [r3, #20]
}
 800292a:	e0ad      	b.n	8002a88 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d058      	beq.n	80029e6 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	6892      	ldr	r2, [r2, #8]
 800293c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d02d      	beq.n	80029a2 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	431a      	orrs	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002954:	431a      	orrs	r2, r3
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	431a      	orrs	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	049b      	lsls	r3, r3, #18
 8002962:	431a      	orrs	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	431a      	orrs	r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	431a      	orrs	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	431a      	orrs	r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	431a      	orrs	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	ea42 0103 	orr.w	r1, r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	430a      	orrs	r2, r1
 800298c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002994:	d078      	beq.n	8002a88 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	6852      	ldr	r2, [r2, #4]
 800299e:	619a      	str	r2, [r3, #24]
}
 80029a0:	e072      	b.n	8002a88 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	431a      	orrs	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b0:	431a      	orrs	r2, r3
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	431a      	orrs	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	049b      	lsls	r3, r3, #18
 80029be:	431a      	orrs	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	431a      	orrs	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	431a      	orrs	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	431a      	orrs	r2, r3
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	ea42 0103 	orr.w	r1, r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	615a      	str	r2, [r3, #20]
}
 80029e4:	e050      	b.n	8002a88 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d02a      	beq.n	8002a44 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	431a      	orrs	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fc:	431a      	orrs	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	431a      	orrs	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	049b      	lsls	r3, r3, #18
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	431a      	orrs	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	ea42 0103 	orr.w	r1, r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002a36:	d027      	beq.n	8002a88 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	6852      	ldr	r2, [r2, #4]
 8002a40:	619a      	str	r2, [r3, #24]
}
 8002a42:	e021      	b.n	8002a88 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d01d      	beq.n	8002a88 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	431a      	orrs	r2, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	431a      	orrs	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	049b      	lsls	r3, r3, #18
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	431a      	orrs	r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	ea42 0103 	orr.w	r1, r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	615a      	str	r2, [r3, #20]
}
 8002a88:	bf00      	nop
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e3d4      	b.n	8003250 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aa6:	4ba1      	ldr	r3, [pc, #644]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ab0:	4b9e      	ldr	r3, [pc, #632]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 80e4 	beq.w	8002c90 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d007      	beq.n	8002ade <HAL_RCC_OscConfig+0x4a>
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	2b0c      	cmp	r3, #12
 8002ad2:	f040 808b 	bne.w	8002bec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	f040 8087 	bne.w	8002bec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ade:	4b93      	ldr	r3, [pc, #588]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_RCC_OscConfig+0x62>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e3ac      	b.n	8003250 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1a      	ldr	r2, [r3, #32]
 8002afa:	4b8c      	ldr	r3, [pc, #560]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d004      	beq.n	8002b10 <HAL_RCC_OscConfig+0x7c>
 8002b06:	4b89      	ldr	r3, [pc, #548]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b0e:	e005      	b.n	8002b1c <HAL_RCC_OscConfig+0x88>
 8002b10:	4b86      	ldr	r3, [pc, #536]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b16:	091b      	lsrs	r3, r3, #4
 8002b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d223      	bcs.n	8002b68 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 fd73 	bl	8003610 <RCC_SetFlashLatencyFromMSIRange>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e38d      	b.n	8003250 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b34:	4b7d      	ldr	r3, [pc, #500]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a7c      	ldr	r2, [pc, #496]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002b3a:	f043 0308 	orr.w	r3, r3, #8
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	4b7a      	ldr	r3, [pc, #488]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	4977      	ldr	r1, [pc, #476]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b52:	4b76      	ldr	r3, [pc, #472]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	4972      	ldr	r1, [pc, #456]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	604b      	str	r3, [r1, #4]
 8002b66:	e025      	b.n	8002bb4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b68:	4b70      	ldr	r3, [pc, #448]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a6f      	ldr	r2, [pc, #444]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002b6e:	f043 0308 	orr.w	r3, r3, #8
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	4b6d      	ldr	r3, [pc, #436]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	496a      	ldr	r1, [pc, #424]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b86:	4b69      	ldr	r3, [pc, #420]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	021b      	lsls	r3, r3, #8
 8002b94:	4965      	ldr	r1, [pc, #404]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d109      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 fd33 	bl	8003610 <RCC_SetFlashLatencyFromMSIRange>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e34d      	b.n	8003250 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bb4:	f000 fc36 	bl	8003424 <HAL_RCC_GetSysClockFreq>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	4b5c      	ldr	r3, [pc, #368]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	091b      	lsrs	r3, r3, #4
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	495a      	ldr	r1, [pc, #360]	; (8002d30 <HAL_RCC_OscConfig+0x29c>)
 8002bc6:	5ccb      	ldrb	r3, [r1, r3]
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd0:	4a58      	ldr	r2, [pc, #352]	; (8002d34 <HAL_RCC_OscConfig+0x2a0>)
 8002bd2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002bd4:	4b58      	ldr	r3, [pc, #352]	; (8002d38 <HAL_RCC_OscConfig+0x2a4>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f004 fca3 	bl	8007524 <HAL_InitTick>
 8002bde:	4603      	mov	r3, r0
 8002be0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d052      	beq.n	8002c8e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	e331      	b.n	8003250 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d032      	beq.n	8002c5a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bf4:	4b4d      	ldr	r3, [pc, #308]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a4c      	ldr	r2, [pc, #304]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c00:	f7fe f924 	bl	8000e4c <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c08:	f7fe f920 	bl	8000e4c <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e31a      	b.n	8003250 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c1a:	4b44      	ldr	r3, [pc, #272]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c26:	4b41      	ldr	r3, [pc, #260]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a40      	ldr	r2, [pc, #256]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002c2c:	f043 0308 	orr.w	r3, r3, #8
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	4b3e      	ldr	r3, [pc, #248]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	493b      	ldr	r1, [pc, #236]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c44:	4b39      	ldr	r3, [pc, #228]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	021b      	lsls	r3, r3, #8
 8002c52:	4936      	ldr	r1, [pc, #216]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	604b      	str	r3, [r1, #4]
 8002c58:	e01a      	b.n	8002c90 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c5a:	4b34      	ldr	r3, [pc, #208]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a33      	ldr	r2, [pc, #204]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002c60:	f023 0301 	bic.w	r3, r3, #1
 8002c64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c66:	f7fe f8f1 	bl	8000e4c <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c6e:	f7fe f8ed 	bl	8000e4c <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e2e7      	b.n	8003250 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c80:	4b2a      	ldr	r3, [pc, #168]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f0      	bne.n	8002c6e <HAL_RCC_OscConfig+0x1da>
 8002c8c:	e000      	b.n	8002c90 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c8e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d074      	beq.n	8002d86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d005      	beq.n	8002cae <HAL_RCC_OscConfig+0x21a>
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	2b0c      	cmp	r3, #12
 8002ca6:	d10e      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d10b      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cae:	4b1f      	ldr	r3, [pc, #124]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d064      	beq.n	8002d84 <HAL_RCC_OscConfig+0x2f0>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d160      	bne.n	8002d84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e2c4      	b.n	8003250 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cce:	d106      	bne.n	8002cde <HAL_RCC_OscConfig+0x24a>
 8002cd0:	4b16      	ldr	r3, [pc, #88]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a15      	ldr	r2, [pc, #84]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	e01d      	b.n	8002d1a <HAL_RCC_OscConfig+0x286>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ce6:	d10c      	bne.n	8002d02 <HAL_RCC_OscConfig+0x26e>
 8002ce8:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a0f      	ldr	r2, [pc, #60]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002cee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf2:	6013      	str	r3, [r2, #0]
 8002cf4:	4b0d      	ldr	r3, [pc, #52]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a0c      	ldr	r2, [pc, #48]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	e00b      	b.n	8002d1a <HAL_RCC_OscConfig+0x286>
 8002d02:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a09      	ldr	r2, [pc, #36]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	4b07      	ldr	r3, [pc, #28]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a06      	ldr	r2, [pc, #24]	; (8002d2c <HAL_RCC_OscConfig+0x298>)
 8002d14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d18:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d01c      	beq.n	8002d5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d22:	f7fe f893 	bl	8000e4c <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d28:	e011      	b.n	8002d4e <HAL_RCC_OscConfig+0x2ba>
 8002d2a:	bf00      	nop
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	08008efc 	.word	0x08008efc
 8002d34:	20000010 	.word	0x20000010
 8002d38:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d3c:	f7fe f886 	bl	8000e4c <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b64      	cmp	r3, #100	; 0x64
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e280      	b.n	8003250 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d4e:	4baf      	ldr	r3, [pc, #700]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f0      	beq.n	8002d3c <HAL_RCC_OscConfig+0x2a8>
 8002d5a:	e014      	b.n	8002d86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5c:	f7fe f876 	bl	8000e4c <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d64:	f7fe f872 	bl	8000e4c <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b64      	cmp	r3, #100	; 0x64
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e26c      	b.n	8003250 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d76:	4ba5      	ldr	r3, [pc, #660]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f0      	bne.n	8002d64 <HAL_RCC_OscConfig+0x2d0>
 8002d82:	e000      	b.n	8002d86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d060      	beq.n	8002e54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_OscConfig+0x310>
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2b0c      	cmp	r3, #12
 8002d9c:	d119      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d116      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002da4:	4b99      	ldr	r3, [pc, #612]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_RCC_OscConfig+0x328>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e249      	b.n	8003250 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dbc:	4b93      	ldr	r3, [pc, #588]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	061b      	lsls	r3, r3, #24
 8002dca:	4990      	ldr	r1, [pc, #576]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dd0:	e040      	b.n	8002e54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d023      	beq.n	8002e22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dda:	4b8c      	ldr	r3, [pc, #560]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a8b      	ldr	r2, [pc, #556]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de6:	f7fe f831 	bl	8000e4c <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dee:	f7fe f82d 	bl	8000e4c <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e227      	b.n	8003250 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e00:	4b82      	ldr	r3, [pc, #520]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0c:	4b7f      	ldr	r3, [pc, #508]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	061b      	lsls	r3, r3, #24
 8002e1a:	497c      	ldr	r1, [pc, #496]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	604b      	str	r3, [r1, #4]
 8002e20:	e018      	b.n	8002e54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e22:	4b7a      	ldr	r3, [pc, #488]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a79      	ldr	r2, [pc, #484]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2e:	f7fe f80d 	bl	8000e4c <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e36:	f7fe f809 	bl	8000e4c <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e203      	b.n	8003250 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e48:	4b70      	ldr	r3, [pc, #448]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f0      	bne.n	8002e36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d03c      	beq.n	8002eda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d01c      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e68:	4b68      	ldr	r3, [pc, #416]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e6e:	4a67      	ldr	r2, [pc, #412]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e78:	f7fd ffe8 	bl	8000e4c <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e80:	f7fd ffe4 	bl	8000e4c <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e1de      	b.n	8003250 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e92:	4b5e      	ldr	r3, [pc, #376]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0ef      	beq.n	8002e80 <HAL_RCC_OscConfig+0x3ec>
 8002ea0:	e01b      	b.n	8002eda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea2:	4b5a      	ldr	r3, [pc, #360]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ea8:	4a58      	ldr	r2, [pc, #352]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002eaa:	f023 0301 	bic.w	r3, r3, #1
 8002eae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb2:	f7fd ffcb 	bl	8000e4c <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eba:	f7fd ffc7 	bl	8000e4c <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e1c1      	b.n	8003250 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ecc:	4b4f      	ldr	r3, [pc, #316]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1ef      	bne.n	8002eba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 80a6 	beq.w	8003034 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002eec:	4b47      	ldr	r3, [pc, #284]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10d      	bne.n	8002f14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef8:	4b44      	ldr	r3, [pc, #272]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efc:	4a43      	ldr	r2, [pc, #268]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f02:	6593      	str	r3, [r2, #88]	; 0x58
 8002f04:	4b41      	ldr	r3, [pc, #260]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f10:	2301      	movs	r3, #1
 8002f12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f14:	4b3e      	ldr	r3, [pc, #248]	; (8003010 <HAL_RCC_OscConfig+0x57c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d118      	bne.n	8002f52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f20:	4b3b      	ldr	r3, [pc, #236]	; (8003010 <HAL_RCC_OscConfig+0x57c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a3a      	ldr	r2, [pc, #232]	; (8003010 <HAL_RCC_OscConfig+0x57c>)
 8002f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f2c:	f7fd ff8e 	bl	8000e4c <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f34:	f7fd ff8a 	bl	8000e4c <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e184      	b.n	8003250 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f46:	4b32      	ldr	r3, [pc, #200]	; (8003010 <HAL_RCC_OscConfig+0x57c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d108      	bne.n	8002f6c <HAL_RCC_OscConfig+0x4d8>
 8002f5a:	4b2c      	ldr	r3, [pc, #176]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f60:	4a2a      	ldr	r2, [pc, #168]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f6a:	e024      	b.n	8002fb6 <HAL_RCC_OscConfig+0x522>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2b05      	cmp	r3, #5
 8002f72:	d110      	bne.n	8002f96 <HAL_RCC_OscConfig+0x502>
 8002f74:	4b25      	ldr	r3, [pc, #148]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7a:	4a24      	ldr	r2, [pc, #144]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002f7c:	f043 0304 	orr.w	r3, r3, #4
 8002f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f84:	4b21      	ldr	r3, [pc, #132]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8a:	4a20      	ldr	r2, [pc, #128]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f94:	e00f      	b.n	8002fb6 <HAL_RCC_OscConfig+0x522>
 8002f96:	4b1d      	ldr	r3, [pc, #116]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9c:	4a1b      	ldr	r2, [pc, #108]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fa6:	4b19      	ldr	r3, [pc, #100]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fac:	4a17      	ldr	r2, [pc, #92]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002fae:	f023 0304 	bic.w	r3, r3, #4
 8002fb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d016      	beq.n	8002fec <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fbe:	f7fd ff45 	bl	8000e4c <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc6:	f7fd ff41 	bl	8000e4c <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e139      	b.n	8003250 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <HAL_RCC_OscConfig+0x578>)
 8002fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0ed      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x532>
 8002fea:	e01a      	b.n	8003022 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fec:	f7fd ff2e 	bl	8000e4c <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ff2:	e00f      	b.n	8003014 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff4:	f7fd ff2a 	bl	8000e4c <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003002:	4293      	cmp	r3, r2
 8003004:	d906      	bls.n	8003014 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e122      	b.n	8003250 <HAL_RCC_OscConfig+0x7bc>
 800300a:	bf00      	nop
 800300c:	40021000 	.word	0x40021000
 8003010:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003014:	4b90      	ldr	r3, [pc, #576]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 8003016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1e8      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003022:	7ffb      	ldrb	r3, [r7, #31]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d105      	bne.n	8003034 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003028:	4b8b      	ldr	r3, [pc, #556]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 800302a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302c:	4a8a      	ldr	r2, [pc, #552]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 800302e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003032:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 8108 	beq.w	800324e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003042:	2b02      	cmp	r3, #2
 8003044:	f040 80d0 	bne.w	80031e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003048:	4b83      	ldr	r3, [pc, #524]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f003 0203 	and.w	r2, r3, #3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	429a      	cmp	r2, r3
 800305a:	d130      	bne.n	80030be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	3b01      	subs	r3, #1
 8003068:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800306a:	429a      	cmp	r2, r3
 800306c:	d127      	bne.n	80030be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003078:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800307a:	429a      	cmp	r2, r3
 800307c:	d11f      	bne.n	80030be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003088:	2a07      	cmp	r2, #7
 800308a:	bf14      	ite	ne
 800308c:	2201      	movne	r2, #1
 800308e:	2200      	moveq	r2, #0
 8003090:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003092:	4293      	cmp	r3, r2
 8003094:	d113      	bne.n	80030be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a0:	085b      	lsrs	r3, r3, #1
 80030a2:	3b01      	subs	r3, #1
 80030a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d109      	bne.n	80030be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	085b      	lsrs	r3, r3, #1
 80030b6:	3b01      	subs	r3, #1
 80030b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d06e      	beq.n	800319c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	2b0c      	cmp	r3, #12
 80030c2:	d069      	beq.n	8003198 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030c4:	4b64      	ldr	r3, [pc, #400]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d105      	bne.n	80030dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030d0:	4b61      	ldr	r3, [pc, #388]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0b7      	b.n	8003250 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030e0:	4b5d      	ldr	r3, [pc, #372]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a5c      	ldr	r2, [pc, #368]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 80030e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030ec:	f7fd feae 	bl	8000e4c <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f4:	f7fd feaa 	bl	8000e4c <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e0a4      	b.n	8003250 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003106:	4b54      	ldr	r3, [pc, #336]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003112:	4b51      	ldr	r3, [pc, #324]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	4b51      	ldr	r3, [pc, #324]	; (800325c <HAL_RCC_OscConfig+0x7c8>)
 8003118:	4013      	ands	r3, r2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003122:	3a01      	subs	r2, #1
 8003124:	0112      	lsls	r2, r2, #4
 8003126:	4311      	orrs	r1, r2
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800312c:	0212      	lsls	r2, r2, #8
 800312e:	4311      	orrs	r1, r2
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003134:	0852      	lsrs	r2, r2, #1
 8003136:	3a01      	subs	r2, #1
 8003138:	0552      	lsls	r2, r2, #21
 800313a:	4311      	orrs	r1, r2
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003140:	0852      	lsrs	r2, r2, #1
 8003142:	3a01      	subs	r2, #1
 8003144:	0652      	lsls	r2, r2, #25
 8003146:	4311      	orrs	r1, r2
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800314c:	0912      	lsrs	r2, r2, #4
 800314e:	0452      	lsls	r2, r2, #17
 8003150:	430a      	orrs	r2, r1
 8003152:	4941      	ldr	r1, [pc, #260]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 8003154:	4313      	orrs	r3, r2
 8003156:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003158:	4b3f      	ldr	r3, [pc, #252]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a3e      	ldr	r2, [pc, #248]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 800315e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003162:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003164:	4b3c      	ldr	r3, [pc, #240]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	4a3b      	ldr	r2, [pc, #236]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 800316a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800316e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003170:	f7fd fe6c 	bl	8000e4c <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003178:	f7fd fe68 	bl	8000e4c <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e062      	b.n	8003250 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800318a:	4b33      	ldr	r3, [pc, #204]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003196:	e05a      	b.n	800324e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e059      	b.n	8003250 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800319c:	4b2e      	ldr	r3, [pc, #184]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d152      	bne.n	800324e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031a8:	4b2b      	ldr	r3, [pc, #172]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a2a      	ldr	r2, [pc, #168]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 80031ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031b4:	4b28      	ldr	r3, [pc, #160]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	4a27      	ldr	r2, [pc, #156]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 80031ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031c0:	f7fd fe44 	bl	8000e4c <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c8:	f7fd fe40 	bl	8000e4c <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e03a      	b.n	8003250 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031da:	4b1f      	ldr	r3, [pc, #124]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x734>
 80031e6:	e032      	b.n	800324e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	2b0c      	cmp	r3, #12
 80031ec:	d02d      	beq.n	800324a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ee:	4b1a      	ldr	r3, [pc, #104]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a19      	ldr	r2, [pc, #100]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 80031f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031f8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80031fa:	4b17      	ldr	r3, [pc, #92]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d105      	bne.n	8003212 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003206:	4b14      	ldr	r3, [pc, #80]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	4a13      	ldr	r2, [pc, #76]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 800320c:	f023 0303 	bic.w	r3, r3, #3
 8003210:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003212:	4b11      	ldr	r3, [pc, #68]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	4a10      	ldr	r2, [pc, #64]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 8003218:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800321c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003220:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003222:	f7fd fe13 	bl	8000e4c <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800322a:	f7fd fe0f 	bl	8000e4c <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e009      	b.n	8003250 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800323c:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_RCC_OscConfig+0x7c4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1f0      	bne.n	800322a <HAL_RCC_OscConfig+0x796>
 8003248:	e001      	b.n	800324e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3720      	adds	r7, #32
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40021000 	.word	0x40021000
 800325c:	f99d808c 	.word	0xf99d808c

08003260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e0c8      	b.n	8003406 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003274:	4b66      	ldr	r3, [pc, #408]	; (8003410 <HAL_RCC_ClockConfig+0x1b0>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d910      	bls.n	80032a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003282:	4b63      	ldr	r3, [pc, #396]	; (8003410 <HAL_RCC_ClockConfig+0x1b0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 0207 	bic.w	r2, r3, #7
 800328a:	4961      	ldr	r1, [pc, #388]	; (8003410 <HAL_RCC_ClockConfig+0x1b0>)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003292:	4b5f      	ldr	r3, [pc, #380]	; (8003410 <HAL_RCC_ClockConfig+0x1b0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0b0      	b.n	8003406 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d04c      	beq.n	800334a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d107      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032b8:	4b56      	ldr	r3, [pc, #344]	; (8003414 <HAL_RCC_ClockConfig+0x1b4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d121      	bne.n	8003308 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e09e      	b.n	8003406 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d107      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032d0:	4b50      	ldr	r3, [pc, #320]	; (8003414 <HAL_RCC_ClockConfig+0x1b4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d115      	bne.n	8003308 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e092      	b.n	8003406 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d107      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032e8:	4b4a      	ldr	r3, [pc, #296]	; (8003414 <HAL_RCC_ClockConfig+0x1b4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d109      	bne.n	8003308 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e086      	b.n	8003406 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032f8:	4b46      	ldr	r3, [pc, #280]	; (8003414 <HAL_RCC_ClockConfig+0x1b4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e07e      	b.n	8003406 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003308:	4b42      	ldr	r3, [pc, #264]	; (8003414 <HAL_RCC_ClockConfig+0x1b4>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f023 0203 	bic.w	r2, r3, #3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	493f      	ldr	r1, [pc, #252]	; (8003414 <HAL_RCC_ClockConfig+0x1b4>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800331a:	f7fd fd97 	bl	8000e4c <HAL_GetTick>
 800331e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003320:	e00a      	b.n	8003338 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003322:	f7fd fd93 	bl	8000e4c <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003330:	4293      	cmp	r3, r2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e066      	b.n	8003406 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003338:	4b36      	ldr	r3, [pc, #216]	; (8003414 <HAL_RCC_ClockConfig+0x1b4>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 020c 	and.w	r2, r3, #12
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	429a      	cmp	r2, r3
 8003348:	d1eb      	bne.n	8003322 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d008      	beq.n	8003368 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003356:	4b2f      	ldr	r3, [pc, #188]	; (8003414 <HAL_RCC_ClockConfig+0x1b4>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	492c      	ldr	r1, [pc, #176]	; (8003414 <HAL_RCC_ClockConfig+0x1b4>)
 8003364:	4313      	orrs	r3, r2
 8003366:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003368:	4b29      	ldr	r3, [pc, #164]	; (8003410 <HAL_RCC_ClockConfig+0x1b0>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d210      	bcs.n	8003398 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b26      	ldr	r3, [pc, #152]	; (8003410 <HAL_RCC_ClockConfig+0x1b0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 0207 	bic.w	r2, r3, #7
 800337e:	4924      	ldr	r1, [pc, #144]	; (8003410 <HAL_RCC_ClockConfig+0x1b0>)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b22      	ldr	r3, [pc, #136]	; (8003410 <HAL_RCC_ClockConfig+0x1b0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e036      	b.n	8003406 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a4:	4b1b      	ldr	r3, [pc, #108]	; (8003414 <HAL_RCC_ClockConfig+0x1b4>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	4918      	ldr	r1, [pc, #96]	; (8003414 <HAL_RCC_ClockConfig+0x1b4>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d009      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033c2:	4b14      	ldr	r3, [pc, #80]	; (8003414 <HAL_RCC_ClockConfig+0x1b4>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	4910      	ldr	r1, [pc, #64]	; (8003414 <HAL_RCC_ClockConfig+0x1b4>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033d6:	f000 f825 	bl	8003424 <HAL_RCC_GetSysClockFreq>
 80033da:	4602      	mov	r2, r0
 80033dc:	4b0d      	ldr	r3, [pc, #52]	; (8003414 <HAL_RCC_ClockConfig+0x1b4>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	490c      	ldr	r1, [pc, #48]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 80033e8:	5ccb      	ldrb	r3, [r1, r3]
 80033ea:	f003 031f 	and.w	r3, r3, #31
 80033ee:	fa22 f303 	lsr.w	r3, r2, r3
 80033f2:	4a0a      	ldr	r2, [pc, #40]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033f6:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <HAL_RCC_ClockConfig+0x1c0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f004 f892 	bl	8007524 <HAL_InitTick>
 8003400:	4603      	mov	r3, r0
 8003402:	72fb      	strb	r3, [r7, #11]

  return status;
 8003404:	7afb      	ldrb	r3, [r7, #11]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40022000 	.word	0x40022000
 8003414:	40021000 	.word	0x40021000
 8003418:	08008efc 	.word	0x08008efc
 800341c:	20000010 	.word	0x20000010
 8003420:	20000000 	.word	0x20000000

08003424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003424:	b480      	push	{r7}
 8003426:	b089      	sub	sp, #36	; 0x24
 8003428:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
 800342e:	2300      	movs	r3, #0
 8003430:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003432:	4b3e      	ldr	r3, [pc, #248]	; (800352c <HAL_RCC_GetSysClockFreq+0x108>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 030c 	and.w	r3, r3, #12
 800343a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800343c:	4b3b      	ldr	r3, [pc, #236]	; (800352c <HAL_RCC_GetSysClockFreq+0x108>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_RCC_GetSysClockFreq+0x34>
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	2b0c      	cmp	r3, #12
 8003450:	d121      	bne.n	8003496 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d11e      	bne.n	8003496 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003458:	4b34      	ldr	r3, [pc, #208]	; (800352c <HAL_RCC_GetSysClockFreq+0x108>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b00      	cmp	r3, #0
 8003462:	d107      	bne.n	8003474 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003464:	4b31      	ldr	r3, [pc, #196]	; (800352c <HAL_RCC_GetSysClockFreq+0x108>)
 8003466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800346a:	0a1b      	lsrs	r3, r3, #8
 800346c:	f003 030f 	and.w	r3, r3, #15
 8003470:	61fb      	str	r3, [r7, #28]
 8003472:	e005      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003474:	4b2d      	ldr	r3, [pc, #180]	; (800352c <HAL_RCC_GetSysClockFreq+0x108>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	091b      	lsrs	r3, r3, #4
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003480:	4a2b      	ldr	r2, [pc, #172]	; (8003530 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003488:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10d      	bne.n	80034ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003494:	e00a      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	2b04      	cmp	r3, #4
 800349a:	d102      	bne.n	80034a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800349c:	4b25      	ldr	r3, [pc, #148]	; (8003534 <HAL_RCC_GetSysClockFreq+0x110>)
 800349e:	61bb      	str	r3, [r7, #24]
 80034a0:	e004      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d101      	bne.n	80034ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034a8:	4b23      	ldr	r3, [pc, #140]	; (8003538 <HAL_RCC_GetSysClockFreq+0x114>)
 80034aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	2b0c      	cmp	r3, #12
 80034b0:	d134      	bne.n	800351c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034b2:	4b1e      	ldr	r3, [pc, #120]	; (800352c <HAL_RCC_GetSysClockFreq+0x108>)
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d003      	beq.n	80034ca <HAL_RCC_GetSysClockFreq+0xa6>
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d003      	beq.n	80034d0 <HAL_RCC_GetSysClockFreq+0xac>
 80034c8:	e005      	b.n	80034d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034ca:	4b1a      	ldr	r3, [pc, #104]	; (8003534 <HAL_RCC_GetSysClockFreq+0x110>)
 80034cc:	617b      	str	r3, [r7, #20]
      break;
 80034ce:	e005      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034d0:	4b19      	ldr	r3, [pc, #100]	; (8003538 <HAL_RCC_GetSysClockFreq+0x114>)
 80034d2:	617b      	str	r3, [r7, #20]
      break;
 80034d4:	e002      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	617b      	str	r3, [r7, #20]
      break;
 80034da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034dc:	4b13      	ldr	r3, [pc, #76]	; (800352c <HAL_RCC_GetSysClockFreq+0x108>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	3301      	adds	r3, #1
 80034e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034ea:	4b10      	ldr	r3, [pc, #64]	; (800352c <HAL_RCC_GetSysClockFreq+0x108>)
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	0a1b      	lsrs	r3, r3, #8
 80034f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	fb02 f203 	mul.w	r2, r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003500:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003502:	4b0a      	ldr	r3, [pc, #40]	; (800352c <HAL_RCC_GetSysClockFreq+0x108>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	0e5b      	lsrs	r3, r3, #25
 8003508:	f003 0303 	and.w	r3, r3, #3
 800350c:	3301      	adds	r3, #1
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	fbb2 f3f3 	udiv	r3, r2, r3
 800351a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800351c:	69bb      	ldr	r3, [r7, #24]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3724      	adds	r7, #36	; 0x24
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40021000 	.word	0x40021000
 8003530:	08008f14 	.word	0x08008f14
 8003534:	00f42400 	.word	0x00f42400
 8003538:	007a1200 	.word	0x007a1200

0800353c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003540:	4b03      	ldr	r3, [pc, #12]	; (8003550 <HAL_RCC_GetHCLKFreq+0x14>)
 8003542:	681b      	ldr	r3, [r3, #0]
}
 8003544:	4618      	mov	r0, r3
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	20000010 	.word	0x20000010

08003554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003558:	f7ff fff0 	bl	800353c <HAL_RCC_GetHCLKFreq>
 800355c:	4602      	mov	r2, r0
 800355e:	4b06      	ldr	r3, [pc, #24]	; (8003578 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	0a1b      	lsrs	r3, r3, #8
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	4904      	ldr	r1, [pc, #16]	; (800357c <HAL_RCC_GetPCLK1Freq+0x28>)
 800356a:	5ccb      	ldrb	r3, [r1, r3]
 800356c:	f003 031f 	and.w	r3, r3, #31
 8003570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003574:	4618      	mov	r0, r3
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40021000 	.word	0x40021000
 800357c:	08008f0c 	.word	0x08008f0c

08003580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003584:	f7ff ffda 	bl	800353c <HAL_RCC_GetHCLKFreq>
 8003588:	4602      	mov	r2, r0
 800358a:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	0adb      	lsrs	r3, r3, #11
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	4904      	ldr	r1, [pc, #16]	; (80035a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003596:	5ccb      	ldrb	r3, [r1, r3]
 8003598:	f003 031f 	and.w	r3, r3, #31
 800359c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40021000 	.word	0x40021000
 80035a8:	08008f0c 	.word	0x08008f0c

080035ac <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	220f      	movs	r2, #15
 80035ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80035bc:	4b12      	ldr	r3, [pc, #72]	; (8003608 <HAL_RCC_GetClockConfig+0x5c>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 0203 	and.w	r2, r3, #3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80035c8:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <HAL_RCC_GetClockConfig+0x5c>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80035d4:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <HAL_RCC_GetClockConfig+0x5c>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80035e0:	4b09      	ldr	r3, [pc, #36]	; (8003608 <HAL_RCC_GetClockConfig+0x5c>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	08db      	lsrs	r3, r3, #3
 80035e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80035ee:	4b07      	ldr	r3, [pc, #28]	; (800360c <HAL_RCC_GetClockConfig+0x60>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0207 	and.w	r2, r3, #7
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	601a      	str	r2, [r3, #0]
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40021000 	.word	0x40021000
 800360c:	40022000 	.word	0x40022000

08003610 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003618:	2300      	movs	r3, #0
 800361a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800361c:	4b2a      	ldr	r3, [pc, #168]	; (80036c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800361e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003628:	f7fe fcf0 	bl	800200c <HAL_PWREx_GetVoltageRange>
 800362c:	6178      	str	r0, [r7, #20]
 800362e:	e014      	b.n	800365a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003630:	4b25      	ldr	r3, [pc, #148]	; (80036c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003634:	4a24      	ldr	r2, [pc, #144]	; (80036c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800363a:	6593      	str	r3, [r2, #88]	; 0x58
 800363c:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800363e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003648:	f7fe fce0 	bl	800200c <HAL_PWREx_GetVoltageRange>
 800364c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800364e:	4b1e      	ldr	r3, [pc, #120]	; (80036c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003652:	4a1d      	ldr	r2, [pc, #116]	; (80036c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003658:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003660:	d10b      	bne.n	800367a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b80      	cmp	r3, #128	; 0x80
 8003666:	d919      	bls.n	800369c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2ba0      	cmp	r3, #160	; 0xa0
 800366c:	d902      	bls.n	8003674 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800366e:	2302      	movs	r3, #2
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	e013      	b.n	800369c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003674:	2301      	movs	r3, #1
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	e010      	b.n	800369c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b80      	cmp	r3, #128	; 0x80
 800367e:	d902      	bls.n	8003686 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003680:	2303      	movs	r3, #3
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	e00a      	b.n	800369c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b80      	cmp	r3, #128	; 0x80
 800368a:	d102      	bne.n	8003692 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800368c:	2302      	movs	r3, #2
 800368e:	613b      	str	r3, [r7, #16]
 8003690:	e004      	b.n	800369c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b70      	cmp	r3, #112	; 0x70
 8003696:	d101      	bne.n	800369c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003698:	2301      	movs	r3, #1
 800369a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800369c:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f023 0207 	bic.w	r2, r3, #7
 80036a4:	4909      	ldr	r1, [pc, #36]	; (80036cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036ac:	4b07      	ldr	r3, [pc, #28]	; (80036cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d001      	beq.n	80036be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40021000 	.word	0x40021000
 80036cc:	40022000 	.word	0x40022000

080036d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036d8:	2300      	movs	r3, #0
 80036da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036dc:	2300      	movs	r3, #0
 80036de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d041      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036f4:	d02a      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036fa:	d824      	bhi.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003700:	d008      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003702:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003706:	d81e      	bhi.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800370c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003710:	d010      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003712:	e018      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003714:	4b86      	ldr	r3, [pc, #536]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	4a85      	ldr	r2, [pc, #532]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800371a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800371e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003720:	e015      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3304      	adds	r3, #4
 8003726:	2100      	movs	r1, #0
 8003728:	4618      	mov	r0, r3
 800372a:	f000 fabb 	bl	8003ca4 <RCCEx_PLLSAI1_Config>
 800372e:	4603      	mov	r3, r0
 8003730:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003732:	e00c      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3320      	adds	r3, #32
 8003738:	2100      	movs	r1, #0
 800373a:	4618      	mov	r0, r3
 800373c:	f000 fba6 	bl	8003e8c <RCCEx_PLLSAI2_Config>
 8003740:	4603      	mov	r3, r0
 8003742:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003744:	e003      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	74fb      	strb	r3, [r7, #19]
      break;
 800374a:	e000      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800374c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800374e:	7cfb      	ldrb	r3, [r7, #19]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10b      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003754:	4b76      	ldr	r3, [pc, #472]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003762:	4973      	ldr	r1, [pc, #460]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800376a:	e001      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800376c:	7cfb      	ldrb	r3, [r7, #19]
 800376e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d041      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003780:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003784:	d02a      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003786:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800378a:	d824      	bhi.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800378c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003790:	d008      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003792:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003796:	d81e      	bhi.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00a      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800379c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037a0:	d010      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037a2:	e018      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037a4:	4b62      	ldr	r3, [pc, #392]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	4a61      	ldr	r2, [pc, #388]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037b0:	e015      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3304      	adds	r3, #4
 80037b6:	2100      	movs	r1, #0
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 fa73 	bl	8003ca4 <RCCEx_PLLSAI1_Config>
 80037be:	4603      	mov	r3, r0
 80037c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037c2:	e00c      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3320      	adds	r3, #32
 80037c8:	2100      	movs	r1, #0
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 fb5e 	bl	8003e8c <RCCEx_PLLSAI2_Config>
 80037d0:	4603      	mov	r3, r0
 80037d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037d4:	e003      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	74fb      	strb	r3, [r7, #19]
      break;
 80037da:	e000      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80037dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037de:	7cfb      	ldrb	r3, [r7, #19]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10b      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037e4:	4b52      	ldr	r3, [pc, #328]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037f2:	494f      	ldr	r1, [pc, #316]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80037fa:	e001      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fc:	7cfb      	ldrb	r3, [r7, #19]
 80037fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80a0 	beq.w	800394e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800380e:	2300      	movs	r3, #0
 8003810:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003812:	4b47      	ldr	r3, [pc, #284]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003822:	2300      	movs	r3, #0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00d      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003828:	4b41      	ldr	r3, [pc, #260]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800382a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382c:	4a40      	ldr	r2, [pc, #256]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800382e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003832:	6593      	str	r3, [r2, #88]	; 0x58
 8003834:	4b3e      	ldr	r3, [pc, #248]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003840:	2301      	movs	r3, #1
 8003842:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003844:	4b3b      	ldr	r3, [pc, #236]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a3a      	ldr	r2, [pc, #232]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800384a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800384e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003850:	f7fd fafc 	bl	8000e4c <HAL_GetTick>
 8003854:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003856:	e009      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003858:	f7fd faf8 	bl	8000e4c <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d902      	bls.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	74fb      	strb	r3, [r7, #19]
        break;
 800386a:	e005      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800386c:	4b31      	ldr	r3, [pc, #196]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0ef      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003878:	7cfb      	ldrb	r3, [r7, #19]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d15c      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800387e:	4b2c      	ldr	r3, [pc, #176]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003884:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003888:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d01f      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	429a      	cmp	r2, r3
 800389a:	d019      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800389c:	4b24      	ldr	r3, [pc, #144]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800389e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038a8:	4b21      	ldr	r3, [pc, #132]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ae:	4a20      	ldr	r2, [pc, #128]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038b8:	4b1d      	ldr	r3, [pc, #116]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038be:	4a1c      	ldr	r2, [pc, #112]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038c8:	4a19      	ldr	r2, [pc, #100]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d016      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038da:	f7fd fab7 	bl	8000e4c <HAL_GetTick>
 80038de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038e0:	e00b      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e2:	f7fd fab3 	bl	8000e4c <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d902      	bls.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	74fb      	strb	r3, [r7, #19]
            break;
 80038f8:	e006      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038fa:	4b0d      	ldr	r3, [pc, #52]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0ec      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003908:	7cfb      	ldrb	r3, [r7, #19]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10c      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800390e:	4b08      	ldr	r3, [pc, #32]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003914:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800391e:	4904      	ldr	r1, [pc, #16]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003926:	e009      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003928:	7cfb      	ldrb	r3, [r7, #19]
 800392a:	74bb      	strb	r3, [r7, #18]
 800392c:	e006      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800392e:	bf00      	nop
 8003930:	40021000 	.word	0x40021000
 8003934:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003938:	7cfb      	ldrb	r3, [r7, #19]
 800393a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800393c:	7c7b      	ldrb	r3, [r7, #17]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d105      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003942:	4b9e      	ldr	r3, [pc, #632]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003946:	4a9d      	ldr	r2, [pc, #628]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800394c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800395a:	4b98      	ldr	r3, [pc, #608]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003960:	f023 0203 	bic.w	r2, r3, #3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003968:	4994      	ldr	r1, [pc, #592]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800397c:	4b8f      	ldr	r3, [pc, #572]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003982:	f023 020c 	bic.w	r2, r3, #12
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398a:	498c      	ldr	r1, [pc, #560]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800399e:	4b87      	ldr	r3, [pc, #540]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	4983      	ldr	r1, [pc, #524]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0308 	and.w	r3, r3, #8
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039c0:	4b7e      	ldr	r3, [pc, #504]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	497b      	ldr	r1, [pc, #492]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0310 	and.w	r3, r3, #16
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039e2:	4b76      	ldr	r3, [pc, #472]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f0:	4972      	ldr	r1, [pc, #456]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0320 	and.w	r3, r3, #32
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00a      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a04:	4b6d      	ldr	r3, [pc, #436]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a12:	496a      	ldr	r1, [pc, #424]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a26:	4b65      	ldr	r3, [pc, #404]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a34:	4961      	ldr	r1, [pc, #388]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a48:	4b5c      	ldr	r3, [pc, #368]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a56:	4959      	ldr	r1, [pc, #356]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00a      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a6a:	4b54      	ldr	r3, [pc, #336]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a70:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a78:	4950      	ldr	r1, [pc, #320]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a8c:	4b4b      	ldr	r3, [pc, #300]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a92:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9a:	4948      	ldr	r1, [pc, #288]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003aae:	4b43      	ldr	r3, [pc, #268]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abc:	493f      	ldr	r1, [pc, #252]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d028      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ad0:	4b3a      	ldr	r3, [pc, #232]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ade:	4937      	ldr	r1, [pc, #220]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aee:	d106      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003af0:	4b32      	ldr	r3, [pc, #200]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4a31      	ldr	r2, [pc, #196]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003afa:	60d3      	str	r3, [r2, #12]
 8003afc:	e011      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b06:	d10c      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 f8c8 	bl	8003ca4 <RCCEx_PLLSAI1_Config>
 8003b14:	4603      	mov	r3, r0
 8003b16:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b18:	7cfb      	ldrb	r3, [r7, #19]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003b1e:	7cfb      	ldrb	r3, [r7, #19]
 8003b20:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d028      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b2e:	4b23      	ldr	r3, [pc, #140]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3c:	491f      	ldr	r1, [pc, #124]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b4c:	d106      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b4e:	4b1b      	ldr	r3, [pc, #108]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	4a1a      	ldr	r2, [pc, #104]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b58:	60d3      	str	r3, [r2, #12]
 8003b5a:	e011      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b64:	d10c      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3304      	adds	r3, #4
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 f899 	bl	8003ca4 <RCCEx_PLLSAI1_Config>
 8003b72:	4603      	mov	r3, r0
 8003b74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b76:	7cfb      	ldrb	r3, [r7, #19]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003b7c:	7cfb      	ldrb	r3, [r7, #19]
 8003b7e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d02b      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b9a:	4908      	ldr	r1, [pc, #32]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003baa:	d109      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bac:	4b03      	ldr	r3, [pc, #12]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	4a02      	ldr	r2, [pc, #8]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bb6:	60d3      	str	r3, [r2, #12]
 8003bb8:	e014      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003bba:	bf00      	nop
 8003bbc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bc8:	d10c      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	3304      	adds	r3, #4
 8003bce:	2101      	movs	r1, #1
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 f867 	bl	8003ca4 <RCCEx_PLLSAI1_Config>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bda:	7cfb      	ldrb	r3, [r7, #19]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003be0:	7cfb      	ldrb	r3, [r7, #19]
 8003be2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d02f      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bf0:	4b2b      	ldr	r3, [pc, #172]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bfe:	4928      	ldr	r1, [pc, #160]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c0e:	d10d      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3304      	adds	r3, #4
 8003c14:	2102      	movs	r1, #2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 f844 	bl	8003ca4 <RCCEx_PLLSAI1_Config>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c20:	7cfb      	ldrb	r3, [r7, #19]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d014      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c26:	7cfb      	ldrb	r3, [r7, #19]
 8003c28:	74bb      	strb	r3, [r7, #18]
 8003c2a:	e011      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c34:	d10c      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3320      	adds	r3, #32
 8003c3a:	2102      	movs	r1, #2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 f925 	bl	8003e8c <RCCEx_PLLSAI2_Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c46:	7cfb      	ldrb	r3, [r7, #19]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c4c:	7cfb      	ldrb	r3, [r7, #19]
 8003c4e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c5c:	4b10      	ldr	r3, [pc, #64]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c62:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c6a:	490d      	ldr	r1, [pc, #52]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00b      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c7e:	4b08      	ldr	r3, [pc, #32]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c8e:	4904      	ldr	r1, [pc, #16]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c96:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40021000 	.word	0x40021000

08003ca4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cb2:	4b75      	ldr	r3, [pc, #468]	; (8003e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d018      	beq.n	8003cf0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003cbe:	4b72      	ldr	r3, [pc, #456]	; (8003e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f003 0203 	and.w	r2, r3, #3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d10d      	bne.n	8003cea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
       ||
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cd6:	4b6c      	ldr	r3, [pc, #432]	; (8003e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	091b      	lsrs	r3, r3, #4
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
       ||
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d047      	beq.n	8003d7a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	73fb      	strb	r3, [r7, #15]
 8003cee:	e044      	b.n	8003d7a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b03      	cmp	r3, #3
 8003cf6:	d018      	beq.n	8003d2a <RCCEx_PLLSAI1_Config+0x86>
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d825      	bhi.n	8003d48 <RCCEx_PLLSAI1_Config+0xa4>
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d002      	beq.n	8003d06 <RCCEx_PLLSAI1_Config+0x62>
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d009      	beq.n	8003d18 <RCCEx_PLLSAI1_Config+0x74>
 8003d04:	e020      	b.n	8003d48 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d06:	4b60      	ldr	r3, [pc, #384]	; (8003e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d11d      	bne.n	8003d4e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d16:	e01a      	b.n	8003d4e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d18:	4b5b      	ldr	r3, [pc, #364]	; (8003e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d116      	bne.n	8003d52 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d28:	e013      	b.n	8003d52 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d2a:	4b57      	ldr	r3, [pc, #348]	; (8003e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10f      	bne.n	8003d56 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d36:	4b54      	ldr	r3, [pc, #336]	; (8003e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d109      	bne.n	8003d56 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d46:	e006      	b.n	8003d56 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d4c:	e004      	b.n	8003d58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d4e:	bf00      	nop
 8003d50:	e002      	b.n	8003d58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d52:	bf00      	nop
 8003d54:	e000      	b.n	8003d58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d56:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10d      	bne.n	8003d7a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d5e:	4b4a      	ldr	r3, [pc, #296]	; (8003e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6819      	ldr	r1, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	430b      	orrs	r3, r1
 8003d74:	4944      	ldr	r1, [pc, #272]	; (8003e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d17d      	bne.n	8003e7c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d80:	4b41      	ldr	r3, [pc, #260]	; (8003e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a40      	ldr	r2, [pc, #256]	; (8003e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d8c:	f7fd f85e 	bl	8000e4c <HAL_GetTick>
 8003d90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d92:	e009      	b.n	8003da8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d94:	f7fd f85a 	bl	8000e4c <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d902      	bls.n	8003da8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	73fb      	strb	r3, [r7, #15]
        break;
 8003da6:	e005      	b.n	8003db4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003da8:	4b37      	ldr	r3, [pc, #220]	; (8003e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1ef      	bne.n	8003d94 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d160      	bne.n	8003e7c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d111      	bne.n	8003de4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dc0:	4b31      	ldr	r3, [pc, #196]	; (8003e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6892      	ldr	r2, [r2, #8]
 8003dd0:	0211      	lsls	r1, r2, #8
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	68d2      	ldr	r2, [r2, #12]
 8003dd6:	0912      	lsrs	r2, r2, #4
 8003dd8:	0452      	lsls	r2, r2, #17
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	492a      	ldr	r1, [pc, #168]	; (8003e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	610b      	str	r3, [r1, #16]
 8003de2:	e027      	b.n	8003e34 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d112      	bne.n	8003e10 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dea:	4b27      	ldr	r3, [pc, #156]	; (8003e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003df2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6892      	ldr	r2, [r2, #8]
 8003dfa:	0211      	lsls	r1, r2, #8
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6912      	ldr	r2, [r2, #16]
 8003e00:	0852      	lsrs	r2, r2, #1
 8003e02:	3a01      	subs	r2, #1
 8003e04:	0552      	lsls	r2, r2, #21
 8003e06:	430a      	orrs	r2, r1
 8003e08:	491f      	ldr	r1, [pc, #124]	; (8003e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	610b      	str	r3, [r1, #16]
 8003e0e:	e011      	b.n	8003e34 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e10:	4b1d      	ldr	r3, [pc, #116]	; (8003e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6892      	ldr	r2, [r2, #8]
 8003e20:	0211      	lsls	r1, r2, #8
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6952      	ldr	r2, [r2, #20]
 8003e26:	0852      	lsrs	r2, r2, #1
 8003e28:	3a01      	subs	r2, #1
 8003e2a:	0652      	lsls	r2, r2, #25
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	4916      	ldr	r1, [pc, #88]	; (8003e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e34:	4b14      	ldr	r3, [pc, #80]	; (8003e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a13      	ldr	r2, [pc, #76]	; (8003e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e40:	f7fd f804 	bl	8000e4c <HAL_GetTick>
 8003e44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e46:	e009      	b.n	8003e5c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e48:	f7fd f800 	bl	8000e4c <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d902      	bls.n	8003e5c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	73fb      	strb	r3, [r7, #15]
          break;
 8003e5a:	e005      	b.n	8003e68 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e5c:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0ef      	beq.n	8003e48 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e6e:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e70:	691a      	ldr	r2, [r3, #16]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	4904      	ldr	r1, [pc, #16]	; (8003e88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40021000 	.word	0x40021000

08003e8c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e9a:	4b6a      	ldr	r3, [pc, #424]	; (8004044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f003 0303 	and.w	r3, r3, #3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d018      	beq.n	8003ed8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ea6:	4b67      	ldr	r3, [pc, #412]	; (8004044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f003 0203 	and.w	r2, r3, #3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d10d      	bne.n	8003ed2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
       ||
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d009      	beq.n	8003ed2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ebe:	4b61      	ldr	r3, [pc, #388]	; (8004044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	091b      	lsrs	r3, r3, #4
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
       ||
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d047      	beq.n	8003f62 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	73fb      	strb	r3, [r7, #15]
 8003ed6:	e044      	b.n	8003f62 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d018      	beq.n	8003f12 <RCCEx_PLLSAI2_Config+0x86>
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d825      	bhi.n	8003f30 <RCCEx_PLLSAI2_Config+0xa4>
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d002      	beq.n	8003eee <RCCEx_PLLSAI2_Config+0x62>
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d009      	beq.n	8003f00 <RCCEx_PLLSAI2_Config+0x74>
 8003eec:	e020      	b.n	8003f30 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003eee:	4b55      	ldr	r3, [pc, #340]	; (8004044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d11d      	bne.n	8003f36 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003efe:	e01a      	b.n	8003f36 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f00:	4b50      	ldr	r3, [pc, #320]	; (8004044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d116      	bne.n	8003f3a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f10:	e013      	b.n	8003f3a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f12:	4b4c      	ldr	r3, [pc, #304]	; (8004044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10f      	bne.n	8003f3e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f1e:	4b49      	ldr	r3, [pc, #292]	; (8004044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d109      	bne.n	8003f3e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f2e:	e006      	b.n	8003f3e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	73fb      	strb	r3, [r7, #15]
      break;
 8003f34:	e004      	b.n	8003f40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f36:	bf00      	nop
 8003f38:	e002      	b.n	8003f40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f3a:	bf00      	nop
 8003f3c:	e000      	b.n	8003f40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10d      	bne.n	8003f62 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f46:	4b3f      	ldr	r3, [pc, #252]	; (8004044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6819      	ldr	r1, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	430b      	orrs	r3, r1
 8003f5c:	4939      	ldr	r1, [pc, #228]	; (8004044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d167      	bne.n	8004038 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f68:	4b36      	ldr	r3, [pc, #216]	; (8004044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a35      	ldr	r2, [pc, #212]	; (8004044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f74:	f7fc ff6a 	bl	8000e4c <HAL_GetTick>
 8003f78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f7a:	e009      	b.n	8003f90 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f7c:	f7fc ff66 	bl	8000e4c <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d902      	bls.n	8003f90 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	73fb      	strb	r3, [r7, #15]
        break;
 8003f8e:	e005      	b.n	8003f9c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f90:	4b2c      	ldr	r3, [pc, #176]	; (8004044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1ef      	bne.n	8003f7c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d14a      	bne.n	8004038 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d111      	bne.n	8003fcc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fa8:	4b26      	ldr	r3, [pc, #152]	; (8004044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6892      	ldr	r2, [r2, #8]
 8003fb8:	0211      	lsls	r1, r2, #8
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	68d2      	ldr	r2, [r2, #12]
 8003fbe:	0912      	lsrs	r2, r2, #4
 8003fc0:	0452      	lsls	r2, r2, #17
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	491f      	ldr	r1, [pc, #124]	; (8004044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	614b      	str	r3, [r1, #20]
 8003fca:	e011      	b.n	8003ff0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fcc:	4b1d      	ldr	r3, [pc, #116]	; (8004044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6892      	ldr	r2, [r2, #8]
 8003fdc:	0211      	lsls	r1, r2, #8
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6912      	ldr	r2, [r2, #16]
 8003fe2:	0852      	lsrs	r2, r2, #1
 8003fe4:	3a01      	subs	r2, #1
 8003fe6:	0652      	lsls	r2, r2, #25
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	4916      	ldr	r1, [pc, #88]	; (8004044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ff0:	4b14      	ldr	r3, [pc, #80]	; (8004044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a13      	ldr	r2, [pc, #76]	; (8004044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ffa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffc:	f7fc ff26 	bl	8000e4c <HAL_GetTick>
 8004000:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004002:	e009      	b.n	8004018 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004004:	f7fc ff22 	bl	8000e4c <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d902      	bls.n	8004018 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	73fb      	strb	r3, [r7, #15]
          break;
 8004016:	e005      	b.n	8004024 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004018:	4b0a      	ldr	r3, [pc, #40]	; (8004044 <RCCEx_PLLSAI2_Config+0x1b8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0ef      	beq.n	8004004 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004024:	7bfb      	ldrb	r3, [r7, #15]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d106      	bne.n	8004038 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800402a:	4b06      	ldr	r3, [pc, #24]	; (8004044 <RCCEx_PLLSAI2_Config+0x1b8>)
 800402c:	695a      	ldr	r2, [r3, #20]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	4904      	ldr	r1, [pc, #16]	; (8004044 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004034:	4313      	orrs	r3, r2
 8004036:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004038:	7bfb      	ldrb	r3, [r7, #15]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40021000 	.word	0x40021000

08004048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e049      	b.n	80040ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d106      	bne.n	8004074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f003 f9dc 	bl	800742c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3304      	adds	r3, #4
 8004084:	4619      	mov	r1, r3
 8004086:	4610      	mov	r0, r2
 8004088:	f000 fab4 	bl	80045f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b01      	cmp	r3, #1
 800410a:	d001      	beq.n	8004110 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e04f      	b.n	80041b0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a23      	ldr	r2, [pc, #140]	; (80041bc <HAL_TIM_Base_Start_IT+0xc4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d01d      	beq.n	800416e <HAL_TIM_Base_Start_IT+0x76>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413a:	d018      	beq.n	800416e <HAL_TIM_Base_Start_IT+0x76>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a1f      	ldr	r2, [pc, #124]	; (80041c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d013      	beq.n	800416e <HAL_TIM_Base_Start_IT+0x76>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d00e      	beq.n	800416e <HAL_TIM_Base_Start_IT+0x76>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a1c      	ldr	r2, [pc, #112]	; (80041c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d009      	beq.n	800416e <HAL_TIM_Base_Start_IT+0x76>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a1b      	ldr	r2, [pc, #108]	; (80041cc <HAL_TIM_Base_Start_IT+0xd4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d004      	beq.n	800416e <HAL_TIM_Base_Start_IT+0x76>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a19      	ldr	r2, [pc, #100]	; (80041d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d115      	bne.n	800419a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	4b17      	ldr	r3, [pc, #92]	; (80041d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004176:	4013      	ands	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2b06      	cmp	r3, #6
 800417e:	d015      	beq.n	80041ac <HAL_TIM_Base_Start_IT+0xb4>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004186:	d011      	beq.n	80041ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0201 	orr.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004198:	e008      	b.n	80041ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f042 0201 	orr.w	r2, r2, #1
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	e000      	b.n	80041ae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	40012c00 	.word	0x40012c00
 80041c0:	40000400 	.word	0x40000400
 80041c4:	40000800 	.word	0x40000800
 80041c8:	40000c00 	.word	0x40000c00
 80041cc:	40013400 	.word	0x40013400
 80041d0:	40014000 	.word	0x40014000
 80041d4:	00010007 	.word	0x00010007

080041d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d122      	bne.n	8004234 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d11b      	bne.n	8004234 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f06f 0202 	mvn.w	r2, #2
 8004204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f9cb 	bl	80045b6 <HAL_TIM_IC_CaptureCallback>
 8004220:	e005      	b.n	800422e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f9bd 	bl	80045a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f9ce 	bl	80045ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b04      	cmp	r3, #4
 8004240:	d122      	bne.n	8004288 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b04      	cmp	r3, #4
 800424e:	d11b      	bne.n	8004288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f06f 0204 	mvn.w	r2, #4
 8004258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2202      	movs	r2, #2
 800425e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f9a1 	bl	80045b6 <HAL_TIM_IC_CaptureCallback>
 8004274:	e005      	b.n	8004282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f993 	bl	80045a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f9a4 	bl	80045ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b08      	cmp	r3, #8
 8004294:	d122      	bne.n	80042dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d11b      	bne.n	80042dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f06f 0208 	mvn.w	r2, #8
 80042ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2204      	movs	r2, #4
 80042b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f977 	bl	80045b6 <HAL_TIM_IC_CaptureCallback>
 80042c8:	e005      	b.n	80042d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f969 	bl	80045a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f97a 	bl	80045ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0310 	and.w	r3, r3, #16
 80042e6:	2b10      	cmp	r3, #16
 80042e8:	d122      	bne.n	8004330 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b10      	cmp	r3, #16
 80042f6:	d11b      	bne.n	8004330 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0210 	mvn.w	r2, #16
 8004300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2208      	movs	r2, #8
 8004306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f94d 	bl	80045b6 <HAL_TIM_IC_CaptureCallback>
 800431c:	e005      	b.n	800432a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f93f 	bl	80045a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f950 	bl	80045ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b01      	cmp	r3, #1
 800433c:	d10e      	bne.n	800435c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b01      	cmp	r3, #1
 800434a:	d107      	bne.n	800435c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f06f 0201 	mvn.w	r2, #1
 8004354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f002 fb4a 	bl	80069f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004366:	2b80      	cmp	r3, #128	; 0x80
 8004368:	d10e      	bne.n	8004388 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004374:	2b80      	cmp	r3, #128	; 0x80
 8004376:	d107      	bne.n	8004388 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fafc 	bl	8004980 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004396:	d10e      	bne.n	80043b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a2:	2b80      	cmp	r3, #128	; 0x80
 80043a4:	d107      	bne.n	80043b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 faef 	bl	8004994 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c0:	2b40      	cmp	r3, #64	; 0x40
 80043c2:	d10e      	bne.n	80043e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ce:	2b40      	cmp	r3, #64	; 0x40
 80043d0:	d107      	bne.n	80043e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f8fe 	bl	80045de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	f003 0320 	and.w	r3, r3, #32
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	d10e      	bne.n	800440e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b20      	cmp	r3, #32
 80043fc:	d107      	bne.n	800440e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f06f 0220 	mvn.w	r2, #32
 8004406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 faaf 	bl	800496c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800440e:	bf00      	nop
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b084      	sub	sp, #16
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004426:	2b01      	cmp	r3, #1
 8004428:	d101      	bne.n	800442e <HAL_TIM_ConfigClockSource+0x18>
 800442a:	2302      	movs	r3, #2
 800442c:	e0b5      	b.n	800459a <HAL_TIM_ConfigClockSource+0x184>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2202      	movs	r2, #2
 800443a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800444c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004450:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004458:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800446a:	d03e      	beq.n	80044ea <HAL_TIM_ConfigClockSource+0xd4>
 800446c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004470:	f200 8087 	bhi.w	8004582 <HAL_TIM_ConfigClockSource+0x16c>
 8004474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004478:	f000 8085 	beq.w	8004586 <HAL_TIM_ConfigClockSource+0x170>
 800447c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004480:	d87f      	bhi.n	8004582 <HAL_TIM_ConfigClockSource+0x16c>
 8004482:	2b70      	cmp	r3, #112	; 0x70
 8004484:	d01a      	beq.n	80044bc <HAL_TIM_ConfigClockSource+0xa6>
 8004486:	2b70      	cmp	r3, #112	; 0x70
 8004488:	d87b      	bhi.n	8004582 <HAL_TIM_ConfigClockSource+0x16c>
 800448a:	2b60      	cmp	r3, #96	; 0x60
 800448c:	d050      	beq.n	8004530 <HAL_TIM_ConfigClockSource+0x11a>
 800448e:	2b60      	cmp	r3, #96	; 0x60
 8004490:	d877      	bhi.n	8004582 <HAL_TIM_ConfigClockSource+0x16c>
 8004492:	2b50      	cmp	r3, #80	; 0x50
 8004494:	d03c      	beq.n	8004510 <HAL_TIM_ConfigClockSource+0xfa>
 8004496:	2b50      	cmp	r3, #80	; 0x50
 8004498:	d873      	bhi.n	8004582 <HAL_TIM_ConfigClockSource+0x16c>
 800449a:	2b40      	cmp	r3, #64	; 0x40
 800449c:	d058      	beq.n	8004550 <HAL_TIM_ConfigClockSource+0x13a>
 800449e:	2b40      	cmp	r3, #64	; 0x40
 80044a0:	d86f      	bhi.n	8004582 <HAL_TIM_ConfigClockSource+0x16c>
 80044a2:	2b30      	cmp	r3, #48	; 0x30
 80044a4:	d064      	beq.n	8004570 <HAL_TIM_ConfigClockSource+0x15a>
 80044a6:	2b30      	cmp	r3, #48	; 0x30
 80044a8:	d86b      	bhi.n	8004582 <HAL_TIM_ConfigClockSource+0x16c>
 80044aa:	2b20      	cmp	r3, #32
 80044ac:	d060      	beq.n	8004570 <HAL_TIM_ConfigClockSource+0x15a>
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d867      	bhi.n	8004582 <HAL_TIM_ConfigClockSource+0x16c>
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d05c      	beq.n	8004570 <HAL_TIM_ConfigClockSource+0x15a>
 80044b6:	2b10      	cmp	r3, #16
 80044b8:	d05a      	beq.n	8004570 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80044ba:	e062      	b.n	8004582 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6818      	ldr	r0, [r3, #0]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	6899      	ldr	r1, [r3, #8]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f000 f9a6 	bl	800481c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044de:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	609a      	str	r2, [r3, #8]
      break;
 80044e8:	e04e      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6818      	ldr	r0, [r3, #0]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	6899      	ldr	r1, [r3, #8]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f000 f98f 	bl	800481c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800450c:	609a      	str	r2, [r3, #8]
      break;
 800450e:	e03b      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6818      	ldr	r0, [r3, #0]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	6859      	ldr	r1, [r3, #4]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	461a      	mov	r2, r3
 800451e:	f000 f903 	bl	8004728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2150      	movs	r1, #80	; 0x50
 8004528:	4618      	mov	r0, r3
 800452a:	f000 f95c 	bl	80047e6 <TIM_ITRx_SetConfig>
      break;
 800452e:	e02b      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6818      	ldr	r0, [r3, #0]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	6859      	ldr	r1, [r3, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	461a      	mov	r2, r3
 800453e:	f000 f922 	bl	8004786 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2160      	movs	r1, #96	; 0x60
 8004548:	4618      	mov	r0, r3
 800454a:	f000 f94c 	bl	80047e6 <TIM_ITRx_SetConfig>
      break;
 800454e:	e01b      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6818      	ldr	r0, [r3, #0]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	6859      	ldr	r1, [r3, #4]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	461a      	mov	r2, r3
 800455e:	f000 f8e3 	bl	8004728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2140      	movs	r1, #64	; 0x40
 8004568:	4618      	mov	r0, r3
 800456a:	f000 f93c 	bl	80047e6 <TIM_ITRx_SetConfig>
      break;
 800456e:	e00b      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4619      	mov	r1, r3
 800457a:	4610      	mov	r0, r2
 800457c:	f000 f933 	bl	80047e6 <TIM_ITRx_SetConfig>
        break;
 8004580:	e002      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004582:	bf00      	nop
 8004584:	e000      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004586:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
	...

080045f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a40      	ldr	r2, [pc, #256]	; (8004708 <TIM_Base_SetConfig+0x114>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d013      	beq.n	8004634 <TIM_Base_SetConfig+0x40>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004612:	d00f      	beq.n	8004634 <TIM_Base_SetConfig+0x40>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a3d      	ldr	r2, [pc, #244]	; (800470c <TIM_Base_SetConfig+0x118>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d00b      	beq.n	8004634 <TIM_Base_SetConfig+0x40>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a3c      	ldr	r2, [pc, #240]	; (8004710 <TIM_Base_SetConfig+0x11c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d007      	beq.n	8004634 <TIM_Base_SetConfig+0x40>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a3b      	ldr	r2, [pc, #236]	; (8004714 <TIM_Base_SetConfig+0x120>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d003      	beq.n	8004634 <TIM_Base_SetConfig+0x40>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a3a      	ldr	r2, [pc, #232]	; (8004718 <TIM_Base_SetConfig+0x124>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d108      	bne.n	8004646 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a2f      	ldr	r2, [pc, #188]	; (8004708 <TIM_Base_SetConfig+0x114>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d01f      	beq.n	800468e <TIM_Base_SetConfig+0x9a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004654:	d01b      	beq.n	800468e <TIM_Base_SetConfig+0x9a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a2c      	ldr	r2, [pc, #176]	; (800470c <TIM_Base_SetConfig+0x118>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d017      	beq.n	800468e <TIM_Base_SetConfig+0x9a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a2b      	ldr	r2, [pc, #172]	; (8004710 <TIM_Base_SetConfig+0x11c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d013      	beq.n	800468e <TIM_Base_SetConfig+0x9a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a2a      	ldr	r2, [pc, #168]	; (8004714 <TIM_Base_SetConfig+0x120>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d00f      	beq.n	800468e <TIM_Base_SetConfig+0x9a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a29      	ldr	r2, [pc, #164]	; (8004718 <TIM_Base_SetConfig+0x124>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d00b      	beq.n	800468e <TIM_Base_SetConfig+0x9a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a28      	ldr	r2, [pc, #160]	; (800471c <TIM_Base_SetConfig+0x128>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d007      	beq.n	800468e <TIM_Base_SetConfig+0x9a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a27      	ldr	r2, [pc, #156]	; (8004720 <TIM_Base_SetConfig+0x12c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d003      	beq.n	800468e <TIM_Base_SetConfig+0x9a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a26      	ldr	r2, [pc, #152]	; (8004724 <TIM_Base_SetConfig+0x130>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d108      	bne.n	80046a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	4313      	orrs	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a10      	ldr	r2, [pc, #64]	; (8004708 <TIM_Base_SetConfig+0x114>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00f      	beq.n	80046ec <TIM_Base_SetConfig+0xf8>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a12      	ldr	r2, [pc, #72]	; (8004718 <TIM_Base_SetConfig+0x124>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d00b      	beq.n	80046ec <TIM_Base_SetConfig+0xf8>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a11      	ldr	r2, [pc, #68]	; (800471c <TIM_Base_SetConfig+0x128>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d007      	beq.n	80046ec <TIM_Base_SetConfig+0xf8>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a10      	ldr	r2, [pc, #64]	; (8004720 <TIM_Base_SetConfig+0x12c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d003      	beq.n	80046ec <TIM_Base_SetConfig+0xf8>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a0f      	ldr	r2, [pc, #60]	; (8004724 <TIM_Base_SetConfig+0x130>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d103      	bne.n	80046f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	615a      	str	r2, [r3, #20]
}
 80046fa:	bf00      	nop
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	40012c00 	.word	0x40012c00
 800470c:	40000400 	.word	0x40000400
 8004710:	40000800 	.word	0x40000800
 8004714:	40000c00 	.word	0x40000c00
 8004718:	40013400 	.word	0x40013400
 800471c:	40014000 	.word	0x40014000
 8004720:	40014400 	.word	0x40014400
 8004724:	40014800 	.word	0x40014800

08004728 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	f023 0201 	bic.w	r2, r3, #1
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	4313      	orrs	r3, r2
 800475c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f023 030a 	bic.w	r3, r3, #10
 8004764:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4313      	orrs	r3, r2
 800476c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	621a      	str	r2, [r3, #32]
}
 800477a:	bf00      	nop
 800477c:	371c      	adds	r7, #28
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004786:	b480      	push	{r7}
 8004788:	b087      	sub	sp, #28
 800478a:	af00      	add	r7, sp, #0
 800478c:	60f8      	str	r0, [r7, #12]
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	f023 0210 	bic.w	r2, r3, #16
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	031b      	lsls	r3, r3, #12
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	621a      	str	r2, [r3, #32]
}
 80047da:	bf00      	nop
 80047dc:	371c      	adds	r7, #28
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b085      	sub	sp, #20
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	f043 0307 	orr.w	r3, r3, #7
 8004808:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	609a      	str	r2, [r3, #8]
}
 8004810:	bf00      	nop
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004836:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	021a      	lsls	r2, r3, #8
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	431a      	orrs	r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4313      	orrs	r3, r2
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	4313      	orrs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	609a      	str	r2, [r3, #8]
}
 8004850:	bf00      	nop
 8004852:	371c      	adds	r7, #28
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004870:	2302      	movs	r3, #2
 8004872:	e068      	b.n	8004946 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a2e      	ldr	r2, [pc, #184]	; (8004954 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d004      	beq.n	80048a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a2d      	ldr	r2, [pc, #180]	; (8004958 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d108      	bne.n	80048ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80048ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1e      	ldr	r2, [pc, #120]	; (8004954 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d01d      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e6:	d018      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1b      	ldr	r2, [pc, #108]	; (800495c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d013      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a1a      	ldr	r2, [pc, #104]	; (8004960 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d00e      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a18      	ldr	r2, [pc, #96]	; (8004964 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d009      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a13      	ldr	r2, [pc, #76]	; (8004958 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d004      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a14      	ldr	r2, [pc, #80]	; (8004968 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d10c      	bne.n	8004934 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004920:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	4313      	orrs	r3, r2
 800492a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40012c00 	.word	0x40012c00
 8004958:	40013400 	.word	0x40013400
 800495c:	40000400 	.word	0x40000400
 8004960:	40000800 	.word	0x40000800
 8004964:	40000c00 	.word	0x40000c00
 8004968:	40014000 	.word	0x40014000

0800496c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e040      	b.n	8004a3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d106      	bne.n	80049d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f002 fd4c 	bl	8007468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2224      	movs	r2, #36	; 0x24
 80049d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0201 	bic.w	r2, r2, #1
 80049e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f8c0 	bl	8004b6c <UART_SetConfig>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e022      	b.n	8004a3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fb3e 	bl	8005080 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689a      	ldr	r2, [r3, #8]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0201 	orr.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 fbc5 	bl	80051c4 <UART_CheckIdleState>
 8004a3a:	4603      	mov	r3, r0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08a      	sub	sp, #40	; 0x28
 8004a48:	af02      	add	r7, sp, #8
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	603b      	str	r3, [r7, #0]
 8004a50:	4613      	mov	r3, r2
 8004a52:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a58:	2b20      	cmp	r3, #32
 8004a5a:	f040 8082 	bne.w	8004b62 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <HAL_UART_Transmit+0x26>
 8004a64:	88fb      	ldrh	r3, [r7, #6]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e07a      	b.n	8004b64 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d101      	bne.n	8004a7c <HAL_UART_Transmit+0x38>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	e073      	b.n	8004b64 <HAL_UART_Transmit+0x120>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2221      	movs	r2, #33	; 0x21
 8004a90:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a92:	f7fc f9db 	bl	8000e4c <HAL_GetTick>
 8004a96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	88fa      	ldrh	r2, [r7, #6]
 8004a9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	88fa      	ldrh	r2, [r7, #6]
 8004aa4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab0:	d108      	bne.n	8004ac4 <HAL_UART_Transmit+0x80>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d104      	bne.n	8004ac4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004aba:	2300      	movs	r3, #0
 8004abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	61bb      	str	r3, [r7, #24]
 8004ac2:	e003      	b.n	8004acc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004ad4:	e02d      	b.n	8004b32 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2200      	movs	r2, #0
 8004ade:	2180      	movs	r1, #128	; 0x80
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 fbb8 	bl	8005256 <UART_WaitOnFlagUntilTimeout>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e039      	b.n	8004b64 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10b      	bne.n	8004b0e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	881a      	ldrh	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b02:	b292      	uxth	r2, r2
 8004b04:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	3302      	adds	r3, #2
 8004b0a:	61bb      	str	r3, [r7, #24]
 8004b0c:	e008      	b.n	8004b20 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	781a      	ldrb	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	b292      	uxth	r2, r2
 8004b18:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1cb      	bne.n	8004ad6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2200      	movs	r2, #0
 8004b46:	2140      	movs	r1, #64	; 0x40
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 fb84 	bl	8005256 <UART_WaitOnFlagUntilTimeout>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e005      	b.n	8004b64 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e000      	b.n	8004b64 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004b62:	2302      	movs	r3, #2
  }
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3720      	adds	r7, #32
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b6c:	b5b0      	push	{r4, r5, r7, lr}
 8004b6e:	b088      	sub	sp, #32
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	431a      	orrs	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	431a      	orrs	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	4bad      	ldr	r3, [pc, #692]	; (8004e4c <UART_SetConfig+0x2e0>)
 8004b98:	4013      	ands	r3, r2
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6812      	ldr	r2, [r2, #0]
 8004b9e:	69f9      	ldr	r1, [r7, #28]
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4aa2      	ldr	r2, [pc, #648]	; (8004e50 <UART_SetConfig+0x2e4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d004      	beq.n	8004bd4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	69fa      	ldr	r2, [r7, #28]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69fa      	ldr	r2, [r7, #28]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a99      	ldr	r2, [pc, #612]	; (8004e54 <UART_SetConfig+0x2e8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d121      	bne.n	8004c36 <UART_SetConfig+0xca>
 8004bf2:	4b99      	ldr	r3, [pc, #612]	; (8004e58 <UART_SetConfig+0x2ec>)
 8004bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf8:	f003 0303 	and.w	r3, r3, #3
 8004bfc:	2b03      	cmp	r3, #3
 8004bfe:	d817      	bhi.n	8004c30 <UART_SetConfig+0xc4>
 8004c00:	a201      	add	r2, pc, #4	; (adr r2, 8004c08 <UART_SetConfig+0x9c>)
 8004c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c06:	bf00      	nop
 8004c08:	08004c19 	.word	0x08004c19
 8004c0c:	08004c25 	.word	0x08004c25
 8004c10:	08004c1f 	.word	0x08004c1f
 8004c14:	08004c2b 	.word	0x08004c2b
 8004c18:	2301      	movs	r3, #1
 8004c1a:	76fb      	strb	r3, [r7, #27]
 8004c1c:	e0e7      	b.n	8004dee <UART_SetConfig+0x282>
 8004c1e:	2302      	movs	r3, #2
 8004c20:	76fb      	strb	r3, [r7, #27]
 8004c22:	e0e4      	b.n	8004dee <UART_SetConfig+0x282>
 8004c24:	2304      	movs	r3, #4
 8004c26:	76fb      	strb	r3, [r7, #27]
 8004c28:	e0e1      	b.n	8004dee <UART_SetConfig+0x282>
 8004c2a:	2308      	movs	r3, #8
 8004c2c:	76fb      	strb	r3, [r7, #27]
 8004c2e:	e0de      	b.n	8004dee <UART_SetConfig+0x282>
 8004c30:	2310      	movs	r3, #16
 8004c32:	76fb      	strb	r3, [r7, #27]
 8004c34:	e0db      	b.n	8004dee <UART_SetConfig+0x282>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a88      	ldr	r2, [pc, #544]	; (8004e5c <UART_SetConfig+0x2f0>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d132      	bne.n	8004ca6 <UART_SetConfig+0x13a>
 8004c40:	4b85      	ldr	r3, [pc, #532]	; (8004e58 <UART_SetConfig+0x2ec>)
 8004c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c46:	f003 030c 	and.w	r3, r3, #12
 8004c4a:	2b0c      	cmp	r3, #12
 8004c4c:	d828      	bhi.n	8004ca0 <UART_SetConfig+0x134>
 8004c4e:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <UART_SetConfig+0xe8>)
 8004c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c54:	08004c89 	.word	0x08004c89
 8004c58:	08004ca1 	.word	0x08004ca1
 8004c5c:	08004ca1 	.word	0x08004ca1
 8004c60:	08004ca1 	.word	0x08004ca1
 8004c64:	08004c95 	.word	0x08004c95
 8004c68:	08004ca1 	.word	0x08004ca1
 8004c6c:	08004ca1 	.word	0x08004ca1
 8004c70:	08004ca1 	.word	0x08004ca1
 8004c74:	08004c8f 	.word	0x08004c8f
 8004c78:	08004ca1 	.word	0x08004ca1
 8004c7c:	08004ca1 	.word	0x08004ca1
 8004c80:	08004ca1 	.word	0x08004ca1
 8004c84:	08004c9b 	.word	0x08004c9b
 8004c88:	2300      	movs	r3, #0
 8004c8a:	76fb      	strb	r3, [r7, #27]
 8004c8c:	e0af      	b.n	8004dee <UART_SetConfig+0x282>
 8004c8e:	2302      	movs	r3, #2
 8004c90:	76fb      	strb	r3, [r7, #27]
 8004c92:	e0ac      	b.n	8004dee <UART_SetConfig+0x282>
 8004c94:	2304      	movs	r3, #4
 8004c96:	76fb      	strb	r3, [r7, #27]
 8004c98:	e0a9      	b.n	8004dee <UART_SetConfig+0x282>
 8004c9a:	2308      	movs	r3, #8
 8004c9c:	76fb      	strb	r3, [r7, #27]
 8004c9e:	e0a6      	b.n	8004dee <UART_SetConfig+0x282>
 8004ca0:	2310      	movs	r3, #16
 8004ca2:	76fb      	strb	r3, [r7, #27]
 8004ca4:	e0a3      	b.n	8004dee <UART_SetConfig+0x282>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a6d      	ldr	r2, [pc, #436]	; (8004e60 <UART_SetConfig+0x2f4>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d120      	bne.n	8004cf2 <UART_SetConfig+0x186>
 8004cb0:	4b69      	ldr	r3, [pc, #420]	; (8004e58 <UART_SetConfig+0x2ec>)
 8004cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cba:	2b30      	cmp	r3, #48	; 0x30
 8004cbc:	d013      	beq.n	8004ce6 <UART_SetConfig+0x17a>
 8004cbe:	2b30      	cmp	r3, #48	; 0x30
 8004cc0:	d814      	bhi.n	8004cec <UART_SetConfig+0x180>
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	d009      	beq.n	8004cda <UART_SetConfig+0x16e>
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	d810      	bhi.n	8004cec <UART_SetConfig+0x180>
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <UART_SetConfig+0x168>
 8004cce:	2b10      	cmp	r3, #16
 8004cd0:	d006      	beq.n	8004ce0 <UART_SetConfig+0x174>
 8004cd2:	e00b      	b.n	8004cec <UART_SetConfig+0x180>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	76fb      	strb	r3, [r7, #27]
 8004cd8:	e089      	b.n	8004dee <UART_SetConfig+0x282>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	76fb      	strb	r3, [r7, #27]
 8004cde:	e086      	b.n	8004dee <UART_SetConfig+0x282>
 8004ce0:	2304      	movs	r3, #4
 8004ce2:	76fb      	strb	r3, [r7, #27]
 8004ce4:	e083      	b.n	8004dee <UART_SetConfig+0x282>
 8004ce6:	2308      	movs	r3, #8
 8004ce8:	76fb      	strb	r3, [r7, #27]
 8004cea:	e080      	b.n	8004dee <UART_SetConfig+0x282>
 8004cec:	2310      	movs	r3, #16
 8004cee:	76fb      	strb	r3, [r7, #27]
 8004cf0:	e07d      	b.n	8004dee <UART_SetConfig+0x282>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a5b      	ldr	r2, [pc, #364]	; (8004e64 <UART_SetConfig+0x2f8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d120      	bne.n	8004d3e <UART_SetConfig+0x1d2>
 8004cfc:	4b56      	ldr	r3, [pc, #344]	; (8004e58 <UART_SetConfig+0x2ec>)
 8004cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d06:	2bc0      	cmp	r3, #192	; 0xc0
 8004d08:	d013      	beq.n	8004d32 <UART_SetConfig+0x1c6>
 8004d0a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d0c:	d814      	bhi.n	8004d38 <UART_SetConfig+0x1cc>
 8004d0e:	2b80      	cmp	r3, #128	; 0x80
 8004d10:	d009      	beq.n	8004d26 <UART_SetConfig+0x1ba>
 8004d12:	2b80      	cmp	r3, #128	; 0x80
 8004d14:	d810      	bhi.n	8004d38 <UART_SetConfig+0x1cc>
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d002      	beq.n	8004d20 <UART_SetConfig+0x1b4>
 8004d1a:	2b40      	cmp	r3, #64	; 0x40
 8004d1c:	d006      	beq.n	8004d2c <UART_SetConfig+0x1c0>
 8004d1e:	e00b      	b.n	8004d38 <UART_SetConfig+0x1cc>
 8004d20:	2300      	movs	r3, #0
 8004d22:	76fb      	strb	r3, [r7, #27]
 8004d24:	e063      	b.n	8004dee <UART_SetConfig+0x282>
 8004d26:	2302      	movs	r3, #2
 8004d28:	76fb      	strb	r3, [r7, #27]
 8004d2a:	e060      	b.n	8004dee <UART_SetConfig+0x282>
 8004d2c:	2304      	movs	r3, #4
 8004d2e:	76fb      	strb	r3, [r7, #27]
 8004d30:	e05d      	b.n	8004dee <UART_SetConfig+0x282>
 8004d32:	2308      	movs	r3, #8
 8004d34:	76fb      	strb	r3, [r7, #27]
 8004d36:	e05a      	b.n	8004dee <UART_SetConfig+0x282>
 8004d38:	2310      	movs	r3, #16
 8004d3a:	76fb      	strb	r3, [r7, #27]
 8004d3c:	e057      	b.n	8004dee <UART_SetConfig+0x282>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a49      	ldr	r2, [pc, #292]	; (8004e68 <UART_SetConfig+0x2fc>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d125      	bne.n	8004d94 <UART_SetConfig+0x228>
 8004d48:	4b43      	ldr	r3, [pc, #268]	; (8004e58 <UART_SetConfig+0x2ec>)
 8004d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d56:	d017      	beq.n	8004d88 <UART_SetConfig+0x21c>
 8004d58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d5c:	d817      	bhi.n	8004d8e <UART_SetConfig+0x222>
 8004d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d62:	d00b      	beq.n	8004d7c <UART_SetConfig+0x210>
 8004d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d68:	d811      	bhi.n	8004d8e <UART_SetConfig+0x222>
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <UART_SetConfig+0x20a>
 8004d6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d72:	d006      	beq.n	8004d82 <UART_SetConfig+0x216>
 8004d74:	e00b      	b.n	8004d8e <UART_SetConfig+0x222>
 8004d76:	2300      	movs	r3, #0
 8004d78:	76fb      	strb	r3, [r7, #27]
 8004d7a:	e038      	b.n	8004dee <UART_SetConfig+0x282>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	76fb      	strb	r3, [r7, #27]
 8004d80:	e035      	b.n	8004dee <UART_SetConfig+0x282>
 8004d82:	2304      	movs	r3, #4
 8004d84:	76fb      	strb	r3, [r7, #27]
 8004d86:	e032      	b.n	8004dee <UART_SetConfig+0x282>
 8004d88:	2308      	movs	r3, #8
 8004d8a:	76fb      	strb	r3, [r7, #27]
 8004d8c:	e02f      	b.n	8004dee <UART_SetConfig+0x282>
 8004d8e:	2310      	movs	r3, #16
 8004d90:	76fb      	strb	r3, [r7, #27]
 8004d92:	e02c      	b.n	8004dee <UART_SetConfig+0x282>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a2d      	ldr	r2, [pc, #180]	; (8004e50 <UART_SetConfig+0x2e4>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d125      	bne.n	8004dea <UART_SetConfig+0x27e>
 8004d9e:	4b2e      	ldr	r3, [pc, #184]	; (8004e58 <UART_SetConfig+0x2ec>)
 8004da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004da8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dac:	d017      	beq.n	8004dde <UART_SetConfig+0x272>
 8004dae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004db2:	d817      	bhi.n	8004de4 <UART_SetConfig+0x278>
 8004db4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004db8:	d00b      	beq.n	8004dd2 <UART_SetConfig+0x266>
 8004dba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dbe:	d811      	bhi.n	8004de4 <UART_SetConfig+0x278>
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d003      	beq.n	8004dcc <UART_SetConfig+0x260>
 8004dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc8:	d006      	beq.n	8004dd8 <UART_SetConfig+0x26c>
 8004dca:	e00b      	b.n	8004de4 <UART_SetConfig+0x278>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	76fb      	strb	r3, [r7, #27]
 8004dd0:	e00d      	b.n	8004dee <UART_SetConfig+0x282>
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	76fb      	strb	r3, [r7, #27]
 8004dd6:	e00a      	b.n	8004dee <UART_SetConfig+0x282>
 8004dd8:	2304      	movs	r3, #4
 8004dda:	76fb      	strb	r3, [r7, #27]
 8004ddc:	e007      	b.n	8004dee <UART_SetConfig+0x282>
 8004dde:	2308      	movs	r3, #8
 8004de0:	76fb      	strb	r3, [r7, #27]
 8004de2:	e004      	b.n	8004dee <UART_SetConfig+0x282>
 8004de4:	2310      	movs	r3, #16
 8004de6:	76fb      	strb	r3, [r7, #27]
 8004de8:	e001      	b.n	8004dee <UART_SetConfig+0x282>
 8004dea:	2310      	movs	r3, #16
 8004dec:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a17      	ldr	r2, [pc, #92]	; (8004e50 <UART_SetConfig+0x2e4>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	f040 8087 	bne.w	8004f08 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004dfa:	7efb      	ldrb	r3, [r7, #27]
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d837      	bhi.n	8004e70 <UART_SetConfig+0x304>
 8004e00:	a201      	add	r2, pc, #4	; (adr r2, 8004e08 <UART_SetConfig+0x29c>)
 8004e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e06:	bf00      	nop
 8004e08:	08004e2d 	.word	0x08004e2d
 8004e0c:	08004e71 	.word	0x08004e71
 8004e10:	08004e35 	.word	0x08004e35
 8004e14:	08004e71 	.word	0x08004e71
 8004e18:	08004e3b 	.word	0x08004e3b
 8004e1c:	08004e71 	.word	0x08004e71
 8004e20:	08004e71 	.word	0x08004e71
 8004e24:	08004e71 	.word	0x08004e71
 8004e28:	08004e43 	.word	0x08004e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e2c:	f7fe fb92 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 8004e30:	6178      	str	r0, [r7, #20]
        break;
 8004e32:	e022      	b.n	8004e7a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e34:	4b0d      	ldr	r3, [pc, #52]	; (8004e6c <UART_SetConfig+0x300>)
 8004e36:	617b      	str	r3, [r7, #20]
        break;
 8004e38:	e01f      	b.n	8004e7a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e3a:	f7fe faf3 	bl	8003424 <HAL_RCC_GetSysClockFreq>
 8004e3e:	6178      	str	r0, [r7, #20]
        break;
 8004e40:	e01b      	b.n	8004e7a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e46:	617b      	str	r3, [r7, #20]
        break;
 8004e48:	e017      	b.n	8004e7a <UART_SetConfig+0x30e>
 8004e4a:	bf00      	nop
 8004e4c:	efff69f3 	.word	0xefff69f3
 8004e50:	40008000 	.word	0x40008000
 8004e54:	40013800 	.word	0x40013800
 8004e58:	40021000 	.word	0x40021000
 8004e5c:	40004400 	.word	0x40004400
 8004e60:	40004800 	.word	0x40004800
 8004e64:	40004c00 	.word	0x40004c00
 8004e68:	40005000 	.word	0x40005000
 8004e6c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	76bb      	strb	r3, [r7, #26]
        break;
 8004e78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 80f1 	beq.w	8005064 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	4613      	mov	r3, r2
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	4413      	add	r3, r2
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d305      	bcc.n	8004e9e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d902      	bls.n	8004ea4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	76bb      	strb	r3, [r7, #26]
 8004ea2:	e0df      	b.n	8005064 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f04f 0100 	mov.w	r1, #0
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	f04f 0300 	mov.w	r3, #0
 8004eb4:	020b      	lsls	r3, r1, #8
 8004eb6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004eba:	0202      	lsls	r2, r0, #8
 8004ebc:	6879      	ldr	r1, [r7, #4]
 8004ebe:	6849      	ldr	r1, [r1, #4]
 8004ec0:	0849      	lsrs	r1, r1, #1
 8004ec2:	4608      	mov	r0, r1
 8004ec4:	f04f 0100 	mov.w	r1, #0
 8004ec8:	1814      	adds	r4, r2, r0
 8004eca:	eb43 0501 	adc.w	r5, r3, r1
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f04f 0300 	mov.w	r3, #0
 8004ed8:	4620      	mov	r0, r4
 8004eda:	4629      	mov	r1, r5
 8004edc:	f7fb fe0e 	bl	8000afc <__aeabi_uldivmod>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eee:	d308      	bcc.n	8004f02 <UART_SetConfig+0x396>
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ef6:	d204      	bcs.n	8004f02 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	60da      	str	r2, [r3, #12]
 8004f00:	e0b0      	b.n	8005064 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	76bb      	strb	r3, [r7, #26]
 8004f06:	e0ad      	b.n	8005064 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f10:	d15c      	bne.n	8004fcc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004f12:	7efb      	ldrb	r3, [r7, #27]
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d828      	bhi.n	8004f6a <UART_SetConfig+0x3fe>
 8004f18:	a201      	add	r2, pc, #4	; (adr r2, 8004f20 <UART_SetConfig+0x3b4>)
 8004f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1e:	bf00      	nop
 8004f20:	08004f45 	.word	0x08004f45
 8004f24:	08004f4d 	.word	0x08004f4d
 8004f28:	08004f55 	.word	0x08004f55
 8004f2c:	08004f6b 	.word	0x08004f6b
 8004f30:	08004f5b 	.word	0x08004f5b
 8004f34:	08004f6b 	.word	0x08004f6b
 8004f38:	08004f6b 	.word	0x08004f6b
 8004f3c:	08004f6b 	.word	0x08004f6b
 8004f40:	08004f63 	.word	0x08004f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f44:	f7fe fb06 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 8004f48:	6178      	str	r0, [r7, #20]
        break;
 8004f4a:	e013      	b.n	8004f74 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f4c:	f7fe fb18 	bl	8003580 <HAL_RCC_GetPCLK2Freq>
 8004f50:	6178      	str	r0, [r7, #20]
        break;
 8004f52:	e00f      	b.n	8004f74 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f54:	4b49      	ldr	r3, [pc, #292]	; (800507c <UART_SetConfig+0x510>)
 8004f56:	617b      	str	r3, [r7, #20]
        break;
 8004f58:	e00c      	b.n	8004f74 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f5a:	f7fe fa63 	bl	8003424 <HAL_RCC_GetSysClockFreq>
 8004f5e:	6178      	str	r0, [r7, #20]
        break;
 8004f60:	e008      	b.n	8004f74 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f66:	617b      	str	r3, [r7, #20]
        break;
 8004f68:	e004      	b.n	8004f74 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	76bb      	strb	r3, [r7, #26]
        break;
 8004f72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d074      	beq.n	8005064 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	005a      	lsls	r2, r3, #1
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	085b      	lsrs	r3, r3, #1
 8004f84:	441a      	add	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	2b0f      	cmp	r3, #15
 8004f96:	d916      	bls.n	8004fc6 <UART_SetConfig+0x45a>
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f9e:	d212      	bcs.n	8004fc6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	f023 030f 	bic.w	r3, r3, #15
 8004fa8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	085b      	lsrs	r3, r3, #1
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	89fb      	ldrh	r3, [r7, #14]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	89fa      	ldrh	r2, [r7, #14]
 8004fc2:	60da      	str	r2, [r3, #12]
 8004fc4:	e04e      	b.n	8005064 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	76bb      	strb	r3, [r7, #26]
 8004fca:	e04b      	b.n	8005064 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fcc:	7efb      	ldrb	r3, [r7, #27]
 8004fce:	2b08      	cmp	r3, #8
 8004fd0:	d827      	bhi.n	8005022 <UART_SetConfig+0x4b6>
 8004fd2:	a201      	add	r2, pc, #4	; (adr r2, 8004fd8 <UART_SetConfig+0x46c>)
 8004fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd8:	08004ffd 	.word	0x08004ffd
 8004fdc:	08005005 	.word	0x08005005
 8004fe0:	0800500d 	.word	0x0800500d
 8004fe4:	08005023 	.word	0x08005023
 8004fe8:	08005013 	.word	0x08005013
 8004fec:	08005023 	.word	0x08005023
 8004ff0:	08005023 	.word	0x08005023
 8004ff4:	08005023 	.word	0x08005023
 8004ff8:	0800501b 	.word	0x0800501b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ffc:	f7fe faaa 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 8005000:	6178      	str	r0, [r7, #20]
        break;
 8005002:	e013      	b.n	800502c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005004:	f7fe fabc 	bl	8003580 <HAL_RCC_GetPCLK2Freq>
 8005008:	6178      	str	r0, [r7, #20]
        break;
 800500a:	e00f      	b.n	800502c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800500c:	4b1b      	ldr	r3, [pc, #108]	; (800507c <UART_SetConfig+0x510>)
 800500e:	617b      	str	r3, [r7, #20]
        break;
 8005010:	e00c      	b.n	800502c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005012:	f7fe fa07 	bl	8003424 <HAL_RCC_GetSysClockFreq>
 8005016:	6178      	str	r0, [r7, #20]
        break;
 8005018:	e008      	b.n	800502c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800501a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800501e:	617b      	str	r3, [r7, #20]
        break;
 8005020:	e004      	b.n	800502c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	76bb      	strb	r3, [r7, #26]
        break;
 800502a:	bf00      	nop
    }

    if (pclk != 0U)
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d018      	beq.n	8005064 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	085a      	lsrs	r2, r3, #1
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	441a      	add	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	fbb2 f3f3 	udiv	r3, r2, r3
 8005044:	b29b      	uxth	r3, r3
 8005046:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	2b0f      	cmp	r3, #15
 800504c:	d908      	bls.n	8005060 <UART_SetConfig+0x4f4>
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005054:	d204      	bcs.n	8005060 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	60da      	str	r2, [r3, #12]
 800505e:	e001      	b.n	8005064 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005070:	7ebb      	ldrb	r3, [r7, #26]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3720      	adds	r7, #32
 8005076:	46bd      	mov	sp, r7
 8005078:	bdb0      	pop	{r4, r5, r7, pc}
 800507a:	bf00      	nop
 800507c:	00f42400 	.word	0x00f42400

08005080 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00a      	beq.n	80050aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	f003 0304 	and.w	r3, r3, #4
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00a      	beq.n	80050ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	f003 0308 	and.w	r3, r3, #8
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	430a      	orrs	r2, r1
 800510e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	f003 0310 	and.w	r3, r3, #16
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00a      	beq.n	8005132 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	f003 0320 	and.w	r3, r3, #32
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515c:	2b00      	cmp	r3, #0
 800515e:	d01a      	beq.n	8005196 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800517e:	d10a      	bne.n	8005196 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	605a      	str	r2, [r3, #4]
  }
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af02      	add	r7, sp, #8
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051d4:	f7fb fe3a 	bl	8000e4c <HAL_GetTick>
 80051d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d10e      	bne.n	8005206 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f82d 	bl	8005256 <UART_WaitOnFlagUntilTimeout>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e023      	b.n	800524e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b04      	cmp	r3, #4
 8005212:	d10e      	bne.n	8005232 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f817 	bl	8005256 <UART_WaitOnFlagUntilTimeout>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e00d      	b.n	800524e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2220      	movs	r2, #32
 8005236:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2220      	movs	r2, #32
 800523c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b084      	sub	sp, #16
 800525a:	af00      	add	r7, sp, #0
 800525c:	60f8      	str	r0, [r7, #12]
 800525e:	60b9      	str	r1, [r7, #8]
 8005260:	603b      	str	r3, [r7, #0]
 8005262:	4613      	mov	r3, r2
 8005264:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005266:	e05e      	b.n	8005326 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526e:	d05a      	beq.n	8005326 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005270:	f7fb fdec 	bl	8000e4c <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	429a      	cmp	r2, r3
 800527e:	d302      	bcc.n	8005286 <UART_WaitOnFlagUntilTimeout+0x30>
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d11b      	bne.n	80052be <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005294:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0201 	bic.w	r2, r2, #1
 80052a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2220      	movs	r2, #32
 80052aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2220      	movs	r2, #32
 80052b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e043      	b.n	8005346 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d02c      	beq.n	8005326 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052da:	d124      	bne.n	8005326 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052e4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052f4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0201 	bic.w	r2, r2, #1
 8005304:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2220      	movs	r2, #32
 800530a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2220      	movs	r2, #32
 8005310:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2220      	movs	r2, #32
 8005316:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e00f      	b.n	8005346 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69da      	ldr	r2, [r3, #28]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4013      	ands	r3, r2
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	429a      	cmp	r2, r3
 8005334:	bf0c      	ite	eq
 8005336:	2301      	moveq	r3, #1
 8005338:	2300      	movne	r3, #0
 800533a:	b2db      	uxtb	r3, r3
 800533c:	461a      	mov	r2, r3
 800533e:	79fb      	ldrb	r3, [r7, #7]
 8005340:	429a      	cmp	r2, r3
 8005342:	d091      	beq.n	8005268 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
	...

08005350 <get_C6>:
char tBuff0[20];
char tBuff1[20];

//Tone 1 C6 1046.5 Hz
	uint8_t C6[42];
void get_C6(){
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
	for(int i = 0; i < 42; i++){
 8005356:	2300      	movs	r3, #0
 8005358:	607b      	str	r3, [r7, #4]
 800535a:	e043      	b.n	80053e4 <get_C6+0x94>
		C6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/42))*256;
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7fb f8e1 	bl	8000524 <__aeabi_i2d>
 8005362:	a32a      	add	r3, pc, #168	; (adr r3, 800540c <get_C6+0xbc>)
 8005364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005368:	f7fb f946 	bl	80005f8 <__aeabi_dmul>
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	4610      	mov	r0, r2
 8005372:	4619      	mov	r1, r3
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	4b21      	ldr	r3, [pc, #132]	; (8005400 <get_C6+0xb0>)
 800537a:	f7fb fa67 	bl	800084c <__aeabi_ddiv>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4610      	mov	r0, r2
 8005384:	4619      	mov	r1, r3
 8005386:	f7fb fb69 	bl	8000a5c <__aeabi_d2f>
 800538a:	4603      	mov	r3, r0
 800538c:	ee00 3a10 	vmov	s0, r3
 8005390:	f002 fa8c 	bl	80078ac <arm_sin_f32>
 8005394:	eef0 7a40 	vmov.f32	s15, s0
 8005398:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800539c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053a0:	ee17 0a90 	vmov	r0, s15
 80053a4:	f7fb f8d0 	bl	8000548 <__aeabi_f2d>
 80053a8:	a313      	add	r3, pc, #76	; (adr r3, 80053f8 <get_C6+0xa8>)
 80053aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ae:	f7fb f923 	bl	80005f8 <__aeabi_dmul>
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	4610      	mov	r0, r2
 80053b8:	4619      	mov	r1, r3
 80053ba:	f04f 0200 	mov.w	r2, #0
 80053be:	4b11      	ldr	r3, [pc, #68]	; (8005404 <get_C6+0xb4>)
 80053c0:	f7fb f91a 	bl	80005f8 <__aeabi_dmul>
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4610      	mov	r0, r2
 80053ca:	4619      	mov	r1, r3
 80053cc:	f7fb fb26 	bl	8000a1c <__aeabi_d2uiz>
 80053d0:	4603      	mov	r3, r0
 80053d2:	b2d9      	uxtb	r1, r3
 80053d4:	4a0c      	ldr	r2, [pc, #48]	; (8005408 <get_C6+0xb8>)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4413      	add	r3, r2
 80053da:	460a      	mov	r2, r1
 80053dc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 42; i++){
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	3301      	adds	r3, #1
 80053e2:	607b      	str	r3, [r7, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b29      	cmp	r3, #41	; 0x29
 80053e8:	ddb8      	ble.n	800535c <get_C6+0xc>
	}
}
 80053ea:	bf00      	nop
 80053ec:	bf00      	nop
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	f3af 8000 	nop.w
 80053f8:	51eb851f 	.word	0x51eb851f
 80053fc:	3fd51eb8 	.word	0x3fd51eb8
 8005400:	40450000 	.word	0x40450000
 8005404:	40700000 	.word	0x40700000
 8005408:	2000ae5c 	.word	0x2000ae5c
 800540c:	53c8d4f1 	.word	0x53c8d4f1
 8005410:	401921fb 	.word	0x401921fb
 8005414:	00000000 	.word	0x00000000

08005418 <get_E6>:

//Tone 2 E6 1318.5 Hz
	uint8_t E6[34];
void get_E6(){
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 34; i++){
 800541e:	2300      	movs	r3, #0
 8005420:	607b      	str	r3, [r7, #4]
 8005422:	e043      	b.n	80054ac <get_E6+0x94>
		E6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/34))*256;
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7fb f87d 	bl	8000524 <__aeabi_i2d>
 800542a:	a32a      	add	r3, pc, #168	; (adr r3, 80054d4 <get_E6+0xbc>)
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	f7fb f8e2 	bl	80005f8 <__aeabi_dmul>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4610      	mov	r0, r2
 800543a:	4619      	mov	r1, r3
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	4b21      	ldr	r3, [pc, #132]	; (80054c8 <get_E6+0xb0>)
 8005442:	f7fb fa03 	bl	800084c <__aeabi_ddiv>
 8005446:	4602      	mov	r2, r0
 8005448:	460b      	mov	r3, r1
 800544a:	4610      	mov	r0, r2
 800544c:	4619      	mov	r1, r3
 800544e:	f7fb fb05 	bl	8000a5c <__aeabi_d2f>
 8005452:	4603      	mov	r3, r0
 8005454:	ee00 3a10 	vmov	s0, r3
 8005458:	f002 fa28 	bl	80078ac <arm_sin_f32>
 800545c:	eef0 7a40 	vmov.f32	s15, s0
 8005460:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005464:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005468:	ee17 0a90 	vmov	r0, s15
 800546c:	f7fb f86c 	bl	8000548 <__aeabi_f2d>
 8005470:	a313      	add	r3, pc, #76	; (adr r3, 80054c0 <get_E6+0xa8>)
 8005472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005476:	f7fb f8bf 	bl	80005f8 <__aeabi_dmul>
 800547a:	4602      	mov	r2, r0
 800547c:	460b      	mov	r3, r1
 800547e:	4610      	mov	r0, r2
 8005480:	4619      	mov	r1, r3
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	4b11      	ldr	r3, [pc, #68]	; (80054cc <get_E6+0xb4>)
 8005488:	f7fb f8b6 	bl	80005f8 <__aeabi_dmul>
 800548c:	4602      	mov	r2, r0
 800548e:	460b      	mov	r3, r1
 8005490:	4610      	mov	r0, r2
 8005492:	4619      	mov	r1, r3
 8005494:	f7fb fac2 	bl	8000a1c <__aeabi_d2uiz>
 8005498:	4603      	mov	r3, r0
 800549a:	b2d9      	uxtb	r1, r3
 800549c:	4a0c      	ldr	r2, [pc, #48]	; (80054d0 <get_E6+0xb8>)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4413      	add	r3, r2
 80054a2:	460a      	mov	r2, r1
 80054a4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 34; i++){
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	3301      	adds	r3, #1
 80054aa:	607b      	str	r3, [r7, #4]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b21      	cmp	r3, #33	; 0x21
 80054b0:	ddb8      	ble.n	8005424 <get_E6+0xc>
	}
}
 80054b2:	bf00      	nop
 80054b4:	bf00      	nop
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	f3af 8000 	nop.w
 80054c0:	51eb851f 	.word	0x51eb851f
 80054c4:	3fd51eb8 	.word	0x3fd51eb8
 80054c8:	40410000 	.word	0x40410000
 80054cc:	40700000 	.word	0x40700000
 80054d0:	2000ad80 	.word	0x2000ad80
 80054d4:	53c8d4f1 	.word	0x53c8d4f1
 80054d8:	401921fb 	.word	0x401921fb
 80054dc:	00000000 	.word	0x00000000

080054e0 <get_G6>:

//Tone 3 G6 1568.0 Hz
	uint8_t G6[28];
void get_G6(){
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 28; i++){
 80054e6:	2300      	movs	r3, #0
 80054e8:	607b      	str	r3, [r7, #4]
 80054ea:	e043      	b.n	8005574 <get_G6+0x94>
		G6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/28))*256;
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f7fb f819 	bl	8000524 <__aeabi_i2d>
 80054f2:	a32a      	add	r3, pc, #168	; (adr r3, 800559c <get_G6+0xbc>)
 80054f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f8:	f7fb f87e 	bl	80005f8 <__aeabi_dmul>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	4610      	mov	r0, r2
 8005502:	4619      	mov	r1, r3
 8005504:	f04f 0200 	mov.w	r2, #0
 8005508:	4b21      	ldr	r3, [pc, #132]	; (8005590 <get_G6+0xb0>)
 800550a:	f7fb f99f 	bl	800084c <__aeabi_ddiv>
 800550e:	4602      	mov	r2, r0
 8005510:	460b      	mov	r3, r1
 8005512:	4610      	mov	r0, r2
 8005514:	4619      	mov	r1, r3
 8005516:	f7fb faa1 	bl	8000a5c <__aeabi_d2f>
 800551a:	4603      	mov	r3, r0
 800551c:	ee00 3a10 	vmov	s0, r3
 8005520:	f002 f9c4 	bl	80078ac <arm_sin_f32>
 8005524:	eef0 7a40 	vmov.f32	s15, s0
 8005528:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800552c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005530:	ee17 0a90 	vmov	r0, s15
 8005534:	f7fb f808 	bl	8000548 <__aeabi_f2d>
 8005538:	a313      	add	r3, pc, #76	; (adr r3, 8005588 <get_G6+0xa8>)
 800553a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553e:	f7fb f85b 	bl	80005f8 <__aeabi_dmul>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	4610      	mov	r0, r2
 8005548:	4619      	mov	r1, r3
 800554a:	f04f 0200 	mov.w	r2, #0
 800554e:	4b11      	ldr	r3, [pc, #68]	; (8005594 <get_G6+0xb4>)
 8005550:	f7fb f852 	bl	80005f8 <__aeabi_dmul>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4610      	mov	r0, r2
 800555a:	4619      	mov	r1, r3
 800555c:	f7fb fa5e 	bl	8000a1c <__aeabi_d2uiz>
 8005560:	4603      	mov	r3, r0
 8005562:	b2d9      	uxtb	r1, r3
 8005564:	4a0c      	ldr	r2, [pc, #48]	; (8005598 <get_G6+0xb8>)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4413      	add	r3, r2
 800556a:	460a      	mov	r2, r1
 800556c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 28; i++){
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3301      	adds	r3, #1
 8005572:	607b      	str	r3, [r7, #4]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b1b      	cmp	r3, #27
 8005578:	ddb8      	ble.n	80054ec <get_G6+0xc>
	}
}
 800557a:	bf00      	nop
 800557c:	bf00      	nop
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	f3af 8000 	nop.w
 8005588:	51eb851f 	.word	0x51eb851f
 800558c:	3fd51eb8 	.word	0x3fd51eb8
 8005590:	403c0000 	.word	0x403c0000
 8005594:	40700000 	.word	0x40700000
 8005598:	2000af0c 	.word	0x2000af0c
 800559c:	53c8d4f1 	.word	0x53c8d4f1
 80055a0:	401921fb 	.word	0x401921fb
 80055a4:	00000000 	.word	0x00000000

080055a8 <get_A6>:

//Tone 4 A6 1760.0 Hz

	uint8_t A6[25];
void get_A6(){
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
	for(int i = 0; i < 25; i++){
 80055ae:	2300      	movs	r3, #0
 80055b0:	607b      	str	r3, [r7, #4]
 80055b2:	e043      	b.n	800563c <get_A6+0x94>
		A6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/25))*256;
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7fa ffb5 	bl	8000524 <__aeabi_i2d>
 80055ba:	a32a      	add	r3, pc, #168	; (adr r3, 8005664 <get_A6+0xbc>)
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	f7fb f81a 	bl	80005f8 <__aeabi_dmul>
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	4610      	mov	r0, r2
 80055ca:	4619      	mov	r1, r3
 80055cc:	f04f 0200 	mov.w	r2, #0
 80055d0:	4b21      	ldr	r3, [pc, #132]	; (8005658 <get_A6+0xb0>)
 80055d2:	f7fb f93b 	bl	800084c <__aeabi_ddiv>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	4610      	mov	r0, r2
 80055dc:	4619      	mov	r1, r3
 80055de:	f7fb fa3d 	bl	8000a5c <__aeabi_d2f>
 80055e2:	4603      	mov	r3, r0
 80055e4:	ee00 3a10 	vmov	s0, r3
 80055e8:	f002 f960 	bl	80078ac <arm_sin_f32>
 80055ec:	eef0 7a40 	vmov.f32	s15, s0
 80055f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80055f8:	ee17 0a90 	vmov	r0, s15
 80055fc:	f7fa ffa4 	bl	8000548 <__aeabi_f2d>
 8005600:	a313      	add	r3, pc, #76	; (adr r3, 8005650 <get_A6+0xa8>)
 8005602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005606:	f7fa fff7 	bl	80005f8 <__aeabi_dmul>
 800560a:	4602      	mov	r2, r0
 800560c:	460b      	mov	r3, r1
 800560e:	4610      	mov	r0, r2
 8005610:	4619      	mov	r1, r3
 8005612:	f04f 0200 	mov.w	r2, #0
 8005616:	4b11      	ldr	r3, [pc, #68]	; (800565c <get_A6+0xb4>)
 8005618:	f7fa ffee 	bl	80005f8 <__aeabi_dmul>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4610      	mov	r0, r2
 8005622:	4619      	mov	r1, r3
 8005624:	f7fb f9fa 	bl	8000a1c <__aeabi_d2uiz>
 8005628:	4603      	mov	r3, r0
 800562a:	b2d9      	uxtb	r1, r3
 800562c:	4a0c      	ldr	r2, [pc, #48]	; (8005660 <get_A6+0xb8>)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4413      	add	r3, r2
 8005632:	460a      	mov	r2, r1
 8005634:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 25; i++){
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	3301      	adds	r3, #1
 800563a:	607b      	str	r3, [r7, #4]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b18      	cmp	r3, #24
 8005640:	ddb8      	ble.n	80055b4 <get_A6+0xc>
	}
}
 8005642:	bf00      	nop
 8005644:	bf00      	nop
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	f3af 8000 	nop.w
 8005650:	51eb851f 	.word	0x51eb851f
 8005654:	3fd51eb8 	.word	0x3fd51eb8
 8005658:	40390000 	.word	0x40390000
 800565c:	40700000 	.word	0x40700000
 8005660:	2000afb8 	.word	0x2000afb8
 8005664:	53c8d4f1 	.word	0x53c8d4f1
 8005668:	401921fb 	.word	0x401921fb
 800566c:	00000000 	.word	0x00000000

08005670 <get_B6>:

//Tone 5 B6 1975.53 Hz
	uint8_t B6[22];
void get_B6(){
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
	for(int i = 0; i < 22; i++){
 8005676:	2300      	movs	r3, #0
 8005678:	607b      	str	r3, [r7, #4]
 800567a:	e043      	b.n	8005704 <get_B6+0x94>
		B6[i] =  0.33*(1 + arm_sin_f32(2*pi*i/22))*256;
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7fa ff51 	bl	8000524 <__aeabi_i2d>
 8005682:	a32a      	add	r3, pc, #168	; (adr r3, 800572c <get_B6+0xbc>)
 8005684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005688:	f7fa ffb6 	bl	80005f8 <__aeabi_dmul>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4610      	mov	r0, r2
 8005692:	4619      	mov	r1, r3
 8005694:	f04f 0200 	mov.w	r2, #0
 8005698:	4b21      	ldr	r3, [pc, #132]	; (8005720 <get_B6+0xb0>)
 800569a:	f7fb f8d7 	bl	800084c <__aeabi_ddiv>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	4610      	mov	r0, r2
 80056a4:	4619      	mov	r1, r3
 80056a6:	f7fb f9d9 	bl	8000a5c <__aeabi_d2f>
 80056aa:	4603      	mov	r3, r0
 80056ac:	ee00 3a10 	vmov	s0, r3
 80056b0:	f002 f8fc 	bl	80078ac <arm_sin_f32>
 80056b4:	eef0 7a40 	vmov.f32	s15, s0
 80056b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056c0:	ee17 0a90 	vmov	r0, s15
 80056c4:	f7fa ff40 	bl	8000548 <__aeabi_f2d>
 80056c8:	a313      	add	r3, pc, #76	; (adr r3, 8005718 <get_B6+0xa8>)
 80056ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ce:	f7fa ff93 	bl	80005f8 <__aeabi_dmul>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	4610      	mov	r0, r2
 80056d8:	4619      	mov	r1, r3
 80056da:	f04f 0200 	mov.w	r2, #0
 80056de:	4b11      	ldr	r3, [pc, #68]	; (8005724 <get_B6+0xb4>)
 80056e0:	f7fa ff8a 	bl	80005f8 <__aeabi_dmul>
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4610      	mov	r0, r2
 80056ea:	4619      	mov	r1, r3
 80056ec:	f7fb f996 	bl	8000a1c <__aeabi_d2uiz>
 80056f0:	4603      	mov	r3, r0
 80056f2:	b2d9      	uxtb	r1, r3
 80056f4:	4a0c      	ldr	r2, [pc, #48]	; (8005728 <get_B6+0xb8>)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4413      	add	r3, r2
 80056fa:	460a      	mov	r2, r1
 80056fc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 22; i++){
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	3301      	adds	r3, #1
 8005702:	607b      	str	r3, [r7, #4]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b15      	cmp	r3, #21
 8005708:	ddb8      	ble.n	800567c <get_B6+0xc>
	}
}
 800570a:	bf00      	nop
 800570c:	bf00      	nop
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	f3af 8000 	nop.w
 8005718:	51eb851f 	.word	0x51eb851f
 800571c:	3fd51eb8 	.word	0x3fd51eb8
 8005720:	40360000 	.word	0x40360000
 8005724:	40700000 	.word	0x40700000
 8005728:	2000ada4 	.word	0x2000ada4
 800572c:	53c8d4f1 	.word	0x53c8d4f1
 8005730:	401921fb 	.word	0x401921fb
 8005734:	00000000 	.word	0x00000000

08005738 <get_B5>:

//Tone 6 B5 987.78 Hz
	uint8_t B5[45];
void get_B5(){
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 45; i++){
 800573e:	2300      	movs	r3, #0
 8005740:	607b      	str	r3, [r7, #4]
 8005742:	e043      	b.n	80057cc <get_B5+0x94>
		B5[i] =  0.33*(1 + arm_sin_f32(2*pi*i/45))*256;
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7fa feed 	bl	8000524 <__aeabi_i2d>
 800574a:	a32a      	add	r3, pc, #168	; (adr r3, 80057f4 <get_B5+0xbc>)
 800574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005750:	f7fa ff52 	bl	80005f8 <__aeabi_dmul>
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	4610      	mov	r0, r2
 800575a:	4619      	mov	r1, r3
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	4b21      	ldr	r3, [pc, #132]	; (80057e8 <get_B5+0xb0>)
 8005762:	f7fb f873 	bl	800084c <__aeabi_ddiv>
 8005766:	4602      	mov	r2, r0
 8005768:	460b      	mov	r3, r1
 800576a:	4610      	mov	r0, r2
 800576c:	4619      	mov	r1, r3
 800576e:	f7fb f975 	bl	8000a5c <__aeabi_d2f>
 8005772:	4603      	mov	r3, r0
 8005774:	ee00 3a10 	vmov	s0, r3
 8005778:	f002 f898 	bl	80078ac <arm_sin_f32>
 800577c:	eef0 7a40 	vmov.f32	s15, s0
 8005780:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005784:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005788:	ee17 0a90 	vmov	r0, s15
 800578c:	f7fa fedc 	bl	8000548 <__aeabi_f2d>
 8005790:	a313      	add	r3, pc, #76	; (adr r3, 80057e0 <get_B5+0xa8>)
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	f7fa ff2f 	bl	80005f8 <__aeabi_dmul>
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	4610      	mov	r0, r2
 80057a0:	4619      	mov	r1, r3
 80057a2:	f04f 0200 	mov.w	r2, #0
 80057a6:	4b11      	ldr	r3, [pc, #68]	; (80057ec <get_B5+0xb4>)
 80057a8:	f7fa ff26 	bl	80005f8 <__aeabi_dmul>
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4610      	mov	r0, r2
 80057b2:	4619      	mov	r1, r3
 80057b4:	f7fb f932 	bl	8000a1c <__aeabi_d2uiz>
 80057b8:	4603      	mov	r3, r0
 80057ba:	b2d9      	uxtb	r1, r3
 80057bc:	4a0c      	ldr	r2, [pc, #48]	; (80057f0 <get_B5+0xb8>)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4413      	add	r3, r2
 80057c2:	460a      	mov	r2, r1
 80057c4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 45; i++){
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	3301      	adds	r3, #1
 80057ca:	607b      	str	r3, [r7, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b2c      	cmp	r3, #44	; 0x2c
 80057d0:	ddb8      	ble.n	8005744 <get_B5+0xc>
	}
}
 80057d2:	bf00      	nop
 80057d4:	bf00      	nop
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	f3af 8000 	nop.w
 80057e0:	51eb851f 	.word	0x51eb851f
 80057e4:	3fd51eb8 	.word	0x3fd51eb8
 80057e8:	40468000 	.word	0x40468000
 80057ec:	40700000 	.word	0x40700000
 80057f0:	2000ae04 	.word	0x2000ae04
 80057f4:	53c8d4f1 	.word	0x53c8d4f1
 80057f8:	401921fb 	.word	0x401921fb

080057fc <printWelcome>:


void printWelcome(){
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
	  sprintf(buffer, "         Welcome to our game! \r \n");
 8005800:	496c      	ldr	r1, [pc, #432]	; (80059b4 <printWelcome+0x1b8>)
 8005802:	486d      	ldr	r0, [pc, #436]	; (80059b8 <printWelcome+0x1bc>)
 8005804:	f002 f90a 	bl	8007a1c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8005808:	486b      	ldr	r0, [pc, #428]	; (80059b8 <printWelcome+0x1bc>)
 800580a:	f7fa fce1 	bl	80001d0 <strlen>
 800580e:	4603      	mov	r3, r0
 8005810:	b29a      	uxth	r2, r3
 8005812:	f247 5330 	movw	r3, #30000	; 0x7530
 8005816:	4968      	ldr	r1, [pc, #416]	; (80059b8 <printWelcome+0x1bc>)
 8005818:	4868      	ldr	r0, [pc, #416]	; (80059bc <printWelcome+0x1c0>)
 800581a:	f7ff f913 	bl	8004a44 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 800581e:	4866      	ldr	r0, [pc, #408]	; (80059b8 <printWelcome+0x1bc>)
 8005820:	f7fa fcd6 	bl	80001d0 <strlen>
 8005824:	4603      	mov	r3, r0
 8005826:	461a      	mov	r2, r3
 8005828:	2100      	movs	r1, #0
 800582a:	4863      	ldr	r0, [pc, #396]	; (80059b8 <printWelcome+0x1bc>)
 800582c:	f002 f8ae 	bl	800798c <memset>

	  sprintf(buffer, "------------------------------------ \r \n");
 8005830:	4963      	ldr	r1, [pc, #396]	; (80059c0 <printWelcome+0x1c4>)
 8005832:	4861      	ldr	r0, [pc, #388]	; (80059b8 <printWelcome+0x1bc>)
 8005834:	f002 f8f2 	bl	8007a1c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8005838:	485f      	ldr	r0, [pc, #380]	; (80059b8 <printWelcome+0x1bc>)
 800583a:	f7fa fcc9 	bl	80001d0 <strlen>
 800583e:	4603      	mov	r3, r0
 8005840:	b29a      	uxth	r2, r3
 8005842:	f247 5330 	movw	r3, #30000	; 0x7530
 8005846:	495c      	ldr	r1, [pc, #368]	; (80059b8 <printWelcome+0x1bc>)
 8005848:	485c      	ldr	r0, [pc, #368]	; (80059bc <printWelcome+0x1c0>)
 800584a:	f7ff f8fb 	bl	8004a44 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 800584e:	485a      	ldr	r0, [pc, #360]	; (80059b8 <printWelcome+0x1bc>)
 8005850:	f7fa fcbe 	bl	80001d0 <strlen>
 8005854:	4603      	mov	r3, r0
 8005856:	461a      	mov	r2, r3
 8005858:	2100      	movs	r1, #0
 800585a:	4857      	ldr	r0, [pc, #348]	; (80059b8 <printWelcome+0x1bc>)
 800585c:	f002 f896 	bl	800798c <memset>

	  sprintf(buffer, "|                                  | \r \n");
 8005860:	4958      	ldr	r1, [pc, #352]	; (80059c4 <printWelcome+0x1c8>)
 8005862:	4855      	ldr	r0, [pc, #340]	; (80059b8 <printWelcome+0x1bc>)
 8005864:	f002 f8da 	bl	8007a1c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8005868:	4853      	ldr	r0, [pc, #332]	; (80059b8 <printWelcome+0x1bc>)
 800586a:	f7fa fcb1 	bl	80001d0 <strlen>
 800586e:	4603      	mov	r3, r0
 8005870:	b29a      	uxth	r2, r3
 8005872:	f247 5330 	movw	r3, #30000	; 0x7530
 8005876:	4950      	ldr	r1, [pc, #320]	; (80059b8 <printWelcome+0x1bc>)
 8005878:	4850      	ldr	r0, [pc, #320]	; (80059bc <printWelcome+0x1c0>)
 800587a:	f7ff f8e3 	bl	8004a44 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 800587e:	484e      	ldr	r0, [pc, #312]	; (80059b8 <printWelcome+0x1bc>)
 8005880:	f7fa fca6 	bl	80001d0 <strlen>
 8005884:	4603      	mov	r3, r0
 8005886:	461a      	mov	r2, r3
 8005888:	2100      	movs	r1, #0
 800588a:	484b      	ldr	r0, [pc, #300]	; (80059b8 <printWelcome+0x1bc>)
 800588c:	f002 f87e 	bl	800798c <memset>

	  sprintf(buffer, "|   ____    ____    ____    ____   | \r \n");
 8005890:	494d      	ldr	r1, [pc, #308]	; (80059c8 <printWelcome+0x1cc>)
 8005892:	4849      	ldr	r0, [pc, #292]	; (80059b8 <printWelcome+0x1bc>)
 8005894:	f002 f8c2 	bl	8007a1c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8005898:	4847      	ldr	r0, [pc, #284]	; (80059b8 <printWelcome+0x1bc>)
 800589a:	f7fa fc99 	bl	80001d0 <strlen>
 800589e:	4603      	mov	r3, r0
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	f247 5330 	movw	r3, #30000	; 0x7530
 80058a6:	4944      	ldr	r1, [pc, #272]	; (80059b8 <printWelcome+0x1bc>)
 80058a8:	4844      	ldr	r0, [pc, #272]	; (80059bc <printWelcome+0x1c0>)
 80058aa:	f7ff f8cb 	bl	8004a44 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 80058ae:	4842      	ldr	r0, [pc, #264]	; (80059b8 <printWelcome+0x1bc>)
 80058b0:	f7fa fc8e 	bl	80001d0 <strlen>
 80058b4:	4603      	mov	r3, r0
 80058b6:	461a      	mov	r2, r3
 80058b8:	2100      	movs	r1, #0
 80058ba:	483f      	ldr	r0, [pc, #252]	; (80059b8 <printWelcome+0x1bc>)
 80058bc:	f002 f866 	bl	800798c <memset>

	  sprintf(buffer, "|  |    |  |    |  |    |  |    |  | \r \n");
 80058c0:	4942      	ldr	r1, [pc, #264]	; (80059cc <printWelcome+0x1d0>)
 80058c2:	483d      	ldr	r0, [pc, #244]	; (80059b8 <printWelcome+0x1bc>)
 80058c4:	f002 f8aa 	bl	8007a1c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 80058c8:	483b      	ldr	r0, [pc, #236]	; (80059b8 <printWelcome+0x1bc>)
 80058ca:	f7fa fc81 	bl	80001d0 <strlen>
 80058ce:	4603      	mov	r3, r0
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	f247 5330 	movw	r3, #30000	; 0x7530
 80058d6:	4938      	ldr	r1, [pc, #224]	; (80059b8 <printWelcome+0x1bc>)
 80058d8:	4838      	ldr	r0, [pc, #224]	; (80059bc <printWelcome+0x1c0>)
 80058da:	f7ff f8b3 	bl	8004a44 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 80058de:	4836      	ldr	r0, [pc, #216]	; (80059b8 <printWelcome+0x1bc>)
 80058e0:	f7fa fc76 	bl	80001d0 <strlen>
 80058e4:	4603      	mov	r3, r0
 80058e6:	461a      	mov	r2, r3
 80058e8:	2100      	movs	r1, #0
 80058ea:	4833      	ldr	r0, [pc, #204]	; (80059b8 <printWelcome+0x1bc>)
 80058ec:	f002 f84e 	bl	800798c <memset>

	  sprintf(buffer, "|  |    |  |    |  |    |  |    |  | \r \n");
 80058f0:	4936      	ldr	r1, [pc, #216]	; (80059cc <printWelcome+0x1d0>)
 80058f2:	4831      	ldr	r0, [pc, #196]	; (80059b8 <printWelcome+0x1bc>)
 80058f4:	f002 f892 	bl	8007a1c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 80058f8:	482f      	ldr	r0, [pc, #188]	; (80059b8 <printWelcome+0x1bc>)
 80058fa:	f7fa fc69 	bl	80001d0 <strlen>
 80058fe:	4603      	mov	r3, r0
 8005900:	b29a      	uxth	r2, r3
 8005902:	f247 5330 	movw	r3, #30000	; 0x7530
 8005906:	492c      	ldr	r1, [pc, #176]	; (80059b8 <printWelcome+0x1bc>)
 8005908:	482c      	ldr	r0, [pc, #176]	; (80059bc <printWelcome+0x1c0>)
 800590a:	f7ff f89b 	bl	8004a44 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 800590e:	482a      	ldr	r0, [pc, #168]	; (80059b8 <printWelcome+0x1bc>)
 8005910:	f7fa fc5e 	bl	80001d0 <strlen>
 8005914:	4603      	mov	r3, r0
 8005916:	461a      	mov	r2, r3
 8005918:	2100      	movs	r1, #0
 800591a:	4827      	ldr	r0, [pc, #156]	; (80059b8 <printWelcome+0x1bc>)
 800591c:	f002 f836 	bl	800798c <memset>

	  sprintf(buffer, "|                                  | \r \n");
 8005920:	4928      	ldr	r1, [pc, #160]	; (80059c4 <printWelcome+0x1c8>)
 8005922:	4825      	ldr	r0, [pc, #148]	; (80059b8 <printWelcome+0x1bc>)
 8005924:	f002 f87a 	bl	8007a1c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8005928:	4823      	ldr	r0, [pc, #140]	; (80059b8 <printWelcome+0x1bc>)
 800592a:	f7fa fc51 	bl	80001d0 <strlen>
 800592e:	4603      	mov	r3, r0
 8005930:	b29a      	uxth	r2, r3
 8005932:	f247 5330 	movw	r3, #30000	; 0x7530
 8005936:	4920      	ldr	r1, [pc, #128]	; (80059b8 <printWelcome+0x1bc>)
 8005938:	4820      	ldr	r0, [pc, #128]	; (80059bc <printWelcome+0x1c0>)
 800593a:	f7ff f883 	bl	8004a44 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 800593e:	481e      	ldr	r0, [pc, #120]	; (80059b8 <printWelcome+0x1bc>)
 8005940:	f7fa fc46 	bl	80001d0 <strlen>
 8005944:	4603      	mov	r3, r0
 8005946:	461a      	mov	r2, r3
 8005948:	2100      	movs	r1, #0
 800594a:	481b      	ldr	r0, [pc, #108]	; (80059b8 <printWelcome+0x1bc>)
 800594c:	f002 f81e 	bl	800798c <memset>

	  sprintf(buffer, "|                                  | \r \n");
 8005950:	491c      	ldr	r1, [pc, #112]	; (80059c4 <printWelcome+0x1c8>)
 8005952:	4819      	ldr	r0, [pc, #100]	; (80059b8 <printWelcome+0x1bc>)
 8005954:	f002 f862 	bl	8007a1c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8005958:	4817      	ldr	r0, [pc, #92]	; (80059b8 <printWelcome+0x1bc>)
 800595a:	f7fa fc39 	bl	80001d0 <strlen>
 800595e:	4603      	mov	r3, r0
 8005960:	b29a      	uxth	r2, r3
 8005962:	f247 5330 	movw	r3, #30000	; 0x7530
 8005966:	4914      	ldr	r1, [pc, #80]	; (80059b8 <printWelcome+0x1bc>)
 8005968:	4814      	ldr	r0, [pc, #80]	; (80059bc <printWelcome+0x1c0>)
 800596a:	f7ff f86b 	bl	8004a44 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 800596e:	4812      	ldr	r0, [pc, #72]	; (80059b8 <printWelcome+0x1bc>)
 8005970:	f7fa fc2e 	bl	80001d0 <strlen>
 8005974:	4603      	mov	r3, r0
 8005976:	461a      	mov	r2, r3
 8005978:	2100      	movs	r1, #0
 800597a:	480f      	ldr	r0, [pc, #60]	; (80059b8 <printWelcome+0x1bc>)
 800597c:	f002 f806 	bl	800798c <memset>

	  sprintf(buffer, "------------------------------------ \r \n");
 8005980:	490f      	ldr	r1, [pc, #60]	; (80059c0 <printWelcome+0x1c4>)
 8005982:	480d      	ldr	r0, [pc, #52]	; (80059b8 <printWelcome+0x1bc>)
 8005984:	f002 f84a 	bl	8007a1c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8005988:	480b      	ldr	r0, [pc, #44]	; (80059b8 <printWelcome+0x1bc>)
 800598a:	f7fa fc21 	bl	80001d0 <strlen>
 800598e:	4603      	mov	r3, r0
 8005990:	b29a      	uxth	r2, r3
 8005992:	f247 5330 	movw	r3, #30000	; 0x7530
 8005996:	4908      	ldr	r1, [pc, #32]	; (80059b8 <printWelcome+0x1bc>)
 8005998:	4808      	ldr	r0, [pc, #32]	; (80059bc <printWelcome+0x1c0>)
 800599a:	f7ff f853 	bl	8004a44 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 800599e:	4806      	ldr	r0, [pc, #24]	; (80059b8 <printWelcome+0x1bc>)
 80059a0:	f7fa fc16 	bl	80001d0 <strlen>
 80059a4:	4603      	mov	r3, r0
 80059a6:	461a      	mov	r2, r3
 80059a8:	2100      	movs	r1, #0
 80059aa:	4803      	ldr	r0, [pc, #12]	; (80059b8 <printWelcome+0x1bc>)
 80059ac:	f001 ffee 	bl	800798c <memset>
}
 80059b0:	bf00      	nop
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	08008d7c 	.word	0x08008d7c
 80059b8:	2000acf8 	.word	0x2000acf8
 80059bc:	2000ae88 	.word	0x2000ae88
 80059c0:	08008da0 	.word	0x08008da0
 80059c4:	08008dcc 	.word	0x08008dcc
 80059c8:	08008df8 	.word	0x08008df8
 80059cc:	08008e24 	.word	0x08008e24

080059d0 <refreshAndPrint>:

void refreshAndPrint(){
 80059d0:	b580      	push	{r7, lr}
 80059d2:	af00      	add	r7, sp, #0

	 sprintf(buffer, "\033[2J\033[9A");
 80059d4:	49a3      	ldr	r1, [pc, #652]	; (8005c64 <refreshAndPrint+0x294>)
 80059d6:	48a4      	ldr	r0, [pc, #656]	; (8005c68 <refreshAndPrint+0x298>)
 80059d8:	f002 f820 	bl	8007a1c <siprintf>
	 HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 80059dc:	48a2      	ldr	r0, [pc, #648]	; (8005c68 <refreshAndPrint+0x298>)
 80059de:	f7fa fbf7 	bl	80001d0 <strlen>
 80059e2:	4603      	mov	r3, r0
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	f247 5330 	movw	r3, #30000	; 0x7530
 80059ea:	499f      	ldr	r1, [pc, #636]	; (8005c68 <refreshAndPrint+0x298>)
 80059ec:	489f      	ldr	r0, [pc, #636]	; (8005c6c <refreshAndPrint+0x29c>)
 80059ee:	f7ff f829 	bl	8004a44 <HAL_UART_Transmit>
	 memset(buffer, 0, strlen(buffer));
 80059f2:	489d      	ldr	r0, [pc, #628]	; (8005c68 <refreshAndPrint+0x298>)
 80059f4:	f7fa fbec 	bl	80001d0 <strlen>
 80059f8:	4603      	mov	r3, r0
 80059fa:	461a      	mov	r2, r3
 80059fc:	2100      	movs	r1, #0
 80059fe:	489a      	ldr	r0, [pc, #616]	; (8005c68 <refreshAndPrint+0x298>)
 8005a00:	f001 ffc4 	bl	800798c <memset>

	  sprintf(buffer, "         Welcome to our game!! \r \n");
 8005a04:	499a      	ldr	r1, [pc, #616]	; (8005c70 <refreshAndPrint+0x2a0>)
 8005a06:	4898      	ldr	r0, [pc, #608]	; (8005c68 <refreshAndPrint+0x298>)
 8005a08:	f002 f808 	bl	8007a1c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8005a0c:	4896      	ldr	r0, [pc, #600]	; (8005c68 <refreshAndPrint+0x298>)
 8005a0e:	f7fa fbdf 	bl	80001d0 <strlen>
 8005a12:	4603      	mov	r3, r0
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	f247 5330 	movw	r3, #30000	; 0x7530
 8005a1a:	4993      	ldr	r1, [pc, #588]	; (8005c68 <refreshAndPrint+0x298>)
 8005a1c:	4893      	ldr	r0, [pc, #588]	; (8005c6c <refreshAndPrint+0x29c>)
 8005a1e:	f7ff f811 	bl	8004a44 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 8005a22:	4891      	ldr	r0, [pc, #580]	; (8005c68 <refreshAndPrint+0x298>)
 8005a24:	f7fa fbd4 	bl	80001d0 <strlen>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	488e      	ldr	r0, [pc, #568]	; (8005c68 <refreshAndPrint+0x298>)
 8005a30:	f001 ffac 	bl	800798c <memset>

	  sprintf(buffer, "------------------------------------ \r \n");
 8005a34:	498f      	ldr	r1, [pc, #572]	; (8005c74 <refreshAndPrint+0x2a4>)
 8005a36:	488c      	ldr	r0, [pc, #560]	; (8005c68 <refreshAndPrint+0x298>)
 8005a38:	f001 fff0 	bl	8007a1c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8005a3c:	488a      	ldr	r0, [pc, #552]	; (8005c68 <refreshAndPrint+0x298>)
 8005a3e:	f7fa fbc7 	bl	80001d0 <strlen>
 8005a42:	4603      	mov	r3, r0
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	f247 5330 	movw	r3, #30000	; 0x7530
 8005a4a:	4987      	ldr	r1, [pc, #540]	; (8005c68 <refreshAndPrint+0x298>)
 8005a4c:	4887      	ldr	r0, [pc, #540]	; (8005c6c <refreshAndPrint+0x29c>)
 8005a4e:	f7fe fff9 	bl	8004a44 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 8005a52:	4885      	ldr	r0, [pc, #532]	; (8005c68 <refreshAndPrint+0x298>)
 8005a54:	f7fa fbbc 	bl	80001d0 <strlen>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	4882      	ldr	r0, [pc, #520]	; (8005c68 <refreshAndPrint+0x298>)
 8005a60:	f001 ff94 	bl	800798c <memset>

	  if(score < 10) sprintf(buffer, "|Score: %d                          | \r \n",score);
 8005a64:	4b84      	ldr	r3, [pc, #528]	; (8005c78 <refreshAndPrint+0x2a8>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2b09      	cmp	r3, #9
 8005a6a:	dc07      	bgt.n	8005a7c <refreshAndPrint+0xac>
 8005a6c:	4b82      	ldr	r3, [pc, #520]	; (8005c78 <refreshAndPrint+0x2a8>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	461a      	mov	r2, r3
 8005a72:	4982      	ldr	r1, [pc, #520]	; (8005c7c <refreshAndPrint+0x2ac>)
 8005a74:	487c      	ldr	r0, [pc, #496]	; (8005c68 <refreshAndPrint+0x298>)
 8005a76:	f001 ffd1 	bl	8007a1c <siprintf>
 8005a7a:	e006      	b.n	8005a8a <refreshAndPrint+0xba>
	  else sprintf(buffer, "|Score: %d                         | \r \n",score);
 8005a7c:	4b7e      	ldr	r3, [pc, #504]	; (8005c78 <refreshAndPrint+0x2a8>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	461a      	mov	r2, r3
 8005a82:	497f      	ldr	r1, [pc, #508]	; (8005c80 <refreshAndPrint+0x2b0>)
 8005a84:	4878      	ldr	r0, [pc, #480]	; (8005c68 <refreshAndPrint+0x298>)
 8005a86:	f001 ffc9 	bl	8007a1c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8005a8a:	4877      	ldr	r0, [pc, #476]	; (8005c68 <refreshAndPrint+0x298>)
 8005a8c:	f7fa fba0 	bl	80001d0 <strlen>
 8005a90:	4603      	mov	r3, r0
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	f247 5330 	movw	r3, #30000	; 0x7530
 8005a98:	4973      	ldr	r1, [pc, #460]	; (8005c68 <refreshAndPrint+0x298>)
 8005a9a:	4874      	ldr	r0, [pc, #464]	; (8005c6c <refreshAndPrint+0x29c>)
 8005a9c:	f7fe ffd2 	bl	8004a44 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 8005aa0:	4871      	ldr	r0, [pc, #452]	; (8005c68 <refreshAndPrint+0x298>)
 8005aa2:	f7fa fb95 	bl	80001d0 <strlen>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	2100      	movs	r1, #0
 8005aac:	486e      	ldr	r0, [pc, #440]	; (8005c68 <refreshAndPrint+0x298>)
 8005aae:	f001 ff6d 	bl	800798c <memset>

	  sprintf(buffer, "|   ____    ____    ____    ____   | \r \n");
 8005ab2:	4974      	ldr	r1, [pc, #464]	; (8005c84 <refreshAndPrint+0x2b4>)
 8005ab4:	486c      	ldr	r0, [pc, #432]	; (8005c68 <refreshAndPrint+0x298>)
 8005ab6:	f001 ffb1 	bl	8007a1c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8005aba:	486b      	ldr	r0, [pc, #428]	; (8005c68 <refreshAndPrint+0x298>)
 8005abc:	f7fa fb88 	bl	80001d0 <strlen>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	f247 5330 	movw	r3, #30000	; 0x7530
 8005ac8:	4967      	ldr	r1, [pc, #412]	; (8005c68 <refreshAndPrint+0x298>)
 8005aca:	4868      	ldr	r0, [pc, #416]	; (8005c6c <refreshAndPrint+0x29c>)
 8005acc:	f7fe ffba 	bl	8004a44 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 8005ad0:	4865      	ldr	r0, [pc, #404]	; (8005c68 <refreshAndPrint+0x298>)
 8005ad2:	f7fa fb7d 	bl	80001d0 <strlen>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	461a      	mov	r2, r3
 8005ada:	2100      	movs	r1, #0
 8005adc:	4862      	ldr	r0, [pc, #392]	; (8005c68 <refreshAndPrint+0x298>)
 8005ade:	f001 ff55 	bl	800798c <memset>

	  //if(LED_1_status = 0 && LED_2_status = 0 && LED_3_status = 0 && LED_4_status = 0)
	  sprintf(tBuff0, " |    | ");
 8005ae2:	4969      	ldr	r1, [pc, #420]	; (8005c88 <refreshAndPrint+0x2b8>)
 8005ae4:	4869      	ldr	r0, [pc, #420]	; (8005c8c <refreshAndPrint+0x2bc>)
 8005ae6:	f001 ff99 	bl	8007a1c <siprintf>
	  sprintf(tBuff1, " | aa | ");
 8005aea:	4969      	ldr	r1, [pc, #420]	; (8005c90 <refreshAndPrint+0x2c0>)
 8005aec:	4869      	ldr	r0, [pc, #420]	; (8005c94 <refreshAndPrint+0x2c4>)
 8005aee:	f001 ff95 	bl	8007a1c <siprintf>
	  sprintf(buffer, "| ");
 8005af2:	4969      	ldr	r1, [pc, #420]	; (8005c98 <refreshAndPrint+0x2c8>)
 8005af4:	485c      	ldr	r0, [pc, #368]	; (8005c68 <refreshAndPrint+0x298>)
 8005af6:	f001 ff91 	bl	8007a1c <siprintf>

	  if(LED_1_status == 1) strcat(buffer, tBuff1);
 8005afa:	4b68      	ldr	r3, [pc, #416]	; (8005c9c <refreshAndPrint+0x2cc>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d104      	bne.n	8005b0c <refreshAndPrint+0x13c>
 8005b02:	4964      	ldr	r1, [pc, #400]	; (8005c94 <refreshAndPrint+0x2c4>)
 8005b04:	4858      	ldr	r0, [pc, #352]	; (8005c68 <refreshAndPrint+0x298>)
 8005b06:	f001 ffa9 	bl	8007a5c <strcat>
 8005b0a:	e003      	b.n	8005b14 <refreshAndPrint+0x144>
	  else strcat(buffer, tBuff0);
 8005b0c:	495f      	ldr	r1, [pc, #380]	; (8005c8c <refreshAndPrint+0x2bc>)
 8005b0e:	4856      	ldr	r0, [pc, #344]	; (8005c68 <refreshAndPrint+0x298>)
 8005b10:	f001 ffa4 	bl	8007a5c <strcat>
	  if(LED_2_status == 1) strcat(buffer, tBuff1);
 8005b14:	4b62      	ldr	r3, [pc, #392]	; (8005ca0 <refreshAndPrint+0x2d0>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d104      	bne.n	8005b26 <refreshAndPrint+0x156>
 8005b1c:	495d      	ldr	r1, [pc, #372]	; (8005c94 <refreshAndPrint+0x2c4>)
 8005b1e:	4852      	ldr	r0, [pc, #328]	; (8005c68 <refreshAndPrint+0x298>)
 8005b20:	f001 ff9c 	bl	8007a5c <strcat>
 8005b24:	e003      	b.n	8005b2e <refreshAndPrint+0x15e>
	  else strcat(buffer, tBuff0);
 8005b26:	4959      	ldr	r1, [pc, #356]	; (8005c8c <refreshAndPrint+0x2bc>)
 8005b28:	484f      	ldr	r0, [pc, #316]	; (8005c68 <refreshAndPrint+0x298>)
 8005b2a:	f001 ff97 	bl	8007a5c <strcat>
	  if(LED_3_status == 1) strcat(buffer, tBuff1);
 8005b2e:	4b5d      	ldr	r3, [pc, #372]	; (8005ca4 <refreshAndPrint+0x2d4>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d104      	bne.n	8005b40 <refreshAndPrint+0x170>
 8005b36:	4957      	ldr	r1, [pc, #348]	; (8005c94 <refreshAndPrint+0x2c4>)
 8005b38:	484b      	ldr	r0, [pc, #300]	; (8005c68 <refreshAndPrint+0x298>)
 8005b3a:	f001 ff8f 	bl	8007a5c <strcat>
 8005b3e:	e003      	b.n	8005b48 <refreshAndPrint+0x178>
	  else strcat(buffer, tBuff0);
 8005b40:	4952      	ldr	r1, [pc, #328]	; (8005c8c <refreshAndPrint+0x2bc>)
 8005b42:	4849      	ldr	r0, [pc, #292]	; (8005c68 <refreshAndPrint+0x298>)
 8005b44:	f001 ff8a 	bl	8007a5c <strcat>
	  if(LED_4_status == 1) strcat(buffer, tBuff1);
 8005b48:	4b57      	ldr	r3, [pc, #348]	; (8005ca8 <refreshAndPrint+0x2d8>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d104      	bne.n	8005b5a <refreshAndPrint+0x18a>
 8005b50:	4950      	ldr	r1, [pc, #320]	; (8005c94 <refreshAndPrint+0x2c4>)
 8005b52:	4845      	ldr	r0, [pc, #276]	; (8005c68 <refreshAndPrint+0x298>)
 8005b54:	f001 ff82 	bl	8007a5c <strcat>
 8005b58:	e003      	b.n	8005b62 <refreshAndPrint+0x192>
	  else strcat(buffer, tBuff0);
 8005b5a:	494c      	ldr	r1, [pc, #304]	; (8005c8c <refreshAndPrint+0x2bc>)
 8005b5c:	4842      	ldr	r0, [pc, #264]	; (8005c68 <refreshAndPrint+0x298>)
 8005b5e:	f001 ff7d 	bl	8007a5c <strcat>

	  strcat(buffer, " | \r \n");
 8005b62:	4841      	ldr	r0, [pc, #260]	; (8005c68 <refreshAndPrint+0x298>)
 8005b64:	f7fa fb34 	bl	80001d0 <strlen>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	4b3e      	ldr	r3, [pc, #248]	; (8005c68 <refreshAndPrint+0x298>)
 8005b6e:	4413      	add	r3, r2
 8005b70:	4a4e      	ldr	r2, [pc, #312]	; (8005cac <refreshAndPrint+0x2dc>)
 8005b72:	6810      	ldr	r0, [r2, #0]
 8005b74:	6018      	str	r0, [r3, #0]
 8005b76:	8891      	ldrh	r1, [r2, #4]
 8005b78:	7992      	ldrb	r2, [r2, #6]
 8005b7a:	8099      	strh	r1, [r3, #4]
 8005b7c:	719a      	strb	r2, [r3, #6]

	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8005b7e:	483a      	ldr	r0, [pc, #232]	; (8005c68 <refreshAndPrint+0x298>)
 8005b80:	f7fa fb26 	bl	80001d0 <strlen>
 8005b84:	4603      	mov	r3, r0
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	f247 5330 	movw	r3, #30000	; 0x7530
 8005b8c:	4936      	ldr	r1, [pc, #216]	; (8005c68 <refreshAndPrint+0x298>)
 8005b8e:	4837      	ldr	r0, [pc, #220]	; (8005c6c <refreshAndPrint+0x29c>)
 8005b90:	f7fe ff58 	bl	8004a44 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 8005b94:	4834      	ldr	r0, [pc, #208]	; (8005c68 <refreshAndPrint+0x298>)
 8005b96:	f7fa fb1b 	bl	80001d0 <strlen>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	4831      	ldr	r0, [pc, #196]	; (8005c68 <refreshAndPrint+0x298>)
 8005ba2:	f001 fef3 	bl	800798c <memset>

	  //sprintf(buffer, "|  |    |  |    |  |    |  |    |  | \r \n");
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8005ba6:	4830      	ldr	r0, [pc, #192]	; (8005c68 <refreshAndPrint+0x298>)
 8005ba8:	f7fa fb12 	bl	80001d0 <strlen>
 8005bac:	4603      	mov	r3, r0
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	f247 5330 	movw	r3, #30000	; 0x7530
 8005bb4:	492c      	ldr	r1, [pc, #176]	; (8005c68 <refreshAndPrint+0x298>)
 8005bb6:	482d      	ldr	r0, [pc, #180]	; (8005c6c <refreshAndPrint+0x29c>)
 8005bb8:	f7fe ff44 	bl	8004a44 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 8005bbc:	482a      	ldr	r0, [pc, #168]	; (8005c68 <refreshAndPrint+0x298>)
 8005bbe:	f7fa fb07 	bl	80001d0 <strlen>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	4827      	ldr	r0, [pc, #156]	; (8005c68 <refreshAndPrint+0x298>)
 8005bca:	f001 fedf 	bl	800798c <memset>

	  sprintf(buffer, "|  |    |  |    |  |    |  |    |  | \r \n");
 8005bce:	4938      	ldr	r1, [pc, #224]	; (8005cb0 <refreshAndPrint+0x2e0>)
 8005bd0:	4825      	ldr	r0, [pc, #148]	; (8005c68 <refreshAndPrint+0x298>)
 8005bd2:	f001 ff23 	bl	8007a1c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8005bd6:	4824      	ldr	r0, [pc, #144]	; (8005c68 <refreshAndPrint+0x298>)
 8005bd8:	f7fa fafa 	bl	80001d0 <strlen>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	f247 5330 	movw	r3, #30000	; 0x7530
 8005be4:	4920      	ldr	r1, [pc, #128]	; (8005c68 <refreshAndPrint+0x298>)
 8005be6:	4821      	ldr	r0, [pc, #132]	; (8005c6c <refreshAndPrint+0x29c>)
 8005be8:	f7fe ff2c 	bl	8004a44 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 8005bec:	481e      	ldr	r0, [pc, #120]	; (8005c68 <refreshAndPrint+0x298>)
 8005bee:	f7fa faef 	bl	80001d0 <strlen>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	481b      	ldr	r0, [pc, #108]	; (8005c68 <refreshAndPrint+0x298>)
 8005bfa:	f001 fec7 	bl	800798c <memset>

	  sprintf(buffer, "|                                  | \r \n");
 8005bfe:	492d      	ldr	r1, [pc, #180]	; (8005cb4 <refreshAndPrint+0x2e4>)
 8005c00:	4819      	ldr	r0, [pc, #100]	; (8005c68 <refreshAndPrint+0x298>)
 8005c02:	f001 ff0b 	bl	8007a1c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8005c06:	4818      	ldr	r0, [pc, #96]	; (8005c68 <refreshAndPrint+0x298>)
 8005c08:	f7fa fae2 	bl	80001d0 <strlen>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	f247 5330 	movw	r3, #30000	; 0x7530
 8005c14:	4914      	ldr	r1, [pc, #80]	; (8005c68 <refreshAndPrint+0x298>)
 8005c16:	4815      	ldr	r0, [pc, #84]	; (8005c6c <refreshAndPrint+0x29c>)
 8005c18:	f7fe ff14 	bl	8004a44 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 8005c1c:	4812      	ldr	r0, [pc, #72]	; (8005c68 <refreshAndPrint+0x298>)
 8005c1e:	f7fa fad7 	bl	80001d0 <strlen>
 8005c22:	4603      	mov	r3, r0
 8005c24:	461a      	mov	r2, r3
 8005c26:	2100      	movs	r1, #0
 8005c28:	480f      	ldr	r0, [pc, #60]	; (8005c68 <refreshAndPrint+0x298>)
 8005c2a:	f001 feaf 	bl	800798c <memset>

	  sprintf(buffer, "------------------------------------ \r \n");
 8005c2e:	4911      	ldr	r1, [pc, #68]	; (8005c74 <refreshAndPrint+0x2a4>)
 8005c30:	480d      	ldr	r0, [pc, #52]	; (8005c68 <refreshAndPrint+0x298>)
 8005c32:	f001 fef3 	bl	8007a1c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8005c36:	480c      	ldr	r0, [pc, #48]	; (8005c68 <refreshAndPrint+0x298>)
 8005c38:	f7fa faca 	bl	80001d0 <strlen>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	f247 5330 	movw	r3, #30000	; 0x7530
 8005c44:	4908      	ldr	r1, [pc, #32]	; (8005c68 <refreshAndPrint+0x298>)
 8005c46:	4809      	ldr	r0, [pc, #36]	; (8005c6c <refreshAndPrint+0x29c>)
 8005c48:	f7fe fefc 	bl	8004a44 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 8005c4c:	4806      	ldr	r0, [pc, #24]	; (8005c68 <refreshAndPrint+0x298>)
 8005c4e:	f7fa fabf 	bl	80001d0 <strlen>
 8005c52:	4603      	mov	r3, r0
 8005c54:	461a      	mov	r2, r3
 8005c56:	2100      	movs	r1, #0
 8005c58:	4803      	ldr	r0, [pc, #12]	; (8005c68 <refreshAndPrint+0x298>)
 8005c5a:	f001 fe97 	bl	800798c <memset>
}
 8005c5e:	bf00      	nop
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	08008e50 	.word	0x08008e50
 8005c68:	2000acf8 	.word	0x2000acf8
 8005c6c:	2000ae88 	.word	0x2000ae88
 8005c70:	08008e5c 	.word	0x08008e5c
 8005c74:	08008da0 	.word	0x08008da0
 8005c78:	2000acf4 	.word	0x2000acf4
 8005c7c:	08008e80 	.word	0x08008e80
 8005c80:	08008eac 	.word	0x08008eac
 8005c84:	08008df8 	.word	0x08008df8
 8005c88:	08008ed8 	.word	0x08008ed8
 8005c8c:	2000ae48 	.word	0x2000ae48
 8005c90:	08008ee4 	.word	0x08008ee4
 8005c94:	2000ae34 	.word	0x2000ae34
 8005c98:	08008ef0 	.word	0x08008ef0
 8005c9c:	2000ace0 	.word	0x2000ace0
 8005ca0:	2000ace4 	.word	0x2000ace4
 8005ca4:	2000ace8 	.word	0x2000ace8
 8005ca8:	2000acec 	.word	0x2000acec
 8005cac:	08008ef4 	.word	0x08008ef4
 8005cb0:	08008e24 	.word	0x08008e24
 8005cb4:	08008dcc 	.word	0x08008dcc

08005cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b08c      	sub	sp, #48	; 0x30
 8005cbc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005cbe:	f7fb f899 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005cc2:	f000 faf1 	bl	80062a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005cc6:	f000 fc35 	bl	8006534 <MX_GPIO_Init>
  MX_DMA_Init();
 8005cca:	f000 fc15 	bl	80064f8 <MX_DMA_Init>
  MX_DAC1_Init();
 8005cce:	f000 fb3d 	bl	800634c <MX_DAC1_Init>
  MX_QUADSPI_Init();
 8005cd2:	f000 fb6d 	bl	80063b0 <MX_QUADSPI_Init>
  MX_TIM2_Init();
 8005cd6:	f000 fb91 	bl	80063fc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8005cda:	f000 fbdd 	bl	8006498 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_QSPI_Init();
 8005cde:	f000 fe9f 	bl	8006a20 <BSP_QSPI_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8005ce2:	4852      	ldr	r0, [pc, #328]	; (8005e2c <main+0x174>)
 8005ce4:	f7fe fa08 	bl	80040f8 <HAL_TIM_Base_Start_IT>
  get_B5();
 8005ce8:	f7ff fd26 	bl	8005738 <get_B5>
  get_C6();
 8005cec:	f7ff fb30 	bl	8005350 <get_C6>
  get_E6();
 8005cf0:	f7ff fb92 	bl	8005418 <get_E6>
  get_G6();
 8005cf4:	f7ff fbf4 	bl	80054e0 <get_G6>
  get_A6();
 8005cf8:	f7ff fc56 	bl	80055a8 <get_A6>
  get_B6();
 8005cfc:	f7ff fcb8 	bl	8005670 <get_B6>
  uint32_t addr = 0x000000;
 8005d00:	2300      	movs	r3, #0
 8005d02:	607b      	str	r3, [r7, #4]
  for(int i = 0; i < 3; i++){
 8005d04:	2300      	movs	r3, #0
 8005d06:	627b      	str	r3, [r7, #36]	; 0x24
 8005d08:	e00f      	b.n	8005d2a <main+0x72>
	  if(BSP_QSPI_Erase_Block(addr + i * 0x010000) != QSPI_OK){
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	041b      	lsls	r3, r3, #16
 8005d0e:	461a      	mov	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4413      	add	r3, r2
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 ffb3 	bl	8006c80 <BSP_QSPI_Erase_Block>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <main+0x6c>
		  Error_Handler();
 8005d20:	f000 fe78 	bl	8006a14 <Error_Handler>
  for(int i = 0; i < 3; i++){
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	3301      	adds	r3, #1
 8005d28:	627b      	str	r3, [r7, #36]	; 0x24
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	ddec      	ble.n	8005d0a <main+0x52>
	  }
  }

  uint32_t tone_addr = 0x000000;
 8005d30:	2300      	movs	r3, #0
 8005d32:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 490; i++){
 8005d34:	2300      	movs	r3, #0
 8005d36:	61fb      	str	r3, [r7, #28]
 8005d38:	e00f      	b.n	8005d5a <main+0xa2>
	  if(BSP_QSPI_Write((uint8_t *)B5, tone_addr, 45) != QSPI_OK){
 8005d3a:	222d      	movs	r2, #45	; 0x2d
 8005d3c:	6a39      	ldr	r1, [r7, #32]
 8005d3e:	483c      	ldr	r0, [pc, #240]	; (8005e30 <main+0x178>)
 8005d40:	f000 ff20 	bl	8006b84 <BSP_QSPI_Write>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <main+0x96>
		  Error_Handler();
 8005d4a:	f000 fe63 	bl	8006a14 <Error_Handler>
	  }
	  tone_addr += 45;
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	332d      	adds	r3, #45	; 0x2d
 8005d52:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 490; i++){
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	3301      	adds	r3, #1
 8005d58:	61fb      	str	r3, [r7, #28]
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 8005d60:	dbeb      	blt.n	8005d3a <main+0x82>
  }
  for(int i = 0; i < 525; i++){//22050 = 5*4096+6*256+2*16+2 = 0x005622;
 8005d62:	2300      	movs	r3, #0
 8005d64:	61bb      	str	r3, [r7, #24]
 8005d66:	e00f      	b.n	8005d88 <main+0xd0>
	  if(BSP_QSPI_Write((uint8_t *)C6, tone_addr, 42) != QSPI_OK){
 8005d68:	222a      	movs	r2, #42	; 0x2a
 8005d6a:	6a39      	ldr	r1, [r7, #32]
 8005d6c:	4831      	ldr	r0, [pc, #196]	; (8005e34 <main+0x17c>)
 8005d6e:	f000 ff09 	bl	8006b84 <BSP_QSPI_Write>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <main+0xc4>
		  Error_Handler();
 8005d78:	f000 fe4c 	bl	8006a14 <Error_Handler>
	  }
	  tone_addr += 42;
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	332a      	adds	r3, #42	; 0x2a
 8005d80:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 525; i++){//22050 = 5*4096+6*256+2*16+2 = 0x005622;
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	3301      	adds	r3, #1
 8005d86:	61bb      	str	r3, [r7, #24]
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8005d8e:	ddeb      	ble.n	8005d68 <main+0xb0>
  }
  for(int i = 0; i < 648; i++){//0x00AC44;
 8005d90:	2300      	movs	r3, #0
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	e00f      	b.n	8005db6 <main+0xfe>
	  if(BSP_QSPI_Write((uint8_t *)E6, tone_addr, 34) != QSPI_OK){
 8005d96:	2222      	movs	r2, #34	; 0x22
 8005d98:	6a39      	ldr	r1, [r7, #32]
 8005d9a:	4827      	ldr	r0, [pc, #156]	; (8005e38 <main+0x180>)
 8005d9c:	f000 fef2 	bl	8006b84 <BSP_QSPI_Write>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <main+0xf2>
		  Error_Handler();
 8005da6:	f000 fe35 	bl	8006a14 <Error_Handler>
	  }
	  tone_addr += 34;
 8005daa:	6a3b      	ldr	r3, [r7, #32]
 8005dac:	3322      	adds	r3, #34	; 0x22
 8005dae:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 648; i++){//0x00AC44;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	3301      	adds	r3, #1
 8005db4:	617b      	str	r3, [r7, #20]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f5b3 7f22 	cmp.w	r3, #648	; 0x288
 8005dbc:	dbeb      	blt.n	8005d96 <main+0xde>
  }
  tone_addr = 0x010266;
 8005dbe:	4b1f      	ldr	r3, [pc, #124]	; (8005e3c <main+0x184>)
 8005dc0:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 787; i++){
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	613b      	str	r3, [r7, #16]
 8005dc6:	e00f      	b.n	8005de8 <main+0x130>
	  if(BSP_QSPI_Write((uint8_t *)G6, tone_addr, 28) != QSPI_OK){
 8005dc8:	221c      	movs	r2, #28
 8005dca:	6a39      	ldr	r1, [r7, #32]
 8005dcc:	481c      	ldr	r0, [pc, #112]	; (8005e40 <main+0x188>)
 8005dce:	f000 fed9 	bl	8006b84 <BSP_QSPI_Write>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <main+0x124>
		  Error_Handler();
 8005dd8:	f000 fe1c 	bl	8006a14 <Error_Handler>
	  }
	  tone_addr += 28;
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	331c      	adds	r3, #28
 8005de0:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 787; i++){
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	3301      	adds	r3, #1
 8005de6:	613b      	str	r3, [r7, #16]
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	f240 3212 	movw	r2, #786	; 0x312
 8005dee:	4293      	cmp	r3, r2
 8005df0:	ddea      	ble.n	8005dc8 <main+0x110>
  }
  tone_addr = 0x015888;
 8005df2:	4b14      	ldr	r3, [pc, #80]	; (8005e44 <main+0x18c>)
 8005df4:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 882; i++){
 8005df6:	2300      	movs	r3, #0
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	e00f      	b.n	8005e1c <main+0x164>
	  if(BSP_QSPI_Write((uint8_t *)A6, tone_addr, 25) != QSPI_OK){
 8005dfc:	2219      	movs	r2, #25
 8005dfe:	6a39      	ldr	r1, [r7, #32]
 8005e00:	4811      	ldr	r0, [pc, #68]	; (8005e48 <main+0x190>)
 8005e02:	f000 febf 	bl	8006b84 <BSP_QSPI_Write>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <main+0x158>
		  Error_Handler();
 8005e0c:	f000 fe02 	bl	8006a14 <Error_Handler>
	  }
	  tone_addr += 25;
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	3319      	adds	r3, #25
 8005e14:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 882; i++){
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f240 3271 	movw	r2, #881	; 0x371
 8005e22:	4293      	cmp	r3, r2
 8005e24:	ddea      	ble.n	8005dfc <main+0x144>
  }
  for(int i = 0; i < 1002; i++){
 8005e26:	2300      	movs	r3, #0
 8005e28:	60bb      	str	r3, [r7, #8]
 8005e2a:	e01f      	b.n	8005e6c <main+0x1b4>
 8005e2c:	2000af28 	.word	0x2000af28
 8005e30:	2000ae04 	.word	0x2000ae04
 8005e34:	2000ae5c 	.word	0x2000ae5c
 8005e38:	2000ad80 	.word	0x2000ad80
 8005e3c:	00010266 	.word	0x00010266
 8005e40:	2000af0c 	.word	0x2000af0c
 8005e44:	00015888 	.word	0x00015888
 8005e48:	2000afb8 	.word	0x2000afb8
	  if(BSP_QSPI_Write((uint8_t *)B6, tone_addr, 22) != QSPI_OK){
 8005e4c:	2216      	movs	r2, #22
 8005e4e:	6a39      	ldr	r1, [r7, #32]
 8005e50:	48c4      	ldr	r0, [pc, #784]	; (8006164 <main+0x4ac>)
 8005e52:	f000 fe97 	bl	8006b84 <BSP_QSPI_Write>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d001      	beq.n	8005e60 <main+0x1a8>
		  Error_Handler();
 8005e5c:	f000 fdda 	bl	8006a14 <Error_Handler>
	  }
	  tone_addr += 22;
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	3316      	adds	r3, #22
 8005e64:	623b      	str	r3, [r7, #32]
  for(int i = 0; i < 1002; i++){
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	60bb      	str	r3, [r7, #8]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8005e72:	4293      	cmp	r3, r2
 8005e74:	ddea      	ble.n	8005e4c <main+0x194>
  }

  //Read the data
  if(BSP_QSPI_Read((uint8_t *)play, 0x00000000, 22050) != QSPI_OK){
 8005e76:	f245 6222 	movw	r2, #22050	; 0x5622
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	48ba      	ldr	r0, [pc, #744]	; (8006168 <main+0x4b0>)
 8005e7e:	f000 fe3b 	bl	8006af8 <BSP_QSPI_Read>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <main+0x1d4>
	  Error_Handler();
 8005e88:	f000 fdc4 	bl	8006a14 <Error_Handler>
  }
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 8005e8c:	2308      	movs	r3, #8
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	f245 6322 	movw	r3, #22050	; 0x5622
 8005e94:	4ab4      	ldr	r2, [pc, #720]	; (8006168 <main+0x4b0>)
 8005e96:	2100      	movs	r1, #0
 8005e98:	48b4      	ldr	r0, [pc, #720]	; (800616c <main+0x4b4>)
 8005e9a:	f7fb f90b 	bl	80010b4 <HAL_DAC_Start_DMA>
  printWelcome();
 8005e9e:	f7ff fcad 	bl	80057fc <printWelcome>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin (BluePB_GPIO_Port, BluePB_Pin)==0){
 8005ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ea6:	48b2      	ldr	r0, [pc, #712]	; (8006170 <main+0x4b8>)
 8005ea8:	f7fc f85c 	bl	8001f64 <HAL_GPIO_ReadPin>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d152      	bne.n	8005f58 <main+0x2a0>
		  if(HAL_GPIO_ReadPin (LED_GPIO_Port, LED_Pin)){
 8005eb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005eb6:	48af      	ldr	r0, [pc, #700]	; (8006174 <main+0x4bc>)
 8005eb8:	f7fc f854 	bl	8001f64 <HAL_GPIO_ReadPin>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d04a      	beq.n	8005f58 <main+0x2a0>
			  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	2108      	movs	r1, #8
 8005ec6:	48ac      	ldr	r0, [pc, #688]	; (8006178 <main+0x4c0>)
 8005ec8:	f7fc f864 	bl	8001f94 <HAL_GPIO_WritePin>
			  if(BSP_QSPI_Read((uint8_t *)play, 0x01AEAA, 22050) != QSPI_OK){
 8005ecc:	f245 6222 	movw	r2, #22050	; 0x5622
 8005ed0:	49aa      	ldr	r1, [pc, #680]	; (800617c <main+0x4c4>)
 8005ed2:	48a5      	ldr	r0, [pc, #660]	; (8006168 <main+0x4b0>)
 8005ed4:	f000 fe10 	bl	8006af8 <BSP_QSPI_Read>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <main+0x22a>
			  		Error_Handler();
 8005ede:	f000 fd99 	bl	8006a14 <Error_Handler>
			  }
			  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 8005ee2:	2308      	movs	r3, #8
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	f245 6322 	movw	r3, #22050	; 0x5622
 8005eea:	4a9f      	ldr	r2, [pc, #636]	; (8006168 <main+0x4b0>)
 8005eec:	2100      	movs	r1, #0
 8005eee:	489f      	ldr	r0, [pc, #636]	; (800616c <main+0x4b4>)
 8005ef0:	f7fb f8e0 	bl	80010b4 <HAL_DAC_Start_DMA>
			  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005efa:	489e      	ldr	r0, [pc, #632]	; (8006174 <main+0x4bc>)
 8005efc:	f7fc f84a 	bl	8001f94 <HAL_GPIO_WritePin>
			  LED_0_status = 0;
 8005f00:	4b9f      	ldr	r3, [pc, #636]	; (8006180 <main+0x4c8>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]
			  isDelaying = 1;
 8005f06:	4b9f      	ldr	r3, [pc, #636]	; (8006184 <main+0x4cc>)
 8005f08:	2201      	movs	r2, #1
 8005f0a:	601a      	str	r2, [r3, #0]
			  HAL_Delay(200);
 8005f0c:	20c8      	movs	r0, #200	; 0xc8
 8005f0e:	f7fa ffa9 	bl	8000e64 <HAL_Delay>
			  isDelaying = 0;
 8005f12:	4b9c      	ldr	r3, [pc, #624]	; (8006184 <main+0x4cc>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8005f18:	2201      	movs	r2, #1
 8005f1a:	2108      	movs	r1, #8
 8005f1c:	4896      	ldr	r0, [pc, #600]	; (8006178 <main+0x4c0>)
 8005f1e:	f7fc f839 	bl	8001f94 <HAL_GPIO_WritePin>
			  if(BSP_QSPI_Read((uint8_t *)play, 0x02AEAA, 22050) != QSPI_OK){
 8005f22:	f245 6222 	movw	r2, #22050	; 0x5622
 8005f26:	4998      	ldr	r1, [pc, #608]	; (8006188 <main+0x4d0>)
 8005f28:	488f      	ldr	r0, [pc, #572]	; (8006168 <main+0x4b0>)
 8005f2a:	f000 fde5 	bl	8006af8 <BSP_QSPI_Read>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <main+0x280>
			  			Error_Handler();
 8005f34:	f000 fd6e 	bl	8006a14 <Error_Handler>
			  }
			  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, empty, 22050, DAC_ALIGN_8B_R);
 8005f38:	2308      	movs	r3, #8
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	f245 6322 	movw	r3, #22050	; 0x5622
 8005f40:	4a92      	ldr	r2, [pc, #584]	; (800618c <main+0x4d4>)
 8005f42:	2100      	movs	r1, #0
 8005f44:	4889      	ldr	r0, [pc, #548]	; (800616c <main+0x4b4>)
 8005f46:	f7fb f8b5 	bl	80010b4 <HAL_DAC_Start_DMA>
			  score = score+1;
 8005f4a:	4b91      	ldr	r3, [pc, #580]	; (8006190 <main+0x4d8>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	4a8f      	ldr	r2, [pc, #572]	; (8006190 <main+0x4d8>)
 8005f52:	6013      	str	r3, [r2, #0]
			  refreshAndPrint();
 8005f54:	f7ff fd3c 	bl	80059d0 <refreshAndPrint>
		  }
	  }
	  if( HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin)==1){
 8005f58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f5c:	488d      	ldr	r0, [pc, #564]	; (8006194 <main+0x4dc>)
 8005f5e:	f7fc f801 	bl	8001f64 <HAL_GPIO_ReadPin>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d152      	bne.n	800600e <main+0x356>
		  if(HAL_GPIO_ReadPin (LED1_GPIO_Port, LED1_Pin)){
 8005f68:	2120      	movs	r1, #32
 8005f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f6e:	f7fb fff9 	bl	8001f64 <HAL_GPIO_ReadPin>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d04a      	beq.n	800600e <main+0x356>
			  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8005f78:	2200      	movs	r2, #0
 8005f7a:	2108      	movs	r1, #8
 8005f7c:	487e      	ldr	r0, [pc, #504]	; (8006178 <main+0x4c0>)
 8005f7e:	f7fc f809 	bl	8001f94 <HAL_GPIO_WritePin>
			  if(BSP_QSPI_Read((uint8_t *)play, 0x000000, 22050) != QSPI_OK){
 8005f82:	f245 6222 	movw	r2, #22050	; 0x5622
 8005f86:	2100      	movs	r1, #0
 8005f88:	4877      	ldr	r0, [pc, #476]	; (8006168 <main+0x4b0>)
 8005f8a:	f000 fdb5 	bl	8006af8 <BSP_QSPI_Read>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <main+0x2e0>
				  Error_Handler();
 8005f94:	f000 fd3e 	bl	8006a14 <Error_Handler>
			  }
		 	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 8005f98:	2308      	movs	r3, #8
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	f245 6322 	movw	r3, #22050	; 0x5622
 8005fa0:	4a71      	ldr	r2, [pc, #452]	; (8006168 <main+0x4b0>)
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	4871      	ldr	r0, [pc, #452]	; (800616c <main+0x4b4>)
 8005fa6:	f7fb f885 	bl	80010b4 <HAL_DAC_Start_DMA>
		 	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8005faa:	2200      	movs	r2, #0
 8005fac:	2120      	movs	r1, #32
 8005fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005fb2:	f7fb ffef 	bl	8001f94 <HAL_GPIO_WritePin>
		 	LED_1_status = 0;
 8005fb6:	4b78      	ldr	r3, [pc, #480]	; (8006198 <main+0x4e0>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]
		 	isDelaying = 1;
 8005fbc:	4b71      	ldr	r3, [pc, #452]	; (8006184 <main+0x4cc>)
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	601a      	str	r2, [r3, #0]
		 	HAL_Delay(200);
 8005fc2:	20c8      	movs	r0, #200	; 0xc8
 8005fc4:	f7fa ff4e 	bl	8000e64 <HAL_Delay>
		 	isDelaying = 0;
 8005fc8:	4b6e      	ldr	r3, [pc, #440]	; (8006184 <main+0x4cc>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	601a      	str	r2, [r3, #0]
		 	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8005fce:	2201      	movs	r2, #1
 8005fd0:	2108      	movs	r1, #8
 8005fd2:	4869      	ldr	r0, [pc, #420]	; (8006178 <main+0x4c0>)
 8005fd4:	f7fb ffde 	bl	8001f94 <HAL_GPIO_WritePin>
			if(BSP_QSPI_Read((uint8_t *)play, 0x02AEAA, 22050) != QSPI_OK){
 8005fd8:	f245 6222 	movw	r2, #22050	; 0x5622
 8005fdc:	496a      	ldr	r1, [pc, #424]	; (8006188 <main+0x4d0>)
 8005fde:	4862      	ldr	r0, [pc, #392]	; (8006168 <main+0x4b0>)
 8005fe0:	f000 fd8a 	bl	8006af8 <BSP_QSPI_Read>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <main+0x336>
					 Error_Handler();
 8005fea:	f000 fd13 	bl	8006a14 <Error_Handler>
			}
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, empty, 22050, DAC_ALIGN_8B_R);
 8005fee:	2308      	movs	r3, #8
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	f245 6322 	movw	r3, #22050	; 0x5622
 8005ff6:	4a65      	ldr	r2, [pc, #404]	; (800618c <main+0x4d4>)
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	485c      	ldr	r0, [pc, #368]	; (800616c <main+0x4b4>)
 8005ffc:	f7fb f85a 	bl	80010b4 <HAL_DAC_Start_DMA>
			score = score+1;
 8006000:	4b63      	ldr	r3, [pc, #396]	; (8006190 <main+0x4d8>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3301      	adds	r3, #1
 8006006:	4a62      	ldr	r2, [pc, #392]	; (8006190 <main+0x4d8>)
 8006008:	6013      	str	r3, [r2, #0]
			refreshAndPrint();
 800600a:	f7ff fce1 	bl	80059d0 <refreshAndPrint>
		  }
	  }

	  if( HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin)==1){
 800600e:	2101      	movs	r1, #1
 8006010:	4858      	ldr	r0, [pc, #352]	; (8006174 <main+0x4bc>)
 8006012:	f7fb ffa7 	bl	8001f64 <HAL_GPIO_ReadPin>
 8006016:	4603      	mov	r3, r0
 8006018:	2b01      	cmp	r3, #1
 800601a:	d153      	bne.n	80060c4 <main+0x40c>
		  if(HAL_GPIO_ReadPin (LED2_GPIO_Port, LED2_Pin)){
 800601c:	2140      	movs	r1, #64	; 0x40
 800601e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006022:	f7fb ff9f 	bl	8001f64 <HAL_GPIO_ReadPin>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d04b      	beq.n	80060c4 <main+0x40c>
			  	  	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800602c:	2200      	movs	r2, #0
 800602e:	2108      	movs	r1, #8
 8006030:	4851      	ldr	r0, [pc, #324]	; (8006178 <main+0x4c0>)
 8006032:	f7fb ffaf 	bl	8001f94 <HAL_GPIO_WritePin>
					  if(BSP_QSPI_Read((uint8_t *)play, 0x005622, 22050) != QSPI_OK){
 8006036:	f245 6222 	movw	r2, #22050	; 0x5622
 800603a:	f245 6122 	movw	r1, #22050	; 0x5622
 800603e:	484a      	ldr	r0, [pc, #296]	; (8006168 <main+0x4b0>)
 8006040:	f000 fd5a 	bl	8006af8 <BSP_QSPI_Read>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <main+0x396>
						  Error_Handler();
 800604a:	f000 fce3 	bl	8006a14 <Error_Handler>
					  }
				 	  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 800604e:	2308      	movs	r3, #8
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	f245 6322 	movw	r3, #22050	; 0x5622
 8006056:	4a44      	ldr	r2, [pc, #272]	; (8006168 <main+0x4b0>)
 8006058:	2100      	movs	r1, #0
 800605a:	4844      	ldr	r0, [pc, #272]	; (800616c <main+0x4b4>)
 800605c:	f7fb f82a 	bl	80010b4 <HAL_DAC_Start_DMA>
		 			  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8006060:	2200      	movs	r2, #0
 8006062:	2140      	movs	r1, #64	; 0x40
 8006064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006068:	f7fb ff94 	bl	8001f94 <HAL_GPIO_WritePin>
		 			  LED_2_status = 0;
 800606c:	4b4b      	ldr	r3, [pc, #300]	; (800619c <main+0x4e4>)
 800606e:	2200      	movs	r2, #0
 8006070:	601a      	str	r2, [r3, #0]
		 			  isDelaying = 1;
 8006072:	4b44      	ldr	r3, [pc, #272]	; (8006184 <main+0x4cc>)
 8006074:	2201      	movs	r2, #1
 8006076:	601a      	str	r2, [r3, #0]
		 			  HAL_Delay(200);
 8006078:	20c8      	movs	r0, #200	; 0xc8
 800607a:	f7fa fef3 	bl	8000e64 <HAL_Delay>
		 			  isDelaying = 0;
 800607e:	4b41      	ldr	r3, [pc, #260]	; (8006184 <main+0x4cc>)
 8006080:	2200      	movs	r2, #0
 8006082:	601a      	str	r2, [r3, #0]
		 			  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8006084:	2201      	movs	r2, #1
 8006086:	2108      	movs	r1, #8
 8006088:	483b      	ldr	r0, [pc, #236]	; (8006178 <main+0x4c0>)
 800608a:	f7fb ff83 	bl	8001f94 <HAL_GPIO_WritePin>
		 			  if(BSP_QSPI_Read((uint8_t *)play, 0x02AEAA, 22050) != QSPI_OK){
 800608e:	f245 6222 	movw	r2, #22050	; 0x5622
 8006092:	493d      	ldr	r1, [pc, #244]	; (8006188 <main+0x4d0>)
 8006094:	4834      	ldr	r0, [pc, #208]	; (8006168 <main+0x4b0>)
 8006096:	f000 fd2f 	bl	8006af8 <BSP_QSPI_Read>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <main+0x3ec>
		 				  Error_Handler();
 80060a0:	f000 fcb8 	bl	8006a14 <Error_Handler>
		 			  }
		 			  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, empty, 22050, DAC_ALIGN_8B_R);
 80060a4:	2308      	movs	r3, #8
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	f245 6322 	movw	r3, #22050	; 0x5622
 80060ac:	4a37      	ldr	r2, [pc, #220]	; (800618c <main+0x4d4>)
 80060ae:	2100      	movs	r1, #0
 80060b0:	482e      	ldr	r0, [pc, #184]	; (800616c <main+0x4b4>)
 80060b2:	f7fa ffff 	bl	80010b4 <HAL_DAC_Start_DMA>
		 			 score = score+1;
 80060b6:	4b36      	ldr	r3, [pc, #216]	; (8006190 <main+0x4d8>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3301      	adds	r3, #1
 80060bc:	4a34      	ldr	r2, [pc, #208]	; (8006190 <main+0x4d8>)
 80060be:	6013      	str	r3, [r2, #0]
		 			 refreshAndPrint();
 80060c0:	f7ff fc86 	bl	80059d0 <refreshAndPrint>
		  }
	  }

	  if( HAL_GPIO_ReadPin(PB3_GPIO_Port, PB3_Pin)==1){
 80060c4:	2108      	movs	r1, #8
 80060c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80060ca:	f7fb ff4b 	bl	8001f64 <HAL_GPIO_ReadPin>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d177      	bne.n	80061c4 <main+0x50c>
		  if(HAL_GPIO_ReadPin (LED3_GPIO_Port, LED3_Pin)){
 80060d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80060dc:	f7fb ff42 	bl	8001f64 <HAL_GPIO_ReadPin>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d06e      	beq.n	80061c4 <main+0x50c>
		 			  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80060e6:	2200      	movs	r2, #0
 80060e8:	2108      	movs	r1, #8
 80060ea:	4823      	ldr	r0, [pc, #140]	; (8006178 <main+0x4c0>)
 80060ec:	f7fb ff52 	bl	8001f94 <HAL_GPIO_WritePin>
					  if(BSP_QSPI_Read((uint8_t *)play, 0x00AC44, 22050) != QSPI_OK){
 80060f0:	f245 6222 	movw	r2, #22050	; 0x5622
 80060f4:	f64a 4144 	movw	r1, #44100	; 0xac44
 80060f8:	481b      	ldr	r0, [pc, #108]	; (8006168 <main+0x4b0>)
 80060fa:	f000 fcfd 	bl	8006af8 <BSP_QSPI_Read>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <main+0x450>
						  Error_Handler();
 8006104:	f000 fc86 	bl	8006a14 <Error_Handler>
					  }
				 	  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 8006108:	2308      	movs	r3, #8
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	f245 6322 	movw	r3, #22050	; 0x5622
 8006110:	4a15      	ldr	r2, [pc, #84]	; (8006168 <main+0x4b0>)
 8006112:	2100      	movs	r1, #0
 8006114:	4815      	ldr	r0, [pc, #84]	; (800616c <main+0x4b4>)
 8006116:	f7fa ffcd 	bl	80010b4 <HAL_DAC_Start_DMA>
		 			  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800611a:	2200      	movs	r2, #0
 800611c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006124:	f7fb ff36 	bl	8001f94 <HAL_GPIO_WritePin>
		 			  LED_3_status = 0;
 8006128:	4b1d      	ldr	r3, [pc, #116]	; (80061a0 <main+0x4e8>)
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]
		 			  isDelaying = 1;
 800612e:	4b15      	ldr	r3, [pc, #84]	; (8006184 <main+0x4cc>)
 8006130:	2201      	movs	r2, #1
 8006132:	601a      	str	r2, [r3, #0]
		 			  HAL_Delay(200);
 8006134:	20c8      	movs	r0, #200	; 0xc8
 8006136:	f7fa fe95 	bl	8000e64 <HAL_Delay>
		 			  isDelaying = 0;
 800613a:	4b12      	ldr	r3, [pc, #72]	; (8006184 <main+0x4cc>)
 800613c:	2200      	movs	r2, #0
 800613e:	601a      	str	r2, [r3, #0]
		 			  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8006140:	2201      	movs	r2, #1
 8006142:	2108      	movs	r1, #8
 8006144:	480c      	ldr	r0, [pc, #48]	; (8006178 <main+0x4c0>)
 8006146:	f7fb ff25 	bl	8001f94 <HAL_GPIO_WritePin>
		 			  if(BSP_QSPI_Read((uint8_t *)play, 0x02AEAA, 22050) != QSPI_OK){
 800614a:	f245 6222 	movw	r2, #22050	; 0x5622
 800614e:	490e      	ldr	r1, [pc, #56]	; (8006188 <main+0x4d0>)
 8006150:	4805      	ldr	r0, [pc, #20]	; (8006168 <main+0x4b0>)
 8006152:	f000 fcd1 	bl	8006af8 <BSP_QSPI_Read>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d023      	beq.n	80061a4 <main+0x4ec>
		 				  Error_Handler();
 800615c:	f000 fc5a 	bl	8006a14 <Error_Handler>
 8006160:	e020      	b.n	80061a4 <main+0x4ec>
 8006162:	bf00      	nop
 8006164:	2000ada4 	.word	0x2000ada4
 8006168:	20000094 	.word	0x20000094
 800616c:	2000ad6c 	.word	0x2000ad6c
 8006170:	48000800 	.word	0x48000800
 8006174:	48000400 	.word	0x48000400
 8006178:	48001000 	.word	0x48001000
 800617c:	0001aeaa 	.word	0x0001aeaa
 8006180:	2000acdc 	.word	0x2000acdc
 8006184:	2000acf0 	.word	0x2000acf0
 8006188:	0002aeaa 	.word	0x0002aeaa
 800618c:	200056b8 	.word	0x200056b8
 8006190:	2000acf4 	.word	0x2000acf4
 8006194:	48000c00 	.word	0x48000c00
 8006198:	2000ace0 	.word	0x2000ace0
 800619c:	2000ace4 	.word	0x2000ace4
 80061a0:	2000ace8 	.word	0x2000ace8
		 			  }
		 			  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, empty, 22050, DAC_ALIGN_8B_R);
 80061a4:	2308      	movs	r3, #8
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	f245 6322 	movw	r3, #22050	; 0x5622
 80061ac:	4a34      	ldr	r2, [pc, #208]	; (8006280 <main+0x5c8>)
 80061ae:	2100      	movs	r1, #0
 80061b0:	4834      	ldr	r0, [pc, #208]	; (8006284 <main+0x5cc>)
 80061b2:	f7fa ff7f 	bl	80010b4 <HAL_DAC_Start_DMA>
		 			 score = score+1;
 80061b6:	4b34      	ldr	r3, [pc, #208]	; (8006288 <main+0x5d0>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3301      	adds	r3, #1
 80061bc:	4a32      	ldr	r2, [pc, #200]	; (8006288 <main+0x5d0>)
 80061be:	6013      	str	r3, [r2, #0]
		 			 refreshAndPrint();
 80061c0:	f7ff fc06 	bl	80059d0 <refreshAndPrint>
		  }
	  }

	  if( HAL_GPIO_ReadPin(PB4_GPIO_Port, PB4_Pin)==1){
 80061c4:	2110      	movs	r1, #16
 80061c6:	4831      	ldr	r0, [pc, #196]	; (800628c <main+0x5d4>)
 80061c8:	f7fb fecc 	bl	8001f64 <HAL_GPIO_ReadPin>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	f47f ae67 	bne.w	8005ea2 <main+0x1ea>
		  if(HAL_GPIO_ReadPin (LED4_GPIO_Port, LED4_Pin)){
 80061d4:	2104      	movs	r1, #4
 80061d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061da:	f7fb fec3 	bl	8001f64 <HAL_GPIO_ReadPin>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f43f ae5e 	beq.w	8005ea2 <main+0x1ea>
		 			  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80061e6:	2200      	movs	r2, #0
 80061e8:	2108      	movs	r1, #8
 80061ea:	4829      	ldr	r0, [pc, #164]	; (8006290 <main+0x5d8>)
 80061ec:	f7fb fed2 	bl	8001f94 <HAL_GPIO_WritePin>
					  if(BSP_QSPI_Read((uint8_t *)play, 0x015888, 22050) != QSPI_OK){
 80061f0:	f245 6222 	movw	r2, #22050	; 0x5622
 80061f4:	4927      	ldr	r1, [pc, #156]	; (8006294 <main+0x5dc>)
 80061f6:	4828      	ldr	r0, [pc, #160]	; (8006298 <main+0x5e0>)
 80061f8:	f000 fc7e 	bl	8006af8 <BSP_QSPI_Read>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <main+0x54e>
						  Error_Handler();
 8006202:	f000 fc07 	bl	8006a14 <Error_Handler>
					  }
				 	  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 8006206:	2308      	movs	r3, #8
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	f245 6322 	movw	r3, #22050	; 0x5622
 800620e:	4a22      	ldr	r2, [pc, #136]	; (8006298 <main+0x5e0>)
 8006210:	2100      	movs	r1, #0
 8006212:	481c      	ldr	r0, [pc, #112]	; (8006284 <main+0x5cc>)
 8006214:	f7fa ff4e 	bl	80010b4 <HAL_DAC_Start_DMA>
		 			  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8006218:	2200      	movs	r2, #0
 800621a:	2104      	movs	r1, #4
 800621c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006220:	f7fb feb8 	bl	8001f94 <HAL_GPIO_WritePin>
		 			  LED_4_status = 0;
 8006224:	4b1d      	ldr	r3, [pc, #116]	; (800629c <main+0x5e4>)
 8006226:	2200      	movs	r2, #0
 8006228:	601a      	str	r2, [r3, #0]
		 			  isDelaying = 1;
 800622a:	4b1d      	ldr	r3, [pc, #116]	; (80062a0 <main+0x5e8>)
 800622c:	2201      	movs	r2, #1
 800622e:	601a      	str	r2, [r3, #0]
		 			  HAL_Delay(200);
 8006230:	20c8      	movs	r0, #200	; 0xc8
 8006232:	f7fa fe17 	bl	8000e64 <HAL_Delay>
		 			  isDelaying = 0;
 8006236:	4b1a      	ldr	r3, [pc, #104]	; (80062a0 <main+0x5e8>)
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]
		 			  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800623c:	2201      	movs	r2, #1
 800623e:	2108      	movs	r1, #8
 8006240:	4813      	ldr	r0, [pc, #76]	; (8006290 <main+0x5d8>)
 8006242:	f7fb fea7 	bl	8001f94 <HAL_GPIO_WritePin>
		 			  if(BSP_QSPI_Read((uint8_t *)play, 0x02AEAA, 22050) != QSPI_OK){
 8006246:	f245 6222 	movw	r2, #22050	; 0x5622
 800624a:	4916      	ldr	r1, [pc, #88]	; (80062a4 <main+0x5ec>)
 800624c:	4812      	ldr	r0, [pc, #72]	; (8006298 <main+0x5e0>)
 800624e:	f000 fc53 	bl	8006af8 <BSP_QSPI_Read>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <main+0x5a4>
		 				  Error_Handler();
 8006258:	f000 fbdc 	bl	8006a14 <Error_Handler>
		 			  }
		 			  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, empty, 22050, DAC_ALIGN_8B_R);
 800625c:	2308      	movs	r3, #8
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	f245 6322 	movw	r3, #22050	; 0x5622
 8006264:	4a06      	ldr	r2, [pc, #24]	; (8006280 <main+0x5c8>)
 8006266:	2100      	movs	r1, #0
 8006268:	4806      	ldr	r0, [pc, #24]	; (8006284 <main+0x5cc>)
 800626a:	f7fa ff23 	bl	80010b4 <HAL_DAC_Start_DMA>
		 			 refreshAndPrint();
 800626e:	f7ff fbaf 	bl	80059d0 <refreshAndPrint>
		 			score = score+1;
 8006272:	4b05      	ldr	r3, [pc, #20]	; (8006288 <main+0x5d0>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3301      	adds	r3, #1
 8006278:	4a03      	ldr	r2, [pc, #12]	; (8006288 <main+0x5d0>)
 800627a:	6013      	str	r3, [r2, #0]
	  if(HAL_GPIO_ReadPin (BluePB_GPIO_Port, BluePB_Pin)==0){
 800627c:	e611      	b.n	8005ea2 <main+0x1ea>
 800627e:	bf00      	nop
 8006280:	200056b8 	.word	0x200056b8
 8006284:	2000ad6c 	.word	0x2000ad6c
 8006288:	2000acf4 	.word	0x2000acf4
 800628c:	48000400 	.word	0x48000400
 8006290:	48001000 	.word	0x48001000
 8006294:	00015888 	.word	0x00015888
 8006298:	20000094 	.word	0x20000094
 800629c:	2000acec 	.word	0x2000acec
 80062a0:	2000acf0 	.word	0x2000acf0
 80062a4:	0002aeaa 	.word	0x0002aeaa

080062a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b096      	sub	sp, #88	; 0x58
 80062ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80062ae:	f107 0314 	add.w	r3, r7, #20
 80062b2:	2244      	movs	r2, #68	; 0x44
 80062b4:	2100      	movs	r1, #0
 80062b6:	4618      	mov	r0, r3
 80062b8:	f001 fb68 	bl	800798c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80062bc:	463b      	mov	r3, r7
 80062be:	2200      	movs	r2, #0
 80062c0:	601a      	str	r2, [r3, #0]
 80062c2:	605a      	str	r2, [r3, #4]
 80062c4:	609a      	str	r2, [r3, #8]
 80062c6:	60da      	str	r2, [r3, #12]
 80062c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80062ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80062ce:	f7fb feab 	bl	8002028 <HAL_PWREx_ControlVoltageScaling>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80062d8:	f000 fb9c 	bl	8006a14 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80062dc:	2310      	movs	r3, #16
 80062de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80062e0:	2301      	movs	r3, #1
 80062e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80062e4:	2300      	movs	r3, #0
 80062e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80062e8:	2360      	movs	r3, #96	; 0x60
 80062ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80062ec:	2302      	movs	r3, #2
 80062ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80062f0:	2301      	movs	r3, #1
 80062f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80062f4:	2301      	movs	r3, #1
 80062f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80062f8:	2328      	movs	r3, #40	; 0x28
 80062fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80062fc:	2307      	movs	r3, #7
 80062fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006300:	2302      	movs	r3, #2
 8006302:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006304:	2302      	movs	r3, #2
 8006306:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006308:	f107 0314 	add.w	r3, r7, #20
 800630c:	4618      	mov	r0, r3
 800630e:	f7fc fbc1 	bl	8002a94 <HAL_RCC_OscConfig>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8006318:	f000 fb7c 	bl	8006a14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800631c:	230f      	movs	r3, #15
 800631e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006320:	2303      	movs	r3, #3
 8006322:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006324:	2300      	movs	r3, #0
 8006326:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006328:	2300      	movs	r3, #0
 800632a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800632c:	2300      	movs	r3, #0
 800632e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006330:	463b      	mov	r3, r7
 8006332:	2104      	movs	r1, #4
 8006334:	4618      	mov	r0, r3
 8006336:	f7fc ff93 	bl	8003260 <HAL_RCC_ClockConfig>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8006340:	f000 fb68 	bl	8006a14 <Error_Handler>
  }
}
 8006344:	bf00      	nop
 8006346:	3758      	adds	r7, #88	; 0x58
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b08a      	sub	sp, #40	; 0x28
 8006350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8006352:	1d3b      	adds	r3, r7, #4
 8006354:	2224      	movs	r2, #36	; 0x24
 8006356:	2100      	movs	r1, #0
 8006358:	4618      	mov	r0, r3
 800635a:	f001 fb17 	bl	800798c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800635e:	4b12      	ldr	r3, [pc, #72]	; (80063a8 <MX_DAC1_Init+0x5c>)
 8006360:	4a12      	ldr	r2, [pc, #72]	; (80063ac <MX_DAC1_Init+0x60>)
 8006362:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006364:	4810      	ldr	r0, [pc, #64]	; (80063a8 <MX_DAC1_Init+0x5c>)
 8006366:	f7fa fe83 	bl	8001070 <HAL_DAC_Init>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8006370:	f000 fb50 	bl	8006a14 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006374:	2300      	movs	r3, #0
 8006376:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8006378:	2324      	movs	r3, #36	; 0x24
 800637a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800637c:	2300      	movs	r3, #0
 800637e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006380:	2300      	movs	r3, #0
 8006382:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006384:	2300      	movs	r3, #0
 8006386:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006388:	1d3b      	adds	r3, r7, #4
 800638a:	2200      	movs	r2, #0
 800638c:	4619      	mov	r1, r3
 800638e:	4806      	ldr	r0, [pc, #24]	; (80063a8 <MX_DAC1_Init+0x5c>)
 8006390:	f7fa ff70 	bl	8001274 <HAL_DAC_ConfigChannel>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800639a:	f000 fb3b 	bl	8006a14 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800639e:	bf00      	nop
 80063a0:	3728      	adds	r7, #40	; 0x28
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	2000ad6c 	.word	0x2000ad6c
 80063ac:	40007400 	.word	0x40007400

080063b0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80063b4:	4b0f      	ldr	r3, [pc, #60]	; (80063f4 <MX_QUADSPI_Init+0x44>)
 80063b6:	4a10      	ldr	r2, [pc, #64]	; (80063f8 <MX_QUADSPI_Init+0x48>)
 80063b8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80063ba:	4b0e      	ldr	r3, [pc, #56]	; (80063f4 <MX_QUADSPI_Init+0x44>)
 80063bc:	22ff      	movs	r2, #255	; 0xff
 80063be:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80063c0:	4b0c      	ldr	r3, [pc, #48]	; (80063f4 <MX_QUADSPI_Init+0x44>)
 80063c2:	2201      	movs	r2, #1
 80063c4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80063c6:	4b0b      	ldr	r3, [pc, #44]	; (80063f4 <MX_QUADSPI_Init+0x44>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80063cc:	4b09      	ldr	r3, [pc, #36]	; (80063f4 <MX_QUADSPI_Init+0x44>)
 80063ce:	2201      	movs	r2, #1
 80063d0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80063d2:	4b08      	ldr	r3, [pc, #32]	; (80063f4 <MX_QUADSPI_Init+0x44>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80063d8:	4b06      	ldr	r3, [pc, #24]	; (80063f4 <MX_QUADSPI_Init+0x44>)
 80063da:	2200      	movs	r2, #0
 80063dc:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80063de:	4805      	ldr	r0, [pc, #20]	; (80063f4 <MX_QUADSPI_Init+0x44>)
 80063e0:	f7fb fe78 	bl	80020d4 <HAL_QSPI_Init>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80063ea:	f000 fb13 	bl	8006a14 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80063ee:	bf00      	nop
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	2000af74 	.word	0x2000af74
 80063f8:	a0001000 	.word	0xa0001000

080063fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b088      	sub	sp, #32
 8006400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006402:	f107 0310 	add.w	r3, r7, #16
 8006406:	2200      	movs	r2, #0
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	605a      	str	r2, [r3, #4]
 800640c:	609a      	str	r2, [r3, #8]
 800640e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006410:	1d3b      	adds	r3, r7, #4
 8006412:	2200      	movs	r2, #0
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	605a      	str	r2, [r3, #4]
 8006418:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800641a:	4b1e      	ldr	r3, [pc, #120]	; (8006494 <MX_TIM2_Init+0x98>)
 800641c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006420:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006422:	4b1c      	ldr	r3, [pc, #112]	; (8006494 <MX_TIM2_Init+0x98>)
 8006424:	2200      	movs	r2, #0
 8006426:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006428:	4b1a      	ldr	r3, [pc, #104]	; (8006494 <MX_TIM2_Init+0x98>)
 800642a:	2200      	movs	r2, #0
 800642c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 800642e:	4b19      	ldr	r3, [pc, #100]	; (8006494 <MX_TIM2_Init+0x98>)
 8006430:	f240 7216 	movw	r2, #1814	; 0x716
 8006434:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006436:	4b17      	ldr	r3, [pc, #92]	; (8006494 <MX_TIM2_Init+0x98>)
 8006438:	2200      	movs	r2, #0
 800643a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800643c:	4b15      	ldr	r3, [pc, #84]	; (8006494 <MX_TIM2_Init+0x98>)
 800643e:	2200      	movs	r2, #0
 8006440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006442:	4814      	ldr	r0, [pc, #80]	; (8006494 <MX_TIM2_Init+0x98>)
 8006444:	f7fd fe00 	bl	8004048 <HAL_TIM_Base_Init>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800644e:	f000 fae1 	bl	8006a14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006456:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006458:	f107 0310 	add.w	r3, r7, #16
 800645c:	4619      	mov	r1, r3
 800645e:	480d      	ldr	r0, [pc, #52]	; (8006494 <MX_TIM2_Init+0x98>)
 8006460:	f7fd ffd9 	bl	8004416 <HAL_TIM_ConfigClockSource>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800646a:	f000 fad3 	bl	8006a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800646e:	2320      	movs	r3, #32
 8006470:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006472:	2300      	movs	r3, #0
 8006474:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006476:	1d3b      	adds	r3, r7, #4
 8006478:	4619      	mov	r1, r3
 800647a:	4806      	ldr	r0, [pc, #24]	; (8006494 <MX_TIM2_Init+0x98>)
 800647c:	f7fe f9ee 	bl	800485c <HAL_TIMEx_MasterConfigSynchronization>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8006486:	f000 fac5 	bl	8006a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800648a:	bf00      	nop
 800648c:	3720      	adds	r7, #32
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	2000af28 	.word	0x2000af28

08006498 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800649c:	4b14      	ldr	r3, [pc, #80]	; (80064f0 <MX_USART1_UART_Init+0x58>)
 800649e:	4a15      	ldr	r2, [pc, #84]	; (80064f4 <MX_USART1_UART_Init+0x5c>)
 80064a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80064a2:	4b13      	ldr	r3, [pc, #76]	; (80064f0 <MX_USART1_UART_Init+0x58>)
 80064a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80064a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80064aa:	4b11      	ldr	r3, [pc, #68]	; (80064f0 <MX_USART1_UART_Init+0x58>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80064b0:	4b0f      	ldr	r3, [pc, #60]	; (80064f0 <MX_USART1_UART_Init+0x58>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80064b6:	4b0e      	ldr	r3, [pc, #56]	; (80064f0 <MX_USART1_UART_Init+0x58>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80064bc:	4b0c      	ldr	r3, [pc, #48]	; (80064f0 <MX_USART1_UART_Init+0x58>)
 80064be:	220c      	movs	r2, #12
 80064c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80064c2:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <MX_USART1_UART_Init+0x58>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80064c8:	4b09      	ldr	r3, [pc, #36]	; (80064f0 <MX_USART1_UART_Init+0x58>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80064ce:	4b08      	ldr	r3, [pc, #32]	; (80064f0 <MX_USART1_UART_Init+0x58>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80064d4:	4b06      	ldr	r3, [pc, #24]	; (80064f0 <MX_USART1_UART_Init+0x58>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80064da:	4805      	ldr	r0, [pc, #20]	; (80064f0 <MX_USART1_UART_Init+0x58>)
 80064dc:	f7fe fa64 	bl	80049a8 <HAL_UART_Init>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80064e6:	f000 fa95 	bl	8006a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80064ea:	bf00      	nop
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	2000ae88 	.word	0x2000ae88
 80064f4:	40013800 	.word	0x40013800

080064f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80064fe:	4b0c      	ldr	r3, [pc, #48]	; (8006530 <MX_DMA_Init+0x38>)
 8006500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006502:	4a0b      	ldr	r2, [pc, #44]	; (8006530 <MX_DMA_Init+0x38>)
 8006504:	f043 0301 	orr.w	r3, r3, #1
 8006508:	6493      	str	r3, [r2, #72]	; 0x48
 800650a:	4b09      	ldr	r3, [pc, #36]	; (8006530 <MX_DMA_Init+0x38>)
 800650c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	607b      	str	r3, [r7, #4]
 8006514:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8006516:	2200      	movs	r2, #0
 8006518:	2100      	movs	r1, #0
 800651a:	200d      	movs	r0, #13
 800651c:	f7fa fd7e 	bl	800101c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8006520:	200d      	movs	r0, #13
 8006522:	f7fa fd97 	bl	8001054 <HAL_NVIC_EnableIRQ>

}
 8006526:	bf00      	nop
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	40021000 	.word	0x40021000

08006534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b08a      	sub	sp, #40	; 0x28
 8006538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800653a:	f107 0314 	add.w	r3, r7, #20
 800653e:	2200      	movs	r2, #0
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	605a      	str	r2, [r3, #4]
 8006544:	609a      	str	r2, [r3, #8]
 8006546:	60da      	str	r2, [r3, #12]
 8006548:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800654a:	4b63      	ldr	r3, [pc, #396]	; (80066d8 <MX_GPIO_Init+0x1a4>)
 800654c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800654e:	4a62      	ldr	r2, [pc, #392]	; (80066d8 <MX_GPIO_Init+0x1a4>)
 8006550:	f043 0310 	orr.w	r3, r3, #16
 8006554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006556:	4b60      	ldr	r3, [pc, #384]	; (80066d8 <MX_GPIO_Init+0x1a4>)
 8006558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800655a:	f003 0310 	and.w	r3, r3, #16
 800655e:	613b      	str	r3, [r7, #16]
 8006560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006562:	4b5d      	ldr	r3, [pc, #372]	; (80066d8 <MX_GPIO_Init+0x1a4>)
 8006564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006566:	4a5c      	ldr	r2, [pc, #368]	; (80066d8 <MX_GPIO_Init+0x1a4>)
 8006568:	f043 0304 	orr.w	r3, r3, #4
 800656c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800656e:	4b5a      	ldr	r3, [pc, #360]	; (80066d8 <MX_GPIO_Init+0x1a4>)
 8006570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006572:	f003 0304 	and.w	r3, r3, #4
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800657a:	4b57      	ldr	r3, [pc, #348]	; (80066d8 <MX_GPIO_Init+0x1a4>)
 800657c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800657e:	4a56      	ldr	r2, [pc, #344]	; (80066d8 <MX_GPIO_Init+0x1a4>)
 8006580:	f043 0301 	orr.w	r3, r3, #1
 8006584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006586:	4b54      	ldr	r3, [pc, #336]	; (80066d8 <MX_GPIO_Init+0x1a4>)
 8006588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	60bb      	str	r3, [r7, #8]
 8006590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006592:	4b51      	ldr	r3, [pc, #324]	; (80066d8 <MX_GPIO_Init+0x1a4>)
 8006594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006596:	4a50      	ldr	r2, [pc, #320]	; (80066d8 <MX_GPIO_Init+0x1a4>)
 8006598:	f043 0302 	orr.w	r3, r3, #2
 800659c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800659e:	4b4e      	ldr	r3, [pc, #312]	; (80066d8 <MX_GPIO_Init+0x1a4>)
 80065a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	607b      	str	r3, [r7, #4]
 80065a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80065aa:	4b4b      	ldr	r3, [pc, #300]	; (80066d8 <MX_GPIO_Init+0x1a4>)
 80065ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ae:	4a4a      	ldr	r2, [pc, #296]	; (80066d8 <MX_GPIO_Init+0x1a4>)
 80065b0:	f043 0308 	orr.w	r3, r3, #8
 80065b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065b6:	4b48      	ldr	r3, [pc, #288]	; (80066d8 <MX_GPIO_Init+0x1a4>)
 80065b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ba:	f003 0308 	and.w	r3, r3, #8
 80065be:	603b      	str	r3, [r7, #0]
 80065c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80065c2:	2201      	movs	r2, #1
 80065c4:	2108      	movs	r1, #8
 80065c6:	4845      	ldr	r0, [pc, #276]	; (80066dc <MX_GPIO_Init+0x1a8>)
 80065c8:	f7fb fce4 	bl	8001f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80065cc:	2200      	movs	r2, #0
 80065ce:	f248 0164 	movw	r1, #32868	; 0x8064
 80065d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065d6:	f7fb fcdd 	bl	8001f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80065da:	2200      	movs	r2, #0
 80065dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80065e0:	483f      	ldr	r0, [pc, #252]	; (80066e0 <MX_GPIO_Init+0x1ac>)
 80065e2:	f7fb fcd7 	bl	8001f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80065e6:	2308      	movs	r3, #8
 80065e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065ea:	2301      	movs	r3, #1
 80065ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065f2:	2300      	movs	r3, #0
 80065f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80065f6:	f107 0314 	add.w	r3, r7, #20
 80065fa:	4619      	mov	r1, r3
 80065fc:	4837      	ldr	r0, [pc, #220]	; (80066dc <MX_GPIO_Init+0x1a8>)
 80065fe:	f7fb fa13 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : BluePB_Pin */
  GPIO_InitStruct.Pin = BluePB_Pin;
 8006602:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006608:	4b36      	ldr	r3, [pc, #216]	; (80066e4 <MX_GPIO_Init+0x1b0>)
 800660a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800660c:	2300      	movs	r3, #0
 800660e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BluePB_GPIO_Port, &GPIO_InitStruct);
 8006610:	f107 0314 	add.w	r3, r7, #20
 8006614:	4619      	mov	r1, r3
 8006616:	4834      	ldr	r0, [pc, #208]	; (80066e8 <MX_GPIO_Init+0x1b4>)
 8006618:	f7fb fa06 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 800661c:	f248 0364 	movw	r3, #32868	; 0x8064
 8006620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006622:	2301      	movs	r3, #1
 8006624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006626:	2300      	movs	r3, #0
 8006628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800662a:	2300      	movs	r3, #0
 800662c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800662e:	f107 0314 	add.w	r3, r7, #20
 8006632:	4619      	mov	r1, r3
 8006634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006638:	f7fb f9f6 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3_Pin */
  GPIO_InitStruct.Pin = PB3_Pin;
 800663c:	2308      	movs	r3, #8
 800663e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006640:	4b28      	ldr	r3, [pc, #160]	; (80066e4 <MX_GPIO_Init+0x1b0>)
 8006642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006644:	2300      	movs	r3, #0
 8006646:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB3_GPIO_Port, &GPIO_InitStruct);
 8006648:	f107 0314 	add.w	r3, r7, #20
 800664c:	4619      	mov	r1, r3
 800664e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006652:	f7fb f9e9 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2_Pin PB1 PB4_Pin */
  GPIO_InitStruct.Pin = PB2_Pin|GPIO_PIN_1|PB4_Pin;
 8006656:	2313      	movs	r3, #19
 8006658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800665a:	4b22      	ldr	r3, [pc, #136]	; (80066e4 <MX_GPIO_Init+0x1b0>)
 800665c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800665e:	2300      	movs	r3, #0
 8006660:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006662:	f107 0314 	add.w	r3, r7, #20
 8006666:	4619      	mov	r1, r3
 8006668:	481d      	ldr	r0, [pc, #116]	; (80066e0 <MX_GPIO_Init+0x1ac>)
 800666a:	f7fb f9dd 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROW1_Pin */
  GPIO_InitStruct.Pin = ROW1_Pin;
 800666e:	2304      	movs	r3, #4
 8006670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006672:	2300      	movs	r3, #0
 8006674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006676:	2300      	movs	r3, #0
 8006678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROW1_GPIO_Port, &GPIO_InitStruct);
 800667a:	f107 0314 	add.w	r3, r7, #20
 800667e:	4619      	mov	r1, r3
 8006680:	4817      	ldr	r0, [pc, #92]	; (80066e0 <MX_GPIO_Init+0x1ac>)
 8006682:	f7fb f9d1 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8006686:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800668a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800668c:	2301      	movs	r3, #1
 800668e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006690:	2300      	movs	r3, #0
 8006692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006694:	2300      	movs	r3, #0
 8006696:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8006698:	f107 0314 	add.w	r3, r7, #20
 800669c:	4619      	mov	r1, r3
 800669e:	4810      	ldr	r0, [pc, #64]	; (80066e0 <MX_GPIO_Init+0x1ac>)
 80066a0:	f7fb f9c2 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1_Pin */
  GPIO_InitStruct.Pin = PB1_Pin;
 80066a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80066a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80066aa:	4b0e      	ldr	r3, [pc, #56]	; (80066e4 <MX_GPIO_Init+0x1b0>)
 80066ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ae:	2300      	movs	r3, #0
 80066b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB1_GPIO_Port, &GPIO_InitStruct);
 80066b2:	f107 0314 	add.w	r3, r7, #20
 80066b6:	4619      	mov	r1, r3
 80066b8:	480c      	ldr	r0, [pc, #48]	; (80066ec <MX_GPIO_Init+0x1b8>)
 80066ba:	f7fb f9b5 	bl	8001a28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80066be:	2200      	movs	r2, #0
 80066c0:	2100      	movs	r1, #0
 80066c2:	2028      	movs	r0, #40	; 0x28
 80066c4:	f7fa fcaa 	bl	800101c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80066c8:	2028      	movs	r0, #40	; 0x28
 80066ca:	f7fa fcc3 	bl	8001054 <HAL_NVIC_EnableIRQ>

}
 80066ce:	bf00      	nop
 80066d0:	3728      	adds	r7, #40	; 0x28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	40021000 	.word	0x40021000
 80066dc:	48001000 	.word	0x48001000
 80066e0:	48000400 	.word	0x48000400
 80066e4:	10110000 	.word	0x10110000
 80066e8:	48000800 	.word	0x48000800
 80066ec:	48000c00 	.word	0x48000c00

080066f0 <HAL_DAC_ConvCpltCallbackCh1>:

/* USER CODE BEGIN 4 */
int lower = 1;
int upper = 3;
int DAC_status = 0;
void HAL_DAC_ConvCpltCallbackCh1 (DAC_HandleTypeDef * hdac){
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b088      	sub	sp, #32
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
	if(isDelaying == 1) return;
 80066f8:	4bb3      	ldr	r3, [pc, #716]	; (80069c8 <HAL_DAC_ConvCpltCallbackCh1+0x2d8>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	f000 815e 	beq.w	80069be <HAL_DAC_ConvCpltCallbackCh1+0x2ce>
					  Error_Handler();
		}
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, empty, 22050, DAC_ALIGN_8B_R);
		DAC_status = 0;
	}*/
	int randomNumber0 = (rand() % (upper - lower + 1)) + lower;
 8006702:	f001 f94b 	bl	800799c <rand>
 8006706:	4602      	mov	r2, r0
 8006708:	4bb0      	ldr	r3, [pc, #704]	; (80069cc <HAL_DAC_ConvCpltCallbackCh1+0x2dc>)
 800670a:	6819      	ldr	r1, [r3, #0]
 800670c:	4bb0      	ldr	r3, [pc, #704]	; (80069d0 <HAL_DAC_ConvCpltCallbackCh1+0x2e0>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	1acb      	subs	r3, r1, r3
 8006712:	3301      	adds	r3, #1
 8006714:	fb92 f1f3 	sdiv	r1, r2, r3
 8006718:	fb03 f301 	mul.w	r3, r3, r1
 800671c:	1ad2      	subs	r2, r2, r3
 800671e:	4bac      	ldr	r3, [pc, #688]	; (80069d0 <HAL_DAC_ConvCpltCallbackCh1+0x2e0>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4413      	add	r3, r2
 8006724:	61fb      	str	r3, [r7, #28]
	int randomNumber1 = (rand() % (upper - lower + 1)) + lower;
 8006726:	f001 f939 	bl	800799c <rand>
 800672a:	4602      	mov	r2, r0
 800672c:	4ba7      	ldr	r3, [pc, #668]	; (80069cc <HAL_DAC_ConvCpltCallbackCh1+0x2dc>)
 800672e:	6819      	ldr	r1, [r3, #0]
 8006730:	4ba7      	ldr	r3, [pc, #668]	; (80069d0 <HAL_DAC_ConvCpltCallbackCh1+0x2e0>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	1acb      	subs	r3, r1, r3
 8006736:	3301      	adds	r3, #1
 8006738:	fb92 f1f3 	sdiv	r1, r2, r3
 800673c:	fb03 f301 	mul.w	r3, r3, r1
 8006740:	1ad2      	subs	r2, r2, r3
 8006742:	4ba3      	ldr	r3, [pc, #652]	; (80069d0 <HAL_DAC_ConvCpltCallbackCh1+0x2e0>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4413      	add	r3, r2
 8006748:	61bb      	str	r3, [r7, #24]
	int randomNumber2 = (rand() % (upper - lower + 1)) + lower;
 800674a:	f001 f927 	bl	800799c <rand>
 800674e:	4602      	mov	r2, r0
 8006750:	4b9e      	ldr	r3, [pc, #632]	; (80069cc <HAL_DAC_ConvCpltCallbackCh1+0x2dc>)
 8006752:	6819      	ldr	r1, [r3, #0]
 8006754:	4b9e      	ldr	r3, [pc, #632]	; (80069d0 <HAL_DAC_ConvCpltCallbackCh1+0x2e0>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	1acb      	subs	r3, r1, r3
 800675a:	3301      	adds	r3, #1
 800675c:	fb92 f1f3 	sdiv	r1, r2, r3
 8006760:	fb03 f301 	mul.w	r3, r3, r1
 8006764:	1ad2      	subs	r2, r2, r3
 8006766:	4b9a      	ldr	r3, [pc, #616]	; (80069d0 <HAL_DAC_ConvCpltCallbackCh1+0x2e0>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4413      	add	r3, r2
 800676c:	617b      	str	r3, [r7, #20]
	int randomNumber3 = (rand() % (upper - lower + 1)) + lower;
 800676e:	f001 f915 	bl	800799c <rand>
 8006772:	4602      	mov	r2, r0
 8006774:	4b95      	ldr	r3, [pc, #596]	; (80069cc <HAL_DAC_ConvCpltCallbackCh1+0x2dc>)
 8006776:	6819      	ldr	r1, [r3, #0]
 8006778:	4b95      	ldr	r3, [pc, #596]	; (80069d0 <HAL_DAC_ConvCpltCallbackCh1+0x2e0>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	1acb      	subs	r3, r1, r3
 800677e:	3301      	adds	r3, #1
 8006780:	fb92 f1f3 	sdiv	r1, r2, r3
 8006784:	fb03 f301 	mul.w	r3, r3, r1
 8006788:	1ad2      	subs	r2, r2, r3
 800678a:	4b91      	ldr	r3, [pc, #580]	; (80069d0 <HAL_DAC_ConvCpltCallbackCh1+0x2e0>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4413      	add	r3, r2
 8006790:	613b      	str	r3, [r7, #16]
	int randomNumber4 = (rand() % (upper - lower + 1)) + lower;
 8006792:	f001 f903 	bl	800799c <rand>
 8006796:	4602      	mov	r2, r0
 8006798:	4b8c      	ldr	r3, [pc, #560]	; (80069cc <HAL_DAC_ConvCpltCallbackCh1+0x2dc>)
 800679a:	6819      	ldr	r1, [r3, #0]
 800679c:	4b8c      	ldr	r3, [pc, #560]	; (80069d0 <HAL_DAC_ConvCpltCallbackCh1+0x2e0>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	1acb      	subs	r3, r1, r3
 80067a2:	3301      	adds	r3, #1
 80067a4:	fb92 f1f3 	sdiv	r1, r2, r3
 80067a8:	fb03 f301 	mul.w	r3, r3, r1
 80067ac:	1ad2      	subs	r2, r2, r3
 80067ae:	4b88      	ldr	r3, [pc, #544]	; (80069d0 <HAL_DAC_ConvCpltCallbackCh1+0x2e0>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4413      	add	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]

	if(randomNumber0 % 3 == 0 && LED_0_status ==0 ){
 80067b6:	69f9      	ldr	r1, [r7, #28]
 80067b8:	4b86      	ldr	r3, [pc, #536]	; (80069d4 <HAL_DAC_ConvCpltCallbackCh1+0x2e4>)
 80067ba:	fb83 3201 	smull	r3, r2, r3, r1
 80067be:	17cb      	asrs	r3, r1, #31
 80067c0:	1ad2      	subs	r2, r2, r3
 80067c2:	4613      	mov	r3, r2
 80067c4:	005b      	lsls	r3, r3, #1
 80067c6:	4413      	add	r3, r2
 80067c8:	1aca      	subs	r2, r1, r3
 80067ca:	2a00      	cmp	r2, #0
 80067cc:	d10d      	bne.n	80067ea <HAL_DAC_ConvCpltCallbackCh1+0xfa>
 80067ce:	4b82      	ldr	r3, [pc, #520]	; (80069d8 <HAL_DAC_ConvCpltCallbackCh1+0x2e8>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d109      	bne.n	80067ea <HAL_DAC_ConvCpltCallbackCh1+0xfa>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80067d6:	2201      	movs	r2, #1
 80067d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80067dc:	487f      	ldr	r0, [pc, #508]	; (80069dc <HAL_DAC_ConvCpltCallbackCh1+0x2ec>)
 80067de:	f7fb fbd9 	bl	8001f94 <HAL_GPIO_WritePin>
		LED_0_status = 1;
 80067e2:	4b7d      	ldr	r3, [pc, #500]	; (80069d8 <HAL_DAC_ConvCpltCallbackCh1+0x2e8>)
 80067e4:	2201      	movs	r2, #1
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	e018      	b.n	800681c <HAL_DAC_ConvCpltCallbackCh1+0x12c>
	}
	else if(randomNumber0 % 3 == 0 && LED_0_status ==1 ){
 80067ea:	69f9      	ldr	r1, [r7, #28]
 80067ec:	4b79      	ldr	r3, [pc, #484]	; (80069d4 <HAL_DAC_ConvCpltCallbackCh1+0x2e4>)
 80067ee:	fb83 3201 	smull	r3, r2, r3, r1
 80067f2:	17cb      	asrs	r3, r1, #31
 80067f4:	1ad2      	subs	r2, r2, r3
 80067f6:	4613      	mov	r3, r2
 80067f8:	005b      	lsls	r3, r3, #1
 80067fa:	4413      	add	r3, r2
 80067fc:	1aca      	subs	r2, r1, r3
 80067fe:	2a00      	cmp	r2, #0
 8006800:	d10c      	bne.n	800681c <HAL_DAC_ConvCpltCallbackCh1+0x12c>
 8006802:	4b75      	ldr	r3, [pc, #468]	; (80069d8 <HAL_DAC_ConvCpltCallbackCh1+0x2e8>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d108      	bne.n	800681c <HAL_DAC_ConvCpltCallbackCh1+0x12c>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800680a:	2200      	movs	r2, #0
 800680c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006810:	4872      	ldr	r0, [pc, #456]	; (80069dc <HAL_DAC_ConvCpltCallbackCh1+0x2ec>)
 8006812:	f7fb fbbf 	bl	8001f94 <HAL_GPIO_WritePin>
			LED_0_status = 0;
 8006816:	4b70      	ldr	r3, [pc, #448]	; (80069d8 <HAL_DAC_ConvCpltCallbackCh1+0x2e8>)
 8006818:	2200      	movs	r2, #0
 800681a:	601a      	str	r2, [r3, #0]
	}

	if(randomNumber1 % 3 == 0 && LED_0_status ==0 ){
 800681c:	69b9      	ldr	r1, [r7, #24]
 800681e:	4b6d      	ldr	r3, [pc, #436]	; (80069d4 <HAL_DAC_ConvCpltCallbackCh1+0x2e4>)
 8006820:	fb83 3201 	smull	r3, r2, r3, r1
 8006824:	17cb      	asrs	r3, r1, #31
 8006826:	1ad2      	subs	r2, r2, r3
 8006828:	4613      	mov	r3, r2
 800682a:	005b      	lsls	r3, r3, #1
 800682c:	4413      	add	r3, r2
 800682e:	1aca      	subs	r2, r1, r3
 8006830:	2a00      	cmp	r2, #0
 8006832:	d10d      	bne.n	8006850 <HAL_DAC_ConvCpltCallbackCh1+0x160>
 8006834:	4b68      	ldr	r3, [pc, #416]	; (80069d8 <HAL_DAC_ConvCpltCallbackCh1+0x2e8>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d109      	bne.n	8006850 <HAL_DAC_ConvCpltCallbackCh1+0x160>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,GPIO_PIN_SET);
 800683c:	2201      	movs	r2, #1
 800683e:	2120      	movs	r1, #32
 8006840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006844:	f7fb fba6 	bl	8001f94 <HAL_GPIO_WritePin>
			LED_1_status = 1;
 8006848:	4b65      	ldr	r3, [pc, #404]	; (80069e0 <HAL_DAC_ConvCpltCallbackCh1+0x2f0>)
 800684a:	2201      	movs	r2, #1
 800684c:	601a      	str	r2, [r3, #0]
 800684e:	e018      	b.n	8006882 <HAL_DAC_ConvCpltCallbackCh1+0x192>
	}
	else if(randomNumber1 % 3 == 0 && LED_0_status ==1 ){
 8006850:	69b9      	ldr	r1, [r7, #24]
 8006852:	4b60      	ldr	r3, [pc, #384]	; (80069d4 <HAL_DAC_ConvCpltCallbackCh1+0x2e4>)
 8006854:	fb83 3201 	smull	r3, r2, r3, r1
 8006858:	17cb      	asrs	r3, r1, #31
 800685a:	1ad2      	subs	r2, r2, r3
 800685c:	4613      	mov	r3, r2
 800685e:	005b      	lsls	r3, r3, #1
 8006860:	4413      	add	r3, r2
 8006862:	1aca      	subs	r2, r1, r3
 8006864:	2a00      	cmp	r2, #0
 8006866:	d10c      	bne.n	8006882 <HAL_DAC_ConvCpltCallbackCh1+0x192>
 8006868:	4b5b      	ldr	r3, [pc, #364]	; (80069d8 <HAL_DAC_ConvCpltCallbackCh1+0x2e8>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d108      	bne.n	8006882 <HAL_DAC_ConvCpltCallbackCh1+0x192>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8006870:	2200      	movs	r2, #0
 8006872:	2120      	movs	r1, #32
 8006874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006878:	f7fb fb8c 	bl	8001f94 <HAL_GPIO_WritePin>
			LED_1_status = 0;
 800687c:	4b58      	ldr	r3, [pc, #352]	; (80069e0 <HAL_DAC_ConvCpltCallbackCh1+0x2f0>)
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]
	}

	if(randomNumber2 % 3 == 0 && LED_0_status ==0 ){
 8006882:	6979      	ldr	r1, [r7, #20]
 8006884:	4b53      	ldr	r3, [pc, #332]	; (80069d4 <HAL_DAC_ConvCpltCallbackCh1+0x2e4>)
 8006886:	fb83 3201 	smull	r3, r2, r3, r1
 800688a:	17cb      	asrs	r3, r1, #31
 800688c:	1ad2      	subs	r2, r2, r3
 800688e:	4613      	mov	r3, r2
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	4413      	add	r3, r2
 8006894:	1aca      	subs	r2, r1, r3
 8006896:	2a00      	cmp	r2, #0
 8006898:	d10d      	bne.n	80068b6 <HAL_DAC_ConvCpltCallbackCh1+0x1c6>
 800689a:	4b4f      	ldr	r3, [pc, #316]	; (80069d8 <HAL_DAC_ConvCpltCallbackCh1+0x2e8>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d109      	bne.n	80068b6 <HAL_DAC_ConvCpltCallbackCh1+0x1c6>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80068a2:	2201      	movs	r2, #1
 80068a4:	2140      	movs	r1, #64	; 0x40
 80068a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80068aa:	f7fb fb73 	bl	8001f94 <HAL_GPIO_WritePin>
			LED_2_status = 1;
 80068ae:	4b4d      	ldr	r3, [pc, #308]	; (80069e4 <HAL_DAC_ConvCpltCallbackCh1+0x2f4>)
 80068b0:	2201      	movs	r2, #1
 80068b2:	601a      	str	r2, [r3, #0]
 80068b4:	e018      	b.n	80068e8 <HAL_DAC_ConvCpltCallbackCh1+0x1f8>
	}
	else if(randomNumber2 % 3 == 0 && LED_0_status ==1 ){
 80068b6:	6979      	ldr	r1, [r7, #20]
 80068b8:	4b46      	ldr	r3, [pc, #280]	; (80069d4 <HAL_DAC_ConvCpltCallbackCh1+0x2e4>)
 80068ba:	fb83 3201 	smull	r3, r2, r3, r1
 80068be:	17cb      	asrs	r3, r1, #31
 80068c0:	1ad2      	subs	r2, r2, r3
 80068c2:	4613      	mov	r3, r2
 80068c4:	005b      	lsls	r3, r3, #1
 80068c6:	4413      	add	r3, r2
 80068c8:	1aca      	subs	r2, r1, r3
 80068ca:	2a00      	cmp	r2, #0
 80068cc:	d10c      	bne.n	80068e8 <HAL_DAC_ConvCpltCallbackCh1+0x1f8>
 80068ce:	4b42      	ldr	r3, [pc, #264]	; (80069d8 <HAL_DAC_ConvCpltCallbackCh1+0x2e8>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d108      	bne.n	80068e8 <HAL_DAC_ConvCpltCallbackCh1+0x1f8>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80068d6:	2200      	movs	r2, #0
 80068d8:	2140      	movs	r1, #64	; 0x40
 80068da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80068de:	f7fb fb59 	bl	8001f94 <HAL_GPIO_WritePin>
			LED_2_status = 0;
 80068e2:	4b40      	ldr	r3, [pc, #256]	; (80069e4 <HAL_DAC_ConvCpltCallbackCh1+0x2f4>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	601a      	str	r2, [r3, #0]
	}

	if(randomNumber3 % 3 == 0 && LED_0_status ==0 ){
 80068e8:	6939      	ldr	r1, [r7, #16]
 80068ea:	4b3a      	ldr	r3, [pc, #232]	; (80069d4 <HAL_DAC_ConvCpltCallbackCh1+0x2e4>)
 80068ec:	fb83 3201 	smull	r3, r2, r3, r1
 80068f0:	17cb      	asrs	r3, r1, #31
 80068f2:	1ad2      	subs	r2, r2, r3
 80068f4:	4613      	mov	r3, r2
 80068f6:	005b      	lsls	r3, r3, #1
 80068f8:	4413      	add	r3, r2
 80068fa:	1aca      	subs	r2, r1, r3
 80068fc:	2a00      	cmp	r2, #0
 80068fe:	d10e      	bne.n	800691e <HAL_DAC_ConvCpltCallbackCh1+0x22e>
 8006900:	4b35      	ldr	r3, [pc, #212]	; (80069d8 <HAL_DAC_ConvCpltCallbackCh1+0x2e8>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10a      	bne.n	800691e <HAL_DAC_ConvCpltCallbackCh1+0x22e>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8006908:	2201      	movs	r2, #1
 800690a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800690e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006912:	f7fb fb3f 	bl	8001f94 <HAL_GPIO_WritePin>
			LED_3_status = 1;
 8006916:	4b34      	ldr	r3, [pc, #208]	; (80069e8 <HAL_DAC_ConvCpltCallbackCh1+0x2f8>)
 8006918:	2201      	movs	r2, #1
 800691a:	601a      	str	r2, [r3, #0]
 800691c:	e019      	b.n	8006952 <HAL_DAC_ConvCpltCallbackCh1+0x262>
	}
	else if(randomNumber3 % 3 == 0 && LED_0_status ==1 ){
 800691e:	6939      	ldr	r1, [r7, #16]
 8006920:	4b2c      	ldr	r3, [pc, #176]	; (80069d4 <HAL_DAC_ConvCpltCallbackCh1+0x2e4>)
 8006922:	fb83 3201 	smull	r3, r2, r3, r1
 8006926:	17cb      	asrs	r3, r1, #31
 8006928:	1ad2      	subs	r2, r2, r3
 800692a:	4613      	mov	r3, r2
 800692c:	005b      	lsls	r3, r3, #1
 800692e:	4413      	add	r3, r2
 8006930:	1aca      	subs	r2, r1, r3
 8006932:	2a00      	cmp	r2, #0
 8006934:	d10d      	bne.n	8006952 <HAL_DAC_ConvCpltCallbackCh1+0x262>
 8006936:	4b28      	ldr	r3, [pc, #160]	; (80069d8 <HAL_DAC_ConvCpltCallbackCh1+0x2e8>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d109      	bne.n	8006952 <HAL_DAC_ConvCpltCallbackCh1+0x262>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800693e:	2200      	movs	r2, #0
 8006940:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006948:	f7fb fb24 	bl	8001f94 <HAL_GPIO_WritePin>
			LED_3_status = 0;
 800694c:	4b26      	ldr	r3, [pc, #152]	; (80069e8 <HAL_DAC_ConvCpltCallbackCh1+0x2f8>)
 800694e:	2200      	movs	r2, #0
 8006950:	601a      	str	r2, [r3, #0]
	}

	if(randomNumber4 % 3 == 0 && LED_0_status ==0 ){
 8006952:	68f9      	ldr	r1, [r7, #12]
 8006954:	4b1f      	ldr	r3, [pc, #124]	; (80069d4 <HAL_DAC_ConvCpltCallbackCh1+0x2e4>)
 8006956:	fb83 3201 	smull	r3, r2, r3, r1
 800695a:	17cb      	asrs	r3, r1, #31
 800695c:	1ad2      	subs	r2, r2, r3
 800695e:	4613      	mov	r3, r2
 8006960:	005b      	lsls	r3, r3, #1
 8006962:	4413      	add	r3, r2
 8006964:	1aca      	subs	r2, r1, r3
 8006966:	2a00      	cmp	r2, #0
 8006968:	d10d      	bne.n	8006986 <HAL_DAC_ConvCpltCallbackCh1+0x296>
 800696a:	4b1b      	ldr	r3, [pc, #108]	; (80069d8 <HAL_DAC_ConvCpltCallbackCh1+0x2e8>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d109      	bne.n	8006986 <HAL_DAC_ConvCpltCallbackCh1+0x296>
			HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8006972:	2201      	movs	r2, #1
 8006974:	2104      	movs	r1, #4
 8006976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800697a:	f7fb fb0b 	bl	8001f94 <HAL_GPIO_WritePin>
			LED_4_status = 1;
 800697e:	4b1b      	ldr	r3, [pc, #108]	; (80069ec <HAL_DAC_ConvCpltCallbackCh1+0x2fc>)
 8006980:	2201      	movs	r2, #1
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	e018      	b.n	80069b8 <HAL_DAC_ConvCpltCallbackCh1+0x2c8>
	}
	else if(randomNumber4 % 3 == 0 && LED_0_status ==1 ){
 8006986:	68f9      	ldr	r1, [r7, #12]
 8006988:	4b12      	ldr	r3, [pc, #72]	; (80069d4 <HAL_DAC_ConvCpltCallbackCh1+0x2e4>)
 800698a:	fb83 3201 	smull	r3, r2, r3, r1
 800698e:	17cb      	asrs	r3, r1, #31
 8006990:	1ad2      	subs	r2, r2, r3
 8006992:	4613      	mov	r3, r2
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	4413      	add	r3, r2
 8006998:	1aca      	subs	r2, r1, r3
 800699a:	2a00      	cmp	r2, #0
 800699c:	d10c      	bne.n	80069b8 <HAL_DAC_ConvCpltCallbackCh1+0x2c8>
 800699e:	4b0e      	ldr	r3, [pc, #56]	; (80069d8 <HAL_DAC_ConvCpltCallbackCh1+0x2e8>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d108      	bne.n	80069b8 <HAL_DAC_ConvCpltCallbackCh1+0x2c8>
			HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80069a6:	2200      	movs	r2, #0
 80069a8:	2104      	movs	r1, #4
 80069aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80069ae:	f7fb faf1 	bl	8001f94 <HAL_GPIO_WritePin>
			LED_4_status = 0;
 80069b2:	4b0e      	ldr	r3, [pc, #56]	; (80069ec <HAL_DAC_ConvCpltCallbackCh1+0x2fc>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	601a      	str	r2, [r3, #0]
	}
	refreshAndPrint();
 80069b8:	f7ff f80a 	bl	80059d0 <refreshAndPrint>
 80069bc:	e000      	b.n	80069c0 <HAL_DAC_ConvCpltCallbackCh1+0x2d0>
	if(isDelaying == 1) return;
 80069be:	bf00      	nop
}
 80069c0:	3720      	adds	r7, #32
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	2000acf0 	.word	0x2000acf0
 80069cc:	2000000c 	.word	0x2000000c
 80069d0:	20000008 	.word	0x20000008
 80069d4:	55555556 	.word	0x55555556
 80069d8:	2000acdc 	.word	0x2000acdc
 80069dc:	48000400 	.word	0x48000400
 80069e0:	2000ace0 	.word	0x2000ace0
 80069e4:	2000ace4 	.word	0x2000ace4
 80069e8:	2000ace8 	.word	0x2000ace8
 80069ec:	2000acec 	.word	0x2000acec

080069f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a04      	ldr	r2, [pc, #16]	; (8006a10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d101      	bne.n	8006a06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006a02:	f7fa fa0f 	bl	8000e24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006a06:	bf00      	nop
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	40014800 	.word	0x40014800

08006a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006a14:	b480      	push	{r7}
 8006a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006a18:	b672      	cpsid	i
}
 8006a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006a1c:	e7fe      	b.n	8006a1c <Error_Handler+0x8>
	...

08006a20 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8006a26:	4b32      	ldr	r3, [pc, #200]	; (8006af0 <BSP_QSPI_Init+0xd0>)
 8006a28:	4a32      	ldr	r2, [pc, #200]	; (8006af4 <BSP_QSPI_Init+0xd4>)
 8006a2a:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8006a2c:	4830      	ldr	r0, [pc, #192]	; (8006af0 <BSP_QSPI_Init+0xd0>)
 8006a2e:	f7fb fbc7 	bl	80021c0 <HAL_QSPI_DeInit>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d001      	beq.n	8006a3c <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e054      	b.n	8006ae6 <BSP_QSPI_Init+0xc6>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8006a3c:	f000 f964 	bl	8006d08 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 2; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 26.67MHz */
 8006a40:	4b2b      	ldr	r3, [pc, #172]	; (8006af0 <BSP_QSPI_Init+0xd0>)
 8006a42:	2202      	movs	r2, #2
 8006a44:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8006a46:	4b2a      	ldr	r3, [pc, #168]	; (8006af0 <BSP_QSPI_Init+0xd0>)
 8006a48:	2204      	movs	r2, #4
 8006a4a:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8006a4c:	4b28      	ldr	r3, [pc, #160]	; (8006af0 <BSP_QSPI_Init+0xd0>)
 8006a4e:	2210      	movs	r2, #16
 8006a50:	60da      	str	r2, [r3, #12]
 8006a52:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006a56:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	fa93 f3a3 	rbit	r3, r3
 8006a5e:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 8006a6a:	2320      	movs	r3, #32
 8006a6c:	e003      	b.n	8006a76 <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	fab3 f383 	clz	r3, r3
 8006a74:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25R6435F_FLASH_SIZE) - 1;
 8006a76:	3b01      	subs	r3, #1
 8006a78:	461a      	mov	r2, r3
 8006a7a:	4b1d      	ldr	r3, [pc, #116]	; (8006af0 <BSP_QSPI_Init+0xd0>)
 8006a7c:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8006a7e:	4b1c      	ldr	r3, [pc, #112]	; (8006af0 <BSP_QSPI_Init+0xd0>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8006a84:	4b1a      	ldr	r3, [pc, #104]	; (8006af0 <BSP_QSPI_Init+0xd0>)
 8006a86:	2200      	movs	r2, #0
 8006a88:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8006a8a:	4819      	ldr	r0, [pc, #100]	; (8006af0 <BSP_QSPI_Init+0xd0>)
 8006a8c:	f7fb fb22 	bl	80020d4 <HAL_QSPI_Init>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e025      	b.n	8006ae6 <BSP_QSPI_Init+0xc6>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8006a9a:	4815      	ldr	r0, [pc, #84]	; (8006af0 <BSP_QSPI_Init+0xd0>)
 8006a9c:	f000 f974 	bl	8006d88 <QSPI_ResetMemory>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 8006aa6:	2304      	movs	r3, #4
 8006aa8:	e01d      	b.n	8006ae6 <BSP_QSPI_Init+0xc6>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&QSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 8006aaa:	2101      	movs	r1, #1
 8006aac:	4810      	ldr	r0, [pc, #64]	; (8006af0 <BSP_QSPI_Init+0xd0>)
 8006aae:	f000 fa35 	bl	8006f1c <QSPI_QuadMode>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <BSP_QSPI_Init+0x9c>
  {
    return QSPI_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e014      	b.n	8006ae6 <BSP_QSPI_Init+0xc6>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&QSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 8006abc:	2101      	movs	r1, #1
 8006abe:	480c      	ldr	r0, [pc, #48]	; (8006af0 <BSP_QSPI_Init+0xd0>)
 8006ac0:	f000 fad4 	bl	800706c <QSPI_HighPerfMode>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <BSP_QSPI_Init+0xae>
  {
    return QSPI_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e00b      	b.n	8006ae6 <BSP_QSPI_Init+0xc6>
  }
  
  /* Re-configure the clock for the high performance mode */
  QSPIHandle.Init.ClockPrescaler = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 8006ace:	4b08      	ldr	r3, [pc, #32]	; (8006af0 <BSP_QSPI_Init+0xd0>)
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	605a      	str	r2, [r3, #4]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8006ad4:	4806      	ldr	r0, [pc, #24]	; (8006af0 <BSP_QSPI_Init+0xd0>)
 8006ad6:	f7fb fafd 	bl	80020d4 <HAL_QSPI_Init>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d001      	beq.n	8006ae4 <BSP_QSPI_Init+0xc4>
  {
    return QSPI_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e000      	b.n	8006ae6 <BSP_QSPI_Init+0xc6>
  }

  return QSPI_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	2000afd4 	.word	0x2000afd4
 8006af4:	a0001000 	.word	0xa0001000

08006af8 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b092      	sub	sp, #72	; 0x48
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 8006b04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b08:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction        = QUAD_INOUT_READ_CMD;
 8006b0a:	23eb      	movs	r3, #235	; 0xeb
 8006b0c:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = QSPI_ADDRESS_4_LINES;
 8006b0e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = QSPI_ADDRESS_24_BITS;
 8006b14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b18:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = ReadAddr;
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 8006b1e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006b22:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8006b24:	2300      	movs	r3, #0
 8006b26:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytes     = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8006b28:	23aa      	movs	r3, #170	; 0xaa
 8006b2a:	61bb      	str	r3, [r7, #24]
  sCommand.DataMode           = QSPI_DATA_4_LINES;
 8006b2c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8006b30:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles        = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8006b32:	2304      	movs	r3, #4
 8006b34:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData             = Size;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode            = QSPI_DDR_MODE_DISABLE;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 8006b42:	2300      	movs	r3, #0
 8006b44:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006b46:	f107 0310 	add.w	r3, r7, #16
 8006b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b4e:	4619      	mov	r1, r3
 8006b50:	480b      	ldr	r0, [pc, #44]	; (8006b80 <BSP_QSPI_Read+0x88>)
 8006b52:	f7fb fb59 	bl	8002208 <HAL_QSPI_Command>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d001      	beq.n	8006b60 <BSP_QSPI_Read+0x68>
  {
    return QSPI_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e00b      	b.n	8006b78 <BSP_QSPI_Read+0x80>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b64:	68f9      	ldr	r1, [r7, #12]
 8006b66:	4806      	ldr	r0, [pc, #24]	; (8006b80 <BSP_QSPI_Read+0x88>)
 8006b68:	f7fb fc43 	bl	80023f2 <HAL_QSPI_Receive>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e000      	b.n	8006b78 <BSP_QSPI_Read+0x80>
  }

  return QSPI_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3748      	adds	r7, #72	; 0x48
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	2000afd4 	.word	0x2000afd4

08006b84 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b096      	sub	sp, #88	; 0x58
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006b98:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8006b9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d901      	bls.n	8006ba6 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4413      	add	r3, r2
 8006bb0:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = QUAD_PAGE_PROG_CMD;
 8006bb8:	2338      	movs	r3, #56	; 0x38
 8006bba:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8006bbc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006bc0:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8006bc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006bc6:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8006bcc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8006bd0:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006bde:	2300      	movs	r3, #0
 8006be0:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8006be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006be4:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 8006be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006be8:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8006bea:	4824      	ldr	r0, [pc, #144]	; (8006c7c <BSP_QSPI_Write+0xf8>)
 8006bec:	f000 f910 	bl	8006e10 <QSPI_WriteEnable>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e03b      	b.n	8006c72 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006bfa:	f107 0314 	add.w	r3, r7, #20
 8006bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c02:	4619      	mov	r1, r3
 8006c04:	481d      	ldr	r0, [pc, #116]	; (8006c7c <BSP_QSPI_Write+0xf8>)
 8006c06:	f7fb faff 	bl	8002208 <HAL_QSPI_Command>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e02e      	b.n	8006c72 <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c18:	68f9      	ldr	r1, [r7, #12]
 8006c1a:	4818      	ldr	r0, [pc, #96]	; (8006c7c <BSP_QSPI_Write+0xf8>)
 8006c1c:	f7fb fb52 	bl	80022c4 <HAL_QSPI_Transmit>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e023      	b.n	8006c72 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8006c2a:	f241 3188 	movw	r1, #5000	; 0x1388
 8006c2e:	4813      	ldr	r0, [pc, #76]	; (8006c7c <BSP_QSPI_Write+0xf8>)
 8006c30:	f000 f93a 	bl	8006ea8 <QSPI_AutoPollingMemReady>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e019      	b.n	8006c72 <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8006c3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c42:	4413      	add	r3, r2
 8006c44:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c4a:	4413      	add	r3, r2
 8006c4c:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8006c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c50:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006c54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d203      	bcs.n	8006c62 <BSP_QSPI_Write+0xde>
 8006c5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	e001      	b.n	8006c66 <BSP_QSPI_Write+0xe2>
 8006c62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c66:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8006c68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d3b8      	bcc.n	8006be2 <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3758      	adds	r7, #88	; 0x58
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	2000afd4 	.word	0x2000afd4

08006c80 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b090      	sub	sp, #64	; 0x40
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006c88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c8c:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = BLOCK_ERASE_CMD;
 8006c8e:	23d8      	movs	r3, #216	; 0xd8
 8006c90:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 8006c92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c96:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8006c98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006c9c:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8006caa:	2300      	movs	r3, #0
 8006cac:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8006cba:	4812      	ldr	r0, [pc, #72]	; (8006d04 <BSP_QSPI_Erase_Block+0x84>)
 8006cbc:	f000 f8a8 	bl	8006e10 <QSPI_WriteEnable>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d001      	beq.n	8006cca <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e017      	b.n	8006cfa <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006cca:	f107 0308 	add.w	r3, r7, #8
 8006cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	480b      	ldr	r0, [pc, #44]	; (8006d04 <BSP_QSPI_Erase_Block+0x84>)
 8006cd6:	f7fb fa97 	bl	8002208 <HAL_QSPI_Command>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e00a      	b.n	8006cfa <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 8006ce4:	f640 51ac 	movw	r1, #3500	; 0xdac
 8006ce8:	4806      	ldr	r0, [pc, #24]	; (8006d04 <BSP_QSPI_Erase_Block+0x84>)
 8006cea:	f000 f8dd 	bl	8006ea8 <QSPI_AutoPollingMemReady>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d001      	beq.n	8006cf8 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e000      	b.n	8006cfa <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3740      	adds	r7, #64	; 0x40
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	2000afd4 	.word	0x2000afd4

08006d08 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 8006d0e:	4b1c      	ldr	r3, [pc, #112]	; (8006d80 <BSP_QSPI_MspInit+0x78>)
 8006d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d12:	4a1b      	ldr	r2, [pc, #108]	; (8006d80 <BSP_QSPI_MspInit+0x78>)
 8006d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d18:	6513      	str	r3, [r2, #80]	; 0x50
 8006d1a:	4b19      	ldr	r3, [pc, #100]	; (8006d80 <BSP_QSPI_MspInit+0x78>)
 8006d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d22:	60bb      	str	r3, [r7, #8]
 8006d24:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 8006d26:	4b16      	ldr	r3, [pc, #88]	; (8006d80 <BSP_QSPI_MspInit+0x78>)
 8006d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2a:	4a15      	ldr	r2, [pc, #84]	; (8006d80 <BSP_QSPI_MspInit+0x78>)
 8006d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d30:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 8006d32:	4b13      	ldr	r3, [pc, #76]	; (8006d80 <BSP_QSPI_MspInit+0x78>)
 8006d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d36:	4a12      	ldr	r2, [pc, #72]	; (8006d80 <BSP_QSPI_MspInit+0x78>)
 8006d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d3c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006d3e:	4b10      	ldr	r3, [pc, #64]	; (8006d80 <BSP_QSPI_MspInit+0x78>)
 8006d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d42:	4a0f      	ldr	r2, [pc, #60]	; (8006d80 <BSP_QSPI_MspInit+0x78>)
 8006d44:	f043 0310 	orr.w	r3, r3, #16
 8006d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d4a:	4b0d      	ldr	r3, [pc, #52]	; (8006d80 <BSP_QSPI_MspInit+0x78>)
 8006d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d4e:	f003 0310 	and.w	r3, r3, #16
 8006d52:	607b      	str	r3, [r7, #4]
 8006d54:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8006d56:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8006d5a:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8006d60:	2300      	movs	r3, #0
 8006d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d64:	2303      	movs	r3, #3
 8006d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8006d68:	230a      	movs	r3, #10
 8006d6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006d6c:	f107 030c 	add.w	r3, r7, #12
 8006d70:	4619      	mov	r1, r3
 8006d72:	4804      	ldr	r0, [pc, #16]	; (8006d84 <BSP_QSPI_MspInit+0x7c>)
 8006d74:	f7fa fe58 	bl	8001a28 <HAL_GPIO_Init>
}
 8006d78:	bf00      	nop
 8006d7a:	3720      	adds	r7, #32
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	40021000 	.word	0x40021000
 8006d84:	48001000 	.word	0x48001000

08006d88 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b090      	sub	sp, #64	; 0x40
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006d90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d94:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8006d96:	2366      	movs	r3, #102	; 0x66
 8006d98:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8006da2:	2300      	movs	r3, #0
 8006da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8006da6:	2300      	movs	r3, #0
 8006da8:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006daa:	2300      	movs	r3, #0
 8006dac:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006dae:	2300      	movs	r3, #0
 8006db0:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006db2:	2300      	movs	r3, #0
 8006db4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006db6:	f107 0308 	add.w	r3, r7, #8
 8006dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	4812      	ldr	r0, [pc, #72]	; (8006e0c <QSPI_ResetMemory+0x84>)
 8006dc2:	f7fb fa21 	bl	8002208 <HAL_QSPI_Command>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e019      	b.n	8006e04 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8006dd0:	2399      	movs	r3, #153	; 0x99
 8006dd2:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006dd4:	f107 0308 	add.w	r3, r7, #8
 8006dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ddc:	4619      	mov	r1, r3
 8006dde:	480b      	ldr	r0, [pc, #44]	; (8006e0c <QSPI_ResetMemory+0x84>)
 8006de0:	f7fb fa12 	bl	8002208 <HAL_QSPI_Command>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d001      	beq.n	8006dee <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e00a      	b.n	8006e04 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8006dee:	f241 3188 	movw	r1, #5000	; 0x1388
 8006df2:	4806      	ldr	r0, [pc, #24]	; (8006e0c <QSPI_ResetMemory+0x84>)
 8006df4:	f000 f858 	bl	8006ea8 <QSPI_AutoPollingMemReady>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d001      	beq.n	8006e02 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e000      	b.n	8006e04 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3740      	adds	r7, #64	; 0x40
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	2000afd4 	.word	0x2000afd4

08006e10 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b096      	sub	sp, #88	; 0x58
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e1c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8006e1e:	2306      	movs	r3, #6
 8006e20:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8006e22:	2300      	movs	r3, #0
 8006e24:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006e26:	2300      	movs	r3, #0
 8006e28:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006e32:	2300      	movs	r3, #0
 8006e34:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006e36:	2300      	movs	r3, #0
 8006e38:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006e3e:	f107 0320 	add.w	r3, r7, #32
 8006e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e46:	4619      	mov	r1, r3
 8006e48:	4816      	ldr	r0, [pc, #88]	; (8006ea4 <QSPI_WriteEnable+0x94>)
 8006e4a:	f7fb f9dd 	bl	8002208 <HAL_QSPI_Command>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d001      	beq.n	8006e58 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e020      	b.n	8006e9a <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = MX25R6435F_SR_WEL;
 8006e58:	2302      	movs	r3, #2
 8006e5a:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WEL;
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8006e60:	2300      	movs	r3, #0
 8006e62:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8006e64:	2301      	movs	r3, #1
 8006e66:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8006e68:	2310      	movs	r3, #16
 8006e6a:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8006e6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006e70:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8006e72:	2305      	movs	r3, #5
 8006e74:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8006e76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e7a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006e7c:	f107 0208 	add.w	r2, r7, #8
 8006e80:	f107 0120 	add.w	r1, r7, #32
 8006e84:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e88:	4806      	ldr	r0, [pc, #24]	; (8006ea4 <QSPI_WriteEnable+0x94>)
 8006e8a:	f7fb fb54 	bl	8002536 <HAL_QSPI_AutoPolling>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d001      	beq.n	8006e98 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e000      	b.n	8006e9a <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3758      	adds	r7, #88	; 0x58
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	2000afd4 	.word	0x2000afd4

08006ea8 <QSPI_AutoPollingMemReady>:
  * @param  hqspi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b096      	sub	sp, #88	; 0x58
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006eb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8006eb8:	2305      	movs	r3, #5
 8006eba:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8006ec4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ec8:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 8006eda:	2300      	movs	r3, #0
 8006edc:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WIP;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8006eea:	2310      	movs	r3, #16
 8006eec:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8006eee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006ef2:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 8006ef4:	f107 0208 	add.w	r2, r7, #8
 8006ef8:	f107 0120 	add.w	r1, r7, #32
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	4806      	ldr	r0, [pc, #24]	; (8006f18 <QSPI_AutoPollingMemReady+0x70>)
 8006f00:	f7fb fb19 	bl	8002536 <HAL_QSPI_AutoPolling>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e000      	b.n	8006f10 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3758      	adds	r7, #88	; 0x58
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	2000afd4 	.word	0x2000afd4

08006f1c <QSPI_QuadMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b092      	sub	sp, #72	; 0x48
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	460b      	mov	r3, r1
 8006f26:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006f28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8006f2e:	2305      	movs	r3, #5
 8006f30:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8006f32:	2300      	movs	r3, #0
 8006f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006f36:	2300      	movs	r3, #0
 8006f38:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8006f3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f3e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8006f40:	2300      	movs	r3, #0
 8006f42:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8006f44:	2301      	movs	r3, #1
 8006f46:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006f50:	2300      	movs	r3, #0
 8006f52:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006f54:	f107 0310 	add.w	r3, r7, #16
 8006f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	4842      	ldr	r0, [pc, #264]	; (8007068 <QSPI_QuadMode+0x14c>)
 8006f60:	f7fb f952 	bl	8002208 <HAL_QSPI_Command>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <QSPI_QuadMode+0x52>
  {
    return QSPI_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e077      	b.n	800705e <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006f6e:	f107 030f 	add.w	r3, r7, #15
 8006f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f76:	4619      	mov	r1, r3
 8006f78:	483b      	ldr	r0, [pc, #236]	; (8007068 <QSPI_QuadMode+0x14c>)
 8006f7a:	f7fb fa3a 	bl	80023f2 <HAL_QSPI_Receive>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d001      	beq.n	8006f88 <QSPI_QuadMode+0x6c>
  {
    return QSPI_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e06a      	b.n	800705e <QSPI_QuadMode+0x142>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8006f88:	4837      	ldr	r0, [pc, #220]	; (8007068 <QSPI_QuadMode+0x14c>)
 8006f8a:	f7ff ff41 	bl	8006e10 <QSPI_WriteEnable>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <QSPI_QuadMode+0x7c>
  {
    return QSPI_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e062      	b.n	800705e <QSPI_QuadMode+0x142>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8006f98:	78fb      	ldrb	r3, [r7, #3]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d105      	bne.n	8006faa <QSPI_QuadMode+0x8e>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8006f9e:	7bfb      	ldrb	r3, [r7, #15]
 8006fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	73fb      	strb	r3, [r7, #15]
 8006fa8:	e004      	b.n	8006fb4 <QSPI_QuadMode+0x98>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8006faa:	7bfb      	ldrb	r3, [r7, #15]
 8006fac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006fb8:	f107 0310 	add.w	r3, r7, #16
 8006fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	4829      	ldr	r0, [pc, #164]	; (8007068 <QSPI_QuadMode+0x14c>)
 8006fc4:	f7fb f920 	bl	8002208 <HAL_QSPI_Command>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <QSPI_QuadMode+0xb6>
  {
    return QSPI_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e045      	b.n	800705e <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006fd2:	f107 030f 	add.w	r3, r7, #15
 8006fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fda:	4619      	mov	r1, r3
 8006fdc:	4822      	ldr	r0, [pc, #136]	; (8007068 <QSPI_QuadMode+0x14c>)
 8006fde:	f7fb f971 	bl	80022c4 <HAL_QSPI_Transmit>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <QSPI_QuadMode+0xd0>
  {
    return QSPI_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e038      	b.n	800705e <QSPI_QuadMode+0x142>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8006fec:	f241 3188 	movw	r1, #5000	; 0x1388
 8006ff0:	481d      	ldr	r0, [pc, #116]	; (8007068 <QSPI_QuadMode+0x14c>)
 8006ff2:	f7ff ff59 	bl	8006ea8 <QSPI_AutoPollingMemReady>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <QSPI_QuadMode+0xe4>
  {
    return QSPI_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e02e      	b.n	800705e <QSPI_QuadMode+0x142>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8007000:	2305      	movs	r3, #5
 8007002:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007004:	f107 0310 	add.w	r3, r7, #16
 8007008:	f241 3288 	movw	r2, #5000	; 0x1388
 800700c:	4619      	mov	r1, r3
 800700e:	4816      	ldr	r0, [pc, #88]	; (8007068 <QSPI_QuadMode+0x14c>)
 8007010:	f7fb f8fa 	bl	8002208 <HAL_QSPI_Command>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <QSPI_QuadMode+0x102>
  {
    return QSPI_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e01f      	b.n	800705e <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800701e:	f107 030f 	add.w	r3, r7, #15
 8007022:	f241 3288 	movw	r2, #5000	; 0x1388
 8007026:	4619      	mov	r1, r3
 8007028:	480f      	ldr	r0, [pc, #60]	; (8007068 <QSPI_QuadMode+0x14c>)
 800702a:	f7fb f9e2 	bl	80023f2 <HAL_QSPI_Receive>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d001      	beq.n	8007038 <QSPI_QuadMode+0x11c>
  {
    return QSPI_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e012      	b.n	800705e <QSPI_QuadMode+0x142>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8007038:	7bfb      	ldrb	r3, [r7, #15]
 800703a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703e:	2b00      	cmp	r3, #0
 8007040:	d102      	bne.n	8007048 <QSPI_QuadMode+0x12c>
 8007042:	78fb      	ldrb	r3, [r7, #3]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d007      	beq.n	8007058 <QSPI_QuadMode+0x13c>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8007048:	7bfb      	ldrb	r3, [r7, #15]
 800704a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 800704e:	2b00      	cmp	r3, #0
 8007050:	d004      	beq.n	800705c <QSPI_QuadMode+0x140>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8007052:	78fb      	ldrb	r3, [r7, #3]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <QSPI_QuadMode+0x140>
  {
    return QSPI_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e000      	b.n	800705e <QSPI_QuadMode+0x142>
  }

  return QSPI_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3748      	adds	r7, #72	; 0x48
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	2000afd4 	.word	0x2000afd4

0800706c <QSPI_HighPerfMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b092      	sub	sp, #72	; 0x48
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	460b      	mov	r3, r1
 8007076:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800707c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 800707e:	2305      	movs	r3, #5
 8007080:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8007082:	2300      	movs	r3, #0
 8007084:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007086:	2300      	movs	r3, #0
 8007088:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 800708a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800708e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8007090:	2300      	movs	r3, #0
 8007092:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8007094:	2301      	movs	r3, #1
 8007096:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8007098:	2300      	movs	r3, #0
 800709a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800709c:	2300      	movs	r3, #0
 800709e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80070a0:	2300      	movs	r3, #0
 80070a2:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80070a4:	f107 0310 	add.w	r3, r7, #16
 80070a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80070ac:	4619      	mov	r1, r3
 80070ae:	4853      	ldr	r0, [pc, #332]	; (80071fc <QSPI_HighPerfMode+0x190>)
 80070b0:	f7fb f8aa 	bl	8002208 <HAL_QSPI_Command>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d001      	beq.n	80070be <QSPI_HighPerfMode+0x52>
  {
    return QSPI_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e09a      	b.n	80071f4 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80070be:	f107 030c 	add.w	r3, r7, #12
 80070c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070c6:	4619      	mov	r1, r3
 80070c8:	484c      	ldr	r0, [pc, #304]	; (80071fc <QSPI_HighPerfMode+0x190>)
 80070ca:	f7fb f992 	bl	80023f2 <HAL_QSPI_Receive>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <QSPI_HighPerfMode+0x6c>
  {
    return QSPI_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e08d      	b.n	80071f4 <QSPI_HighPerfMode+0x188>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 80070d8:	2315      	movs	r3, #21
 80070da:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 80070dc:	2302      	movs	r3, #2
 80070de:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80070e0:	f107 0310 	add.w	r3, r7, #16
 80070e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80070e8:	4619      	mov	r1, r3
 80070ea:	4844      	ldr	r0, [pc, #272]	; (80071fc <QSPI_HighPerfMode+0x190>)
 80070ec:	f7fb f88c 	bl	8002208 <HAL_QSPI_Command>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <QSPI_HighPerfMode+0x8e>
  {
    return QSPI_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e07c      	b.n	80071f4 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80070fa:	f107 030c 	add.w	r3, r7, #12
 80070fe:	3301      	adds	r3, #1
 8007100:	f241 3288 	movw	r2, #5000	; 0x1388
 8007104:	4619      	mov	r1, r3
 8007106:	483d      	ldr	r0, [pc, #244]	; (80071fc <QSPI_HighPerfMode+0x190>)
 8007108:	f7fb f973 	bl	80023f2 <HAL_QSPI_Receive>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d001      	beq.n	8007116 <QSPI_HighPerfMode+0xaa>
  {
    return QSPI_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e06e      	b.n	80071f4 <QSPI_HighPerfMode+0x188>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8007116:	4839      	ldr	r0, [pc, #228]	; (80071fc <QSPI_HighPerfMode+0x190>)
 8007118:	f7ff fe7a 	bl	8006e10 <QSPI_WriteEnable>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d001      	beq.n	8007126 <QSPI_HighPerfMode+0xba>
  {
    return QSPI_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e066      	b.n	80071f4 <QSPI_HighPerfMode+0x188>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8007126:	78fb      	ldrb	r3, [r7, #3]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d105      	bne.n	8007138 <QSPI_HighPerfMode+0xcc>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 800712c:	7bbb      	ldrb	r3, [r7, #14]
 800712e:	f043 0302 	orr.w	r3, r3, #2
 8007132:	b2db      	uxtb	r3, r3
 8007134:	73bb      	strb	r3, [r7, #14]
 8007136:	e004      	b.n	8007142 <QSPI_HighPerfMode+0xd6>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8007138:	7bbb      	ldrb	r3, [r7, #14]
 800713a:	f023 0302 	bic.w	r3, r3, #2
 800713e:	b2db      	uxtb	r3, r3
 8007140:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8007142:	2301      	movs	r3, #1
 8007144:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 3;
 8007146:	2303      	movs	r3, #3
 8007148:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800714a:	f107 0310 	add.w	r3, r7, #16
 800714e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007152:	4619      	mov	r1, r3
 8007154:	4829      	ldr	r0, [pc, #164]	; (80071fc <QSPI_HighPerfMode+0x190>)
 8007156:	f7fb f857 	bl	8002208 <HAL_QSPI_Command>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <QSPI_HighPerfMode+0xf8>
  {
    return QSPI_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e047      	b.n	80071f4 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007164:	f107 030c 	add.w	r3, r7, #12
 8007168:	f241 3288 	movw	r2, #5000	; 0x1388
 800716c:	4619      	mov	r1, r3
 800716e:	4823      	ldr	r0, [pc, #140]	; (80071fc <QSPI_HighPerfMode+0x190>)
 8007170:	f7fb f8a8 	bl	80022c4 <HAL_QSPI_Transmit>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <QSPI_HighPerfMode+0x112>
  {
    return QSPI_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e03a      	b.n	80071f4 <QSPI_HighPerfMode+0x188>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800717e:	f241 3188 	movw	r1, #5000	; 0x1388
 8007182:	481e      	ldr	r0, [pc, #120]	; (80071fc <QSPI_HighPerfMode+0x190>)
 8007184:	f7ff fe90 	bl	8006ea8 <QSPI_AutoPollingMemReady>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <QSPI_HighPerfMode+0x126>
  {
    return QSPI_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e030      	b.n	80071f4 <QSPI_HighPerfMode+0x188>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8007192:	2315      	movs	r3, #21
 8007194:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8007196:	2302      	movs	r3, #2
 8007198:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800719a:	f107 0310 	add.w	r3, r7, #16
 800719e:	f241 3288 	movw	r2, #5000	; 0x1388
 80071a2:	4619      	mov	r1, r3
 80071a4:	4815      	ldr	r0, [pc, #84]	; (80071fc <QSPI_HighPerfMode+0x190>)
 80071a6:	f7fb f82f 	bl	8002208 <HAL_QSPI_Command>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <QSPI_HighPerfMode+0x148>
  {
    return QSPI_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e01f      	b.n	80071f4 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80071b4:	f107 030c 	add.w	r3, r7, #12
 80071b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80071bc:	4619      	mov	r1, r3
 80071be:	480f      	ldr	r0, [pc, #60]	; (80071fc <QSPI_HighPerfMode+0x190>)
 80071c0:	f7fb f917 	bl	80023f2 <HAL_QSPI_Receive>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <QSPI_HighPerfMode+0x162>
  {
    return QSPI_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e012      	b.n	80071f4 <QSPI_HighPerfMode+0x188>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 80071ce:	7b7b      	ldrb	r3, [r7, #13]
 80071d0:	f003 0302 	and.w	r3, r3, #2
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d102      	bne.n	80071de <QSPI_HighPerfMode+0x172>
 80071d8:	78fb      	ldrb	r3, [r7, #3]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d007      	beq.n	80071ee <QSPI_HighPerfMode+0x182>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 80071de:	7b7b      	ldrb	r3, [r7, #13]
 80071e0:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d004      	beq.n	80071f2 <QSPI_HighPerfMode+0x186>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 80071e8:	78fb      	ldrb	r3, [r7, #3]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d101      	bne.n	80071f2 <QSPI_HighPerfMode+0x186>
  {
    return QSPI_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e000      	b.n	80071f4 <QSPI_HighPerfMode+0x188>
  }

  return QSPI_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3748      	adds	r7, #72	; 0x48
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	2000afd4 	.word	0x2000afd4

08007200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007206:	4b0f      	ldr	r3, [pc, #60]	; (8007244 <HAL_MspInit+0x44>)
 8007208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800720a:	4a0e      	ldr	r2, [pc, #56]	; (8007244 <HAL_MspInit+0x44>)
 800720c:	f043 0301 	orr.w	r3, r3, #1
 8007210:	6613      	str	r3, [r2, #96]	; 0x60
 8007212:	4b0c      	ldr	r3, [pc, #48]	; (8007244 <HAL_MspInit+0x44>)
 8007214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	607b      	str	r3, [r7, #4]
 800721c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800721e:	4b09      	ldr	r3, [pc, #36]	; (8007244 <HAL_MspInit+0x44>)
 8007220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007222:	4a08      	ldr	r2, [pc, #32]	; (8007244 <HAL_MspInit+0x44>)
 8007224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007228:	6593      	str	r3, [r2, #88]	; 0x58
 800722a:	4b06      	ldr	r3, [pc, #24]	; (8007244 <HAL_MspInit+0x44>)
 800722c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800722e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007232:	603b      	str	r3, [r7, #0]
 8007234:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007236:	bf00      	nop
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	40021000 	.word	0x40021000

08007248 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b08a      	sub	sp, #40	; 0x28
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007250:	f107 0314 	add.w	r3, r7, #20
 8007254:	2200      	movs	r2, #0
 8007256:	601a      	str	r2, [r3, #0]
 8007258:	605a      	str	r2, [r3, #4]
 800725a:	609a      	str	r2, [r3, #8]
 800725c:	60da      	str	r2, [r3, #12]
 800725e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a2a      	ldr	r2, [pc, #168]	; (8007310 <HAL_DAC_MspInit+0xc8>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d14d      	bne.n	8007306 <HAL_DAC_MspInit+0xbe>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800726a:	4b2a      	ldr	r3, [pc, #168]	; (8007314 <HAL_DAC_MspInit+0xcc>)
 800726c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800726e:	4a29      	ldr	r2, [pc, #164]	; (8007314 <HAL_DAC_MspInit+0xcc>)
 8007270:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007274:	6593      	str	r3, [r2, #88]	; 0x58
 8007276:	4b27      	ldr	r3, [pc, #156]	; (8007314 <HAL_DAC_MspInit+0xcc>)
 8007278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800727a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800727e:	613b      	str	r3, [r7, #16]
 8007280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007282:	4b24      	ldr	r3, [pc, #144]	; (8007314 <HAL_DAC_MspInit+0xcc>)
 8007284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007286:	4a23      	ldr	r2, [pc, #140]	; (8007314 <HAL_DAC_MspInit+0xcc>)
 8007288:	f043 0301 	orr.w	r3, r3, #1
 800728c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800728e:	4b21      	ldr	r3, [pc, #132]	; (8007314 <HAL_DAC_MspInit+0xcc>)
 8007290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	60fb      	str	r3, [r7, #12]
 8007298:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800729a:	2310      	movs	r3, #16
 800729c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800729e:	2303      	movs	r3, #3
 80072a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072a2:	2300      	movs	r3, #0
 80072a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072a6:	f107 0314 	add.w	r3, r7, #20
 80072aa:	4619      	mov	r1, r3
 80072ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80072b0:	f7fa fbba 	bl	8001a28 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80072b4:	4b18      	ldr	r3, [pc, #96]	; (8007318 <HAL_DAC_MspInit+0xd0>)
 80072b6:	4a19      	ldr	r2, [pc, #100]	; (800731c <HAL_DAC_MspInit+0xd4>)
 80072b8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80072ba:	4b17      	ldr	r3, [pc, #92]	; (8007318 <HAL_DAC_MspInit+0xd0>)
 80072bc:	2206      	movs	r2, #6
 80072be:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80072c0:	4b15      	ldr	r3, [pc, #84]	; (8007318 <HAL_DAC_MspInit+0xd0>)
 80072c2:	2210      	movs	r2, #16
 80072c4:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80072c6:	4b14      	ldr	r3, [pc, #80]	; (8007318 <HAL_DAC_MspInit+0xd0>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80072cc:	4b12      	ldr	r3, [pc, #72]	; (8007318 <HAL_DAC_MspInit+0xd0>)
 80072ce:	2280      	movs	r2, #128	; 0x80
 80072d0:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80072d2:	4b11      	ldr	r3, [pc, #68]	; (8007318 <HAL_DAC_MspInit+0xd0>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80072d8:	4b0f      	ldr	r3, [pc, #60]	; (8007318 <HAL_DAC_MspInit+0xd0>)
 80072da:	2200      	movs	r2, #0
 80072dc:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80072de:	4b0e      	ldr	r3, [pc, #56]	; (8007318 <HAL_DAC_MspInit+0xd0>)
 80072e0:	2220      	movs	r2, #32
 80072e2:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80072e4:	4b0c      	ldr	r3, [pc, #48]	; (8007318 <HAL_DAC_MspInit+0xd0>)
 80072e6:	2200      	movs	r2, #0
 80072e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80072ea:	480b      	ldr	r0, [pc, #44]	; (8007318 <HAL_DAC_MspInit+0xd0>)
 80072ec:	f7fa f966 	bl	80015bc <HAL_DMA_Init>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 80072f6:	f7ff fb8d 	bl	8006a14 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a06      	ldr	r2, [pc, #24]	; (8007318 <HAL_DAC_MspInit+0xd0>)
 80072fe:	609a      	str	r2, [r3, #8]
 8007300:	4a05      	ldr	r2, [pc, #20]	; (8007318 <HAL_DAC_MspInit+0xd0>)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8007306:	bf00      	nop
 8007308:	3728      	adds	r7, #40	; 0x28
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	40007400 	.word	0x40007400
 8007314:	40021000 	.word	0x40021000
 8007318:	2000adbc 	.word	0x2000adbc
 800731c:	40020030 	.word	0x40020030

08007320 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b08a      	sub	sp, #40	; 0x28
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007328:	f107 0314 	add.w	r3, r7, #20
 800732c:	2200      	movs	r2, #0
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	605a      	str	r2, [r3, #4]
 8007332:	609a      	str	r2, [r3, #8]
 8007334:	60da      	str	r2, [r3, #12]
 8007336:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a26      	ldr	r2, [pc, #152]	; (80073d8 <HAL_QSPI_MspInit+0xb8>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d145      	bne.n	80073ce <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8007342:	4b26      	ldr	r3, [pc, #152]	; (80073dc <HAL_QSPI_MspInit+0xbc>)
 8007344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007346:	4a25      	ldr	r2, [pc, #148]	; (80073dc <HAL_QSPI_MspInit+0xbc>)
 8007348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800734c:	6513      	str	r3, [r2, #80]	; 0x50
 800734e:	4b23      	ldr	r3, [pc, #140]	; (80073dc <HAL_QSPI_MspInit+0xbc>)
 8007350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007356:	613b      	str	r3, [r7, #16]
 8007358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800735a:	4b20      	ldr	r3, [pc, #128]	; (80073dc <HAL_QSPI_MspInit+0xbc>)
 800735c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800735e:	4a1f      	ldr	r2, [pc, #124]	; (80073dc <HAL_QSPI_MspInit+0xbc>)
 8007360:	f043 0301 	orr.w	r3, r3, #1
 8007364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007366:	4b1d      	ldr	r3, [pc, #116]	; (80073dc <HAL_QSPI_MspInit+0xbc>)
 8007368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007372:	4b1a      	ldr	r3, [pc, #104]	; (80073dc <HAL_QSPI_MspInit+0xbc>)
 8007374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007376:	4a19      	ldr	r2, [pc, #100]	; (80073dc <HAL_QSPI_MspInit+0xbc>)
 8007378:	f043 0310 	orr.w	r3, r3, #16
 800737c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800737e:	4b17      	ldr	r3, [pc, #92]	; (80073dc <HAL_QSPI_MspInit+0xbc>)
 8007380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007382:	f003 0310 	and.w	r3, r3, #16
 8007386:	60bb      	str	r3, [r7, #8]
 8007388:	68bb      	ldr	r3, [r7, #8]
    PE11     ------> QUADSPI_NCS
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800738a:	2380      	movs	r3, #128	; 0x80
 800738c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800738e:	2302      	movs	r3, #2
 8007390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007392:	2300      	movs	r3, #0
 8007394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007396:	2303      	movs	r3, #3
 8007398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800739a:	230a      	movs	r3, #10
 800739c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800739e:	f107 0314 	add.w	r3, r7, #20
 80073a2:	4619      	mov	r1, r3
 80073a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80073a8:	f7fa fb3e 	bl	8001a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80073ac:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
 80073b0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073b2:	2302      	movs	r3, #2
 80073b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073b6:	2300      	movs	r3, #0
 80073b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073ba:	2303      	movs	r3, #3
 80073bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80073be:	230a      	movs	r3, #10
 80073c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80073c2:	f107 0314 	add.w	r3, r7, #20
 80073c6:	4619      	mov	r1, r3
 80073c8:	4805      	ldr	r0, [pc, #20]	; (80073e0 <HAL_QSPI_MspInit+0xc0>)
 80073ca:	f7fa fb2d 	bl	8001a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80073ce:	bf00      	nop
 80073d0:	3728      	adds	r7, #40	; 0x28
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	a0001000 	.word	0xa0001000
 80073dc:	40021000 	.word	0x40021000
 80073e0:	48001000 	.word	0x48001000

080073e4 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a0b      	ldr	r2, [pc, #44]	; (8007420 <HAL_QSPI_MspDeInit+0x3c>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d10f      	bne.n	8007416 <HAL_QSPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80073f6:	4b0b      	ldr	r3, [pc, #44]	; (8007424 <HAL_QSPI_MspDeInit+0x40>)
 80073f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073fa:	4a0a      	ldr	r2, [pc, #40]	; (8007424 <HAL_QSPI_MspDeInit+0x40>)
 80073fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007400:	6513      	str	r3, [r2, #80]	; 0x50
    PE11     ------> QUADSPI_NCS
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_7);
 8007402:	2180      	movs	r1, #128	; 0x80
 8007404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007408:	f7fa fcb8 	bl	8001d7c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800740c:	f44f 413c 	mov.w	r1, #48128	; 0xbc00
 8007410:	4805      	ldr	r0, [pc, #20]	; (8007428 <HAL_QSPI_MspDeInit+0x44>)
 8007412:	f7fa fcb3 	bl	8001d7c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8007416:	bf00      	nop
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	a0001000 	.word	0xa0001000
 8007424:	40021000 	.word	0x40021000
 8007428:	48001000 	.word	0x48001000

0800742c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800743c:	d10b      	bne.n	8007456 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800743e:	4b09      	ldr	r3, [pc, #36]	; (8007464 <HAL_TIM_Base_MspInit+0x38>)
 8007440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007442:	4a08      	ldr	r2, [pc, #32]	; (8007464 <HAL_TIM_Base_MspInit+0x38>)
 8007444:	f043 0301 	orr.w	r3, r3, #1
 8007448:	6593      	str	r3, [r2, #88]	; 0x58
 800744a:	4b06      	ldr	r3, [pc, #24]	; (8007464 <HAL_TIM_Base_MspInit+0x38>)
 800744c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	60fb      	str	r3, [r7, #12]
 8007454:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8007456:	bf00      	nop
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	40021000 	.word	0x40021000

08007468 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b0ac      	sub	sp, #176	; 0xb0
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007470:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007474:	2200      	movs	r2, #0
 8007476:	601a      	str	r2, [r3, #0]
 8007478:	605a      	str	r2, [r3, #4]
 800747a:	609a      	str	r2, [r3, #8]
 800747c:	60da      	str	r2, [r3, #12]
 800747e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007480:	f107 0314 	add.w	r3, r7, #20
 8007484:	2288      	movs	r2, #136	; 0x88
 8007486:	2100      	movs	r1, #0
 8007488:	4618      	mov	r0, r3
 800748a:	f000 fa7f 	bl	800798c <memset>
  if(huart->Instance==USART1)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a21      	ldr	r2, [pc, #132]	; (8007518 <HAL_UART_MspInit+0xb0>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d13a      	bne.n	800750e <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007498:	2301      	movs	r3, #1
 800749a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800749c:	2300      	movs	r3, #0
 800749e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80074a0:	f107 0314 	add.w	r3, r7, #20
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7fc f913 	bl	80036d0 <HAL_RCCEx_PeriphCLKConfig>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d001      	beq.n	80074b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80074b0:	f7ff fab0 	bl	8006a14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80074b4:	4b19      	ldr	r3, [pc, #100]	; (800751c <HAL_UART_MspInit+0xb4>)
 80074b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074b8:	4a18      	ldr	r2, [pc, #96]	; (800751c <HAL_UART_MspInit+0xb4>)
 80074ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074be:	6613      	str	r3, [r2, #96]	; 0x60
 80074c0:	4b16      	ldr	r3, [pc, #88]	; (800751c <HAL_UART_MspInit+0xb4>)
 80074c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074c8:	613b      	str	r3, [r7, #16]
 80074ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074cc:	4b13      	ldr	r3, [pc, #76]	; (800751c <HAL_UART_MspInit+0xb4>)
 80074ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074d0:	4a12      	ldr	r2, [pc, #72]	; (800751c <HAL_UART_MspInit+0xb4>)
 80074d2:	f043 0302 	orr.w	r3, r3, #2
 80074d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074d8:	4b10      	ldr	r3, [pc, #64]	; (800751c <HAL_UART_MspInit+0xb4>)
 80074da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074dc:	f003 0302 	and.w	r3, r3, #2
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80074e4:	23c0      	movs	r3, #192	; 0xc0
 80074e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074ea:	2302      	movs	r3, #2
 80074ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074f0:	2300      	movs	r3, #0
 80074f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074f6:	2303      	movs	r3, #3
 80074f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80074fc:	2307      	movs	r3, #7
 80074fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007502:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007506:	4619      	mov	r1, r3
 8007508:	4805      	ldr	r0, [pc, #20]	; (8007520 <HAL_UART_MspInit+0xb8>)
 800750a:	f7fa fa8d 	bl	8001a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800750e:	bf00      	nop
 8007510:	37b0      	adds	r7, #176	; 0xb0
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	40013800 	.word	0x40013800
 800751c:	40021000 	.word	0x40021000
 8007520:	48000400 	.word	0x48000400

08007524 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b08c      	sub	sp, #48	; 0x30
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800752c:	2300      	movs	r3, #0
 800752e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8007530:	2300      	movs	r3, #0
 8007532:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8007534:	2200      	movs	r2, #0
 8007536:	6879      	ldr	r1, [r7, #4]
 8007538:	201a      	movs	r0, #26
 800753a:	f7f9 fd6f 	bl	800101c <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800753e:	201a      	movs	r0, #26
 8007540:	f7f9 fd88 	bl	8001054 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8007544:	4b1e      	ldr	r3, [pc, #120]	; (80075c0 <HAL_InitTick+0x9c>)
 8007546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007548:	4a1d      	ldr	r2, [pc, #116]	; (80075c0 <HAL_InitTick+0x9c>)
 800754a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800754e:	6613      	str	r3, [r2, #96]	; 0x60
 8007550:	4b1b      	ldr	r3, [pc, #108]	; (80075c0 <HAL_InitTick+0x9c>)
 8007552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007554:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007558:	60fb      	str	r3, [r7, #12]
 800755a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800755c:	f107 0210 	add.w	r2, r7, #16
 8007560:	f107 0314 	add.w	r3, r7, #20
 8007564:	4611      	mov	r1, r2
 8007566:	4618      	mov	r0, r3
 8007568:	f7fc f820 	bl	80035ac <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800756c:	f7fc f808 	bl	8003580 <HAL_RCC_GetPCLK2Freq>
 8007570:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007574:	4a13      	ldr	r2, [pc, #76]	; (80075c4 <HAL_InitTick+0xa0>)
 8007576:	fba2 2303 	umull	r2, r3, r2, r3
 800757a:	0c9b      	lsrs	r3, r3, #18
 800757c:	3b01      	subs	r3, #1
 800757e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8007580:	4b11      	ldr	r3, [pc, #68]	; (80075c8 <HAL_InitTick+0xa4>)
 8007582:	4a12      	ldr	r2, [pc, #72]	; (80075cc <HAL_InitTick+0xa8>)
 8007584:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8007586:	4b10      	ldr	r3, [pc, #64]	; (80075c8 <HAL_InitTick+0xa4>)
 8007588:	f240 32e7 	movw	r2, #999	; 0x3e7
 800758c:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800758e:	4a0e      	ldr	r2, [pc, #56]	; (80075c8 <HAL_InitTick+0xa4>)
 8007590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007592:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8007594:	4b0c      	ldr	r3, [pc, #48]	; (80075c8 <HAL_InitTick+0xa4>)
 8007596:	2200      	movs	r2, #0
 8007598:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800759a:	4b0b      	ldr	r3, [pc, #44]	; (80075c8 <HAL_InitTick+0xa4>)
 800759c:	2200      	movs	r2, #0
 800759e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 80075a0:	4809      	ldr	r0, [pc, #36]	; (80075c8 <HAL_InitTick+0xa4>)
 80075a2:	f7fc fd51 	bl	8004048 <HAL_TIM_Base_Init>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d104      	bne.n	80075b6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80075ac:	4806      	ldr	r0, [pc, #24]	; (80075c8 <HAL_InitTick+0xa4>)
 80075ae:	f7fc fda3 	bl	80040f8 <HAL_TIM_Base_Start_IT>
 80075b2:	4603      	mov	r3, r0
 80075b4:	e000      	b.n	80075b8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3730      	adds	r7, #48	; 0x30
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	40021000 	.word	0x40021000
 80075c4:	431bde83 	.word	0x431bde83
 80075c8:	2000b018 	.word	0x2000b018
 80075cc:	40014800 	.word	0x40014800

080075d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80075d0:	b480      	push	{r7}
 80075d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80075d4:	e7fe      	b.n	80075d4 <NMI_Handler+0x4>

080075d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80075d6:	b480      	push	{r7}
 80075d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80075da:	e7fe      	b.n	80075da <HardFault_Handler+0x4>

080075dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80075dc:	b480      	push	{r7}
 80075de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80075e0:	e7fe      	b.n	80075e0 <MemManage_Handler+0x4>

080075e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80075e2:	b480      	push	{r7}
 80075e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80075e6:	e7fe      	b.n	80075e6 <BusFault_Handler+0x4>

080075e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80075e8:	b480      	push	{r7}
 80075ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80075ec:	e7fe      	b.n	80075ec <UsageFault_Handler+0x4>

080075ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80075ee:	b480      	push	{r7}
 80075f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80075f2:	bf00      	nop
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80075fc:	b480      	push	{r7}
 80075fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007600:	bf00      	nop
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800760a:	b480      	push	{r7}
 800760c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800760e:	bf00      	nop
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007618:	b480      	push	{r7}
 800761a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800761c:	bf00      	nop
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
	...

08007628 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800762c:	4802      	ldr	r0, [pc, #8]	; (8007638 <DMA1_Channel3_IRQHandler+0x10>)
 800762e:	f7fa f91b 	bl	8001868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007632:	bf00      	nop
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	2000adbc 	.word	0x2000adbc

0800763c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8007640:	4802      	ldr	r0, [pc, #8]	; (800764c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8007642:	f7fc fdc9 	bl	80041d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8007646:	bf00      	nop
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	2000b018 	.word	0x2000b018

08007650 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8007654:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007658:	f7fa fcb4 	bl	8001fc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800765c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007660:	f7fa fcb0 	bl	8001fc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007664:	bf00      	nop
 8007666:	bd80      	pop	{r7, pc}

08007668 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007668:	b480      	push	{r7}
 800766a:	af00      	add	r7, sp, #0
	return 1;
 800766c:	2301      	movs	r3, #1
}
 800766e:	4618      	mov	r0, r3
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <_kill>:

int _kill(int pid, int sig)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007682:	f000 f959 	bl	8007938 <__errno>
 8007686:	4603      	mov	r3, r0
 8007688:	2216      	movs	r2, #22
 800768a:	601a      	str	r2, [r3, #0]
	return -1;
 800768c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007690:	4618      	mov	r0, r3
 8007692:	3708      	adds	r7, #8
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <_exit>:

void _exit (int status)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80076a0:	f04f 31ff 	mov.w	r1, #4294967295
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f7ff ffe7 	bl	8007678 <_kill>
	while (1) {}		/* Make sure we hang here */
 80076aa:	e7fe      	b.n	80076aa <_exit+0x12>

080076ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80076b8:	2300      	movs	r3, #0
 80076ba:	617b      	str	r3, [r7, #20]
 80076bc:	e00a      	b.n	80076d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80076be:	f3af 8000 	nop.w
 80076c2:	4601      	mov	r1, r0
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	1c5a      	adds	r2, r3, #1
 80076c8:	60ba      	str	r2, [r7, #8]
 80076ca:	b2ca      	uxtb	r2, r1
 80076cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	3301      	adds	r3, #1
 80076d2:	617b      	str	r3, [r7, #20]
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	429a      	cmp	r2, r3
 80076da:	dbf0      	blt.n	80076be <_read+0x12>
	}

return len;
 80076dc:	687b      	ldr	r3, [r7, #4]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3718      	adds	r7, #24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b086      	sub	sp, #24
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80076f2:	2300      	movs	r3, #0
 80076f4:	617b      	str	r3, [r7, #20]
 80076f6:	e009      	b.n	800770c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	1c5a      	adds	r2, r3, #1
 80076fc:	60ba      	str	r2, [r7, #8]
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	4618      	mov	r0, r3
 8007702:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	3301      	adds	r3, #1
 800770a:	617b      	str	r3, [r7, #20]
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	429a      	cmp	r2, r3
 8007712:	dbf1      	blt.n	80076f8 <_write+0x12>
	}
	return len;
 8007714:	687b      	ldr	r3, [r7, #4]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <_close>:

int _close(int file)
{
 800771e:	b480      	push	{r7}
 8007720:	b083      	sub	sp, #12
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
	return -1;
 8007726:	f04f 33ff 	mov.w	r3, #4294967295
}
 800772a:	4618      	mov	r0, r3
 800772c:	370c      	adds	r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007736:	b480      	push	{r7}
 8007738:	b083      	sub	sp, #12
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007746:	605a      	str	r2, [r3, #4]
	return 0;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <_isatty>:

int _isatty(int file)
{
 8007756:	b480      	push	{r7}
 8007758:	b083      	sub	sp, #12
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
	return 1;
 800775e:	2301      	movs	r3, #1
}
 8007760:	4618      	mov	r0, r3
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
	return 0;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
	...

08007788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007790:	4a14      	ldr	r2, [pc, #80]	; (80077e4 <_sbrk+0x5c>)
 8007792:	4b15      	ldr	r3, [pc, #84]	; (80077e8 <_sbrk+0x60>)
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800779c:	4b13      	ldr	r3, [pc, #76]	; (80077ec <_sbrk+0x64>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d102      	bne.n	80077aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80077a4:	4b11      	ldr	r3, [pc, #68]	; (80077ec <_sbrk+0x64>)
 80077a6:	4a12      	ldr	r2, [pc, #72]	; (80077f0 <_sbrk+0x68>)
 80077a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80077aa:	4b10      	ldr	r3, [pc, #64]	; (80077ec <_sbrk+0x64>)
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4413      	add	r3, r2
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d207      	bcs.n	80077c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80077b8:	f000 f8be 	bl	8007938 <__errno>
 80077bc:	4603      	mov	r3, r0
 80077be:	220c      	movs	r2, #12
 80077c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80077c2:	f04f 33ff 	mov.w	r3, #4294967295
 80077c6:	e009      	b.n	80077dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80077c8:	4b08      	ldr	r3, [pc, #32]	; (80077ec <_sbrk+0x64>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80077ce:	4b07      	ldr	r3, [pc, #28]	; (80077ec <_sbrk+0x64>)
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4413      	add	r3, r2
 80077d6:	4a05      	ldr	r2, [pc, #20]	; (80077ec <_sbrk+0x64>)
 80077d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80077da:	68fb      	ldr	r3, [r7, #12]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3718      	adds	r7, #24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	20018000 	.word	0x20018000
 80077e8:	00000400 	.word	0x00000400
 80077ec:	2000ad5c 	.word	0x2000ad5c
 80077f0:	2000b078 	.word	0x2000b078

080077f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80077f4:	b480      	push	{r7}
 80077f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80077f8:	4b15      	ldr	r3, [pc, #84]	; (8007850 <SystemInit+0x5c>)
 80077fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077fe:	4a14      	ldr	r2, [pc, #80]	; (8007850 <SystemInit+0x5c>)
 8007800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007808:	4b12      	ldr	r3, [pc, #72]	; (8007854 <SystemInit+0x60>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a11      	ldr	r2, [pc, #68]	; (8007854 <SystemInit+0x60>)
 800780e:	f043 0301 	orr.w	r3, r3, #1
 8007812:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8007814:	4b0f      	ldr	r3, [pc, #60]	; (8007854 <SystemInit+0x60>)
 8007816:	2200      	movs	r2, #0
 8007818:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800781a:	4b0e      	ldr	r3, [pc, #56]	; (8007854 <SystemInit+0x60>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a0d      	ldr	r2, [pc, #52]	; (8007854 <SystemInit+0x60>)
 8007820:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8007824:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8007828:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800782a:	4b0a      	ldr	r3, [pc, #40]	; (8007854 <SystemInit+0x60>)
 800782c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007830:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007832:	4b08      	ldr	r3, [pc, #32]	; (8007854 <SystemInit+0x60>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a07      	ldr	r2, [pc, #28]	; (8007854 <SystemInit+0x60>)
 8007838:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800783c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800783e:	4b05      	ldr	r3, [pc, #20]	; (8007854 <SystemInit+0x60>)
 8007840:	2200      	movs	r2, #0
 8007842:	619a      	str	r2, [r3, #24]
}
 8007844:	bf00      	nop
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	e000ed00 	.word	0xe000ed00
 8007854:	40021000 	.word	0x40021000

08007858 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007858:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007890 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800785c:	f7ff ffca 	bl	80077f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007860:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007862:	e003      	b.n	800786c <LoopCopyDataInit>

08007864 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007864:	4b0b      	ldr	r3, [pc, #44]	; (8007894 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007866:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007868:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800786a:	3104      	adds	r1, #4

0800786c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800786c:	480a      	ldr	r0, [pc, #40]	; (8007898 <LoopForever+0xa>)
	ldr	r3, =_edata
 800786e:	4b0b      	ldr	r3, [pc, #44]	; (800789c <LoopForever+0xe>)
	adds	r2, r0, r1
 8007870:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007872:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007874:	d3f6      	bcc.n	8007864 <CopyDataInit>
	ldr	r2, =_sbss
 8007876:	4a0a      	ldr	r2, [pc, #40]	; (80078a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8007878:	e002      	b.n	8007880 <LoopFillZerobss>

0800787a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800787a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800787c:	f842 3b04 	str.w	r3, [r2], #4

08007880 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007880:	4b08      	ldr	r3, [pc, #32]	; (80078a4 <LoopForever+0x16>)
	cmp	r2, r3
 8007882:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007884:	d3f9      	bcc.n	800787a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007886:	f000 f85d 	bl	8007944 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800788a:	f7fe fa15 	bl	8005cb8 <main>

0800788e <LoopForever>:

LoopForever:
    b LoopForever
 800788e:	e7fe      	b.n	800788e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007890:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8007894:	080098a4 	.word	0x080098a4
	ldr	r0, =_sdata
 8007898:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800789c:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 80078a0:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 80078a4:	2000b074 	.word	0x2000b074

080078a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80078a8:	e7fe      	b.n	80078a8 <ADC1_2_IRQHandler>
	...

080078ac <arm_sin_f32>:
 80078ac:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800792c <arm_sin_f32+0x80>
 80078b0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80078b4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80078b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078bc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80078c0:	d504      	bpl.n	80078cc <arm_sin_f32+0x20>
 80078c2:	ee17 3a90 	vmov	r3, s15
 80078c6:	3b01      	subs	r3, #1
 80078c8:	ee07 3a90 	vmov	s15, r3
 80078cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078d0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8007930 <arm_sin_f32+0x84>
 80078d4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80078d8:	ee20 0a07 	vmul.f32	s0, s0, s14
 80078dc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80078e0:	ee17 3a90 	vmov	r3, s15
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078ea:	d21a      	bcs.n	8007922 <arm_sin_f32+0x76>
 80078ec:	ee07 3a90 	vmov	s15, r3
 80078f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f4:	1c59      	adds	r1, r3, #1
 80078f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80078fa:	4a0e      	ldr	r2, [pc, #56]	; (8007934 <arm_sin_f32+0x88>)
 80078fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007900:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007904:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007908:	ed93 7a00 	vldr	s14, [r3]
 800790c:	edd2 6a00 	vldr	s13, [r2]
 8007910:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007914:	ee20 0a26 	vmul.f32	s0, s0, s13
 8007918:	ee67 7a87 	vmul.f32	s15, s15, s14
 800791c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007920:	4770      	bx	lr
 8007922:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007926:	2101      	movs	r1, #1
 8007928:	2300      	movs	r3, #0
 800792a:	e7e6      	b.n	80078fa <arm_sin_f32+0x4e>
 800792c:	3e22f983 	.word	0x3e22f983
 8007930:	44000000 	.word	0x44000000
 8007934:	08008f44 	.word	0x08008f44

08007938 <__errno>:
 8007938:	4b01      	ldr	r3, [pc, #4]	; (8007940 <__errno+0x8>)
 800793a:	6818      	ldr	r0, [r3, #0]
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	20000014 	.word	0x20000014

08007944 <__libc_init_array>:
 8007944:	b570      	push	{r4, r5, r6, lr}
 8007946:	4d0d      	ldr	r5, [pc, #52]	; (800797c <__libc_init_array+0x38>)
 8007948:	4c0d      	ldr	r4, [pc, #52]	; (8007980 <__libc_init_array+0x3c>)
 800794a:	1b64      	subs	r4, r4, r5
 800794c:	10a4      	asrs	r4, r4, #2
 800794e:	2600      	movs	r6, #0
 8007950:	42a6      	cmp	r6, r4
 8007952:	d109      	bne.n	8007968 <__libc_init_array+0x24>
 8007954:	4d0b      	ldr	r5, [pc, #44]	; (8007984 <__libc_init_array+0x40>)
 8007956:	4c0c      	ldr	r4, [pc, #48]	; (8007988 <__libc_init_array+0x44>)
 8007958:	f001 fa04 	bl	8008d64 <_init>
 800795c:	1b64      	subs	r4, r4, r5
 800795e:	10a4      	asrs	r4, r4, #2
 8007960:	2600      	movs	r6, #0
 8007962:	42a6      	cmp	r6, r4
 8007964:	d105      	bne.n	8007972 <__libc_init_array+0x2e>
 8007966:	bd70      	pop	{r4, r5, r6, pc}
 8007968:	f855 3b04 	ldr.w	r3, [r5], #4
 800796c:	4798      	blx	r3
 800796e:	3601      	adds	r6, #1
 8007970:	e7ee      	b.n	8007950 <__libc_init_array+0xc>
 8007972:	f855 3b04 	ldr.w	r3, [r5], #4
 8007976:	4798      	blx	r3
 8007978:	3601      	adds	r6, #1
 800797a:	e7f2      	b.n	8007962 <__libc_init_array+0x1e>
 800797c:	0800989c 	.word	0x0800989c
 8007980:	0800989c 	.word	0x0800989c
 8007984:	0800989c 	.word	0x0800989c
 8007988:	080098a0 	.word	0x080098a0

0800798c <memset>:
 800798c:	4402      	add	r2, r0
 800798e:	4603      	mov	r3, r0
 8007990:	4293      	cmp	r3, r2
 8007992:	d100      	bne.n	8007996 <memset+0xa>
 8007994:	4770      	bx	lr
 8007996:	f803 1b01 	strb.w	r1, [r3], #1
 800799a:	e7f9      	b.n	8007990 <memset+0x4>

0800799c <rand>:
 800799c:	4b17      	ldr	r3, [pc, #92]	; (80079fc <rand+0x60>)
 800799e:	b510      	push	{r4, lr}
 80079a0:	681c      	ldr	r4, [r3, #0]
 80079a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80079a4:	b9b3      	cbnz	r3, 80079d4 <rand+0x38>
 80079a6:	2018      	movs	r0, #24
 80079a8:	f000 f898 	bl	8007adc <malloc>
 80079ac:	63a0      	str	r0, [r4, #56]	; 0x38
 80079ae:	b928      	cbnz	r0, 80079bc <rand+0x20>
 80079b0:	4602      	mov	r2, r0
 80079b2:	4b13      	ldr	r3, [pc, #76]	; (8007a00 <rand+0x64>)
 80079b4:	4813      	ldr	r0, [pc, #76]	; (8007a04 <rand+0x68>)
 80079b6:	214e      	movs	r1, #78	; 0x4e
 80079b8:	f000 f860 	bl	8007a7c <__assert_func>
 80079bc:	4a12      	ldr	r2, [pc, #72]	; (8007a08 <rand+0x6c>)
 80079be:	4b13      	ldr	r3, [pc, #76]	; (8007a0c <rand+0x70>)
 80079c0:	e9c0 2300 	strd	r2, r3, [r0]
 80079c4:	4b12      	ldr	r3, [pc, #72]	; (8007a10 <rand+0x74>)
 80079c6:	6083      	str	r3, [r0, #8]
 80079c8:	230b      	movs	r3, #11
 80079ca:	8183      	strh	r3, [r0, #12]
 80079cc:	2201      	movs	r2, #1
 80079ce:	2300      	movs	r3, #0
 80079d0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80079d4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80079d6:	480f      	ldr	r0, [pc, #60]	; (8007a14 <rand+0x78>)
 80079d8:	690a      	ldr	r2, [r1, #16]
 80079da:	694b      	ldr	r3, [r1, #20]
 80079dc:	4c0e      	ldr	r4, [pc, #56]	; (8007a18 <rand+0x7c>)
 80079de:	4350      	muls	r0, r2
 80079e0:	fb04 0003 	mla	r0, r4, r3, r0
 80079e4:	fba2 3404 	umull	r3, r4, r2, r4
 80079e8:	1c5a      	adds	r2, r3, #1
 80079ea:	4404      	add	r4, r0
 80079ec:	f144 0000 	adc.w	r0, r4, #0
 80079f0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80079f4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80079f8:	bd10      	pop	{r4, pc}
 80079fa:	bf00      	nop
 80079fc:	20000014 	.word	0x20000014
 8007a00:	0800974c 	.word	0x0800974c
 8007a04:	08009763 	.word	0x08009763
 8007a08:	abcd330e 	.word	0xabcd330e
 8007a0c:	e66d1234 	.word	0xe66d1234
 8007a10:	0005deec 	.word	0x0005deec
 8007a14:	5851f42d 	.word	0x5851f42d
 8007a18:	4c957f2d 	.word	0x4c957f2d

08007a1c <siprintf>:
 8007a1c:	b40e      	push	{r1, r2, r3}
 8007a1e:	b500      	push	{lr}
 8007a20:	b09c      	sub	sp, #112	; 0x70
 8007a22:	ab1d      	add	r3, sp, #116	; 0x74
 8007a24:	9002      	str	r0, [sp, #8]
 8007a26:	9006      	str	r0, [sp, #24]
 8007a28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a2c:	4809      	ldr	r0, [pc, #36]	; (8007a54 <siprintf+0x38>)
 8007a2e:	9107      	str	r1, [sp, #28]
 8007a30:	9104      	str	r1, [sp, #16]
 8007a32:	4909      	ldr	r1, [pc, #36]	; (8007a58 <siprintf+0x3c>)
 8007a34:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a38:	9105      	str	r1, [sp, #20]
 8007a3a:	6800      	ldr	r0, [r0, #0]
 8007a3c:	9301      	str	r3, [sp, #4]
 8007a3e:	a902      	add	r1, sp, #8
 8007a40:	f000 f95a 	bl	8007cf8 <_svfiprintf_r>
 8007a44:	9b02      	ldr	r3, [sp, #8]
 8007a46:	2200      	movs	r2, #0
 8007a48:	701a      	strb	r2, [r3, #0]
 8007a4a:	b01c      	add	sp, #112	; 0x70
 8007a4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a50:	b003      	add	sp, #12
 8007a52:	4770      	bx	lr
 8007a54:	20000014 	.word	0x20000014
 8007a58:	ffff0208 	.word	0xffff0208

08007a5c <strcat>:
 8007a5c:	b510      	push	{r4, lr}
 8007a5e:	4602      	mov	r2, r0
 8007a60:	7814      	ldrb	r4, [r2, #0]
 8007a62:	4613      	mov	r3, r2
 8007a64:	3201      	adds	r2, #1
 8007a66:	2c00      	cmp	r4, #0
 8007a68:	d1fa      	bne.n	8007a60 <strcat+0x4>
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a70:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a74:	2a00      	cmp	r2, #0
 8007a76:	d1f9      	bne.n	8007a6c <strcat+0x10>
 8007a78:	bd10      	pop	{r4, pc}
	...

08007a7c <__assert_func>:
 8007a7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a7e:	4614      	mov	r4, r2
 8007a80:	461a      	mov	r2, r3
 8007a82:	4b09      	ldr	r3, [pc, #36]	; (8007aa8 <__assert_func+0x2c>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4605      	mov	r5, r0
 8007a88:	68d8      	ldr	r0, [r3, #12]
 8007a8a:	b14c      	cbz	r4, 8007aa0 <__assert_func+0x24>
 8007a8c:	4b07      	ldr	r3, [pc, #28]	; (8007aac <__assert_func+0x30>)
 8007a8e:	9100      	str	r1, [sp, #0]
 8007a90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a94:	4906      	ldr	r1, [pc, #24]	; (8007ab0 <__assert_func+0x34>)
 8007a96:	462b      	mov	r3, r5
 8007a98:	f000 f80e 	bl	8007ab8 <fiprintf>
 8007a9c:	f000 fdea 	bl	8008674 <abort>
 8007aa0:	4b04      	ldr	r3, [pc, #16]	; (8007ab4 <__assert_func+0x38>)
 8007aa2:	461c      	mov	r4, r3
 8007aa4:	e7f3      	b.n	8007a8e <__assert_func+0x12>
 8007aa6:	bf00      	nop
 8007aa8:	20000014 	.word	0x20000014
 8007aac:	080097c2 	.word	0x080097c2
 8007ab0:	080097cf 	.word	0x080097cf
 8007ab4:	080097fd 	.word	0x080097fd

08007ab8 <fiprintf>:
 8007ab8:	b40e      	push	{r1, r2, r3}
 8007aba:	b503      	push	{r0, r1, lr}
 8007abc:	4601      	mov	r1, r0
 8007abe:	ab03      	add	r3, sp, #12
 8007ac0:	4805      	ldr	r0, [pc, #20]	; (8007ad8 <fiprintf+0x20>)
 8007ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ac6:	6800      	ldr	r0, [r0, #0]
 8007ac8:	9301      	str	r3, [sp, #4]
 8007aca:	f000 fa3f 	bl	8007f4c <_vfiprintf_r>
 8007ace:	b002      	add	sp, #8
 8007ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ad4:	b003      	add	sp, #12
 8007ad6:	4770      	bx	lr
 8007ad8:	20000014 	.word	0x20000014

08007adc <malloc>:
 8007adc:	4b02      	ldr	r3, [pc, #8]	; (8007ae8 <malloc+0xc>)
 8007ade:	4601      	mov	r1, r0
 8007ae0:	6818      	ldr	r0, [r3, #0]
 8007ae2:	f000 b853 	b.w	8007b8c <_malloc_r>
 8007ae6:	bf00      	nop
 8007ae8:	20000014 	.word	0x20000014

08007aec <_free_r>:
 8007aec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007aee:	2900      	cmp	r1, #0
 8007af0:	d048      	beq.n	8007b84 <_free_r+0x98>
 8007af2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007af6:	9001      	str	r0, [sp, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f1a1 0404 	sub.w	r4, r1, #4
 8007afe:	bfb8      	it	lt
 8007b00:	18e4      	addlt	r4, r4, r3
 8007b02:	f001 f805 	bl	8008b10 <__malloc_lock>
 8007b06:	4a20      	ldr	r2, [pc, #128]	; (8007b88 <_free_r+0x9c>)
 8007b08:	9801      	ldr	r0, [sp, #4]
 8007b0a:	6813      	ldr	r3, [r2, #0]
 8007b0c:	4615      	mov	r5, r2
 8007b0e:	b933      	cbnz	r3, 8007b1e <_free_r+0x32>
 8007b10:	6063      	str	r3, [r4, #4]
 8007b12:	6014      	str	r4, [r2, #0]
 8007b14:	b003      	add	sp, #12
 8007b16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b1a:	f000 bfff 	b.w	8008b1c <__malloc_unlock>
 8007b1e:	42a3      	cmp	r3, r4
 8007b20:	d90b      	bls.n	8007b3a <_free_r+0x4e>
 8007b22:	6821      	ldr	r1, [r4, #0]
 8007b24:	1862      	adds	r2, r4, r1
 8007b26:	4293      	cmp	r3, r2
 8007b28:	bf04      	itt	eq
 8007b2a:	681a      	ldreq	r2, [r3, #0]
 8007b2c:	685b      	ldreq	r3, [r3, #4]
 8007b2e:	6063      	str	r3, [r4, #4]
 8007b30:	bf04      	itt	eq
 8007b32:	1852      	addeq	r2, r2, r1
 8007b34:	6022      	streq	r2, [r4, #0]
 8007b36:	602c      	str	r4, [r5, #0]
 8007b38:	e7ec      	b.n	8007b14 <_free_r+0x28>
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	b10b      	cbz	r3, 8007b44 <_free_r+0x58>
 8007b40:	42a3      	cmp	r3, r4
 8007b42:	d9fa      	bls.n	8007b3a <_free_r+0x4e>
 8007b44:	6811      	ldr	r1, [r2, #0]
 8007b46:	1855      	adds	r5, r2, r1
 8007b48:	42a5      	cmp	r5, r4
 8007b4a:	d10b      	bne.n	8007b64 <_free_r+0x78>
 8007b4c:	6824      	ldr	r4, [r4, #0]
 8007b4e:	4421      	add	r1, r4
 8007b50:	1854      	adds	r4, r2, r1
 8007b52:	42a3      	cmp	r3, r4
 8007b54:	6011      	str	r1, [r2, #0]
 8007b56:	d1dd      	bne.n	8007b14 <_free_r+0x28>
 8007b58:	681c      	ldr	r4, [r3, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	6053      	str	r3, [r2, #4]
 8007b5e:	4421      	add	r1, r4
 8007b60:	6011      	str	r1, [r2, #0]
 8007b62:	e7d7      	b.n	8007b14 <_free_r+0x28>
 8007b64:	d902      	bls.n	8007b6c <_free_r+0x80>
 8007b66:	230c      	movs	r3, #12
 8007b68:	6003      	str	r3, [r0, #0]
 8007b6a:	e7d3      	b.n	8007b14 <_free_r+0x28>
 8007b6c:	6825      	ldr	r5, [r4, #0]
 8007b6e:	1961      	adds	r1, r4, r5
 8007b70:	428b      	cmp	r3, r1
 8007b72:	bf04      	itt	eq
 8007b74:	6819      	ldreq	r1, [r3, #0]
 8007b76:	685b      	ldreq	r3, [r3, #4]
 8007b78:	6063      	str	r3, [r4, #4]
 8007b7a:	bf04      	itt	eq
 8007b7c:	1949      	addeq	r1, r1, r5
 8007b7e:	6021      	streq	r1, [r4, #0]
 8007b80:	6054      	str	r4, [r2, #4]
 8007b82:	e7c7      	b.n	8007b14 <_free_r+0x28>
 8007b84:	b003      	add	sp, #12
 8007b86:	bd30      	pop	{r4, r5, pc}
 8007b88:	2000ad60 	.word	0x2000ad60

08007b8c <_malloc_r>:
 8007b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8e:	1ccd      	adds	r5, r1, #3
 8007b90:	f025 0503 	bic.w	r5, r5, #3
 8007b94:	3508      	adds	r5, #8
 8007b96:	2d0c      	cmp	r5, #12
 8007b98:	bf38      	it	cc
 8007b9a:	250c      	movcc	r5, #12
 8007b9c:	2d00      	cmp	r5, #0
 8007b9e:	4606      	mov	r6, r0
 8007ba0:	db01      	blt.n	8007ba6 <_malloc_r+0x1a>
 8007ba2:	42a9      	cmp	r1, r5
 8007ba4:	d903      	bls.n	8007bae <_malloc_r+0x22>
 8007ba6:	230c      	movs	r3, #12
 8007ba8:	6033      	str	r3, [r6, #0]
 8007baa:	2000      	movs	r0, #0
 8007bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bae:	f000 ffaf 	bl	8008b10 <__malloc_lock>
 8007bb2:	4921      	ldr	r1, [pc, #132]	; (8007c38 <_malloc_r+0xac>)
 8007bb4:	680a      	ldr	r2, [r1, #0]
 8007bb6:	4614      	mov	r4, r2
 8007bb8:	b99c      	cbnz	r4, 8007be2 <_malloc_r+0x56>
 8007bba:	4f20      	ldr	r7, [pc, #128]	; (8007c3c <_malloc_r+0xb0>)
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	b923      	cbnz	r3, 8007bca <_malloc_r+0x3e>
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	4630      	mov	r0, r6
 8007bc4:	f000 fc86 	bl	80084d4 <_sbrk_r>
 8007bc8:	6038      	str	r0, [r7, #0]
 8007bca:	4629      	mov	r1, r5
 8007bcc:	4630      	mov	r0, r6
 8007bce:	f000 fc81 	bl	80084d4 <_sbrk_r>
 8007bd2:	1c43      	adds	r3, r0, #1
 8007bd4:	d123      	bne.n	8007c1e <_malloc_r+0x92>
 8007bd6:	230c      	movs	r3, #12
 8007bd8:	6033      	str	r3, [r6, #0]
 8007bda:	4630      	mov	r0, r6
 8007bdc:	f000 ff9e 	bl	8008b1c <__malloc_unlock>
 8007be0:	e7e3      	b.n	8007baa <_malloc_r+0x1e>
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	1b5b      	subs	r3, r3, r5
 8007be6:	d417      	bmi.n	8007c18 <_malloc_r+0x8c>
 8007be8:	2b0b      	cmp	r3, #11
 8007bea:	d903      	bls.n	8007bf4 <_malloc_r+0x68>
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	441c      	add	r4, r3
 8007bf0:	6025      	str	r5, [r4, #0]
 8007bf2:	e004      	b.n	8007bfe <_malloc_r+0x72>
 8007bf4:	6863      	ldr	r3, [r4, #4]
 8007bf6:	42a2      	cmp	r2, r4
 8007bf8:	bf0c      	ite	eq
 8007bfa:	600b      	streq	r3, [r1, #0]
 8007bfc:	6053      	strne	r3, [r2, #4]
 8007bfe:	4630      	mov	r0, r6
 8007c00:	f000 ff8c 	bl	8008b1c <__malloc_unlock>
 8007c04:	f104 000b 	add.w	r0, r4, #11
 8007c08:	1d23      	adds	r3, r4, #4
 8007c0a:	f020 0007 	bic.w	r0, r0, #7
 8007c0e:	1ac2      	subs	r2, r0, r3
 8007c10:	d0cc      	beq.n	8007bac <_malloc_r+0x20>
 8007c12:	1a1b      	subs	r3, r3, r0
 8007c14:	50a3      	str	r3, [r4, r2]
 8007c16:	e7c9      	b.n	8007bac <_malloc_r+0x20>
 8007c18:	4622      	mov	r2, r4
 8007c1a:	6864      	ldr	r4, [r4, #4]
 8007c1c:	e7cc      	b.n	8007bb8 <_malloc_r+0x2c>
 8007c1e:	1cc4      	adds	r4, r0, #3
 8007c20:	f024 0403 	bic.w	r4, r4, #3
 8007c24:	42a0      	cmp	r0, r4
 8007c26:	d0e3      	beq.n	8007bf0 <_malloc_r+0x64>
 8007c28:	1a21      	subs	r1, r4, r0
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	f000 fc52 	bl	80084d4 <_sbrk_r>
 8007c30:	3001      	adds	r0, #1
 8007c32:	d1dd      	bne.n	8007bf0 <_malloc_r+0x64>
 8007c34:	e7cf      	b.n	8007bd6 <_malloc_r+0x4a>
 8007c36:	bf00      	nop
 8007c38:	2000ad60 	.word	0x2000ad60
 8007c3c:	2000ad64 	.word	0x2000ad64

08007c40 <__ssputs_r>:
 8007c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c44:	688e      	ldr	r6, [r1, #8]
 8007c46:	429e      	cmp	r6, r3
 8007c48:	4682      	mov	sl, r0
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	4690      	mov	r8, r2
 8007c4e:	461f      	mov	r7, r3
 8007c50:	d838      	bhi.n	8007cc4 <__ssputs_r+0x84>
 8007c52:	898a      	ldrh	r2, [r1, #12]
 8007c54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c58:	d032      	beq.n	8007cc0 <__ssputs_r+0x80>
 8007c5a:	6825      	ldr	r5, [r4, #0]
 8007c5c:	6909      	ldr	r1, [r1, #16]
 8007c5e:	eba5 0901 	sub.w	r9, r5, r1
 8007c62:	6965      	ldr	r5, [r4, #20]
 8007c64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	444b      	add	r3, r9
 8007c70:	106d      	asrs	r5, r5, #1
 8007c72:	429d      	cmp	r5, r3
 8007c74:	bf38      	it	cc
 8007c76:	461d      	movcc	r5, r3
 8007c78:	0553      	lsls	r3, r2, #21
 8007c7a:	d531      	bpl.n	8007ce0 <__ssputs_r+0xa0>
 8007c7c:	4629      	mov	r1, r5
 8007c7e:	f7ff ff85 	bl	8007b8c <_malloc_r>
 8007c82:	4606      	mov	r6, r0
 8007c84:	b950      	cbnz	r0, 8007c9c <__ssputs_r+0x5c>
 8007c86:	230c      	movs	r3, #12
 8007c88:	f8ca 3000 	str.w	r3, [sl]
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c92:	81a3      	strh	r3, [r4, #12]
 8007c94:	f04f 30ff 	mov.w	r0, #4294967295
 8007c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c9c:	6921      	ldr	r1, [r4, #16]
 8007c9e:	464a      	mov	r2, r9
 8007ca0:	f000 ff0e 	bl	8008ac0 <memcpy>
 8007ca4:	89a3      	ldrh	r3, [r4, #12]
 8007ca6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cae:	81a3      	strh	r3, [r4, #12]
 8007cb0:	6126      	str	r6, [r4, #16]
 8007cb2:	6165      	str	r5, [r4, #20]
 8007cb4:	444e      	add	r6, r9
 8007cb6:	eba5 0509 	sub.w	r5, r5, r9
 8007cba:	6026      	str	r6, [r4, #0]
 8007cbc:	60a5      	str	r5, [r4, #8]
 8007cbe:	463e      	mov	r6, r7
 8007cc0:	42be      	cmp	r6, r7
 8007cc2:	d900      	bls.n	8007cc6 <__ssputs_r+0x86>
 8007cc4:	463e      	mov	r6, r7
 8007cc6:	4632      	mov	r2, r6
 8007cc8:	6820      	ldr	r0, [r4, #0]
 8007cca:	4641      	mov	r1, r8
 8007ccc:	f000 ff06 	bl	8008adc <memmove>
 8007cd0:	68a3      	ldr	r3, [r4, #8]
 8007cd2:	6822      	ldr	r2, [r4, #0]
 8007cd4:	1b9b      	subs	r3, r3, r6
 8007cd6:	4432      	add	r2, r6
 8007cd8:	60a3      	str	r3, [r4, #8]
 8007cda:	6022      	str	r2, [r4, #0]
 8007cdc:	2000      	movs	r0, #0
 8007cde:	e7db      	b.n	8007c98 <__ssputs_r+0x58>
 8007ce0:	462a      	mov	r2, r5
 8007ce2:	f000 ff21 	bl	8008b28 <_realloc_r>
 8007ce6:	4606      	mov	r6, r0
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d1e1      	bne.n	8007cb0 <__ssputs_r+0x70>
 8007cec:	6921      	ldr	r1, [r4, #16]
 8007cee:	4650      	mov	r0, sl
 8007cf0:	f7ff fefc 	bl	8007aec <_free_r>
 8007cf4:	e7c7      	b.n	8007c86 <__ssputs_r+0x46>
	...

08007cf8 <_svfiprintf_r>:
 8007cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cfc:	4698      	mov	r8, r3
 8007cfe:	898b      	ldrh	r3, [r1, #12]
 8007d00:	061b      	lsls	r3, r3, #24
 8007d02:	b09d      	sub	sp, #116	; 0x74
 8007d04:	4607      	mov	r7, r0
 8007d06:	460d      	mov	r5, r1
 8007d08:	4614      	mov	r4, r2
 8007d0a:	d50e      	bpl.n	8007d2a <_svfiprintf_r+0x32>
 8007d0c:	690b      	ldr	r3, [r1, #16]
 8007d0e:	b963      	cbnz	r3, 8007d2a <_svfiprintf_r+0x32>
 8007d10:	2140      	movs	r1, #64	; 0x40
 8007d12:	f7ff ff3b 	bl	8007b8c <_malloc_r>
 8007d16:	6028      	str	r0, [r5, #0]
 8007d18:	6128      	str	r0, [r5, #16]
 8007d1a:	b920      	cbnz	r0, 8007d26 <_svfiprintf_r+0x2e>
 8007d1c:	230c      	movs	r3, #12
 8007d1e:	603b      	str	r3, [r7, #0]
 8007d20:	f04f 30ff 	mov.w	r0, #4294967295
 8007d24:	e0d1      	b.n	8007eca <_svfiprintf_r+0x1d2>
 8007d26:	2340      	movs	r3, #64	; 0x40
 8007d28:	616b      	str	r3, [r5, #20]
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d2e:	2320      	movs	r3, #32
 8007d30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d34:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d38:	2330      	movs	r3, #48	; 0x30
 8007d3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007ee4 <_svfiprintf_r+0x1ec>
 8007d3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d42:	f04f 0901 	mov.w	r9, #1
 8007d46:	4623      	mov	r3, r4
 8007d48:	469a      	mov	sl, r3
 8007d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d4e:	b10a      	cbz	r2, 8007d54 <_svfiprintf_r+0x5c>
 8007d50:	2a25      	cmp	r2, #37	; 0x25
 8007d52:	d1f9      	bne.n	8007d48 <_svfiprintf_r+0x50>
 8007d54:	ebba 0b04 	subs.w	fp, sl, r4
 8007d58:	d00b      	beq.n	8007d72 <_svfiprintf_r+0x7a>
 8007d5a:	465b      	mov	r3, fp
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	4629      	mov	r1, r5
 8007d60:	4638      	mov	r0, r7
 8007d62:	f7ff ff6d 	bl	8007c40 <__ssputs_r>
 8007d66:	3001      	adds	r0, #1
 8007d68:	f000 80aa 	beq.w	8007ec0 <_svfiprintf_r+0x1c8>
 8007d6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d6e:	445a      	add	r2, fp
 8007d70:	9209      	str	r2, [sp, #36]	; 0x24
 8007d72:	f89a 3000 	ldrb.w	r3, [sl]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f000 80a2 	beq.w	8007ec0 <_svfiprintf_r+0x1c8>
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d86:	f10a 0a01 	add.w	sl, sl, #1
 8007d8a:	9304      	str	r3, [sp, #16]
 8007d8c:	9307      	str	r3, [sp, #28]
 8007d8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d92:	931a      	str	r3, [sp, #104]	; 0x68
 8007d94:	4654      	mov	r4, sl
 8007d96:	2205      	movs	r2, #5
 8007d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d9c:	4851      	ldr	r0, [pc, #324]	; (8007ee4 <_svfiprintf_r+0x1ec>)
 8007d9e:	f7f8 fa1f 	bl	80001e0 <memchr>
 8007da2:	9a04      	ldr	r2, [sp, #16]
 8007da4:	b9d8      	cbnz	r0, 8007dde <_svfiprintf_r+0xe6>
 8007da6:	06d0      	lsls	r0, r2, #27
 8007da8:	bf44      	itt	mi
 8007daa:	2320      	movmi	r3, #32
 8007dac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007db0:	0711      	lsls	r1, r2, #28
 8007db2:	bf44      	itt	mi
 8007db4:	232b      	movmi	r3, #43	; 0x2b
 8007db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dba:	f89a 3000 	ldrb.w	r3, [sl]
 8007dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8007dc0:	d015      	beq.n	8007dee <_svfiprintf_r+0xf6>
 8007dc2:	9a07      	ldr	r2, [sp, #28]
 8007dc4:	4654      	mov	r4, sl
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	f04f 0c0a 	mov.w	ip, #10
 8007dcc:	4621      	mov	r1, r4
 8007dce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dd2:	3b30      	subs	r3, #48	; 0x30
 8007dd4:	2b09      	cmp	r3, #9
 8007dd6:	d94e      	bls.n	8007e76 <_svfiprintf_r+0x17e>
 8007dd8:	b1b0      	cbz	r0, 8007e08 <_svfiprintf_r+0x110>
 8007dda:	9207      	str	r2, [sp, #28]
 8007ddc:	e014      	b.n	8007e08 <_svfiprintf_r+0x110>
 8007dde:	eba0 0308 	sub.w	r3, r0, r8
 8007de2:	fa09 f303 	lsl.w	r3, r9, r3
 8007de6:	4313      	orrs	r3, r2
 8007de8:	9304      	str	r3, [sp, #16]
 8007dea:	46a2      	mov	sl, r4
 8007dec:	e7d2      	b.n	8007d94 <_svfiprintf_r+0x9c>
 8007dee:	9b03      	ldr	r3, [sp, #12]
 8007df0:	1d19      	adds	r1, r3, #4
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	9103      	str	r1, [sp, #12]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	bfbb      	ittet	lt
 8007dfa:	425b      	neglt	r3, r3
 8007dfc:	f042 0202 	orrlt.w	r2, r2, #2
 8007e00:	9307      	strge	r3, [sp, #28]
 8007e02:	9307      	strlt	r3, [sp, #28]
 8007e04:	bfb8      	it	lt
 8007e06:	9204      	strlt	r2, [sp, #16]
 8007e08:	7823      	ldrb	r3, [r4, #0]
 8007e0a:	2b2e      	cmp	r3, #46	; 0x2e
 8007e0c:	d10c      	bne.n	8007e28 <_svfiprintf_r+0x130>
 8007e0e:	7863      	ldrb	r3, [r4, #1]
 8007e10:	2b2a      	cmp	r3, #42	; 0x2a
 8007e12:	d135      	bne.n	8007e80 <_svfiprintf_r+0x188>
 8007e14:	9b03      	ldr	r3, [sp, #12]
 8007e16:	1d1a      	adds	r2, r3, #4
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	9203      	str	r2, [sp, #12]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	bfb8      	it	lt
 8007e20:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e24:	3402      	adds	r4, #2
 8007e26:	9305      	str	r3, [sp, #20]
 8007e28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ef4 <_svfiprintf_r+0x1fc>
 8007e2c:	7821      	ldrb	r1, [r4, #0]
 8007e2e:	2203      	movs	r2, #3
 8007e30:	4650      	mov	r0, sl
 8007e32:	f7f8 f9d5 	bl	80001e0 <memchr>
 8007e36:	b140      	cbz	r0, 8007e4a <_svfiprintf_r+0x152>
 8007e38:	2340      	movs	r3, #64	; 0x40
 8007e3a:	eba0 000a 	sub.w	r0, r0, sl
 8007e3e:	fa03 f000 	lsl.w	r0, r3, r0
 8007e42:	9b04      	ldr	r3, [sp, #16]
 8007e44:	4303      	orrs	r3, r0
 8007e46:	3401      	adds	r4, #1
 8007e48:	9304      	str	r3, [sp, #16]
 8007e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e4e:	4826      	ldr	r0, [pc, #152]	; (8007ee8 <_svfiprintf_r+0x1f0>)
 8007e50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e54:	2206      	movs	r2, #6
 8007e56:	f7f8 f9c3 	bl	80001e0 <memchr>
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	d038      	beq.n	8007ed0 <_svfiprintf_r+0x1d8>
 8007e5e:	4b23      	ldr	r3, [pc, #140]	; (8007eec <_svfiprintf_r+0x1f4>)
 8007e60:	bb1b      	cbnz	r3, 8007eaa <_svfiprintf_r+0x1b2>
 8007e62:	9b03      	ldr	r3, [sp, #12]
 8007e64:	3307      	adds	r3, #7
 8007e66:	f023 0307 	bic.w	r3, r3, #7
 8007e6a:	3308      	adds	r3, #8
 8007e6c:	9303      	str	r3, [sp, #12]
 8007e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e70:	4433      	add	r3, r6
 8007e72:	9309      	str	r3, [sp, #36]	; 0x24
 8007e74:	e767      	b.n	8007d46 <_svfiprintf_r+0x4e>
 8007e76:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	2001      	movs	r0, #1
 8007e7e:	e7a5      	b.n	8007dcc <_svfiprintf_r+0xd4>
 8007e80:	2300      	movs	r3, #0
 8007e82:	3401      	adds	r4, #1
 8007e84:	9305      	str	r3, [sp, #20]
 8007e86:	4619      	mov	r1, r3
 8007e88:	f04f 0c0a 	mov.w	ip, #10
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e92:	3a30      	subs	r2, #48	; 0x30
 8007e94:	2a09      	cmp	r2, #9
 8007e96:	d903      	bls.n	8007ea0 <_svfiprintf_r+0x1a8>
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d0c5      	beq.n	8007e28 <_svfiprintf_r+0x130>
 8007e9c:	9105      	str	r1, [sp, #20]
 8007e9e:	e7c3      	b.n	8007e28 <_svfiprintf_r+0x130>
 8007ea0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ea4:	4604      	mov	r4, r0
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e7f0      	b.n	8007e8c <_svfiprintf_r+0x194>
 8007eaa:	ab03      	add	r3, sp, #12
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	462a      	mov	r2, r5
 8007eb0:	4b0f      	ldr	r3, [pc, #60]	; (8007ef0 <_svfiprintf_r+0x1f8>)
 8007eb2:	a904      	add	r1, sp, #16
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	f3af 8000 	nop.w
 8007eba:	1c42      	adds	r2, r0, #1
 8007ebc:	4606      	mov	r6, r0
 8007ebe:	d1d6      	bne.n	8007e6e <_svfiprintf_r+0x176>
 8007ec0:	89ab      	ldrh	r3, [r5, #12]
 8007ec2:	065b      	lsls	r3, r3, #25
 8007ec4:	f53f af2c 	bmi.w	8007d20 <_svfiprintf_r+0x28>
 8007ec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007eca:	b01d      	add	sp, #116	; 0x74
 8007ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed0:	ab03      	add	r3, sp, #12
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	462a      	mov	r2, r5
 8007ed6:	4b06      	ldr	r3, [pc, #24]	; (8007ef0 <_svfiprintf_r+0x1f8>)
 8007ed8:	a904      	add	r1, sp, #16
 8007eda:	4638      	mov	r0, r7
 8007edc:	f000 f9d4 	bl	8008288 <_printf_i>
 8007ee0:	e7eb      	b.n	8007eba <_svfiprintf_r+0x1c2>
 8007ee2:	bf00      	nop
 8007ee4:	080097fe 	.word	0x080097fe
 8007ee8:	08009808 	.word	0x08009808
 8007eec:	00000000 	.word	0x00000000
 8007ef0:	08007c41 	.word	0x08007c41
 8007ef4:	08009804 	.word	0x08009804

08007ef8 <__sfputc_r>:
 8007ef8:	6893      	ldr	r3, [r2, #8]
 8007efa:	3b01      	subs	r3, #1
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	b410      	push	{r4}
 8007f00:	6093      	str	r3, [r2, #8]
 8007f02:	da08      	bge.n	8007f16 <__sfputc_r+0x1e>
 8007f04:	6994      	ldr	r4, [r2, #24]
 8007f06:	42a3      	cmp	r3, r4
 8007f08:	db01      	blt.n	8007f0e <__sfputc_r+0x16>
 8007f0a:	290a      	cmp	r1, #10
 8007f0c:	d103      	bne.n	8007f16 <__sfputc_r+0x1e>
 8007f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f12:	f000 baef 	b.w	80084f4 <__swbuf_r>
 8007f16:	6813      	ldr	r3, [r2, #0]
 8007f18:	1c58      	adds	r0, r3, #1
 8007f1a:	6010      	str	r0, [r2, #0]
 8007f1c:	7019      	strb	r1, [r3, #0]
 8007f1e:	4608      	mov	r0, r1
 8007f20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <__sfputs_r>:
 8007f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f28:	4606      	mov	r6, r0
 8007f2a:	460f      	mov	r7, r1
 8007f2c:	4614      	mov	r4, r2
 8007f2e:	18d5      	adds	r5, r2, r3
 8007f30:	42ac      	cmp	r4, r5
 8007f32:	d101      	bne.n	8007f38 <__sfputs_r+0x12>
 8007f34:	2000      	movs	r0, #0
 8007f36:	e007      	b.n	8007f48 <__sfputs_r+0x22>
 8007f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f3c:	463a      	mov	r2, r7
 8007f3e:	4630      	mov	r0, r6
 8007f40:	f7ff ffda 	bl	8007ef8 <__sfputc_r>
 8007f44:	1c43      	adds	r3, r0, #1
 8007f46:	d1f3      	bne.n	8007f30 <__sfputs_r+0xa>
 8007f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f4c <_vfiprintf_r>:
 8007f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f50:	460d      	mov	r5, r1
 8007f52:	b09d      	sub	sp, #116	; 0x74
 8007f54:	4614      	mov	r4, r2
 8007f56:	4698      	mov	r8, r3
 8007f58:	4606      	mov	r6, r0
 8007f5a:	b118      	cbz	r0, 8007f64 <_vfiprintf_r+0x18>
 8007f5c:	6983      	ldr	r3, [r0, #24]
 8007f5e:	b90b      	cbnz	r3, 8007f64 <_vfiprintf_r+0x18>
 8007f60:	f000 fcaa 	bl	80088b8 <__sinit>
 8007f64:	4b89      	ldr	r3, [pc, #548]	; (800818c <_vfiprintf_r+0x240>)
 8007f66:	429d      	cmp	r5, r3
 8007f68:	d11b      	bne.n	8007fa2 <_vfiprintf_r+0x56>
 8007f6a:	6875      	ldr	r5, [r6, #4]
 8007f6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f6e:	07d9      	lsls	r1, r3, #31
 8007f70:	d405      	bmi.n	8007f7e <_vfiprintf_r+0x32>
 8007f72:	89ab      	ldrh	r3, [r5, #12]
 8007f74:	059a      	lsls	r2, r3, #22
 8007f76:	d402      	bmi.n	8007f7e <_vfiprintf_r+0x32>
 8007f78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f7a:	f000 fd3b 	bl	80089f4 <__retarget_lock_acquire_recursive>
 8007f7e:	89ab      	ldrh	r3, [r5, #12]
 8007f80:	071b      	lsls	r3, r3, #28
 8007f82:	d501      	bpl.n	8007f88 <_vfiprintf_r+0x3c>
 8007f84:	692b      	ldr	r3, [r5, #16]
 8007f86:	b9eb      	cbnz	r3, 8007fc4 <_vfiprintf_r+0x78>
 8007f88:	4629      	mov	r1, r5
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	f000 fb04 	bl	8008598 <__swsetup_r>
 8007f90:	b1c0      	cbz	r0, 8007fc4 <_vfiprintf_r+0x78>
 8007f92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f94:	07dc      	lsls	r4, r3, #31
 8007f96:	d50e      	bpl.n	8007fb6 <_vfiprintf_r+0x6a>
 8007f98:	f04f 30ff 	mov.w	r0, #4294967295
 8007f9c:	b01d      	add	sp, #116	; 0x74
 8007f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa2:	4b7b      	ldr	r3, [pc, #492]	; (8008190 <_vfiprintf_r+0x244>)
 8007fa4:	429d      	cmp	r5, r3
 8007fa6:	d101      	bne.n	8007fac <_vfiprintf_r+0x60>
 8007fa8:	68b5      	ldr	r5, [r6, #8]
 8007faa:	e7df      	b.n	8007f6c <_vfiprintf_r+0x20>
 8007fac:	4b79      	ldr	r3, [pc, #484]	; (8008194 <_vfiprintf_r+0x248>)
 8007fae:	429d      	cmp	r5, r3
 8007fb0:	bf08      	it	eq
 8007fb2:	68f5      	ldreq	r5, [r6, #12]
 8007fb4:	e7da      	b.n	8007f6c <_vfiprintf_r+0x20>
 8007fb6:	89ab      	ldrh	r3, [r5, #12]
 8007fb8:	0598      	lsls	r0, r3, #22
 8007fba:	d4ed      	bmi.n	8007f98 <_vfiprintf_r+0x4c>
 8007fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fbe:	f000 fd1a 	bl	80089f6 <__retarget_lock_release_recursive>
 8007fc2:	e7e9      	b.n	8007f98 <_vfiprintf_r+0x4c>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8007fc8:	2320      	movs	r3, #32
 8007fca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fce:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fd2:	2330      	movs	r3, #48	; 0x30
 8007fd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008198 <_vfiprintf_r+0x24c>
 8007fd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fdc:	f04f 0901 	mov.w	r9, #1
 8007fe0:	4623      	mov	r3, r4
 8007fe2:	469a      	mov	sl, r3
 8007fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fe8:	b10a      	cbz	r2, 8007fee <_vfiprintf_r+0xa2>
 8007fea:	2a25      	cmp	r2, #37	; 0x25
 8007fec:	d1f9      	bne.n	8007fe2 <_vfiprintf_r+0x96>
 8007fee:	ebba 0b04 	subs.w	fp, sl, r4
 8007ff2:	d00b      	beq.n	800800c <_vfiprintf_r+0xc0>
 8007ff4:	465b      	mov	r3, fp
 8007ff6:	4622      	mov	r2, r4
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	f7ff ff93 	bl	8007f26 <__sfputs_r>
 8008000:	3001      	adds	r0, #1
 8008002:	f000 80aa 	beq.w	800815a <_vfiprintf_r+0x20e>
 8008006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008008:	445a      	add	r2, fp
 800800a:	9209      	str	r2, [sp, #36]	; 0x24
 800800c:	f89a 3000 	ldrb.w	r3, [sl]
 8008010:	2b00      	cmp	r3, #0
 8008012:	f000 80a2 	beq.w	800815a <_vfiprintf_r+0x20e>
 8008016:	2300      	movs	r3, #0
 8008018:	f04f 32ff 	mov.w	r2, #4294967295
 800801c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008020:	f10a 0a01 	add.w	sl, sl, #1
 8008024:	9304      	str	r3, [sp, #16]
 8008026:	9307      	str	r3, [sp, #28]
 8008028:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800802c:	931a      	str	r3, [sp, #104]	; 0x68
 800802e:	4654      	mov	r4, sl
 8008030:	2205      	movs	r2, #5
 8008032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008036:	4858      	ldr	r0, [pc, #352]	; (8008198 <_vfiprintf_r+0x24c>)
 8008038:	f7f8 f8d2 	bl	80001e0 <memchr>
 800803c:	9a04      	ldr	r2, [sp, #16]
 800803e:	b9d8      	cbnz	r0, 8008078 <_vfiprintf_r+0x12c>
 8008040:	06d1      	lsls	r1, r2, #27
 8008042:	bf44      	itt	mi
 8008044:	2320      	movmi	r3, #32
 8008046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800804a:	0713      	lsls	r3, r2, #28
 800804c:	bf44      	itt	mi
 800804e:	232b      	movmi	r3, #43	; 0x2b
 8008050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008054:	f89a 3000 	ldrb.w	r3, [sl]
 8008058:	2b2a      	cmp	r3, #42	; 0x2a
 800805a:	d015      	beq.n	8008088 <_vfiprintf_r+0x13c>
 800805c:	9a07      	ldr	r2, [sp, #28]
 800805e:	4654      	mov	r4, sl
 8008060:	2000      	movs	r0, #0
 8008062:	f04f 0c0a 	mov.w	ip, #10
 8008066:	4621      	mov	r1, r4
 8008068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800806c:	3b30      	subs	r3, #48	; 0x30
 800806e:	2b09      	cmp	r3, #9
 8008070:	d94e      	bls.n	8008110 <_vfiprintf_r+0x1c4>
 8008072:	b1b0      	cbz	r0, 80080a2 <_vfiprintf_r+0x156>
 8008074:	9207      	str	r2, [sp, #28]
 8008076:	e014      	b.n	80080a2 <_vfiprintf_r+0x156>
 8008078:	eba0 0308 	sub.w	r3, r0, r8
 800807c:	fa09 f303 	lsl.w	r3, r9, r3
 8008080:	4313      	orrs	r3, r2
 8008082:	9304      	str	r3, [sp, #16]
 8008084:	46a2      	mov	sl, r4
 8008086:	e7d2      	b.n	800802e <_vfiprintf_r+0xe2>
 8008088:	9b03      	ldr	r3, [sp, #12]
 800808a:	1d19      	adds	r1, r3, #4
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	9103      	str	r1, [sp, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	bfbb      	ittet	lt
 8008094:	425b      	neglt	r3, r3
 8008096:	f042 0202 	orrlt.w	r2, r2, #2
 800809a:	9307      	strge	r3, [sp, #28]
 800809c:	9307      	strlt	r3, [sp, #28]
 800809e:	bfb8      	it	lt
 80080a0:	9204      	strlt	r2, [sp, #16]
 80080a2:	7823      	ldrb	r3, [r4, #0]
 80080a4:	2b2e      	cmp	r3, #46	; 0x2e
 80080a6:	d10c      	bne.n	80080c2 <_vfiprintf_r+0x176>
 80080a8:	7863      	ldrb	r3, [r4, #1]
 80080aa:	2b2a      	cmp	r3, #42	; 0x2a
 80080ac:	d135      	bne.n	800811a <_vfiprintf_r+0x1ce>
 80080ae:	9b03      	ldr	r3, [sp, #12]
 80080b0:	1d1a      	adds	r2, r3, #4
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	9203      	str	r2, [sp, #12]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	bfb8      	it	lt
 80080ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80080be:	3402      	adds	r4, #2
 80080c0:	9305      	str	r3, [sp, #20]
 80080c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80081a8 <_vfiprintf_r+0x25c>
 80080c6:	7821      	ldrb	r1, [r4, #0]
 80080c8:	2203      	movs	r2, #3
 80080ca:	4650      	mov	r0, sl
 80080cc:	f7f8 f888 	bl	80001e0 <memchr>
 80080d0:	b140      	cbz	r0, 80080e4 <_vfiprintf_r+0x198>
 80080d2:	2340      	movs	r3, #64	; 0x40
 80080d4:	eba0 000a 	sub.w	r0, r0, sl
 80080d8:	fa03 f000 	lsl.w	r0, r3, r0
 80080dc:	9b04      	ldr	r3, [sp, #16]
 80080de:	4303      	orrs	r3, r0
 80080e0:	3401      	adds	r4, #1
 80080e2:	9304      	str	r3, [sp, #16]
 80080e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080e8:	482c      	ldr	r0, [pc, #176]	; (800819c <_vfiprintf_r+0x250>)
 80080ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080ee:	2206      	movs	r2, #6
 80080f0:	f7f8 f876 	bl	80001e0 <memchr>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	d03f      	beq.n	8008178 <_vfiprintf_r+0x22c>
 80080f8:	4b29      	ldr	r3, [pc, #164]	; (80081a0 <_vfiprintf_r+0x254>)
 80080fa:	bb1b      	cbnz	r3, 8008144 <_vfiprintf_r+0x1f8>
 80080fc:	9b03      	ldr	r3, [sp, #12]
 80080fe:	3307      	adds	r3, #7
 8008100:	f023 0307 	bic.w	r3, r3, #7
 8008104:	3308      	adds	r3, #8
 8008106:	9303      	str	r3, [sp, #12]
 8008108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800810a:	443b      	add	r3, r7
 800810c:	9309      	str	r3, [sp, #36]	; 0x24
 800810e:	e767      	b.n	8007fe0 <_vfiprintf_r+0x94>
 8008110:	fb0c 3202 	mla	r2, ip, r2, r3
 8008114:	460c      	mov	r4, r1
 8008116:	2001      	movs	r0, #1
 8008118:	e7a5      	b.n	8008066 <_vfiprintf_r+0x11a>
 800811a:	2300      	movs	r3, #0
 800811c:	3401      	adds	r4, #1
 800811e:	9305      	str	r3, [sp, #20]
 8008120:	4619      	mov	r1, r3
 8008122:	f04f 0c0a 	mov.w	ip, #10
 8008126:	4620      	mov	r0, r4
 8008128:	f810 2b01 	ldrb.w	r2, [r0], #1
 800812c:	3a30      	subs	r2, #48	; 0x30
 800812e:	2a09      	cmp	r2, #9
 8008130:	d903      	bls.n	800813a <_vfiprintf_r+0x1ee>
 8008132:	2b00      	cmp	r3, #0
 8008134:	d0c5      	beq.n	80080c2 <_vfiprintf_r+0x176>
 8008136:	9105      	str	r1, [sp, #20]
 8008138:	e7c3      	b.n	80080c2 <_vfiprintf_r+0x176>
 800813a:	fb0c 2101 	mla	r1, ip, r1, r2
 800813e:	4604      	mov	r4, r0
 8008140:	2301      	movs	r3, #1
 8008142:	e7f0      	b.n	8008126 <_vfiprintf_r+0x1da>
 8008144:	ab03      	add	r3, sp, #12
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	462a      	mov	r2, r5
 800814a:	4b16      	ldr	r3, [pc, #88]	; (80081a4 <_vfiprintf_r+0x258>)
 800814c:	a904      	add	r1, sp, #16
 800814e:	4630      	mov	r0, r6
 8008150:	f3af 8000 	nop.w
 8008154:	4607      	mov	r7, r0
 8008156:	1c78      	adds	r0, r7, #1
 8008158:	d1d6      	bne.n	8008108 <_vfiprintf_r+0x1bc>
 800815a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800815c:	07d9      	lsls	r1, r3, #31
 800815e:	d405      	bmi.n	800816c <_vfiprintf_r+0x220>
 8008160:	89ab      	ldrh	r3, [r5, #12]
 8008162:	059a      	lsls	r2, r3, #22
 8008164:	d402      	bmi.n	800816c <_vfiprintf_r+0x220>
 8008166:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008168:	f000 fc45 	bl	80089f6 <__retarget_lock_release_recursive>
 800816c:	89ab      	ldrh	r3, [r5, #12]
 800816e:	065b      	lsls	r3, r3, #25
 8008170:	f53f af12 	bmi.w	8007f98 <_vfiprintf_r+0x4c>
 8008174:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008176:	e711      	b.n	8007f9c <_vfiprintf_r+0x50>
 8008178:	ab03      	add	r3, sp, #12
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	462a      	mov	r2, r5
 800817e:	4b09      	ldr	r3, [pc, #36]	; (80081a4 <_vfiprintf_r+0x258>)
 8008180:	a904      	add	r1, sp, #16
 8008182:	4630      	mov	r0, r6
 8008184:	f000 f880 	bl	8008288 <_printf_i>
 8008188:	e7e4      	b.n	8008154 <_vfiprintf_r+0x208>
 800818a:	bf00      	nop
 800818c:	08009854 	.word	0x08009854
 8008190:	08009874 	.word	0x08009874
 8008194:	08009834 	.word	0x08009834
 8008198:	080097fe 	.word	0x080097fe
 800819c:	08009808 	.word	0x08009808
 80081a0:	00000000 	.word	0x00000000
 80081a4:	08007f27 	.word	0x08007f27
 80081a8:	08009804 	.word	0x08009804

080081ac <_printf_common>:
 80081ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081b0:	4616      	mov	r6, r2
 80081b2:	4699      	mov	r9, r3
 80081b4:	688a      	ldr	r2, [r1, #8]
 80081b6:	690b      	ldr	r3, [r1, #16]
 80081b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081bc:	4293      	cmp	r3, r2
 80081be:	bfb8      	it	lt
 80081c0:	4613      	movlt	r3, r2
 80081c2:	6033      	str	r3, [r6, #0]
 80081c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081c8:	4607      	mov	r7, r0
 80081ca:	460c      	mov	r4, r1
 80081cc:	b10a      	cbz	r2, 80081d2 <_printf_common+0x26>
 80081ce:	3301      	adds	r3, #1
 80081d0:	6033      	str	r3, [r6, #0]
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	0699      	lsls	r1, r3, #26
 80081d6:	bf42      	ittt	mi
 80081d8:	6833      	ldrmi	r3, [r6, #0]
 80081da:	3302      	addmi	r3, #2
 80081dc:	6033      	strmi	r3, [r6, #0]
 80081de:	6825      	ldr	r5, [r4, #0]
 80081e0:	f015 0506 	ands.w	r5, r5, #6
 80081e4:	d106      	bne.n	80081f4 <_printf_common+0x48>
 80081e6:	f104 0a19 	add.w	sl, r4, #25
 80081ea:	68e3      	ldr	r3, [r4, #12]
 80081ec:	6832      	ldr	r2, [r6, #0]
 80081ee:	1a9b      	subs	r3, r3, r2
 80081f0:	42ab      	cmp	r3, r5
 80081f2:	dc26      	bgt.n	8008242 <_printf_common+0x96>
 80081f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081f8:	1e13      	subs	r3, r2, #0
 80081fa:	6822      	ldr	r2, [r4, #0]
 80081fc:	bf18      	it	ne
 80081fe:	2301      	movne	r3, #1
 8008200:	0692      	lsls	r2, r2, #26
 8008202:	d42b      	bmi.n	800825c <_printf_common+0xb0>
 8008204:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008208:	4649      	mov	r1, r9
 800820a:	4638      	mov	r0, r7
 800820c:	47c0      	blx	r8
 800820e:	3001      	adds	r0, #1
 8008210:	d01e      	beq.n	8008250 <_printf_common+0xa4>
 8008212:	6823      	ldr	r3, [r4, #0]
 8008214:	68e5      	ldr	r5, [r4, #12]
 8008216:	6832      	ldr	r2, [r6, #0]
 8008218:	f003 0306 	and.w	r3, r3, #6
 800821c:	2b04      	cmp	r3, #4
 800821e:	bf08      	it	eq
 8008220:	1aad      	subeq	r5, r5, r2
 8008222:	68a3      	ldr	r3, [r4, #8]
 8008224:	6922      	ldr	r2, [r4, #16]
 8008226:	bf0c      	ite	eq
 8008228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800822c:	2500      	movne	r5, #0
 800822e:	4293      	cmp	r3, r2
 8008230:	bfc4      	itt	gt
 8008232:	1a9b      	subgt	r3, r3, r2
 8008234:	18ed      	addgt	r5, r5, r3
 8008236:	2600      	movs	r6, #0
 8008238:	341a      	adds	r4, #26
 800823a:	42b5      	cmp	r5, r6
 800823c:	d11a      	bne.n	8008274 <_printf_common+0xc8>
 800823e:	2000      	movs	r0, #0
 8008240:	e008      	b.n	8008254 <_printf_common+0xa8>
 8008242:	2301      	movs	r3, #1
 8008244:	4652      	mov	r2, sl
 8008246:	4649      	mov	r1, r9
 8008248:	4638      	mov	r0, r7
 800824a:	47c0      	blx	r8
 800824c:	3001      	adds	r0, #1
 800824e:	d103      	bne.n	8008258 <_printf_common+0xac>
 8008250:	f04f 30ff 	mov.w	r0, #4294967295
 8008254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008258:	3501      	adds	r5, #1
 800825a:	e7c6      	b.n	80081ea <_printf_common+0x3e>
 800825c:	18e1      	adds	r1, r4, r3
 800825e:	1c5a      	adds	r2, r3, #1
 8008260:	2030      	movs	r0, #48	; 0x30
 8008262:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008266:	4422      	add	r2, r4
 8008268:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800826c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008270:	3302      	adds	r3, #2
 8008272:	e7c7      	b.n	8008204 <_printf_common+0x58>
 8008274:	2301      	movs	r3, #1
 8008276:	4622      	mov	r2, r4
 8008278:	4649      	mov	r1, r9
 800827a:	4638      	mov	r0, r7
 800827c:	47c0      	blx	r8
 800827e:	3001      	adds	r0, #1
 8008280:	d0e6      	beq.n	8008250 <_printf_common+0xa4>
 8008282:	3601      	adds	r6, #1
 8008284:	e7d9      	b.n	800823a <_printf_common+0x8e>
	...

08008288 <_printf_i>:
 8008288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800828c:	460c      	mov	r4, r1
 800828e:	4691      	mov	r9, r2
 8008290:	7e27      	ldrb	r7, [r4, #24]
 8008292:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008294:	2f78      	cmp	r7, #120	; 0x78
 8008296:	4680      	mov	r8, r0
 8008298:	469a      	mov	sl, r3
 800829a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800829e:	d807      	bhi.n	80082b0 <_printf_i+0x28>
 80082a0:	2f62      	cmp	r7, #98	; 0x62
 80082a2:	d80a      	bhi.n	80082ba <_printf_i+0x32>
 80082a4:	2f00      	cmp	r7, #0
 80082a6:	f000 80d8 	beq.w	800845a <_printf_i+0x1d2>
 80082aa:	2f58      	cmp	r7, #88	; 0x58
 80082ac:	f000 80a3 	beq.w	80083f6 <_printf_i+0x16e>
 80082b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80082b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082b8:	e03a      	b.n	8008330 <_printf_i+0xa8>
 80082ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082be:	2b15      	cmp	r3, #21
 80082c0:	d8f6      	bhi.n	80082b0 <_printf_i+0x28>
 80082c2:	a001      	add	r0, pc, #4	; (adr r0, 80082c8 <_printf_i+0x40>)
 80082c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80082c8:	08008321 	.word	0x08008321
 80082cc:	08008335 	.word	0x08008335
 80082d0:	080082b1 	.word	0x080082b1
 80082d4:	080082b1 	.word	0x080082b1
 80082d8:	080082b1 	.word	0x080082b1
 80082dc:	080082b1 	.word	0x080082b1
 80082e0:	08008335 	.word	0x08008335
 80082e4:	080082b1 	.word	0x080082b1
 80082e8:	080082b1 	.word	0x080082b1
 80082ec:	080082b1 	.word	0x080082b1
 80082f0:	080082b1 	.word	0x080082b1
 80082f4:	08008441 	.word	0x08008441
 80082f8:	08008365 	.word	0x08008365
 80082fc:	08008423 	.word	0x08008423
 8008300:	080082b1 	.word	0x080082b1
 8008304:	080082b1 	.word	0x080082b1
 8008308:	08008463 	.word	0x08008463
 800830c:	080082b1 	.word	0x080082b1
 8008310:	08008365 	.word	0x08008365
 8008314:	080082b1 	.word	0x080082b1
 8008318:	080082b1 	.word	0x080082b1
 800831c:	0800842b 	.word	0x0800842b
 8008320:	680b      	ldr	r3, [r1, #0]
 8008322:	1d1a      	adds	r2, r3, #4
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	600a      	str	r2, [r1, #0]
 8008328:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800832c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008330:	2301      	movs	r3, #1
 8008332:	e0a3      	b.n	800847c <_printf_i+0x1f4>
 8008334:	6825      	ldr	r5, [r4, #0]
 8008336:	6808      	ldr	r0, [r1, #0]
 8008338:	062e      	lsls	r6, r5, #24
 800833a:	f100 0304 	add.w	r3, r0, #4
 800833e:	d50a      	bpl.n	8008356 <_printf_i+0xce>
 8008340:	6805      	ldr	r5, [r0, #0]
 8008342:	600b      	str	r3, [r1, #0]
 8008344:	2d00      	cmp	r5, #0
 8008346:	da03      	bge.n	8008350 <_printf_i+0xc8>
 8008348:	232d      	movs	r3, #45	; 0x2d
 800834a:	426d      	negs	r5, r5
 800834c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008350:	485e      	ldr	r0, [pc, #376]	; (80084cc <_printf_i+0x244>)
 8008352:	230a      	movs	r3, #10
 8008354:	e019      	b.n	800838a <_printf_i+0x102>
 8008356:	f015 0f40 	tst.w	r5, #64	; 0x40
 800835a:	6805      	ldr	r5, [r0, #0]
 800835c:	600b      	str	r3, [r1, #0]
 800835e:	bf18      	it	ne
 8008360:	b22d      	sxthne	r5, r5
 8008362:	e7ef      	b.n	8008344 <_printf_i+0xbc>
 8008364:	680b      	ldr	r3, [r1, #0]
 8008366:	6825      	ldr	r5, [r4, #0]
 8008368:	1d18      	adds	r0, r3, #4
 800836a:	6008      	str	r0, [r1, #0]
 800836c:	0628      	lsls	r0, r5, #24
 800836e:	d501      	bpl.n	8008374 <_printf_i+0xec>
 8008370:	681d      	ldr	r5, [r3, #0]
 8008372:	e002      	b.n	800837a <_printf_i+0xf2>
 8008374:	0669      	lsls	r1, r5, #25
 8008376:	d5fb      	bpl.n	8008370 <_printf_i+0xe8>
 8008378:	881d      	ldrh	r5, [r3, #0]
 800837a:	4854      	ldr	r0, [pc, #336]	; (80084cc <_printf_i+0x244>)
 800837c:	2f6f      	cmp	r7, #111	; 0x6f
 800837e:	bf0c      	ite	eq
 8008380:	2308      	moveq	r3, #8
 8008382:	230a      	movne	r3, #10
 8008384:	2100      	movs	r1, #0
 8008386:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800838a:	6866      	ldr	r6, [r4, #4]
 800838c:	60a6      	str	r6, [r4, #8]
 800838e:	2e00      	cmp	r6, #0
 8008390:	bfa2      	ittt	ge
 8008392:	6821      	ldrge	r1, [r4, #0]
 8008394:	f021 0104 	bicge.w	r1, r1, #4
 8008398:	6021      	strge	r1, [r4, #0]
 800839a:	b90d      	cbnz	r5, 80083a0 <_printf_i+0x118>
 800839c:	2e00      	cmp	r6, #0
 800839e:	d04d      	beq.n	800843c <_printf_i+0x1b4>
 80083a0:	4616      	mov	r6, r2
 80083a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80083a6:	fb03 5711 	mls	r7, r3, r1, r5
 80083aa:	5dc7      	ldrb	r7, [r0, r7]
 80083ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083b0:	462f      	mov	r7, r5
 80083b2:	42bb      	cmp	r3, r7
 80083b4:	460d      	mov	r5, r1
 80083b6:	d9f4      	bls.n	80083a2 <_printf_i+0x11a>
 80083b8:	2b08      	cmp	r3, #8
 80083ba:	d10b      	bne.n	80083d4 <_printf_i+0x14c>
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	07df      	lsls	r7, r3, #31
 80083c0:	d508      	bpl.n	80083d4 <_printf_i+0x14c>
 80083c2:	6923      	ldr	r3, [r4, #16]
 80083c4:	6861      	ldr	r1, [r4, #4]
 80083c6:	4299      	cmp	r1, r3
 80083c8:	bfde      	ittt	le
 80083ca:	2330      	movle	r3, #48	; 0x30
 80083cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083d4:	1b92      	subs	r2, r2, r6
 80083d6:	6122      	str	r2, [r4, #16]
 80083d8:	f8cd a000 	str.w	sl, [sp]
 80083dc:	464b      	mov	r3, r9
 80083de:	aa03      	add	r2, sp, #12
 80083e0:	4621      	mov	r1, r4
 80083e2:	4640      	mov	r0, r8
 80083e4:	f7ff fee2 	bl	80081ac <_printf_common>
 80083e8:	3001      	adds	r0, #1
 80083ea:	d14c      	bne.n	8008486 <_printf_i+0x1fe>
 80083ec:	f04f 30ff 	mov.w	r0, #4294967295
 80083f0:	b004      	add	sp, #16
 80083f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083f6:	4835      	ldr	r0, [pc, #212]	; (80084cc <_printf_i+0x244>)
 80083f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80083fc:	6823      	ldr	r3, [r4, #0]
 80083fe:	680e      	ldr	r6, [r1, #0]
 8008400:	061f      	lsls	r7, r3, #24
 8008402:	f856 5b04 	ldr.w	r5, [r6], #4
 8008406:	600e      	str	r6, [r1, #0]
 8008408:	d514      	bpl.n	8008434 <_printf_i+0x1ac>
 800840a:	07d9      	lsls	r1, r3, #31
 800840c:	bf44      	itt	mi
 800840e:	f043 0320 	orrmi.w	r3, r3, #32
 8008412:	6023      	strmi	r3, [r4, #0]
 8008414:	b91d      	cbnz	r5, 800841e <_printf_i+0x196>
 8008416:	6823      	ldr	r3, [r4, #0]
 8008418:	f023 0320 	bic.w	r3, r3, #32
 800841c:	6023      	str	r3, [r4, #0]
 800841e:	2310      	movs	r3, #16
 8008420:	e7b0      	b.n	8008384 <_printf_i+0xfc>
 8008422:	6823      	ldr	r3, [r4, #0]
 8008424:	f043 0320 	orr.w	r3, r3, #32
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	2378      	movs	r3, #120	; 0x78
 800842c:	4828      	ldr	r0, [pc, #160]	; (80084d0 <_printf_i+0x248>)
 800842e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008432:	e7e3      	b.n	80083fc <_printf_i+0x174>
 8008434:	065e      	lsls	r6, r3, #25
 8008436:	bf48      	it	mi
 8008438:	b2ad      	uxthmi	r5, r5
 800843a:	e7e6      	b.n	800840a <_printf_i+0x182>
 800843c:	4616      	mov	r6, r2
 800843e:	e7bb      	b.n	80083b8 <_printf_i+0x130>
 8008440:	680b      	ldr	r3, [r1, #0]
 8008442:	6826      	ldr	r6, [r4, #0]
 8008444:	6960      	ldr	r0, [r4, #20]
 8008446:	1d1d      	adds	r5, r3, #4
 8008448:	600d      	str	r5, [r1, #0]
 800844a:	0635      	lsls	r5, r6, #24
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	d501      	bpl.n	8008454 <_printf_i+0x1cc>
 8008450:	6018      	str	r0, [r3, #0]
 8008452:	e002      	b.n	800845a <_printf_i+0x1d2>
 8008454:	0671      	lsls	r1, r6, #25
 8008456:	d5fb      	bpl.n	8008450 <_printf_i+0x1c8>
 8008458:	8018      	strh	r0, [r3, #0]
 800845a:	2300      	movs	r3, #0
 800845c:	6123      	str	r3, [r4, #16]
 800845e:	4616      	mov	r6, r2
 8008460:	e7ba      	b.n	80083d8 <_printf_i+0x150>
 8008462:	680b      	ldr	r3, [r1, #0]
 8008464:	1d1a      	adds	r2, r3, #4
 8008466:	600a      	str	r2, [r1, #0]
 8008468:	681e      	ldr	r6, [r3, #0]
 800846a:	6862      	ldr	r2, [r4, #4]
 800846c:	2100      	movs	r1, #0
 800846e:	4630      	mov	r0, r6
 8008470:	f7f7 feb6 	bl	80001e0 <memchr>
 8008474:	b108      	cbz	r0, 800847a <_printf_i+0x1f2>
 8008476:	1b80      	subs	r0, r0, r6
 8008478:	6060      	str	r0, [r4, #4]
 800847a:	6863      	ldr	r3, [r4, #4]
 800847c:	6123      	str	r3, [r4, #16]
 800847e:	2300      	movs	r3, #0
 8008480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008484:	e7a8      	b.n	80083d8 <_printf_i+0x150>
 8008486:	6923      	ldr	r3, [r4, #16]
 8008488:	4632      	mov	r2, r6
 800848a:	4649      	mov	r1, r9
 800848c:	4640      	mov	r0, r8
 800848e:	47d0      	blx	sl
 8008490:	3001      	adds	r0, #1
 8008492:	d0ab      	beq.n	80083ec <_printf_i+0x164>
 8008494:	6823      	ldr	r3, [r4, #0]
 8008496:	079b      	lsls	r3, r3, #30
 8008498:	d413      	bmi.n	80084c2 <_printf_i+0x23a>
 800849a:	68e0      	ldr	r0, [r4, #12]
 800849c:	9b03      	ldr	r3, [sp, #12]
 800849e:	4298      	cmp	r0, r3
 80084a0:	bfb8      	it	lt
 80084a2:	4618      	movlt	r0, r3
 80084a4:	e7a4      	b.n	80083f0 <_printf_i+0x168>
 80084a6:	2301      	movs	r3, #1
 80084a8:	4632      	mov	r2, r6
 80084aa:	4649      	mov	r1, r9
 80084ac:	4640      	mov	r0, r8
 80084ae:	47d0      	blx	sl
 80084b0:	3001      	adds	r0, #1
 80084b2:	d09b      	beq.n	80083ec <_printf_i+0x164>
 80084b4:	3501      	adds	r5, #1
 80084b6:	68e3      	ldr	r3, [r4, #12]
 80084b8:	9903      	ldr	r1, [sp, #12]
 80084ba:	1a5b      	subs	r3, r3, r1
 80084bc:	42ab      	cmp	r3, r5
 80084be:	dcf2      	bgt.n	80084a6 <_printf_i+0x21e>
 80084c0:	e7eb      	b.n	800849a <_printf_i+0x212>
 80084c2:	2500      	movs	r5, #0
 80084c4:	f104 0619 	add.w	r6, r4, #25
 80084c8:	e7f5      	b.n	80084b6 <_printf_i+0x22e>
 80084ca:	bf00      	nop
 80084cc:	0800980f 	.word	0x0800980f
 80084d0:	08009820 	.word	0x08009820

080084d4 <_sbrk_r>:
 80084d4:	b538      	push	{r3, r4, r5, lr}
 80084d6:	4d06      	ldr	r5, [pc, #24]	; (80084f0 <_sbrk_r+0x1c>)
 80084d8:	2300      	movs	r3, #0
 80084da:	4604      	mov	r4, r0
 80084dc:	4608      	mov	r0, r1
 80084de:	602b      	str	r3, [r5, #0]
 80084e0:	f7ff f952 	bl	8007788 <_sbrk>
 80084e4:	1c43      	adds	r3, r0, #1
 80084e6:	d102      	bne.n	80084ee <_sbrk_r+0x1a>
 80084e8:	682b      	ldr	r3, [r5, #0]
 80084ea:	b103      	cbz	r3, 80084ee <_sbrk_r+0x1a>
 80084ec:	6023      	str	r3, [r4, #0]
 80084ee:	bd38      	pop	{r3, r4, r5, pc}
 80084f0:	2000b070 	.word	0x2000b070

080084f4 <__swbuf_r>:
 80084f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f6:	460e      	mov	r6, r1
 80084f8:	4614      	mov	r4, r2
 80084fa:	4605      	mov	r5, r0
 80084fc:	b118      	cbz	r0, 8008506 <__swbuf_r+0x12>
 80084fe:	6983      	ldr	r3, [r0, #24]
 8008500:	b90b      	cbnz	r3, 8008506 <__swbuf_r+0x12>
 8008502:	f000 f9d9 	bl	80088b8 <__sinit>
 8008506:	4b21      	ldr	r3, [pc, #132]	; (800858c <__swbuf_r+0x98>)
 8008508:	429c      	cmp	r4, r3
 800850a:	d12b      	bne.n	8008564 <__swbuf_r+0x70>
 800850c:	686c      	ldr	r4, [r5, #4]
 800850e:	69a3      	ldr	r3, [r4, #24]
 8008510:	60a3      	str	r3, [r4, #8]
 8008512:	89a3      	ldrh	r3, [r4, #12]
 8008514:	071a      	lsls	r2, r3, #28
 8008516:	d52f      	bpl.n	8008578 <__swbuf_r+0x84>
 8008518:	6923      	ldr	r3, [r4, #16]
 800851a:	b36b      	cbz	r3, 8008578 <__swbuf_r+0x84>
 800851c:	6923      	ldr	r3, [r4, #16]
 800851e:	6820      	ldr	r0, [r4, #0]
 8008520:	1ac0      	subs	r0, r0, r3
 8008522:	6963      	ldr	r3, [r4, #20]
 8008524:	b2f6      	uxtb	r6, r6
 8008526:	4283      	cmp	r3, r0
 8008528:	4637      	mov	r7, r6
 800852a:	dc04      	bgt.n	8008536 <__swbuf_r+0x42>
 800852c:	4621      	mov	r1, r4
 800852e:	4628      	mov	r0, r5
 8008530:	f000 f92e 	bl	8008790 <_fflush_r>
 8008534:	bb30      	cbnz	r0, 8008584 <__swbuf_r+0x90>
 8008536:	68a3      	ldr	r3, [r4, #8]
 8008538:	3b01      	subs	r3, #1
 800853a:	60a3      	str	r3, [r4, #8]
 800853c:	6823      	ldr	r3, [r4, #0]
 800853e:	1c5a      	adds	r2, r3, #1
 8008540:	6022      	str	r2, [r4, #0]
 8008542:	701e      	strb	r6, [r3, #0]
 8008544:	6963      	ldr	r3, [r4, #20]
 8008546:	3001      	adds	r0, #1
 8008548:	4283      	cmp	r3, r0
 800854a:	d004      	beq.n	8008556 <__swbuf_r+0x62>
 800854c:	89a3      	ldrh	r3, [r4, #12]
 800854e:	07db      	lsls	r3, r3, #31
 8008550:	d506      	bpl.n	8008560 <__swbuf_r+0x6c>
 8008552:	2e0a      	cmp	r6, #10
 8008554:	d104      	bne.n	8008560 <__swbuf_r+0x6c>
 8008556:	4621      	mov	r1, r4
 8008558:	4628      	mov	r0, r5
 800855a:	f000 f919 	bl	8008790 <_fflush_r>
 800855e:	b988      	cbnz	r0, 8008584 <__swbuf_r+0x90>
 8008560:	4638      	mov	r0, r7
 8008562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008564:	4b0a      	ldr	r3, [pc, #40]	; (8008590 <__swbuf_r+0x9c>)
 8008566:	429c      	cmp	r4, r3
 8008568:	d101      	bne.n	800856e <__swbuf_r+0x7a>
 800856a:	68ac      	ldr	r4, [r5, #8]
 800856c:	e7cf      	b.n	800850e <__swbuf_r+0x1a>
 800856e:	4b09      	ldr	r3, [pc, #36]	; (8008594 <__swbuf_r+0xa0>)
 8008570:	429c      	cmp	r4, r3
 8008572:	bf08      	it	eq
 8008574:	68ec      	ldreq	r4, [r5, #12]
 8008576:	e7ca      	b.n	800850e <__swbuf_r+0x1a>
 8008578:	4621      	mov	r1, r4
 800857a:	4628      	mov	r0, r5
 800857c:	f000 f80c 	bl	8008598 <__swsetup_r>
 8008580:	2800      	cmp	r0, #0
 8008582:	d0cb      	beq.n	800851c <__swbuf_r+0x28>
 8008584:	f04f 37ff 	mov.w	r7, #4294967295
 8008588:	e7ea      	b.n	8008560 <__swbuf_r+0x6c>
 800858a:	bf00      	nop
 800858c:	08009854 	.word	0x08009854
 8008590:	08009874 	.word	0x08009874
 8008594:	08009834 	.word	0x08009834

08008598 <__swsetup_r>:
 8008598:	4b32      	ldr	r3, [pc, #200]	; (8008664 <__swsetup_r+0xcc>)
 800859a:	b570      	push	{r4, r5, r6, lr}
 800859c:	681d      	ldr	r5, [r3, #0]
 800859e:	4606      	mov	r6, r0
 80085a0:	460c      	mov	r4, r1
 80085a2:	b125      	cbz	r5, 80085ae <__swsetup_r+0x16>
 80085a4:	69ab      	ldr	r3, [r5, #24]
 80085a6:	b913      	cbnz	r3, 80085ae <__swsetup_r+0x16>
 80085a8:	4628      	mov	r0, r5
 80085aa:	f000 f985 	bl	80088b8 <__sinit>
 80085ae:	4b2e      	ldr	r3, [pc, #184]	; (8008668 <__swsetup_r+0xd0>)
 80085b0:	429c      	cmp	r4, r3
 80085b2:	d10f      	bne.n	80085d4 <__swsetup_r+0x3c>
 80085b4:	686c      	ldr	r4, [r5, #4]
 80085b6:	89a3      	ldrh	r3, [r4, #12]
 80085b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085bc:	0719      	lsls	r1, r3, #28
 80085be:	d42c      	bmi.n	800861a <__swsetup_r+0x82>
 80085c0:	06dd      	lsls	r5, r3, #27
 80085c2:	d411      	bmi.n	80085e8 <__swsetup_r+0x50>
 80085c4:	2309      	movs	r3, #9
 80085c6:	6033      	str	r3, [r6, #0]
 80085c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80085cc:	81a3      	strh	r3, [r4, #12]
 80085ce:	f04f 30ff 	mov.w	r0, #4294967295
 80085d2:	e03e      	b.n	8008652 <__swsetup_r+0xba>
 80085d4:	4b25      	ldr	r3, [pc, #148]	; (800866c <__swsetup_r+0xd4>)
 80085d6:	429c      	cmp	r4, r3
 80085d8:	d101      	bne.n	80085de <__swsetup_r+0x46>
 80085da:	68ac      	ldr	r4, [r5, #8]
 80085dc:	e7eb      	b.n	80085b6 <__swsetup_r+0x1e>
 80085de:	4b24      	ldr	r3, [pc, #144]	; (8008670 <__swsetup_r+0xd8>)
 80085e0:	429c      	cmp	r4, r3
 80085e2:	bf08      	it	eq
 80085e4:	68ec      	ldreq	r4, [r5, #12]
 80085e6:	e7e6      	b.n	80085b6 <__swsetup_r+0x1e>
 80085e8:	0758      	lsls	r0, r3, #29
 80085ea:	d512      	bpl.n	8008612 <__swsetup_r+0x7a>
 80085ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085ee:	b141      	cbz	r1, 8008602 <__swsetup_r+0x6a>
 80085f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085f4:	4299      	cmp	r1, r3
 80085f6:	d002      	beq.n	80085fe <__swsetup_r+0x66>
 80085f8:	4630      	mov	r0, r6
 80085fa:	f7ff fa77 	bl	8007aec <_free_r>
 80085fe:	2300      	movs	r3, #0
 8008600:	6363      	str	r3, [r4, #52]	; 0x34
 8008602:	89a3      	ldrh	r3, [r4, #12]
 8008604:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008608:	81a3      	strh	r3, [r4, #12]
 800860a:	2300      	movs	r3, #0
 800860c:	6063      	str	r3, [r4, #4]
 800860e:	6923      	ldr	r3, [r4, #16]
 8008610:	6023      	str	r3, [r4, #0]
 8008612:	89a3      	ldrh	r3, [r4, #12]
 8008614:	f043 0308 	orr.w	r3, r3, #8
 8008618:	81a3      	strh	r3, [r4, #12]
 800861a:	6923      	ldr	r3, [r4, #16]
 800861c:	b94b      	cbnz	r3, 8008632 <__swsetup_r+0x9a>
 800861e:	89a3      	ldrh	r3, [r4, #12]
 8008620:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008628:	d003      	beq.n	8008632 <__swsetup_r+0x9a>
 800862a:	4621      	mov	r1, r4
 800862c:	4630      	mov	r0, r6
 800862e:	f000 fa07 	bl	8008a40 <__smakebuf_r>
 8008632:	89a0      	ldrh	r0, [r4, #12]
 8008634:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008638:	f010 0301 	ands.w	r3, r0, #1
 800863c:	d00a      	beq.n	8008654 <__swsetup_r+0xbc>
 800863e:	2300      	movs	r3, #0
 8008640:	60a3      	str	r3, [r4, #8]
 8008642:	6963      	ldr	r3, [r4, #20]
 8008644:	425b      	negs	r3, r3
 8008646:	61a3      	str	r3, [r4, #24]
 8008648:	6923      	ldr	r3, [r4, #16]
 800864a:	b943      	cbnz	r3, 800865e <__swsetup_r+0xc6>
 800864c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008650:	d1ba      	bne.n	80085c8 <__swsetup_r+0x30>
 8008652:	bd70      	pop	{r4, r5, r6, pc}
 8008654:	0781      	lsls	r1, r0, #30
 8008656:	bf58      	it	pl
 8008658:	6963      	ldrpl	r3, [r4, #20]
 800865a:	60a3      	str	r3, [r4, #8]
 800865c:	e7f4      	b.n	8008648 <__swsetup_r+0xb0>
 800865e:	2000      	movs	r0, #0
 8008660:	e7f7      	b.n	8008652 <__swsetup_r+0xba>
 8008662:	bf00      	nop
 8008664:	20000014 	.word	0x20000014
 8008668:	08009854 	.word	0x08009854
 800866c:	08009874 	.word	0x08009874
 8008670:	08009834 	.word	0x08009834

08008674 <abort>:
 8008674:	b508      	push	{r3, lr}
 8008676:	2006      	movs	r0, #6
 8008678:	f000 faa4 	bl	8008bc4 <raise>
 800867c:	2001      	movs	r0, #1
 800867e:	f7ff f80b 	bl	8007698 <_exit>
	...

08008684 <__sflush_r>:
 8008684:	898a      	ldrh	r2, [r1, #12]
 8008686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800868a:	4605      	mov	r5, r0
 800868c:	0710      	lsls	r0, r2, #28
 800868e:	460c      	mov	r4, r1
 8008690:	d458      	bmi.n	8008744 <__sflush_r+0xc0>
 8008692:	684b      	ldr	r3, [r1, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	dc05      	bgt.n	80086a4 <__sflush_r+0x20>
 8008698:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800869a:	2b00      	cmp	r3, #0
 800869c:	dc02      	bgt.n	80086a4 <__sflush_r+0x20>
 800869e:	2000      	movs	r0, #0
 80086a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086a6:	2e00      	cmp	r6, #0
 80086a8:	d0f9      	beq.n	800869e <__sflush_r+0x1a>
 80086aa:	2300      	movs	r3, #0
 80086ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80086b0:	682f      	ldr	r7, [r5, #0]
 80086b2:	602b      	str	r3, [r5, #0]
 80086b4:	d032      	beq.n	800871c <__sflush_r+0x98>
 80086b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80086b8:	89a3      	ldrh	r3, [r4, #12]
 80086ba:	075a      	lsls	r2, r3, #29
 80086bc:	d505      	bpl.n	80086ca <__sflush_r+0x46>
 80086be:	6863      	ldr	r3, [r4, #4]
 80086c0:	1ac0      	subs	r0, r0, r3
 80086c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086c4:	b10b      	cbz	r3, 80086ca <__sflush_r+0x46>
 80086c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086c8:	1ac0      	subs	r0, r0, r3
 80086ca:	2300      	movs	r3, #0
 80086cc:	4602      	mov	r2, r0
 80086ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086d0:	6a21      	ldr	r1, [r4, #32]
 80086d2:	4628      	mov	r0, r5
 80086d4:	47b0      	blx	r6
 80086d6:	1c43      	adds	r3, r0, #1
 80086d8:	89a3      	ldrh	r3, [r4, #12]
 80086da:	d106      	bne.n	80086ea <__sflush_r+0x66>
 80086dc:	6829      	ldr	r1, [r5, #0]
 80086de:	291d      	cmp	r1, #29
 80086e0:	d82c      	bhi.n	800873c <__sflush_r+0xb8>
 80086e2:	4a2a      	ldr	r2, [pc, #168]	; (800878c <__sflush_r+0x108>)
 80086e4:	40ca      	lsrs	r2, r1
 80086e6:	07d6      	lsls	r6, r2, #31
 80086e8:	d528      	bpl.n	800873c <__sflush_r+0xb8>
 80086ea:	2200      	movs	r2, #0
 80086ec:	6062      	str	r2, [r4, #4]
 80086ee:	04d9      	lsls	r1, r3, #19
 80086f0:	6922      	ldr	r2, [r4, #16]
 80086f2:	6022      	str	r2, [r4, #0]
 80086f4:	d504      	bpl.n	8008700 <__sflush_r+0x7c>
 80086f6:	1c42      	adds	r2, r0, #1
 80086f8:	d101      	bne.n	80086fe <__sflush_r+0x7a>
 80086fa:	682b      	ldr	r3, [r5, #0]
 80086fc:	b903      	cbnz	r3, 8008700 <__sflush_r+0x7c>
 80086fe:	6560      	str	r0, [r4, #84]	; 0x54
 8008700:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008702:	602f      	str	r7, [r5, #0]
 8008704:	2900      	cmp	r1, #0
 8008706:	d0ca      	beq.n	800869e <__sflush_r+0x1a>
 8008708:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800870c:	4299      	cmp	r1, r3
 800870e:	d002      	beq.n	8008716 <__sflush_r+0x92>
 8008710:	4628      	mov	r0, r5
 8008712:	f7ff f9eb 	bl	8007aec <_free_r>
 8008716:	2000      	movs	r0, #0
 8008718:	6360      	str	r0, [r4, #52]	; 0x34
 800871a:	e7c1      	b.n	80086a0 <__sflush_r+0x1c>
 800871c:	6a21      	ldr	r1, [r4, #32]
 800871e:	2301      	movs	r3, #1
 8008720:	4628      	mov	r0, r5
 8008722:	47b0      	blx	r6
 8008724:	1c41      	adds	r1, r0, #1
 8008726:	d1c7      	bne.n	80086b8 <__sflush_r+0x34>
 8008728:	682b      	ldr	r3, [r5, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d0c4      	beq.n	80086b8 <__sflush_r+0x34>
 800872e:	2b1d      	cmp	r3, #29
 8008730:	d001      	beq.n	8008736 <__sflush_r+0xb2>
 8008732:	2b16      	cmp	r3, #22
 8008734:	d101      	bne.n	800873a <__sflush_r+0xb6>
 8008736:	602f      	str	r7, [r5, #0]
 8008738:	e7b1      	b.n	800869e <__sflush_r+0x1a>
 800873a:	89a3      	ldrh	r3, [r4, #12]
 800873c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008740:	81a3      	strh	r3, [r4, #12]
 8008742:	e7ad      	b.n	80086a0 <__sflush_r+0x1c>
 8008744:	690f      	ldr	r7, [r1, #16]
 8008746:	2f00      	cmp	r7, #0
 8008748:	d0a9      	beq.n	800869e <__sflush_r+0x1a>
 800874a:	0793      	lsls	r3, r2, #30
 800874c:	680e      	ldr	r6, [r1, #0]
 800874e:	bf08      	it	eq
 8008750:	694b      	ldreq	r3, [r1, #20]
 8008752:	600f      	str	r7, [r1, #0]
 8008754:	bf18      	it	ne
 8008756:	2300      	movne	r3, #0
 8008758:	eba6 0807 	sub.w	r8, r6, r7
 800875c:	608b      	str	r3, [r1, #8]
 800875e:	f1b8 0f00 	cmp.w	r8, #0
 8008762:	dd9c      	ble.n	800869e <__sflush_r+0x1a>
 8008764:	6a21      	ldr	r1, [r4, #32]
 8008766:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008768:	4643      	mov	r3, r8
 800876a:	463a      	mov	r2, r7
 800876c:	4628      	mov	r0, r5
 800876e:	47b0      	blx	r6
 8008770:	2800      	cmp	r0, #0
 8008772:	dc06      	bgt.n	8008782 <__sflush_r+0xfe>
 8008774:	89a3      	ldrh	r3, [r4, #12]
 8008776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800877a:	81a3      	strh	r3, [r4, #12]
 800877c:	f04f 30ff 	mov.w	r0, #4294967295
 8008780:	e78e      	b.n	80086a0 <__sflush_r+0x1c>
 8008782:	4407      	add	r7, r0
 8008784:	eba8 0800 	sub.w	r8, r8, r0
 8008788:	e7e9      	b.n	800875e <__sflush_r+0xda>
 800878a:	bf00      	nop
 800878c:	20400001 	.word	0x20400001

08008790 <_fflush_r>:
 8008790:	b538      	push	{r3, r4, r5, lr}
 8008792:	690b      	ldr	r3, [r1, #16]
 8008794:	4605      	mov	r5, r0
 8008796:	460c      	mov	r4, r1
 8008798:	b913      	cbnz	r3, 80087a0 <_fflush_r+0x10>
 800879a:	2500      	movs	r5, #0
 800879c:	4628      	mov	r0, r5
 800879e:	bd38      	pop	{r3, r4, r5, pc}
 80087a0:	b118      	cbz	r0, 80087aa <_fflush_r+0x1a>
 80087a2:	6983      	ldr	r3, [r0, #24]
 80087a4:	b90b      	cbnz	r3, 80087aa <_fflush_r+0x1a>
 80087a6:	f000 f887 	bl	80088b8 <__sinit>
 80087aa:	4b14      	ldr	r3, [pc, #80]	; (80087fc <_fflush_r+0x6c>)
 80087ac:	429c      	cmp	r4, r3
 80087ae:	d11b      	bne.n	80087e8 <_fflush_r+0x58>
 80087b0:	686c      	ldr	r4, [r5, #4]
 80087b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d0ef      	beq.n	800879a <_fflush_r+0xa>
 80087ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087bc:	07d0      	lsls	r0, r2, #31
 80087be:	d404      	bmi.n	80087ca <_fflush_r+0x3a>
 80087c0:	0599      	lsls	r1, r3, #22
 80087c2:	d402      	bmi.n	80087ca <_fflush_r+0x3a>
 80087c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087c6:	f000 f915 	bl	80089f4 <__retarget_lock_acquire_recursive>
 80087ca:	4628      	mov	r0, r5
 80087cc:	4621      	mov	r1, r4
 80087ce:	f7ff ff59 	bl	8008684 <__sflush_r>
 80087d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087d4:	07da      	lsls	r2, r3, #31
 80087d6:	4605      	mov	r5, r0
 80087d8:	d4e0      	bmi.n	800879c <_fflush_r+0xc>
 80087da:	89a3      	ldrh	r3, [r4, #12]
 80087dc:	059b      	lsls	r3, r3, #22
 80087de:	d4dd      	bmi.n	800879c <_fflush_r+0xc>
 80087e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087e2:	f000 f908 	bl	80089f6 <__retarget_lock_release_recursive>
 80087e6:	e7d9      	b.n	800879c <_fflush_r+0xc>
 80087e8:	4b05      	ldr	r3, [pc, #20]	; (8008800 <_fflush_r+0x70>)
 80087ea:	429c      	cmp	r4, r3
 80087ec:	d101      	bne.n	80087f2 <_fflush_r+0x62>
 80087ee:	68ac      	ldr	r4, [r5, #8]
 80087f0:	e7df      	b.n	80087b2 <_fflush_r+0x22>
 80087f2:	4b04      	ldr	r3, [pc, #16]	; (8008804 <_fflush_r+0x74>)
 80087f4:	429c      	cmp	r4, r3
 80087f6:	bf08      	it	eq
 80087f8:	68ec      	ldreq	r4, [r5, #12]
 80087fa:	e7da      	b.n	80087b2 <_fflush_r+0x22>
 80087fc:	08009854 	.word	0x08009854
 8008800:	08009874 	.word	0x08009874
 8008804:	08009834 	.word	0x08009834

08008808 <std>:
 8008808:	2300      	movs	r3, #0
 800880a:	b510      	push	{r4, lr}
 800880c:	4604      	mov	r4, r0
 800880e:	e9c0 3300 	strd	r3, r3, [r0]
 8008812:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008816:	6083      	str	r3, [r0, #8]
 8008818:	8181      	strh	r1, [r0, #12]
 800881a:	6643      	str	r3, [r0, #100]	; 0x64
 800881c:	81c2      	strh	r2, [r0, #14]
 800881e:	6183      	str	r3, [r0, #24]
 8008820:	4619      	mov	r1, r3
 8008822:	2208      	movs	r2, #8
 8008824:	305c      	adds	r0, #92	; 0x5c
 8008826:	f7ff f8b1 	bl	800798c <memset>
 800882a:	4b05      	ldr	r3, [pc, #20]	; (8008840 <std+0x38>)
 800882c:	6263      	str	r3, [r4, #36]	; 0x24
 800882e:	4b05      	ldr	r3, [pc, #20]	; (8008844 <std+0x3c>)
 8008830:	62a3      	str	r3, [r4, #40]	; 0x28
 8008832:	4b05      	ldr	r3, [pc, #20]	; (8008848 <std+0x40>)
 8008834:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008836:	4b05      	ldr	r3, [pc, #20]	; (800884c <std+0x44>)
 8008838:	6224      	str	r4, [r4, #32]
 800883a:	6323      	str	r3, [r4, #48]	; 0x30
 800883c:	bd10      	pop	{r4, pc}
 800883e:	bf00      	nop
 8008840:	08008bfd 	.word	0x08008bfd
 8008844:	08008c1f 	.word	0x08008c1f
 8008848:	08008c57 	.word	0x08008c57
 800884c:	08008c7b 	.word	0x08008c7b

08008850 <_cleanup_r>:
 8008850:	4901      	ldr	r1, [pc, #4]	; (8008858 <_cleanup_r+0x8>)
 8008852:	f000 b8af 	b.w	80089b4 <_fwalk_reent>
 8008856:	bf00      	nop
 8008858:	08008791 	.word	0x08008791

0800885c <__sfmoreglue>:
 800885c:	b570      	push	{r4, r5, r6, lr}
 800885e:	1e4a      	subs	r2, r1, #1
 8008860:	2568      	movs	r5, #104	; 0x68
 8008862:	4355      	muls	r5, r2
 8008864:	460e      	mov	r6, r1
 8008866:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800886a:	f7ff f98f 	bl	8007b8c <_malloc_r>
 800886e:	4604      	mov	r4, r0
 8008870:	b140      	cbz	r0, 8008884 <__sfmoreglue+0x28>
 8008872:	2100      	movs	r1, #0
 8008874:	e9c0 1600 	strd	r1, r6, [r0]
 8008878:	300c      	adds	r0, #12
 800887a:	60a0      	str	r0, [r4, #8]
 800887c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008880:	f7ff f884 	bl	800798c <memset>
 8008884:	4620      	mov	r0, r4
 8008886:	bd70      	pop	{r4, r5, r6, pc}

08008888 <__sfp_lock_acquire>:
 8008888:	4801      	ldr	r0, [pc, #4]	; (8008890 <__sfp_lock_acquire+0x8>)
 800888a:	f000 b8b3 	b.w	80089f4 <__retarget_lock_acquire_recursive>
 800888e:	bf00      	nop
 8008890:	2000b06c 	.word	0x2000b06c

08008894 <__sfp_lock_release>:
 8008894:	4801      	ldr	r0, [pc, #4]	; (800889c <__sfp_lock_release+0x8>)
 8008896:	f000 b8ae 	b.w	80089f6 <__retarget_lock_release_recursive>
 800889a:	bf00      	nop
 800889c:	2000b06c 	.word	0x2000b06c

080088a0 <__sinit_lock_acquire>:
 80088a0:	4801      	ldr	r0, [pc, #4]	; (80088a8 <__sinit_lock_acquire+0x8>)
 80088a2:	f000 b8a7 	b.w	80089f4 <__retarget_lock_acquire_recursive>
 80088a6:	bf00      	nop
 80088a8:	2000b067 	.word	0x2000b067

080088ac <__sinit_lock_release>:
 80088ac:	4801      	ldr	r0, [pc, #4]	; (80088b4 <__sinit_lock_release+0x8>)
 80088ae:	f000 b8a2 	b.w	80089f6 <__retarget_lock_release_recursive>
 80088b2:	bf00      	nop
 80088b4:	2000b067 	.word	0x2000b067

080088b8 <__sinit>:
 80088b8:	b510      	push	{r4, lr}
 80088ba:	4604      	mov	r4, r0
 80088bc:	f7ff fff0 	bl	80088a0 <__sinit_lock_acquire>
 80088c0:	69a3      	ldr	r3, [r4, #24]
 80088c2:	b11b      	cbz	r3, 80088cc <__sinit+0x14>
 80088c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088c8:	f7ff bff0 	b.w	80088ac <__sinit_lock_release>
 80088cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80088d0:	6523      	str	r3, [r4, #80]	; 0x50
 80088d2:	4b13      	ldr	r3, [pc, #76]	; (8008920 <__sinit+0x68>)
 80088d4:	4a13      	ldr	r2, [pc, #76]	; (8008924 <__sinit+0x6c>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80088da:	42a3      	cmp	r3, r4
 80088dc:	bf04      	itt	eq
 80088de:	2301      	moveq	r3, #1
 80088e0:	61a3      	streq	r3, [r4, #24]
 80088e2:	4620      	mov	r0, r4
 80088e4:	f000 f820 	bl	8008928 <__sfp>
 80088e8:	6060      	str	r0, [r4, #4]
 80088ea:	4620      	mov	r0, r4
 80088ec:	f000 f81c 	bl	8008928 <__sfp>
 80088f0:	60a0      	str	r0, [r4, #8]
 80088f2:	4620      	mov	r0, r4
 80088f4:	f000 f818 	bl	8008928 <__sfp>
 80088f8:	2200      	movs	r2, #0
 80088fa:	60e0      	str	r0, [r4, #12]
 80088fc:	2104      	movs	r1, #4
 80088fe:	6860      	ldr	r0, [r4, #4]
 8008900:	f7ff ff82 	bl	8008808 <std>
 8008904:	68a0      	ldr	r0, [r4, #8]
 8008906:	2201      	movs	r2, #1
 8008908:	2109      	movs	r1, #9
 800890a:	f7ff ff7d 	bl	8008808 <std>
 800890e:	68e0      	ldr	r0, [r4, #12]
 8008910:	2202      	movs	r2, #2
 8008912:	2112      	movs	r1, #18
 8008914:	f7ff ff78 	bl	8008808 <std>
 8008918:	2301      	movs	r3, #1
 800891a:	61a3      	str	r3, [r4, #24]
 800891c:	e7d2      	b.n	80088c4 <__sinit+0xc>
 800891e:	bf00      	nop
 8008920:	08009748 	.word	0x08009748
 8008924:	08008851 	.word	0x08008851

08008928 <__sfp>:
 8008928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800892a:	4607      	mov	r7, r0
 800892c:	f7ff ffac 	bl	8008888 <__sfp_lock_acquire>
 8008930:	4b1e      	ldr	r3, [pc, #120]	; (80089ac <__sfp+0x84>)
 8008932:	681e      	ldr	r6, [r3, #0]
 8008934:	69b3      	ldr	r3, [r6, #24]
 8008936:	b913      	cbnz	r3, 800893e <__sfp+0x16>
 8008938:	4630      	mov	r0, r6
 800893a:	f7ff ffbd 	bl	80088b8 <__sinit>
 800893e:	3648      	adds	r6, #72	; 0x48
 8008940:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008944:	3b01      	subs	r3, #1
 8008946:	d503      	bpl.n	8008950 <__sfp+0x28>
 8008948:	6833      	ldr	r3, [r6, #0]
 800894a:	b30b      	cbz	r3, 8008990 <__sfp+0x68>
 800894c:	6836      	ldr	r6, [r6, #0]
 800894e:	e7f7      	b.n	8008940 <__sfp+0x18>
 8008950:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008954:	b9d5      	cbnz	r5, 800898c <__sfp+0x64>
 8008956:	4b16      	ldr	r3, [pc, #88]	; (80089b0 <__sfp+0x88>)
 8008958:	60e3      	str	r3, [r4, #12]
 800895a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800895e:	6665      	str	r5, [r4, #100]	; 0x64
 8008960:	f000 f847 	bl	80089f2 <__retarget_lock_init_recursive>
 8008964:	f7ff ff96 	bl	8008894 <__sfp_lock_release>
 8008968:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800896c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008970:	6025      	str	r5, [r4, #0]
 8008972:	61a5      	str	r5, [r4, #24]
 8008974:	2208      	movs	r2, #8
 8008976:	4629      	mov	r1, r5
 8008978:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800897c:	f7ff f806 	bl	800798c <memset>
 8008980:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008984:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008988:	4620      	mov	r0, r4
 800898a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800898c:	3468      	adds	r4, #104	; 0x68
 800898e:	e7d9      	b.n	8008944 <__sfp+0x1c>
 8008990:	2104      	movs	r1, #4
 8008992:	4638      	mov	r0, r7
 8008994:	f7ff ff62 	bl	800885c <__sfmoreglue>
 8008998:	4604      	mov	r4, r0
 800899a:	6030      	str	r0, [r6, #0]
 800899c:	2800      	cmp	r0, #0
 800899e:	d1d5      	bne.n	800894c <__sfp+0x24>
 80089a0:	f7ff ff78 	bl	8008894 <__sfp_lock_release>
 80089a4:	230c      	movs	r3, #12
 80089a6:	603b      	str	r3, [r7, #0]
 80089a8:	e7ee      	b.n	8008988 <__sfp+0x60>
 80089aa:	bf00      	nop
 80089ac:	08009748 	.word	0x08009748
 80089b0:	ffff0001 	.word	0xffff0001

080089b4 <_fwalk_reent>:
 80089b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089b8:	4606      	mov	r6, r0
 80089ba:	4688      	mov	r8, r1
 80089bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80089c0:	2700      	movs	r7, #0
 80089c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089c6:	f1b9 0901 	subs.w	r9, r9, #1
 80089ca:	d505      	bpl.n	80089d8 <_fwalk_reent+0x24>
 80089cc:	6824      	ldr	r4, [r4, #0]
 80089ce:	2c00      	cmp	r4, #0
 80089d0:	d1f7      	bne.n	80089c2 <_fwalk_reent+0xe>
 80089d2:	4638      	mov	r0, r7
 80089d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089d8:	89ab      	ldrh	r3, [r5, #12]
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d907      	bls.n	80089ee <_fwalk_reent+0x3a>
 80089de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089e2:	3301      	adds	r3, #1
 80089e4:	d003      	beq.n	80089ee <_fwalk_reent+0x3a>
 80089e6:	4629      	mov	r1, r5
 80089e8:	4630      	mov	r0, r6
 80089ea:	47c0      	blx	r8
 80089ec:	4307      	orrs	r7, r0
 80089ee:	3568      	adds	r5, #104	; 0x68
 80089f0:	e7e9      	b.n	80089c6 <_fwalk_reent+0x12>

080089f2 <__retarget_lock_init_recursive>:
 80089f2:	4770      	bx	lr

080089f4 <__retarget_lock_acquire_recursive>:
 80089f4:	4770      	bx	lr

080089f6 <__retarget_lock_release_recursive>:
 80089f6:	4770      	bx	lr

080089f8 <__swhatbuf_r>:
 80089f8:	b570      	push	{r4, r5, r6, lr}
 80089fa:	460e      	mov	r6, r1
 80089fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a00:	2900      	cmp	r1, #0
 8008a02:	b096      	sub	sp, #88	; 0x58
 8008a04:	4614      	mov	r4, r2
 8008a06:	461d      	mov	r5, r3
 8008a08:	da07      	bge.n	8008a1a <__swhatbuf_r+0x22>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	602b      	str	r3, [r5, #0]
 8008a0e:	89b3      	ldrh	r3, [r6, #12]
 8008a10:	061a      	lsls	r2, r3, #24
 8008a12:	d410      	bmi.n	8008a36 <__swhatbuf_r+0x3e>
 8008a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a18:	e00e      	b.n	8008a38 <__swhatbuf_r+0x40>
 8008a1a:	466a      	mov	r2, sp
 8008a1c:	f000 f954 	bl	8008cc8 <_fstat_r>
 8008a20:	2800      	cmp	r0, #0
 8008a22:	dbf2      	blt.n	8008a0a <__swhatbuf_r+0x12>
 8008a24:	9a01      	ldr	r2, [sp, #4]
 8008a26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a2e:	425a      	negs	r2, r3
 8008a30:	415a      	adcs	r2, r3
 8008a32:	602a      	str	r2, [r5, #0]
 8008a34:	e7ee      	b.n	8008a14 <__swhatbuf_r+0x1c>
 8008a36:	2340      	movs	r3, #64	; 0x40
 8008a38:	2000      	movs	r0, #0
 8008a3a:	6023      	str	r3, [r4, #0]
 8008a3c:	b016      	add	sp, #88	; 0x58
 8008a3e:	bd70      	pop	{r4, r5, r6, pc}

08008a40 <__smakebuf_r>:
 8008a40:	898b      	ldrh	r3, [r1, #12]
 8008a42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a44:	079d      	lsls	r5, r3, #30
 8008a46:	4606      	mov	r6, r0
 8008a48:	460c      	mov	r4, r1
 8008a4a:	d507      	bpl.n	8008a5c <__smakebuf_r+0x1c>
 8008a4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a50:	6023      	str	r3, [r4, #0]
 8008a52:	6123      	str	r3, [r4, #16]
 8008a54:	2301      	movs	r3, #1
 8008a56:	6163      	str	r3, [r4, #20]
 8008a58:	b002      	add	sp, #8
 8008a5a:	bd70      	pop	{r4, r5, r6, pc}
 8008a5c:	ab01      	add	r3, sp, #4
 8008a5e:	466a      	mov	r2, sp
 8008a60:	f7ff ffca 	bl	80089f8 <__swhatbuf_r>
 8008a64:	9900      	ldr	r1, [sp, #0]
 8008a66:	4605      	mov	r5, r0
 8008a68:	4630      	mov	r0, r6
 8008a6a:	f7ff f88f 	bl	8007b8c <_malloc_r>
 8008a6e:	b948      	cbnz	r0, 8008a84 <__smakebuf_r+0x44>
 8008a70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a74:	059a      	lsls	r2, r3, #22
 8008a76:	d4ef      	bmi.n	8008a58 <__smakebuf_r+0x18>
 8008a78:	f023 0303 	bic.w	r3, r3, #3
 8008a7c:	f043 0302 	orr.w	r3, r3, #2
 8008a80:	81a3      	strh	r3, [r4, #12]
 8008a82:	e7e3      	b.n	8008a4c <__smakebuf_r+0xc>
 8008a84:	4b0d      	ldr	r3, [pc, #52]	; (8008abc <__smakebuf_r+0x7c>)
 8008a86:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a88:	89a3      	ldrh	r3, [r4, #12]
 8008a8a:	6020      	str	r0, [r4, #0]
 8008a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a90:	81a3      	strh	r3, [r4, #12]
 8008a92:	9b00      	ldr	r3, [sp, #0]
 8008a94:	6163      	str	r3, [r4, #20]
 8008a96:	9b01      	ldr	r3, [sp, #4]
 8008a98:	6120      	str	r0, [r4, #16]
 8008a9a:	b15b      	cbz	r3, 8008ab4 <__smakebuf_r+0x74>
 8008a9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	f000 f923 	bl	8008cec <_isatty_r>
 8008aa6:	b128      	cbz	r0, 8008ab4 <__smakebuf_r+0x74>
 8008aa8:	89a3      	ldrh	r3, [r4, #12]
 8008aaa:	f023 0303 	bic.w	r3, r3, #3
 8008aae:	f043 0301 	orr.w	r3, r3, #1
 8008ab2:	81a3      	strh	r3, [r4, #12]
 8008ab4:	89a0      	ldrh	r0, [r4, #12]
 8008ab6:	4305      	orrs	r5, r0
 8008ab8:	81a5      	strh	r5, [r4, #12]
 8008aba:	e7cd      	b.n	8008a58 <__smakebuf_r+0x18>
 8008abc:	08008851 	.word	0x08008851

08008ac0 <memcpy>:
 8008ac0:	440a      	add	r2, r1
 8008ac2:	4291      	cmp	r1, r2
 8008ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ac8:	d100      	bne.n	8008acc <memcpy+0xc>
 8008aca:	4770      	bx	lr
 8008acc:	b510      	push	{r4, lr}
 8008ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ad6:	4291      	cmp	r1, r2
 8008ad8:	d1f9      	bne.n	8008ace <memcpy+0xe>
 8008ada:	bd10      	pop	{r4, pc}

08008adc <memmove>:
 8008adc:	4288      	cmp	r0, r1
 8008ade:	b510      	push	{r4, lr}
 8008ae0:	eb01 0402 	add.w	r4, r1, r2
 8008ae4:	d902      	bls.n	8008aec <memmove+0x10>
 8008ae6:	4284      	cmp	r4, r0
 8008ae8:	4623      	mov	r3, r4
 8008aea:	d807      	bhi.n	8008afc <memmove+0x20>
 8008aec:	1e43      	subs	r3, r0, #1
 8008aee:	42a1      	cmp	r1, r4
 8008af0:	d008      	beq.n	8008b04 <memmove+0x28>
 8008af2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008af6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008afa:	e7f8      	b.n	8008aee <memmove+0x12>
 8008afc:	4402      	add	r2, r0
 8008afe:	4601      	mov	r1, r0
 8008b00:	428a      	cmp	r2, r1
 8008b02:	d100      	bne.n	8008b06 <memmove+0x2a>
 8008b04:	bd10      	pop	{r4, pc}
 8008b06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b0e:	e7f7      	b.n	8008b00 <memmove+0x24>

08008b10 <__malloc_lock>:
 8008b10:	4801      	ldr	r0, [pc, #4]	; (8008b18 <__malloc_lock+0x8>)
 8008b12:	f7ff bf6f 	b.w	80089f4 <__retarget_lock_acquire_recursive>
 8008b16:	bf00      	nop
 8008b18:	2000b068 	.word	0x2000b068

08008b1c <__malloc_unlock>:
 8008b1c:	4801      	ldr	r0, [pc, #4]	; (8008b24 <__malloc_unlock+0x8>)
 8008b1e:	f7ff bf6a 	b.w	80089f6 <__retarget_lock_release_recursive>
 8008b22:	bf00      	nop
 8008b24:	2000b068 	.word	0x2000b068

08008b28 <_realloc_r>:
 8008b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2a:	4607      	mov	r7, r0
 8008b2c:	4614      	mov	r4, r2
 8008b2e:	460e      	mov	r6, r1
 8008b30:	b921      	cbnz	r1, 8008b3c <_realloc_r+0x14>
 8008b32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b36:	4611      	mov	r1, r2
 8008b38:	f7ff b828 	b.w	8007b8c <_malloc_r>
 8008b3c:	b922      	cbnz	r2, 8008b48 <_realloc_r+0x20>
 8008b3e:	f7fe ffd5 	bl	8007aec <_free_r>
 8008b42:	4625      	mov	r5, r4
 8008b44:	4628      	mov	r0, r5
 8008b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b48:	f000 f8f2 	bl	8008d30 <_malloc_usable_size_r>
 8008b4c:	42a0      	cmp	r0, r4
 8008b4e:	d20f      	bcs.n	8008b70 <_realloc_r+0x48>
 8008b50:	4621      	mov	r1, r4
 8008b52:	4638      	mov	r0, r7
 8008b54:	f7ff f81a 	bl	8007b8c <_malloc_r>
 8008b58:	4605      	mov	r5, r0
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	d0f2      	beq.n	8008b44 <_realloc_r+0x1c>
 8008b5e:	4631      	mov	r1, r6
 8008b60:	4622      	mov	r2, r4
 8008b62:	f7ff ffad 	bl	8008ac0 <memcpy>
 8008b66:	4631      	mov	r1, r6
 8008b68:	4638      	mov	r0, r7
 8008b6a:	f7fe ffbf 	bl	8007aec <_free_r>
 8008b6e:	e7e9      	b.n	8008b44 <_realloc_r+0x1c>
 8008b70:	4635      	mov	r5, r6
 8008b72:	e7e7      	b.n	8008b44 <_realloc_r+0x1c>

08008b74 <_raise_r>:
 8008b74:	291f      	cmp	r1, #31
 8008b76:	b538      	push	{r3, r4, r5, lr}
 8008b78:	4604      	mov	r4, r0
 8008b7a:	460d      	mov	r5, r1
 8008b7c:	d904      	bls.n	8008b88 <_raise_r+0x14>
 8008b7e:	2316      	movs	r3, #22
 8008b80:	6003      	str	r3, [r0, #0]
 8008b82:	f04f 30ff 	mov.w	r0, #4294967295
 8008b86:	bd38      	pop	{r3, r4, r5, pc}
 8008b88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008b8a:	b112      	cbz	r2, 8008b92 <_raise_r+0x1e>
 8008b8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b90:	b94b      	cbnz	r3, 8008ba6 <_raise_r+0x32>
 8008b92:	4620      	mov	r0, r4
 8008b94:	f000 f830 	bl	8008bf8 <_getpid_r>
 8008b98:	462a      	mov	r2, r5
 8008b9a:	4601      	mov	r1, r0
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ba2:	f000 b817 	b.w	8008bd4 <_kill_r>
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d00a      	beq.n	8008bc0 <_raise_r+0x4c>
 8008baa:	1c59      	adds	r1, r3, #1
 8008bac:	d103      	bne.n	8008bb6 <_raise_r+0x42>
 8008bae:	2316      	movs	r3, #22
 8008bb0:	6003      	str	r3, [r0, #0]
 8008bb2:	2001      	movs	r0, #1
 8008bb4:	e7e7      	b.n	8008b86 <_raise_r+0x12>
 8008bb6:	2400      	movs	r4, #0
 8008bb8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	4798      	blx	r3
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	e7e0      	b.n	8008b86 <_raise_r+0x12>

08008bc4 <raise>:
 8008bc4:	4b02      	ldr	r3, [pc, #8]	; (8008bd0 <raise+0xc>)
 8008bc6:	4601      	mov	r1, r0
 8008bc8:	6818      	ldr	r0, [r3, #0]
 8008bca:	f7ff bfd3 	b.w	8008b74 <_raise_r>
 8008bce:	bf00      	nop
 8008bd0:	20000014 	.word	0x20000014

08008bd4 <_kill_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	4d07      	ldr	r5, [pc, #28]	; (8008bf4 <_kill_r+0x20>)
 8008bd8:	2300      	movs	r3, #0
 8008bda:	4604      	mov	r4, r0
 8008bdc:	4608      	mov	r0, r1
 8008bde:	4611      	mov	r1, r2
 8008be0:	602b      	str	r3, [r5, #0]
 8008be2:	f7fe fd49 	bl	8007678 <_kill>
 8008be6:	1c43      	adds	r3, r0, #1
 8008be8:	d102      	bne.n	8008bf0 <_kill_r+0x1c>
 8008bea:	682b      	ldr	r3, [r5, #0]
 8008bec:	b103      	cbz	r3, 8008bf0 <_kill_r+0x1c>
 8008bee:	6023      	str	r3, [r4, #0]
 8008bf0:	bd38      	pop	{r3, r4, r5, pc}
 8008bf2:	bf00      	nop
 8008bf4:	2000b070 	.word	0x2000b070

08008bf8 <_getpid_r>:
 8008bf8:	f7fe bd36 	b.w	8007668 <_getpid>

08008bfc <__sread>:
 8008bfc:	b510      	push	{r4, lr}
 8008bfe:	460c      	mov	r4, r1
 8008c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c04:	f000 f89c 	bl	8008d40 <_read_r>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	bfab      	itete	ge
 8008c0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c0e:	89a3      	ldrhlt	r3, [r4, #12]
 8008c10:	181b      	addge	r3, r3, r0
 8008c12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c16:	bfac      	ite	ge
 8008c18:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c1a:	81a3      	strhlt	r3, [r4, #12]
 8008c1c:	bd10      	pop	{r4, pc}

08008c1e <__swrite>:
 8008c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c22:	461f      	mov	r7, r3
 8008c24:	898b      	ldrh	r3, [r1, #12]
 8008c26:	05db      	lsls	r3, r3, #23
 8008c28:	4605      	mov	r5, r0
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	4616      	mov	r6, r2
 8008c2e:	d505      	bpl.n	8008c3c <__swrite+0x1e>
 8008c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c34:	2302      	movs	r3, #2
 8008c36:	2200      	movs	r2, #0
 8008c38:	f000 f868 	bl	8008d0c <_lseek_r>
 8008c3c:	89a3      	ldrh	r3, [r4, #12]
 8008c3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c46:	81a3      	strh	r3, [r4, #12]
 8008c48:	4632      	mov	r2, r6
 8008c4a:	463b      	mov	r3, r7
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c52:	f000 b817 	b.w	8008c84 <_write_r>

08008c56 <__sseek>:
 8008c56:	b510      	push	{r4, lr}
 8008c58:	460c      	mov	r4, r1
 8008c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c5e:	f000 f855 	bl	8008d0c <_lseek_r>
 8008c62:	1c43      	adds	r3, r0, #1
 8008c64:	89a3      	ldrh	r3, [r4, #12]
 8008c66:	bf15      	itete	ne
 8008c68:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c72:	81a3      	strheq	r3, [r4, #12]
 8008c74:	bf18      	it	ne
 8008c76:	81a3      	strhne	r3, [r4, #12]
 8008c78:	bd10      	pop	{r4, pc}

08008c7a <__sclose>:
 8008c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c7e:	f000 b813 	b.w	8008ca8 <_close_r>
	...

08008c84 <_write_r>:
 8008c84:	b538      	push	{r3, r4, r5, lr}
 8008c86:	4d07      	ldr	r5, [pc, #28]	; (8008ca4 <_write_r+0x20>)
 8008c88:	4604      	mov	r4, r0
 8008c8a:	4608      	mov	r0, r1
 8008c8c:	4611      	mov	r1, r2
 8008c8e:	2200      	movs	r2, #0
 8008c90:	602a      	str	r2, [r5, #0]
 8008c92:	461a      	mov	r2, r3
 8008c94:	f7fe fd27 	bl	80076e6 <_write>
 8008c98:	1c43      	adds	r3, r0, #1
 8008c9a:	d102      	bne.n	8008ca2 <_write_r+0x1e>
 8008c9c:	682b      	ldr	r3, [r5, #0]
 8008c9e:	b103      	cbz	r3, 8008ca2 <_write_r+0x1e>
 8008ca0:	6023      	str	r3, [r4, #0]
 8008ca2:	bd38      	pop	{r3, r4, r5, pc}
 8008ca4:	2000b070 	.word	0x2000b070

08008ca8 <_close_r>:
 8008ca8:	b538      	push	{r3, r4, r5, lr}
 8008caa:	4d06      	ldr	r5, [pc, #24]	; (8008cc4 <_close_r+0x1c>)
 8008cac:	2300      	movs	r3, #0
 8008cae:	4604      	mov	r4, r0
 8008cb0:	4608      	mov	r0, r1
 8008cb2:	602b      	str	r3, [r5, #0]
 8008cb4:	f7fe fd33 	bl	800771e <_close>
 8008cb8:	1c43      	adds	r3, r0, #1
 8008cba:	d102      	bne.n	8008cc2 <_close_r+0x1a>
 8008cbc:	682b      	ldr	r3, [r5, #0]
 8008cbe:	b103      	cbz	r3, 8008cc2 <_close_r+0x1a>
 8008cc0:	6023      	str	r3, [r4, #0]
 8008cc2:	bd38      	pop	{r3, r4, r5, pc}
 8008cc4:	2000b070 	.word	0x2000b070

08008cc8 <_fstat_r>:
 8008cc8:	b538      	push	{r3, r4, r5, lr}
 8008cca:	4d07      	ldr	r5, [pc, #28]	; (8008ce8 <_fstat_r+0x20>)
 8008ccc:	2300      	movs	r3, #0
 8008cce:	4604      	mov	r4, r0
 8008cd0:	4608      	mov	r0, r1
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	602b      	str	r3, [r5, #0]
 8008cd6:	f7fe fd2e 	bl	8007736 <_fstat>
 8008cda:	1c43      	adds	r3, r0, #1
 8008cdc:	d102      	bne.n	8008ce4 <_fstat_r+0x1c>
 8008cde:	682b      	ldr	r3, [r5, #0]
 8008ce0:	b103      	cbz	r3, 8008ce4 <_fstat_r+0x1c>
 8008ce2:	6023      	str	r3, [r4, #0]
 8008ce4:	bd38      	pop	{r3, r4, r5, pc}
 8008ce6:	bf00      	nop
 8008ce8:	2000b070 	.word	0x2000b070

08008cec <_isatty_r>:
 8008cec:	b538      	push	{r3, r4, r5, lr}
 8008cee:	4d06      	ldr	r5, [pc, #24]	; (8008d08 <_isatty_r+0x1c>)
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	4608      	mov	r0, r1
 8008cf6:	602b      	str	r3, [r5, #0]
 8008cf8:	f7fe fd2d 	bl	8007756 <_isatty>
 8008cfc:	1c43      	adds	r3, r0, #1
 8008cfe:	d102      	bne.n	8008d06 <_isatty_r+0x1a>
 8008d00:	682b      	ldr	r3, [r5, #0]
 8008d02:	b103      	cbz	r3, 8008d06 <_isatty_r+0x1a>
 8008d04:	6023      	str	r3, [r4, #0]
 8008d06:	bd38      	pop	{r3, r4, r5, pc}
 8008d08:	2000b070 	.word	0x2000b070

08008d0c <_lseek_r>:
 8008d0c:	b538      	push	{r3, r4, r5, lr}
 8008d0e:	4d07      	ldr	r5, [pc, #28]	; (8008d2c <_lseek_r+0x20>)
 8008d10:	4604      	mov	r4, r0
 8008d12:	4608      	mov	r0, r1
 8008d14:	4611      	mov	r1, r2
 8008d16:	2200      	movs	r2, #0
 8008d18:	602a      	str	r2, [r5, #0]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	f7fe fd26 	bl	800776c <_lseek>
 8008d20:	1c43      	adds	r3, r0, #1
 8008d22:	d102      	bne.n	8008d2a <_lseek_r+0x1e>
 8008d24:	682b      	ldr	r3, [r5, #0]
 8008d26:	b103      	cbz	r3, 8008d2a <_lseek_r+0x1e>
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	bd38      	pop	{r3, r4, r5, pc}
 8008d2c:	2000b070 	.word	0x2000b070

08008d30 <_malloc_usable_size_r>:
 8008d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d34:	1f18      	subs	r0, r3, #4
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	bfbc      	itt	lt
 8008d3a:	580b      	ldrlt	r3, [r1, r0]
 8008d3c:	18c0      	addlt	r0, r0, r3
 8008d3e:	4770      	bx	lr

08008d40 <_read_r>:
 8008d40:	b538      	push	{r3, r4, r5, lr}
 8008d42:	4d07      	ldr	r5, [pc, #28]	; (8008d60 <_read_r+0x20>)
 8008d44:	4604      	mov	r4, r0
 8008d46:	4608      	mov	r0, r1
 8008d48:	4611      	mov	r1, r2
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	602a      	str	r2, [r5, #0]
 8008d4e:	461a      	mov	r2, r3
 8008d50:	f7fe fcac 	bl	80076ac <_read>
 8008d54:	1c43      	adds	r3, r0, #1
 8008d56:	d102      	bne.n	8008d5e <_read_r+0x1e>
 8008d58:	682b      	ldr	r3, [r5, #0]
 8008d5a:	b103      	cbz	r3, 8008d5e <_read_r+0x1e>
 8008d5c:	6023      	str	r3, [r4, #0]
 8008d5e:	bd38      	pop	{r3, r4, r5, pc}
 8008d60:	2000b070 	.word	0x2000b070

08008d64 <_init>:
 8008d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d66:	bf00      	nop
 8008d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d6a:	bc08      	pop	{r3}
 8008d6c:	469e      	mov	lr, r3
 8008d6e:	4770      	bx	lr

08008d70 <_fini>:
 8008d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d72:	bf00      	nop
 8008d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d76:	bc08      	pop	{r3}
 8008d78:	469e      	mov	lr, r3
 8008d7a:	4770      	bx	lr
