
ECSE444_Pj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000685c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  080069ec  080069ec  000169ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006be8  08006be8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006be8  08006be8  00016be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bf0  08006bf0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bf0  08006bf0  00016bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bf4  08006bf4  00016bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000afd8  20000078  08006c70  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b050  08006c70  0002b050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001718d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f47  00000000  00000000  00037235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  0003a180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001248  00000000  00000000  0003b4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000291bd  00000000  00000000  0003c738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c3c  00000000  00000000  000658f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa167  00000000  00000000  0007a531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00174698  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cf0  00000000  00000000  001746ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080069d4 	.word	0x080069d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080069d4 	.word	0x080069d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800057e:	2300      	movs	r3, #0
 8000580:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000582:	2003      	movs	r0, #3
 8000584:	f000 f901 	bl	800078a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000588:	200f      	movs	r0, #15
 800058a:	f004 fe59 	bl	8005240 <HAL_InitTick>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d002      	beq.n	800059a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000594:	2301      	movs	r3, #1
 8000596:	71fb      	strb	r3, [r7, #7]
 8000598:	e001      	b.n	800059e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800059a:	f004 fce3 	bl	8004f64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800059e:	79fb      	ldrb	r3, [r7, #7]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	2000ad58 	.word	0x2000ad58

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	2000ad58 	.word	0x2000ad58

080005e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f0:	f7ff ffee 	bl	80005d0 <HAL_GetTick>
 80005f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000600:	d005      	beq.n	800060e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <HAL_Delay+0x44>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800060e:	bf00      	nop
 8000610:	f7ff ffde 	bl	80005d0 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	429a      	cmp	r2, r3
 800061e:	d8f7      	bhi.n	8000610 <HAL_Delay+0x28>
  {
  }
}
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000004 	.word	0x20000004

08000630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f003 0307 	and.w	r3, r3, #7
 800063e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800064c:	4013      	ands	r3, r2
 800064e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800065c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000662:	4a04      	ldr	r2, [pc, #16]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	60d3      	str	r3, [r2, #12]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <__NVIC_GetPriorityGrouping+0x18>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	f003 0307 	and.w	r3, r3, #7
}
 8000686:	4618      	mov	r0, r3
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	db0b      	blt.n	80006be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f003 021f 	and.w	r2, r3, #31
 80006ac:	4907      	ldr	r1, [pc, #28]	; (80006cc <__NVIC_EnableIRQ+0x38>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	095b      	lsrs	r3, r3, #5
 80006b4:	2001      	movs	r0, #1
 80006b6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000e100 	.word	0xe000e100

080006d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	6039      	str	r1, [r7, #0]
 80006da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	db0a      	blt.n	80006fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	490c      	ldr	r1, [pc, #48]	; (800071c <__NVIC_SetPriority+0x4c>)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	0112      	lsls	r2, r2, #4
 80006f0:	b2d2      	uxtb	r2, r2
 80006f2:	440b      	add	r3, r1
 80006f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f8:	e00a      	b.n	8000710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4908      	ldr	r1, [pc, #32]	; (8000720 <__NVIC_SetPriority+0x50>)
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	3b04      	subs	r3, #4
 8000708:	0112      	lsls	r2, r2, #4
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	440b      	add	r3, r1
 800070e:	761a      	strb	r2, [r3, #24]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	e000e100 	.word	0xe000e100
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000724:	b480      	push	{r7}
 8000726:	b089      	sub	sp, #36	; 0x24
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	f1c3 0307 	rsb	r3, r3, #7
 800073e:	2b04      	cmp	r3, #4
 8000740:	bf28      	it	cs
 8000742:	2304      	movcs	r3, #4
 8000744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3304      	adds	r3, #4
 800074a:	2b06      	cmp	r3, #6
 800074c:	d902      	bls.n	8000754 <NVIC_EncodePriority+0x30>
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3b03      	subs	r3, #3
 8000752:	e000      	b.n	8000756 <NVIC_EncodePriority+0x32>
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	f04f 32ff 	mov.w	r2, #4294967295
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	fa02 f303 	lsl.w	r3, r2, r3
 8000762:	43da      	mvns	r2, r3
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	401a      	ands	r2, r3
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800076c:	f04f 31ff 	mov.w	r1, #4294967295
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	fa01 f303 	lsl.w	r3, r1, r3
 8000776:	43d9      	mvns	r1, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800077c:	4313      	orrs	r3, r2
         );
}
 800077e:	4618      	mov	r0, r3
 8000780:	3724      	adds	r7, #36	; 0x24
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff ff4c 	bl	8000630 <__NVIC_SetPriorityGrouping>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
 80007ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007b2:	f7ff ff61 	bl	8000678 <__NVIC_GetPriorityGrouping>
 80007b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	68b9      	ldr	r1, [r7, #8]
 80007bc:	6978      	ldr	r0, [r7, #20]
 80007be:	f7ff ffb1 	bl	8000724 <NVIC_EncodePriority>
 80007c2:	4602      	mov	r2, r0
 80007c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c8:	4611      	mov	r1, r2
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff ff80 	bl	80006d0 <__NVIC_SetPriority>
}
 80007d0:	bf00      	nop
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ff54 	bl	8000694 <__NVIC_EnableIRQ>
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d101      	bne.n	8000806 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000802:	2301      	movs	r3, #1
 8000804:	e014      	b.n	8000830 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	791b      	ldrb	r3, [r3, #4]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b00      	cmp	r3, #0
 800080e:	d105      	bne.n	800081c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2200      	movs	r2, #0
 8000814:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f004 fbc8 	bl	8004fac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2202      	movs	r2, #2
 8000820:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2201      	movs	r2, #1
 800082c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
 8000844:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	795b      	ldrb	r3, [r3, #5]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d101      	bne.n	8000856 <HAL_DAC_Start_DMA+0x1e>
 8000852:	2302      	movs	r3, #2
 8000854:	e0ab      	b.n	80009ae <HAL_DAC_Start_DMA+0x176>
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	2201      	movs	r2, #1
 800085a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	2202      	movs	r2, #2
 8000860:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d12f      	bne.n	80008c8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	4a52      	ldr	r2, [pc, #328]	; (80009b8 <HAL_DAC_Start_DMA+0x180>)
 800086e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	4a51      	ldr	r2, [pc, #324]	; (80009bc <HAL_DAC_Start_DMA+0x184>)
 8000876:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	4a50      	ldr	r2, [pc, #320]	; (80009c0 <HAL_DAC_Start_DMA+0x188>)
 800087e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800088e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000890:	6a3b      	ldr	r3, [r7, #32]
 8000892:	2b08      	cmp	r3, #8
 8000894:	d013      	beq.n	80008be <HAL_DAC_Start_DMA+0x86>
 8000896:	6a3b      	ldr	r3, [r7, #32]
 8000898:	2b08      	cmp	r3, #8
 800089a:	d845      	bhi.n	8000928 <HAL_DAC_Start_DMA+0xf0>
 800089c:	6a3b      	ldr	r3, [r7, #32]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d003      	beq.n	80008aa <HAL_DAC_Start_DMA+0x72>
 80008a2:	6a3b      	ldr	r3, [r7, #32]
 80008a4:	2b04      	cmp	r3, #4
 80008a6:	d005      	beq.n	80008b4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80008a8:	e03e      	b.n	8000928 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	3308      	adds	r3, #8
 80008b0:	613b      	str	r3, [r7, #16]
        break;
 80008b2:	e03c      	b.n	800092e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	330c      	adds	r3, #12
 80008ba:	613b      	str	r3, [r7, #16]
        break;
 80008bc:	e037      	b.n	800092e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3310      	adds	r3, #16
 80008c4:	613b      	str	r3, [r7, #16]
        break;
 80008c6:	e032      	b.n	800092e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	4a3d      	ldr	r2, [pc, #244]	; (80009c4 <HAL_DAC_Start_DMA+0x18c>)
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	4a3c      	ldr	r2, [pc, #240]	; (80009c8 <HAL_DAC_Start_DMA+0x190>)
 80008d6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	4a3b      	ldr	r2, [pc, #236]	; (80009cc <HAL_DAC_Start_DMA+0x194>)
 80008de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008ee:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80008f0:	6a3b      	ldr	r3, [r7, #32]
 80008f2:	2b08      	cmp	r3, #8
 80008f4:	d013      	beq.n	800091e <HAL_DAC_Start_DMA+0xe6>
 80008f6:	6a3b      	ldr	r3, [r7, #32]
 80008f8:	2b08      	cmp	r3, #8
 80008fa:	d817      	bhi.n	800092c <HAL_DAC_Start_DMA+0xf4>
 80008fc:	6a3b      	ldr	r3, [r7, #32]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d003      	beq.n	800090a <HAL_DAC_Start_DMA+0xd2>
 8000902:	6a3b      	ldr	r3, [r7, #32]
 8000904:	2b04      	cmp	r3, #4
 8000906:	d005      	beq.n	8000914 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000908:	e010      	b.n	800092c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	3314      	adds	r3, #20
 8000910:	613b      	str	r3, [r7, #16]
        break;
 8000912:	e00c      	b.n	800092e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	3318      	adds	r3, #24
 800091a:	613b      	str	r3, [r7, #16]
        break;
 800091c:	e007      	b.n	800092e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	331c      	adds	r3, #28
 8000924:	613b      	str	r3, [r7, #16]
        break;
 8000926:	e002      	b.n	800092e <HAL_DAC_Start_DMA+0xf6>
        break;
 8000928:	bf00      	nop
 800092a:	e000      	b.n	800092e <HAL_DAC_Start_DMA+0xf6>
        break;
 800092c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d111      	bne.n	8000958 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000942:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	6898      	ldr	r0, [r3, #8]
 8000948:	6879      	ldr	r1, [r7, #4]
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	f000 faaf 	bl	8000eb0 <HAL_DMA_Start_IT>
 8000952:	4603      	mov	r3, r0
 8000954:	75fb      	strb	r3, [r7, #23]
 8000956:	e010      	b.n	800097a <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000966:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	68d8      	ldr	r0, [r3, #12]
 800096c:	6879      	ldr	r1, [r7, #4]
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	f000 fa9d 	bl	8000eb0 <HAL_DMA_Start_IT>
 8000976:	4603      	mov	r3, r0
 8000978:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	2200      	movs	r2, #0
 800097e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8000980:	7dfb      	ldrb	r3, [r7, #23]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d10c      	bne.n	80009a0 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	6819      	ldr	r1, [r3, #0]
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	f003 0310 	and.w	r3, r3, #16
 8000992:	2201      	movs	r2, #1
 8000994:	409a      	lsls	r2, r3
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	430a      	orrs	r2, r1
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	e005      	b.n	80009ac <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	691b      	ldr	r3, [r3, #16]
 80009a4:	f043 0204 	orr.w	r2, r3, #4
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80009ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	08000c2d 	.word	0x08000c2d
 80009bc:	08000c4f 	.word	0x08000c4f
 80009c0:	08000c6b 	.word	0x08000c6b
 80009c4:	08000cd5 	.word	0x08000cd5
 80009c8:	08000cf7 	.word	0x08000cf7
 80009cc:	08000d13 	.word	0x08000d13

080009d0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	795b      	ldrb	r3, [r3, #5]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d101      	bne.n	8000a14 <HAL_DAC_ConfigChannel+0x1c>
 8000a10:	2302      	movs	r3, #2
 8000a12:	e107      	b.n	8000c24 <HAL_DAC_ConfigChannel+0x22c>
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2201      	movs	r2, #1
 8000a18:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b04      	cmp	r3, #4
 8000a26:	d174      	bne.n	8000b12 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000a28:	f7ff fdd2 	bl	80005d0 <HAL_GetTick>
 8000a2c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d134      	bne.n	8000a9e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000a34:	e011      	b.n	8000a5a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000a36:	f7ff fdcb 	bl	80005d0 <HAL_GetTick>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d90a      	bls.n	8000a5a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	691b      	ldr	r3, [r3, #16]
 8000a48:	f043 0208 	orr.w	r2, r3, #8
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	2203      	movs	r2, #3
 8000a54:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000a56:	2303      	movs	r3, #3
 8000a58:	e0e4      	b.n	8000c24 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1e6      	bne.n	8000a36 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f7ff fdbd 	bl	80005e8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	6992      	ldr	r2, [r2, #24]
 8000a76:	641a      	str	r2, [r3, #64]	; 0x40
 8000a78:	e01e      	b.n	8000ab8 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000a7a:	f7ff fda9 	bl	80005d0 <HAL_GetTick>
 8000a7e:	4602      	mov	r2, r0
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d90a      	bls.n	8000a9e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	f043 0208 	orr.w	r2, r3, #8
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2203      	movs	r2, #3
 8000a98:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	e0c2      	b.n	8000c24 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	dbe8      	blt.n	8000a7a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f7ff fd9d 	bl	80005e8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	6992      	ldr	r2, [r2, #24]
 8000ab6:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f003 0310 	and.w	r3, r3, #16
 8000ac4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8000acc:	43db      	mvns	r3, r3
 8000ace:	ea02 0103 	and.w	r1, r2, r3
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	69da      	ldr	r2, [r3, #28]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f003 0310 	and.w	r3, r3, #16
 8000adc:	409a      	lsls	r2, r3
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f003 0310 	and.w	r3, r3, #16
 8000af2:	21ff      	movs	r1, #255	; 0xff
 8000af4:	fa01 f303 	lsl.w	r3, r1, r3
 8000af8:	43db      	mvns	r3, r3
 8000afa:	ea02 0103 	and.w	r1, r2, r3
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	6a1a      	ldr	r2, [r3, #32]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f003 0310 	and.w	r3, r3, #16
 8000b08:	409a      	lsls	r2, r3
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	691b      	ldr	r3, [r3, #16]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d11d      	bne.n	8000b56 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b20:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f003 0310 	and.w	r3, r3, #16
 8000b28:	221f      	movs	r2, #31
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	4013      	ands	r3, r2
 8000b34:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	695b      	ldr	r3, [r3, #20]
 8000b3a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0310 	and.w	r3, r3, #16
 8000b42:	697a      	ldr	r2, [r7, #20]
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b5c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f003 0310 	and.w	r3, r3, #16
 8000b64:	2207      	movs	r2, #7
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	69ba      	ldr	r2, [r7, #24]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0310 	and.w	r3, r3, #16
 8000b8a:	697a      	ldr	r2, [r7, #20]
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	69ba      	ldr	r2, [r7, #24]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	6819      	ldr	r1, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f003 0310 	and.w	r3, r3, #16
 8000baa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	400a      	ands	r2, r1
 8000bba:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f003 0310 	and.w	r3, r3, #16
 8000bca:	f640 72fc 	movw	r2, #4092	; 0xffc
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f003 0310 	and.w	r3, r3, #16
 8000be6:	697a      	ldr	r2, [r7, #20]
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	6819      	ldr	r1, [r3, #0]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f003 0310 	and.w	r3, r3, #16
 8000c06:	22c0      	movs	r2, #192	; 0xc0
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	43da      	mvns	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	400a      	ands	r2, r1
 8000c14:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	2201      	movs	r2, #1
 8000c1a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3720      	adds	r7, #32
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c38:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8000c3a:	68f8      	ldr	r0, [r7, #12]
 8000c3c:	f004 f8ae 	bl	8004d9c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	2201      	movs	r2, #1
 8000c44:	711a      	strb	r2, [r3, #4]
}
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b084      	sub	sp, #16
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000c5c:	68f8      	ldr	r0, [r7, #12]
 8000c5e:	f7ff feb7 	bl	80009d0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b084      	sub	sp, #16
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c76:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	f043 0204 	orr.w	r2, r3, #4
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000c84:	68f8      	ldr	r0, [r7, #12]
 8000c86:	f7ff fead 	bl	80009e4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	711a      	strb	r2, [r3, #4]
}
 8000c90:	bf00      	nop
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f7ff ffd8 	bl	8000c98 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2201      	movs	r2, #1
 8000cec:	711a      	strb	r2, [r3, #4]
}
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b084      	sub	sp, #16
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d02:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8000d04:	68f8      	ldr	r0, [r7, #12]
 8000d06:	f7ff ffd1 	bl	8000cac <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b084      	sub	sp, #16
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	f043 0204 	orr.w	r2, r3, #4
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8000d2c:	68f8      	ldr	r0, [r7, #12]
 8000d2e:	f7ff ffc7 	bl	8000cc0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	2201      	movs	r2, #1
 8000d36:	711a      	strb	r2, [r3, #4]
}
 8000d38:	bf00      	nop
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e098      	b.n	8000e84 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	461a      	mov	r2, r3
 8000d58:	4b4d      	ldr	r3, [pc, #308]	; (8000e90 <HAL_DMA_Init+0x150>)
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d80f      	bhi.n	8000d7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	4b4b      	ldr	r3, [pc, #300]	; (8000e94 <HAL_DMA_Init+0x154>)
 8000d66:	4413      	add	r3, r2
 8000d68:	4a4b      	ldr	r2, [pc, #300]	; (8000e98 <HAL_DMA_Init+0x158>)
 8000d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6e:	091b      	lsrs	r3, r3, #4
 8000d70:	009a      	lsls	r2, r3, #2
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a48      	ldr	r2, [pc, #288]	; (8000e9c <HAL_DMA_Init+0x15c>)
 8000d7a:	641a      	str	r2, [r3, #64]	; 0x40
 8000d7c:	e00e      	b.n	8000d9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	4b46      	ldr	r3, [pc, #280]	; (8000ea0 <HAL_DMA_Init+0x160>)
 8000d86:	4413      	add	r3, r2
 8000d88:	4a43      	ldr	r2, [pc, #268]	; (8000e98 <HAL_DMA_Init+0x158>)
 8000d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8e:	091b      	lsrs	r3, r3, #4
 8000d90:	009a      	lsls	r2, r3, #2
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a42      	ldr	r2, [pc, #264]	; (8000ea4 <HAL_DMA_Init+0x164>)
 8000d9a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2202      	movs	r2, #2
 8000da0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000db6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	691b      	ldr	r3, [r3, #16]
 8000dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a1b      	ldr	r3, [r3, #32]
 8000dde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000de0:	68fa      	ldr	r2, [r7, #12]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000df6:	d039      	beq.n	8000e6c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	4a27      	ldr	r2, [pc, #156]	; (8000e9c <HAL_DMA_Init+0x15c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d11a      	bne.n	8000e38 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e02:	4b29      	ldr	r3, [pc, #164]	; (8000ea8 <HAL_DMA_Init+0x168>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	f003 031c 	and.w	r3, r3, #28
 8000e0e:	210f      	movs	r1, #15
 8000e10:	fa01 f303 	lsl.w	r3, r1, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	4924      	ldr	r1, [pc, #144]	; (8000ea8 <HAL_DMA_Init+0x168>)
 8000e18:	4013      	ands	r3, r2
 8000e1a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e1c:	4b22      	ldr	r3, [pc, #136]	; (8000ea8 <HAL_DMA_Init+0x168>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6859      	ldr	r1, [r3, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e28:	f003 031c 	and.w	r3, r3, #28
 8000e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e30:	491d      	ldr	r1, [pc, #116]	; (8000ea8 <HAL_DMA_Init+0x168>)
 8000e32:	4313      	orrs	r3, r2
 8000e34:	600b      	str	r3, [r1, #0]
 8000e36:	e019      	b.n	8000e6c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <HAL_DMA_Init+0x16c>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e40:	f003 031c 	and.w	r3, r3, #28
 8000e44:	210f      	movs	r1, #15
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	4917      	ldr	r1, [pc, #92]	; (8000eac <HAL_DMA_Init+0x16c>)
 8000e4e:	4013      	ands	r3, r2
 8000e50:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <HAL_DMA_Init+0x16c>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6859      	ldr	r1, [r3, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	f003 031c 	and.w	r3, r3, #28
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	4911      	ldr	r1, [pc, #68]	; (8000eac <HAL_DMA_Init+0x16c>)
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2201      	movs	r2, #1
 8000e76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	40020407 	.word	0x40020407
 8000e94:	bffdfff8 	.word	0xbffdfff8
 8000e98:	cccccccd 	.word	0xcccccccd
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	bffdfbf8 	.word	0xbffdfbf8
 8000ea4:	40020400 	.word	0x40020400
 8000ea8:	400200a8 	.word	0x400200a8
 8000eac:	400204a8 	.word	0x400204a8

08000eb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
 8000ebc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d101      	bne.n	8000ed0 <HAL_DMA_Start_IT+0x20>
 8000ecc:	2302      	movs	r3, #2
 8000ece:	e04b      	b.n	8000f68 <HAL_DMA_Start_IT+0xb8>
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d13a      	bne.n	8000f5a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 0201 	bic.w	r2, r2, #1
 8000f00:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	68b9      	ldr	r1, [r7, #8]
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f000 f91e 	bl	800114a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d008      	beq.n	8000f28 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f042 020e 	orr.w	r2, r2, #14
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	e00f      	b.n	8000f48 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 0204 	bic.w	r2, r2, #4
 8000f36:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f042 020a 	orr.w	r2, r2, #10
 8000f46:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 0201 	orr.w	r2, r2, #1
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	e005      	b.n	8000f66 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f62:	2302      	movs	r3, #2
 8000f64:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d008      	beq.n	8000f9a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e022      	b.n	8000fe0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 020e 	bic.w	r2, r2, #14
 8000fa8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f022 0201 	bic.w	r2, r2, #1
 8000fb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f003 021c 	and.w	r2, r3, #28
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fcc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001008:	f003 031c 	and.w	r3, r3, #28
 800100c:	2204      	movs	r2, #4
 800100e:	409a      	lsls	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4013      	ands	r3, r2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d026      	beq.n	8001066 <HAL_DMA_IRQHandler+0x7a>
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	f003 0304 	and.w	r3, r3, #4
 800101e:	2b00      	cmp	r3, #0
 8001020:	d021      	beq.n	8001066 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0320 	and.w	r3, r3, #32
 800102c:	2b00      	cmp	r3, #0
 800102e:	d107      	bne.n	8001040 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f022 0204 	bic.w	r2, r2, #4
 800103e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001044:	f003 021c 	and.w	r2, r3, #28
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	2104      	movs	r1, #4
 800104e:	fa01 f202 	lsl.w	r2, r1, r2
 8001052:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	2b00      	cmp	r3, #0
 800105a:	d071      	beq.n	8001140 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001064:	e06c      	b.n	8001140 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	f003 031c 	and.w	r3, r3, #28
 800106e:	2202      	movs	r2, #2
 8001070:	409a      	lsls	r2, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4013      	ands	r3, r2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d02e      	beq.n	80010d8 <HAL_DMA_IRQHandler+0xec>
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d029      	beq.n	80010d8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0320 	and.w	r3, r3, #32
 800108e:	2b00      	cmp	r3, #0
 8001090:	d10b      	bne.n	80010aa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f022 020a 	bic.w	r2, r2, #10
 80010a0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2201      	movs	r2, #1
 80010a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f003 021c 	and.w	r2, r3, #28
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	2102      	movs	r1, #2
 80010b8:	fa01 f202 	lsl.w	r2, r1, r2
 80010bc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d038      	beq.n	8001140 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80010d6:	e033      	b.n	8001140 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010dc:	f003 031c 	and.w	r3, r3, #28
 80010e0:	2208      	movs	r2, #8
 80010e2:	409a      	lsls	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4013      	ands	r3, r2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d02a      	beq.n	8001142 <HAL_DMA_IRQHandler+0x156>
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d025      	beq.n	8001142 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f022 020e 	bic.w	r2, r2, #14
 8001104:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f003 021c 	and.w	r2, r3, #28
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	2101      	movs	r1, #1
 8001114:	fa01 f202 	lsl.w	r2, r1, r2
 8001118:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2201      	movs	r2, #1
 800111e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001134:	2b00      	cmp	r3, #0
 8001136:	d004      	beq.n	8001142 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001140:	bf00      	nop
 8001142:	bf00      	nop
}
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800114a:	b480      	push	{r7}
 800114c:	b085      	sub	sp, #20
 800114e:	af00      	add	r7, sp, #0
 8001150:	60f8      	str	r0, [r7, #12]
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
 8001156:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115c:	f003 021c 	and.w	r2, r3, #28
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	2101      	movs	r1, #1
 8001166:	fa01 f202 	lsl.w	r2, r1, r2
 800116a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	2b10      	cmp	r3, #16
 800117a:	d108      	bne.n	800118e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68ba      	ldr	r2, [r7, #8]
 800118a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800118c:	e007      	b.n	800119e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	60da      	str	r2, [r3, #12]
}
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b087      	sub	sp, #28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ba:	e17f      	b.n	80014bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	2101      	movs	r1, #1
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	fa01 f303 	lsl.w	r3, r1, r3
 80011c8:	4013      	ands	r3, r2
 80011ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 8171 	beq.w	80014b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d00b      	beq.n	80011f4 <HAL_GPIO_Init+0x48>
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d007      	beq.n	80011f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011e8:	2b11      	cmp	r3, #17
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2b12      	cmp	r3, #18
 80011f2:	d130      	bne.n	8001256 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	2203      	movs	r2, #3
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	68da      	ldr	r2, [r3, #12]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800122a:	2201      	movs	r2, #1
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	091b      	lsrs	r3, r3, #4
 8001240:	f003 0201 	and.w	r2, r3, #1
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f003 0303 	and.w	r3, r3, #3
 800125e:	2b03      	cmp	r3, #3
 8001260:	d118      	bne.n	8001294 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001266:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001268:	2201      	movs	r2, #1
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	08db      	lsrs	r3, r3, #3
 800127e:	f003 0201 	and.w	r2, r3, #1
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x128>
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b12      	cmp	r3, #18
 80012d2:	d123      	bne.n	800131c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	08da      	lsrs	r2, r3, #3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3208      	adds	r2, #8
 80012dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	220f      	movs	r2, #15
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	691a      	ldr	r2, [r3, #16]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	08da      	lsrs	r2, r3, #3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3208      	adds	r2, #8
 8001316:	6939      	ldr	r1, [r7, #16]
 8001318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	2203      	movs	r2, #3
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0203 	and.w	r2, r3, #3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 80ac 	beq.w	80014b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	4b5f      	ldr	r3, [pc, #380]	; (80014dc <HAL_GPIO_Init+0x330>)
 8001360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001362:	4a5e      	ldr	r2, [pc, #376]	; (80014dc <HAL_GPIO_Init+0x330>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6613      	str	r3, [r2, #96]	; 0x60
 800136a:	4b5c      	ldr	r3, [pc, #368]	; (80014dc <HAL_GPIO_Init+0x330>)
 800136c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001376:	4a5a      	ldr	r2, [pc, #360]	; (80014e0 <HAL_GPIO_Init+0x334>)
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	3302      	adds	r3, #2
 800137e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013a0:	d025      	beq.n	80013ee <HAL_GPIO_Init+0x242>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4f      	ldr	r2, [pc, #316]	; (80014e4 <HAL_GPIO_Init+0x338>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d01f      	beq.n	80013ea <HAL_GPIO_Init+0x23e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4e      	ldr	r2, [pc, #312]	; (80014e8 <HAL_GPIO_Init+0x33c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d019      	beq.n	80013e6 <HAL_GPIO_Init+0x23a>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4d      	ldr	r2, [pc, #308]	; (80014ec <HAL_GPIO_Init+0x340>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d013      	beq.n	80013e2 <HAL_GPIO_Init+0x236>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4c      	ldr	r2, [pc, #304]	; (80014f0 <HAL_GPIO_Init+0x344>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d00d      	beq.n	80013de <HAL_GPIO_Init+0x232>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4b      	ldr	r2, [pc, #300]	; (80014f4 <HAL_GPIO_Init+0x348>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d007      	beq.n	80013da <HAL_GPIO_Init+0x22e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4a      	ldr	r2, [pc, #296]	; (80014f8 <HAL_GPIO_Init+0x34c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d101      	bne.n	80013d6 <HAL_GPIO_Init+0x22a>
 80013d2:	2306      	movs	r3, #6
 80013d4:	e00c      	b.n	80013f0 <HAL_GPIO_Init+0x244>
 80013d6:	2307      	movs	r3, #7
 80013d8:	e00a      	b.n	80013f0 <HAL_GPIO_Init+0x244>
 80013da:	2305      	movs	r3, #5
 80013dc:	e008      	b.n	80013f0 <HAL_GPIO_Init+0x244>
 80013de:	2304      	movs	r3, #4
 80013e0:	e006      	b.n	80013f0 <HAL_GPIO_Init+0x244>
 80013e2:	2303      	movs	r3, #3
 80013e4:	e004      	b.n	80013f0 <HAL_GPIO_Init+0x244>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e002      	b.n	80013f0 <HAL_GPIO_Init+0x244>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <HAL_GPIO_Init+0x244>
 80013ee:	2300      	movs	r3, #0
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	f002 0203 	and.w	r2, r2, #3
 80013f6:	0092      	lsls	r2, r2, #2
 80013f8:	4093      	lsls	r3, r2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001400:	4937      	ldr	r1, [pc, #220]	; (80014e0 <HAL_GPIO_Init+0x334>)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3302      	adds	r3, #2
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800140e:	4b3b      	ldr	r3, [pc, #236]	; (80014fc <HAL_GPIO_Init+0x350>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001432:	4a32      	ldr	r2, [pc, #200]	; (80014fc <HAL_GPIO_Init+0x350>)
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001438:	4b30      	ldr	r3, [pc, #192]	; (80014fc <HAL_GPIO_Init+0x350>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800145c:	4a27      	ldr	r2, [pc, #156]	; (80014fc <HAL_GPIO_Init+0x350>)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001462:	4b26      	ldr	r3, [pc, #152]	; (80014fc <HAL_GPIO_Init+0x350>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001486:	4a1d      	ldr	r2, [pc, #116]	; (80014fc <HAL_GPIO_Init+0x350>)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800148c:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <HAL_GPIO_Init+0x350>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	43db      	mvns	r3, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014b0:	4a12      	ldr	r2, [pc, #72]	; (80014fc <HAL_GPIO_Init+0x350>)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	3301      	adds	r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	fa22 f303 	lsr.w	r3, r2, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f47f ae78 	bne.w	80011bc <HAL_GPIO_Init+0x10>
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	371c      	adds	r7, #28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40010000 	.word	0x40010000
 80014e4:	48000400 	.word	0x48000400
 80014e8:	48000800 	.word	0x48000800
 80014ec:	48000c00 	.word	0x48000c00
 80014f0:	48001000 	.word	0x48001000
 80014f4:	48001400 	.word	0x48001400
 80014f8:	48001800 	.word	0x48001800
 80014fc:	40010400 	.word	0x40010400

08001500 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691a      	ldr	r2, [r3, #16]
 8001510:	887b      	ldrh	r3, [r7, #2]
 8001512:	4013      	ands	r3, r2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d002      	beq.n	800151e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001518:	2301      	movs	r3, #1
 800151a:	73fb      	strb	r3, [r7, #15]
 800151c:	e001      	b.n	8001522 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001522:	7bfb      	ldrb	r3, [r7, #15]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
 800153c:	4613      	mov	r3, r2
 800153e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001540:	787b      	ldrb	r3, [r7, #1]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800154c:	e002      	b.n	8001554 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800154e:	887a      	ldrh	r2, [r7, #2]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001572:	887a      	ldrh	r2, [r7, #2]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4013      	ands	r3, r2
 8001578:	041a      	lsls	r2, r3, #16
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	43d9      	mvns	r1, r3
 800157e:	887b      	ldrh	r3, [r7, #2]
 8001580:	400b      	ands	r3, r1
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	619a      	str	r2, [r3, #24]
}
 8001588:	bf00      	nop
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015a0:	695a      	ldr	r2, [r3, #20]
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d006      	beq.n	80015b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f806 	bl	80015c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40010400 	.word	0x40010400

080015c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015e0:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40007000 	.word	0x40007000

080015f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001606:	d130      	bne.n	800166a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001608:	4b23      	ldr	r3, [pc, #140]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001614:	d038      	beq.n	8001688 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800161e:	4a1e      	ldr	r2, [pc, #120]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001620:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001624:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001626:	4b1d      	ldr	r3, [pc, #116]	; (800169c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2232      	movs	r2, #50	; 0x32
 800162c:	fb02 f303 	mul.w	r3, r2, r3
 8001630:	4a1b      	ldr	r2, [pc, #108]	; (80016a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001632:	fba2 2303 	umull	r2, r3, r2, r3
 8001636:	0c9b      	lsrs	r3, r3, #18
 8001638:	3301      	adds	r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800163c:	e002      	b.n	8001644 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	3b01      	subs	r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001644:	4b14      	ldr	r3, [pc, #80]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001650:	d102      	bne.n	8001658 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1f2      	bne.n	800163e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001664:	d110      	bne.n	8001688 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e00f      	b.n	800168a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001676:	d007      	beq.n	8001688 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001678:	4b07      	ldr	r3, [pc, #28]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001680:	4a05      	ldr	r2, [pc, #20]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001682:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001686:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40007000 	.word	0x40007000
 800169c:	20000010 	.word	0x20000010
 80016a0:	431bde83 	.word	0x431bde83

080016a4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af02      	add	r7, sp, #8
 80016aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80016ac:	f7fe ff90 	bl	80005d0 <HAL_GetTick>
 80016b0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e063      	b.n	8001784 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10b      	bne.n	80016e0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f003 fcd7 	bl	8005084 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80016d6:	f241 3188 	movw	r1, #5000	; 0x1388
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f9c5 	bl	8001a6a <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	021a      	lsls	r2, r3, #8
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	2120      	movs	r1, #32
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f9bd 	bl	8001a86 <QSPI_WaitFlagStateUntilTimeout>
 800170c:	4603      	mov	r3, r0
 800170e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001710:	7afb      	ldrb	r3, [r7, #11]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d131      	bne.n	800177a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001720:	f023 0310 	bic.w	r3, r3, #16
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6852      	ldr	r2, [r2, #4]
 8001728:	0611      	lsls	r1, r2, #24
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	68d2      	ldr	r2, [r2, #12]
 800172e:	4311      	orrs	r1, r2
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	430b      	orrs	r3, r1
 8001736:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <HAL_QSPI_Init+0xe8>)
 8001740:	4013      	ands	r3, r2
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6912      	ldr	r2, [r2, #16]
 8001746:	0411      	lsls	r1, r2, #16
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6952      	ldr	r2, [r2, #20]
 800174c:	4311      	orrs	r1, r2
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6992      	ldr	r2, [r2, #24]
 8001752:	4311      	orrs	r1, r2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	430b      	orrs	r3, r1
 800175a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0201 	orr.w	r2, r2, #1
 800176a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8001782:	7afb      	ldrb	r3, [r7, #11]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	ffe0f8fe 	.word	0xffe0f8fe

08001790 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af02      	add	r7, sp, #8
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7fe ff18 	bl	80005d0 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d101      	bne.n	80017b2 <HAL_QSPI_Command+0x22>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e048      	b.n	8001844 <HAL_QSPI_Command+0xb4>
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d137      	bne.n	8001836 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2202      	movs	r2, #2
 80017d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	2200      	movs	r2, #0
 80017dc:	2120      	movs	r1, #32
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f000 f951 	bl	8001a86 <QSPI_WaitFlagStateUntilTimeout>
 80017e4:	4603      	mov	r3, r0
 80017e6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80017e8:	7dfb      	ldrb	r3, [r7, #23]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d125      	bne.n	800183a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80017ee:	2200      	movs	r2, #0
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f000 f97e 	bl	8001af4 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d115      	bne.n	800182c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	2201      	movs	r2, #1
 8001808:	2102      	movs	r1, #2
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f000 f93b 	bl	8001a86 <QSPI_WaitFlagStateUntilTimeout>
 8001810:	4603      	mov	r3, r0
 8001812:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8001814:	7dfb      	ldrb	r3, [r7, #23]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10f      	bne.n	800183a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2202      	movs	r2, #2
 8001820:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800182a:	e006      	b.n	800183a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001834:	e001      	b.n	800183a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8001836:	2302      	movs	r3, #2
 8001838:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8001842:	7dfb      	ldrb	r3, [r7, #23]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	; 0x28
 8001850:	af02      	add	r7, sp, #8
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800185c:	f7fe feb8 	bl	80005d0 <HAL_GetTick>
 8001860:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	3320      	adds	r3, #32
 8001870:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b01      	cmp	r3, #1
 800187c:	d101      	bne.n	8001882 <HAL_QSPI_Receive+0x36>
 800187e:	2302      	movs	r3, #2
 8001880:	e082      	b.n	8001988 <HAL_QSPI_Receive+0x13c>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b01      	cmp	r3, #1
 8001894:	d171      	bne.n	800197a <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d062      	beq.n	8001968 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2222      	movs	r2, #34	; 0x22
 80018a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	1c5a      	adds	r2, r3, #1
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80018da:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80018e4:	e01c      	b.n	8001920 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	2201      	movs	r2, #1
 80018ee:	2106      	movs	r1, #6
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f000 f8c8 	bl	8001a86 <QSPI_WaitFlagStateUntilTimeout>
 80018f6:	4603      	mov	r3, r0
 80018f8:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80018fa:	7ffb      	ldrb	r3, [r7, #31]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d114      	bne.n	800192a <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	7812      	ldrb	r2, [r2, #0]
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001910:	1c5a      	adds	r2, r3, #1
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	1e5a      	subs	r2, r3, #1
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1de      	bne.n	80018e6 <HAL_QSPI_Receive+0x9a>
 8001928:	e000      	b.n	800192c <HAL_QSPI_Receive+0xe0>
          break;
 800192a:	bf00      	nop
      }

      if (status == HAL_OK)
 800192c:	7ffb      	ldrb	r3, [r7, #31]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d115      	bne.n	800195e <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	2201      	movs	r2, #1
 800193a:	2102      	movs	r1, #2
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f000 f8a2 	bl	8001a86 <QSPI_WaitFlagStateUntilTimeout>
 8001942:	4603      	mov	r3, r0
 8001944:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8001946:	7ffb      	ldrb	r3, [r7, #31]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d108      	bne.n	800195e <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2202      	movs	r2, #2
 8001952:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f000 f81b 	bl	8001990 <HAL_QSPI_Abort>
 800195a:	4603      	mov	r3, r0
 800195c:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001966:	e00a      	b.n	800197e <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196c:	f043 0208 	orr.w	r2, r3, #8
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	77fb      	strb	r3, [r7, #31]
 8001978:	e001      	b.n	800197e <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800197a:	2302      	movs	r3, #2
 800197c:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8001986:	7ffb      	ldrb	r3, [r7, #31]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3720      	adds	r7, #32
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af02      	add	r7, sp, #8
 8001996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800199c:	f7fe fe18 	bl	80005d0 <HAL_GetTick>
 80019a0:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d056      	beq.n	8001a60 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d017      	beq.n	80019f8 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0204 	bic.w	r2, r2, #4
 80019d6:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fac7 	bl	8000f70 <HAL_DMA_Abort>
 80019e2:	4603      	mov	r3, r0
 80019e4:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f0:	f043 0204 	orr.w	r2, r3, #4
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0202 	orr.w	r2, r2, #2
 8001a06:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	2201      	movs	r2, #1
 8001a12:	2102      	movs	r1, #2
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f836 	bl	8001a86 <QSPI_WaitFlagStateUntilTimeout>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10e      	bne.n	8001a42 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2202      	movs	r2, #2
 8001a2a:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2200      	movs	r2, #0
 8001a36:	2120      	movs	r1, #32
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 f824 	bl	8001a86 <QSPI_WaitFlagStateUntilTimeout>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10b      	bne.n	8001a60 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	695a      	ldr	r2, [r3, #20]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8001a56:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	603b      	str	r3, [r7, #0]
 8001a92:	4613      	mov	r3, r2
 8001a94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001a96:	e01a      	b.n	8001ace <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a9e:	d016      	beq.n	8001ace <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aa0:	f7fe fd96 	bl	80005d0 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d302      	bcc.n	8001ab6 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10b      	bne.n	8001ace <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2204      	movs	r2, #4
 8001aba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac2:	f043 0201 	orr.w	r2, r3, #1
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00e      	b.n	8001aec <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	bf14      	ite	ne
 8001adc:	2301      	movne	r3, #1
 8001ade:	2300      	moveq	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d1d6      	bne.n	8001a98 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d009      	beq.n	8001b1c <QSPI_Config+0x28>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001b0e:	d005      	beq.n	8001b1c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	3a01      	subs	r2, #1
 8001b1a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 80b9 	beq.w	8001c98 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d05f      	beq.n	8001bee <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	6892      	ldr	r2, [r2, #8]
 8001b36:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d031      	beq.n	8001ba4 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	431a      	orrs	r2, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	049b      	lsls	r3, r3, #18
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	431a      	orrs	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	431a      	orrs	r2, r3
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	ea42 0103 	orr.w	r1, r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001b94:	f000 812e 	beq.w	8001df4 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	6852      	ldr	r2, [r2, #4]
 8001ba0:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8001ba2:	e127      	b.n	8001df4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	431a      	orrs	r2, r3
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	049b      	lsls	r3, r3, #18
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	ea42 0103 	orr.w	r1, r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	615a      	str	r2, [r3, #20]
}
 8001bec:	e102      	b.n	8001df4 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d02e      	beq.n	8001c54 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c04:	431a      	orrs	r2, r3
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	049b      	lsls	r3, r3, #18
 8001c12:	431a      	orrs	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	431a      	orrs	r2, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	ea42 0103 	orr.w	r1, r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001c44:	f000 80d6 	beq.w	8001df4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	6852      	ldr	r2, [r2, #4]
 8001c50:	619a      	str	r2, [r3, #24]
}
 8001c52:	e0cf      	b.n	8001df4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c62:	431a      	orrs	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	049b      	lsls	r3, r3, #18
 8001c70:	431a      	orrs	r2, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	431a      	orrs	r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	ea42 0103 	orr.w	r1, r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	615a      	str	r2, [r3, #20]
}
 8001c96:	e0ad      	b.n	8001df4 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d058      	beq.n	8001d52 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	6892      	ldr	r2, [r2, #8]
 8001ca8:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d02d      	beq.n	8001d0e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	049b      	lsls	r3, r3, #18
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	ea42 0103 	orr.w	r1, r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001d00:	d078      	beq.n	8001df4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	6852      	ldr	r2, [r2, #4]
 8001d0a:	619a      	str	r2, [r3, #24]
}
 8001d0c:	e072      	b.n	8001df4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	431a      	orrs	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	431a      	orrs	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	049b      	lsls	r3, r3, #18
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	431a      	orrs	r2, r3
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	431a      	orrs	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	ea42 0103 	orr.w	r1, r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	615a      	str	r2, [r3, #20]
}
 8001d50:	e050      	b.n	8001df4 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d02a      	beq.n	8001db0 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	431a      	orrs	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	049b      	lsls	r3, r3, #18
 8001d76:	431a      	orrs	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	431a      	orrs	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	ea42 0103 	orr.w	r1, r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001da2:	d027      	beq.n	8001df4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	6852      	ldr	r2, [r2, #4]
 8001dac:	619a      	str	r2, [r3, #24]
}
 8001dae:	e021      	b.n	8001df4 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d01d      	beq.n	8001df4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	049b      	lsls	r3, r3, #18
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	431a      	orrs	r2, r3
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	ea42 0103 	orr.w	r1, r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	615a      	str	r2, [r3, #20]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b088      	sub	sp, #32
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e3d4      	b.n	80025bc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e12:	4ba1      	ldr	r3, [pc, #644]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 030c 	and.w	r3, r3, #12
 8001e1a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e1c:	4b9e      	ldr	r3, [pc, #632]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 80e4 	beq.w	8001ffc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d007      	beq.n	8001e4a <HAL_RCC_OscConfig+0x4a>
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	2b0c      	cmp	r3, #12
 8001e3e:	f040 808b 	bne.w	8001f58 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	f040 8087 	bne.w	8001f58 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e4a:	4b93      	ldr	r3, [pc, #588]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d005      	beq.n	8001e62 <HAL_RCC_OscConfig+0x62>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e3ac      	b.n	80025bc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1a      	ldr	r2, [r3, #32]
 8001e66:	4b8c      	ldr	r3, [pc, #560]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d004      	beq.n	8001e7c <HAL_RCC_OscConfig+0x7c>
 8001e72:	4b89      	ldr	r3, [pc, #548]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e7a:	e005      	b.n	8001e88 <HAL_RCC_OscConfig+0x88>
 8001e7c:	4b86      	ldr	r3, [pc, #536]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e82:	091b      	lsrs	r3, r3, #4
 8001e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d223      	bcs.n	8001ed4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 fd73 	bl	800297c <RCC_SetFlashLatencyFromMSIRange>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e38d      	b.n	80025bc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ea0:	4b7d      	ldr	r3, [pc, #500]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a7c      	ldr	r2, [pc, #496]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001ea6:	f043 0308 	orr.w	r3, r3, #8
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	4b7a      	ldr	r3, [pc, #488]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	4977      	ldr	r1, [pc, #476]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ebe:	4b76      	ldr	r3, [pc, #472]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	021b      	lsls	r3, r3, #8
 8001ecc:	4972      	ldr	r1, [pc, #456]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	604b      	str	r3, [r1, #4]
 8001ed2:	e025      	b.n	8001f20 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ed4:	4b70      	ldr	r3, [pc, #448]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a6f      	ldr	r2, [pc, #444]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001eda:	f043 0308 	orr.w	r3, r3, #8
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	4b6d      	ldr	r3, [pc, #436]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	496a      	ldr	r1, [pc, #424]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ef2:	4b69      	ldr	r3, [pc, #420]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	4965      	ldr	r1, [pc, #404]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d109      	bne.n	8001f20 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f000 fd33 	bl	800297c <RCC_SetFlashLatencyFromMSIRange>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e34d      	b.n	80025bc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f20:	f000 fc36 	bl	8002790 <HAL_RCC_GetSysClockFreq>
 8001f24:	4602      	mov	r2, r0
 8001f26:	4b5c      	ldr	r3, [pc, #368]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	f003 030f 	and.w	r3, r3, #15
 8001f30:	495a      	ldr	r1, [pc, #360]	; (800209c <HAL_RCC_OscConfig+0x29c>)
 8001f32:	5ccb      	ldrb	r3, [r1, r3]
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3c:	4a58      	ldr	r2, [pc, #352]	; (80020a0 <HAL_RCC_OscConfig+0x2a0>)
 8001f3e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f40:	4b58      	ldr	r3, [pc, #352]	; (80020a4 <HAL_RCC_OscConfig+0x2a4>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f003 f97b 	bl	8005240 <HAL_InitTick>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d052      	beq.n	8001ffa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
 8001f56:	e331      	b.n	80025bc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d032      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f60:	4b4d      	ldr	r3, [pc, #308]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a4c      	ldr	r2, [pc, #304]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f6c:	f7fe fb30 	bl	80005d0 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f74:	f7fe fb2c 	bl	80005d0 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e31a      	b.n	80025bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f86:	4b44      	ldr	r3, [pc, #272]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f92:	4b41      	ldr	r3, [pc, #260]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a40      	ldr	r2, [pc, #256]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001f98:	f043 0308 	orr.w	r3, r3, #8
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	4b3e      	ldr	r3, [pc, #248]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	493b      	ldr	r1, [pc, #236]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fb0:	4b39      	ldr	r3, [pc, #228]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	4936      	ldr	r1, [pc, #216]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	604b      	str	r3, [r1, #4]
 8001fc4:	e01a      	b.n	8001ffc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fc6:	4b34      	ldr	r3, [pc, #208]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a33      	ldr	r2, [pc, #204]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001fcc:	f023 0301 	bic.w	r3, r3, #1
 8001fd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fd2:	f7fe fafd 	bl	80005d0 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fda:	f7fe faf9 	bl	80005d0 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e2e7      	b.n	80025bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fec:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1f0      	bne.n	8001fda <HAL_RCC_OscConfig+0x1da>
 8001ff8:	e000      	b.n	8001ffc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ffa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d074      	beq.n	80020f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	2b08      	cmp	r3, #8
 800200c:	d005      	beq.n	800201a <HAL_RCC_OscConfig+0x21a>
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	2b0c      	cmp	r3, #12
 8002012:	d10e      	bne.n	8002032 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2b03      	cmp	r3, #3
 8002018:	d10b      	bne.n	8002032 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201a:	4b1f      	ldr	r3, [pc, #124]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d064      	beq.n	80020f0 <HAL_RCC_OscConfig+0x2f0>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d160      	bne.n	80020f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e2c4      	b.n	80025bc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800203a:	d106      	bne.n	800204a <HAL_RCC_OscConfig+0x24a>
 800203c:	4b16      	ldr	r3, [pc, #88]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a15      	ldr	r2, [pc, #84]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8002042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	e01d      	b.n	8002086 <HAL_RCC_OscConfig+0x286>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002052:	d10c      	bne.n	800206e <HAL_RCC_OscConfig+0x26e>
 8002054:	4b10      	ldr	r3, [pc, #64]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0f      	ldr	r2, [pc, #60]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 800205a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0c      	ldr	r2, [pc, #48]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8002066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	e00b      	b.n	8002086 <HAL_RCC_OscConfig+0x286>
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a09      	ldr	r2, [pc, #36]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8002074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a06      	ldr	r2, [pc, #24]	; (8002098 <HAL_RCC_OscConfig+0x298>)
 8002080:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002084:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d01c      	beq.n	80020c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208e:	f7fe fa9f 	bl	80005d0 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002094:	e011      	b.n	80020ba <HAL_RCC_OscConfig+0x2ba>
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
 800209c:	08006a54 	.word	0x08006a54
 80020a0:	20000010 	.word	0x20000010
 80020a4:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a8:	f7fe fa92 	bl	80005d0 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b64      	cmp	r3, #100	; 0x64
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e280      	b.n	80025bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ba:	4baf      	ldr	r3, [pc, #700]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0x2a8>
 80020c6:	e014      	b.n	80020f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7fe fa82 	bl	80005d0 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d0:	f7fe fa7e 	bl	80005d0 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	; 0x64
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e26c      	b.n	80025bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020e2:	4ba5      	ldr	r3, [pc, #660]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x2d0>
 80020ee:	e000      	b.n	80020f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d060      	beq.n	80021c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	2b04      	cmp	r3, #4
 8002102:	d005      	beq.n	8002110 <HAL_RCC_OscConfig+0x310>
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	2b0c      	cmp	r3, #12
 8002108:	d119      	bne.n	800213e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d116      	bne.n	800213e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002110:	4b99      	ldr	r3, [pc, #612]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_RCC_OscConfig+0x328>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e249      	b.n	80025bc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002128:	4b93      	ldr	r3, [pc, #588]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	061b      	lsls	r3, r3, #24
 8002136:	4990      	ldr	r1, [pc, #576]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 8002138:	4313      	orrs	r3, r2
 800213a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800213c:	e040      	b.n	80021c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d023      	beq.n	800218e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002146:	4b8c      	ldr	r3, [pc, #560]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a8b      	ldr	r2, [pc, #556]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 800214c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002152:	f7fe fa3d 	bl	80005d0 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800215a:	f7fe fa39 	bl	80005d0 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e227      	b.n	80025bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800216c:	4b82      	ldr	r3, [pc, #520]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002178:	4b7f      	ldr	r3, [pc, #508]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	061b      	lsls	r3, r3, #24
 8002186:	497c      	ldr	r1, [pc, #496]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
 800218c:	e018      	b.n	80021c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800218e:	4b7a      	ldr	r3, [pc, #488]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a79      	ldr	r2, [pc, #484]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 8002194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219a:	f7fe fa19 	bl	80005d0 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a2:	f7fe fa15 	bl	80005d0 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e203      	b.n	80025bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021b4:	4b70      	ldr	r3, [pc, #448]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f0      	bne.n	80021a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d03c      	beq.n	8002246 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d01c      	beq.n	800220e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021d4:	4b68      	ldr	r3, [pc, #416]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 80021d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021da:	4a67      	ldr	r2, [pc, #412]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e4:	f7fe f9f4 	bl	80005d0 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ec:	f7fe f9f0 	bl	80005d0 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e1de      	b.n	80025bc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021fe:	4b5e      	ldr	r3, [pc, #376]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 8002200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0ef      	beq.n	80021ec <HAL_RCC_OscConfig+0x3ec>
 800220c:	e01b      	b.n	8002246 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800220e:	4b5a      	ldr	r3, [pc, #360]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 8002210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002214:	4a58      	ldr	r2, [pc, #352]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 8002216:	f023 0301 	bic.w	r3, r3, #1
 800221a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221e:	f7fe f9d7 	bl	80005d0 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002226:	f7fe f9d3 	bl	80005d0 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e1c1      	b.n	80025bc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002238:	4b4f      	ldr	r3, [pc, #316]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 800223a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1ef      	bne.n	8002226 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 80a6 	beq.w	80023a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002254:	2300      	movs	r3, #0
 8002256:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002258:	4b47      	ldr	r3, [pc, #284]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 800225a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10d      	bne.n	8002280 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002264:	4b44      	ldr	r3, [pc, #272]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 8002266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002268:	4a43      	ldr	r2, [pc, #268]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 800226a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800226e:	6593      	str	r3, [r2, #88]	; 0x58
 8002270:	4b41      	ldr	r3, [pc, #260]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800227c:	2301      	movs	r3, #1
 800227e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002280:	4b3e      	ldr	r3, [pc, #248]	; (800237c <HAL_RCC_OscConfig+0x57c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d118      	bne.n	80022be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800228c:	4b3b      	ldr	r3, [pc, #236]	; (800237c <HAL_RCC_OscConfig+0x57c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a3a      	ldr	r2, [pc, #232]	; (800237c <HAL_RCC_OscConfig+0x57c>)
 8002292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002296:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002298:	f7fe f99a 	bl	80005d0 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a0:	f7fe f996 	bl	80005d0 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e184      	b.n	80025bc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b2:	4b32      	ldr	r3, [pc, #200]	; (800237c <HAL_RCC_OscConfig+0x57c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d108      	bne.n	80022d8 <HAL_RCC_OscConfig+0x4d8>
 80022c6:	4b2c      	ldr	r3, [pc, #176]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 80022c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022cc:	4a2a      	ldr	r2, [pc, #168]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022d6:	e024      	b.n	8002322 <HAL_RCC_OscConfig+0x522>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2b05      	cmp	r3, #5
 80022de:	d110      	bne.n	8002302 <HAL_RCC_OscConfig+0x502>
 80022e0:	4b25      	ldr	r3, [pc, #148]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 80022e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e6:	4a24      	ldr	r2, [pc, #144]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 80022e8:	f043 0304 	orr.w	r3, r3, #4
 80022ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022f0:	4b21      	ldr	r3, [pc, #132]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 80022f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f6:	4a20      	ldr	r2, [pc, #128]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002300:	e00f      	b.n	8002322 <HAL_RCC_OscConfig+0x522>
 8002302:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 8002304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002308:	4a1b      	ldr	r2, [pc, #108]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 800230a:	f023 0301 	bic.w	r3, r3, #1
 800230e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002312:	4b19      	ldr	r3, [pc, #100]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 8002314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002318:	4a17      	ldr	r2, [pc, #92]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 800231a:	f023 0304 	bic.w	r3, r3, #4
 800231e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d016      	beq.n	8002358 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232a:	f7fe f951 	bl	80005d0 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002330:	e00a      	b.n	8002348 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002332:	f7fe f94d 	bl	80005d0 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002340:	4293      	cmp	r3, r2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e139      	b.n	80025bc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_RCC_OscConfig+0x578>)
 800234a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0ed      	beq.n	8002332 <HAL_RCC_OscConfig+0x532>
 8002356:	e01a      	b.n	800238e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002358:	f7fe f93a 	bl	80005d0 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800235e:	e00f      	b.n	8002380 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002360:	f7fe f936 	bl	80005d0 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f241 3288 	movw	r2, #5000	; 0x1388
 800236e:	4293      	cmp	r3, r2
 8002370:	d906      	bls.n	8002380 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e122      	b.n	80025bc <HAL_RCC_OscConfig+0x7bc>
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000
 800237c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002380:	4b90      	ldr	r3, [pc, #576]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 8002382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1e8      	bne.n	8002360 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800238e:	7ffb      	ldrb	r3, [r7, #31]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d105      	bne.n	80023a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002394:	4b8b      	ldr	r3, [pc, #556]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 8002396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002398:	4a8a      	ldr	r2, [pc, #552]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 800239a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800239e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 8108 	beq.w	80025ba <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	f040 80d0 	bne.w	8002554 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023b4:	4b83      	ldr	r3, [pc, #524]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f003 0203 	and.w	r2, r3, #3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d130      	bne.n	800242a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	3b01      	subs	r3, #1
 80023d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d127      	bne.n	800242a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d11f      	bne.n	800242a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023f4:	2a07      	cmp	r2, #7
 80023f6:	bf14      	ite	ne
 80023f8:	2201      	movne	r2, #1
 80023fa:	2200      	moveq	r2, #0
 80023fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023fe:	4293      	cmp	r3, r2
 8002400:	d113      	bne.n	800242a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240c:	085b      	lsrs	r3, r3, #1
 800240e:	3b01      	subs	r3, #1
 8002410:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002412:	429a      	cmp	r2, r3
 8002414:	d109      	bne.n	800242a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	085b      	lsrs	r3, r3, #1
 8002422:	3b01      	subs	r3, #1
 8002424:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002426:	429a      	cmp	r2, r3
 8002428:	d06e      	beq.n	8002508 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	2b0c      	cmp	r3, #12
 800242e:	d069      	beq.n	8002504 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002430:	4b64      	ldr	r3, [pc, #400]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d105      	bne.n	8002448 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800243c:	4b61      	ldr	r3, [pc, #388]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e0b7      	b.n	80025bc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800244c:	4b5d      	ldr	r3, [pc, #372]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a5c      	ldr	r2, [pc, #368]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 8002452:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002456:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002458:	f7fe f8ba 	bl	80005d0 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002460:	f7fe f8b6 	bl	80005d0 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e0a4      	b.n	80025bc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002472:	4b54      	ldr	r3, [pc, #336]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800247e:	4b51      	ldr	r3, [pc, #324]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	4b51      	ldr	r3, [pc, #324]	; (80025c8 <HAL_RCC_OscConfig+0x7c8>)
 8002484:	4013      	ands	r3, r2
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800248e:	3a01      	subs	r2, #1
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	4311      	orrs	r1, r2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002498:	0212      	lsls	r2, r2, #8
 800249a:	4311      	orrs	r1, r2
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024a0:	0852      	lsrs	r2, r2, #1
 80024a2:	3a01      	subs	r2, #1
 80024a4:	0552      	lsls	r2, r2, #21
 80024a6:	4311      	orrs	r1, r2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024ac:	0852      	lsrs	r2, r2, #1
 80024ae:	3a01      	subs	r2, #1
 80024b0:	0652      	lsls	r2, r2, #25
 80024b2:	4311      	orrs	r1, r2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024b8:	0912      	lsrs	r2, r2, #4
 80024ba:	0452      	lsls	r2, r2, #17
 80024bc:	430a      	orrs	r2, r1
 80024be:	4941      	ldr	r1, [pc, #260]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024c4:	4b3f      	ldr	r3, [pc, #252]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a3e      	ldr	r2, [pc, #248]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 80024ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024d0:	4b3c      	ldr	r3, [pc, #240]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	4a3b      	ldr	r2, [pc, #236]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 80024d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024dc:	f7fe f878 	bl	80005d0 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e4:	f7fe f874 	bl	80005d0 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e062      	b.n	80025bc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f6:	4b33      	ldr	r3, [pc, #204]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002502:	e05a      	b.n	80025ba <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e059      	b.n	80025bc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002508:	4b2e      	ldr	r3, [pc, #184]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d152      	bne.n	80025ba <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002514:	4b2b      	ldr	r3, [pc, #172]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a2a      	ldr	r2, [pc, #168]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 800251a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800251e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002520:	4b28      	ldr	r3, [pc, #160]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4a27      	ldr	r2, [pc, #156]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 8002526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800252a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800252c:	f7fe f850 	bl	80005d0 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002534:	f7fe f84c 	bl	80005d0 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e03a      	b.n	80025bc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002546:	4b1f      	ldr	r3, [pc, #124]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x734>
 8002552:	e032      	b.n	80025ba <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2b0c      	cmp	r3, #12
 8002558:	d02d      	beq.n	80025b6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255a:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a19      	ldr	r2, [pc, #100]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 8002560:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002564:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002566:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d105      	bne.n	800257e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002572:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	4a13      	ldr	r2, [pc, #76]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 8002578:	f023 0303 	bic.w	r3, r3, #3
 800257c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	4a10      	ldr	r2, [pc, #64]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 8002584:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800258c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258e:	f7fe f81f 	bl	80005d0 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002596:	f7fe f81b 	bl	80005d0 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e009      	b.n	80025bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_RCC_OscConfig+0x7c4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f0      	bne.n	8002596 <HAL_RCC_OscConfig+0x796>
 80025b4:	e001      	b.n	80025ba <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3720      	adds	r7, #32
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	f99d808c 	.word	0xf99d808c

080025cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0c8      	b.n	8002772 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e0:	4b66      	ldr	r3, [pc, #408]	; (800277c <HAL_RCC_ClockConfig+0x1b0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d910      	bls.n	8002610 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ee:	4b63      	ldr	r3, [pc, #396]	; (800277c <HAL_RCC_ClockConfig+0x1b0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 0207 	bic.w	r2, r3, #7
 80025f6:	4961      	ldr	r1, [pc, #388]	; (800277c <HAL_RCC_ClockConfig+0x1b0>)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fe:	4b5f      	ldr	r3, [pc, #380]	; (800277c <HAL_RCC_ClockConfig+0x1b0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d001      	beq.n	8002610 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0b0      	b.n	8002772 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	d04c      	beq.n	80026b6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b03      	cmp	r3, #3
 8002622:	d107      	bne.n	8002634 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002624:	4b56      	ldr	r3, [pc, #344]	; (8002780 <HAL_RCC_ClockConfig+0x1b4>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d121      	bne.n	8002674 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e09e      	b.n	8002772 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b02      	cmp	r3, #2
 800263a:	d107      	bne.n	800264c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800263c:	4b50      	ldr	r3, [pc, #320]	; (8002780 <HAL_RCC_ClockConfig+0x1b4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d115      	bne.n	8002674 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e092      	b.n	8002772 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d107      	bne.n	8002664 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002654:	4b4a      	ldr	r3, [pc, #296]	; (8002780 <HAL_RCC_ClockConfig+0x1b4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d109      	bne.n	8002674 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e086      	b.n	8002772 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002664:	4b46      	ldr	r3, [pc, #280]	; (8002780 <HAL_RCC_ClockConfig+0x1b4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e07e      	b.n	8002772 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002674:	4b42      	ldr	r3, [pc, #264]	; (8002780 <HAL_RCC_ClockConfig+0x1b4>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f023 0203 	bic.w	r2, r3, #3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	493f      	ldr	r1, [pc, #252]	; (8002780 <HAL_RCC_ClockConfig+0x1b4>)
 8002682:	4313      	orrs	r3, r2
 8002684:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002686:	f7fd ffa3 	bl	80005d0 <HAL_GetTick>
 800268a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268c:	e00a      	b.n	80026a4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268e:	f7fd ff9f 	bl	80005d0 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	f241 3288 	movw	r2, #5000	; 0x1388
 800269c:	4293      	cmp	r3, r2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e066      	b.n	8002772 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a4:	4b36      	ldr	r3, [pc, #216]	; (8002780 <HAL_RCC_ClockConfig+0x1b4>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 020c 	and.w	r2, r3, #12
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d1eb      	bne.n	800268e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d008      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c2:	4b2f      	ldr	r3, [pc, #188]	; (8002780 <HAL_RCC_ClockConfig+0x1b4>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	492c      	ldr	r1, [pc, #176]	; (8002780 <HAL_RCC_ClockConfig+0x1b4>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026d4:	4b29      	ldr	r3, [pc, #164]	; (800277c <HAL_RCC_ClockConfig+0x1b0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d210      	bcs.n	8002704 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e2:	4b26      	ldr	r3, [pc, #152]	; (800277c <HAL_RCC_ClockConfig+0x1b0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 0207 	bic.w	r2, r3, #7
 80026ea:	4924      	ldr	r1, [pc, #144]	; (800277c <HAL_RCC_ClockConfig+0x1b0>)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b22      	ldr	r3, [pc, #136]	; (800277c <HAL_RCC_ClockConfig+0x1b0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e036      	b.n	8002772 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002710:	4b1b      	ldr	r3, [pc, #108]	; (8002780 <HAL_RCC_ClockConfig+0x1b4>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4918      	ldr	r1, [pc, #96]	; (8002780 <HAL_RCC_ClockConfig+0x1b4>)
 800271e:	4313      	orrs	r3, r2
 8002720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800272e:	4b14      	ldr	r3, [pc, #80]	; (8002780 <HAL_RCC_ClockConfig+0x1b4>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4910      	ldr	r1, [pc, #64]	; (8002780 <HAL_RCC_ClockConfig+0x1b4>)
 800273e:	4313      	orrs	r3, r2
 8002740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002742:	f000 f825 	bl	8002790 <HAL_RCC_GetSysClockFreq>
 8002746:	4602      	mov	r2, r0
 8002748:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <HAL_RCC_ClockConfig+0x1b4>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	091b      	lsrs	r3, r3, #4
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	490c      	ldr	r1, [pc, #48]	; (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 8002754:	5ccb      	ldrb	r3, [r1, r3]
 8002756:	f003 031f 	and.w	r3, r3, #31
 800275a:	fa22 f303 	lsr.w	r3, r2, r3
 800275e:	4a0a      	ldr	r2, [pc, #40]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f002 fd6a 	bl	8005240 <HAL_InitTick>
 800276c:	4603      	mov	r3, r0
 800276e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002770:	7afb      	ldrb	r3, [r7, #11]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40022000 	.word	0x40022000
 8002780:	40021000 	.word	0x40021000
 8002784:	08006a54 	.word	0x08006a54
 8002788:	20000010 	.word	0x20000010
 800278c:	20000000 	.word	0x20000000

08002790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002790:	b480      	push	{r7}
 8002792:	b089      	sub	sp, #36	; 0x24
 8002794:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
 800279a:	2300      	movs	r3, #0
 800279c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800279e:	4b3e      	ldr	r3, [pc, #248]	; (8002898 <HAL_RCC_GetSysClockFreq+0x108>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027a8:	4b3b      	ldr	r3, [pc, #236]	; (8002898 <HAL_RCC_GetSysClockFreq+0x108>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_RCC_GetSysClockFreq+0x34>
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	2b0c      	cmp	r3, #12
 80027bc:	d121      	bne.n	8002802 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d11e      	bne.n	8002802 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027c4:	4b34      	ldr	r3, [pc, #208]	; (8002898 <HAL_RCC_GetSysClockFreq+0x108>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d107      	bne.n	80027e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027d0:	4b31      	ldr	r3, [pc, #196]	; (8002898 <HAL_RCC_GetSysClockFreq+0x108>)
 80027d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027d6:	0a1b      	lsrs	r3, r3, #8
 80027d8:	f003 030f 	and.w	r3, r3, #15
 80027dc:	61fb      	str	r3, [r7, #28]
 80027de:	e005      	b.n	80027ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027e0:	4b2d      	ldr	r3, [pc, #180]	; (8002898 <HAL_RCC_GetSysClockFreq+0x108>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027ec:	4a2b      	ldr	r2, [pc, #172]	; (800289c <HAL_RCC_GetSysClockFreq+0x10c>)
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10d      	bne.n	8002818 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002800:	e00a      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	2b04      	cmp	r3, #4
 8002806:	d102      	bne.n	800280e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002808:	4b25      	ldr	r3, [pc, #148]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800280a:	61bb      	str	r3, [r7, #24]
 800280c:	e004      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	2b08      	cmp	r3, #8
 8002812:	d101      	bne.n	8002818 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002814:	4b23      	ldr	r3, [pc, #140]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002816:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	2b0c      	cmp	r3, #12
 800281c:	d134      	bne.n	8002888 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800281e:	4b1e      	ldr	r3, [pc, #120]	; (8002898 <HAL_RCC_GetSysClockFreq+0x108>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d003      	beq.n	8002836 <HAL_RCC_GetSysClockFreq+0xa6>
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2b03      	cmp	r3, #3
 8002832:	d003      	beq.n	800283c <HAL_RCC_GetSysClockFreq+0xac>
 8002834:	e005      	b.n	8002842 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002836:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002838:	617b      	str	r3, [r7, #20]
      break;
 800283a:	e005      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800283c:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800283e:	617b      	str	r3, [r7, #20]
      break;
 8002840:	e002      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	617b      	str	r3, [r7, #20]
      break;
 8002846:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002848:	4b13      	ldr	r3, [pc, #76]	; (8002898 <HAL_RCC_GetSysClockFreq+0x108>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	3301      	adds	r3, #1
 8002854:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <HAL_RCC_GetSysClockFreq+0x108>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	0a1b      	lsrs	r3, r3, #8
 800285c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	fb02 f203 	mul.w	r2, r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	fbb2 f3f3 	udiv	r3, r2, r3
 800286c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800286e:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <HAL_RCC_GetSysClockFreq+0x108>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	0e5b      	lsrs	r3, r3, #25
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	3301      	adds	r3, #1
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	fbb2 f3f3 	udiv	r3, r2, r3
 8002886:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002888:	69bb      	ldr	r3, [r7, #24]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3724      	adds	r7, #36	; 0x24
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000
 800289c:	08006a6c 	.word	0x08006a6c
 80028a0:	00f42400 	.word	0x00f42400
 80028a4:	007a1200 	.word	0x007a1200

080028a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028ac:	4b03      	ldr	r3, [pc, #12]	; (80028bc <HAL_RCC_GetHCLKFreq+0x14>)
 80028ae:	681b      	ldr	r3, [r3, #0]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	20000010 	.word	0x20000010

080028c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028c4:	f7ff fff0 	bl	80028a8 <HAL_RCC_GetHCLKFreq>
 80028c8:	4602      	mov	r2, r0
 80028ca:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	0a1b      	lsrs	r3, r3, #8
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	4904      	ldr	r1, [pc, #16]	; (80028e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028d6:	5ccb      	ldrb	r3, [r1, r3]
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40021000 	.word	0x40021000
 80028e8:	08006a64 	.word	0x08006a64

080028ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028f0:	f7ff ffda 	bl	80028a8 <HAL_RCC_GetHCLKFreq>
 80028f4:	4602      	mov	r2, r0
 80028f6:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	0adb      	lsrs	r3, r3, #11
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	4904      	ldr	r1, [pc, #16]	; (8002914 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002902:	5ccb      	ldrb	r3, [r1, r3]
 8002904:	f003 031f 	and.w	r3, r3, #31
 8002908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800290c:	4618      	mov	r0, r3
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40021000 	.word	0x40021000
 8002914:	08006a64 	.word	0x08006a64

08002918 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	220f      	movs	r2, #15
 8002926:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002928:	4b12      	ldr	r3, [pc, #72]	; (8002974 <HAL_RCC_GetClockConfig+0x5c>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 0203 	and.w	r2, r3, #3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002934:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <HAL_RCC_GetClockConfig+0x5c>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002940:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <HAL_RCC_GetClockConfig+0x5c>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800294c:	4b09      	ldr	r3, [pc, #36]	; (8002974 <HAL_RCC_GetClockConfig+0x5c>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	08db      	lsrs	r3, r3, #3
 8002952:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800295a:	4b07      	ldr	r3, [pc, #28]	; (8002978 <HAL_RCC_GetClockConfig+0x60>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0207 	and.w	r2, r3, #7
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	601a      	str	r2, [r3, #0]
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40021000 	.word	0x40021000
 8002978:	40022000 	.word	0x40022000

0800297c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002984:	2300      	movs	r3, #0
 8002986:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002988:	4b2a      	ldr	r3, [pc, #168]	; (8002a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800298a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002994:	f7fe fe22 	bl	80015dc <HAL_PWREx_GetVoltageRange>
 8002998:	6178      	str	r0, [r7, #20]
 800299a:	e014      	b.n	80029c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800299c:	4b25      	ldr	r3, [pc, #148]	; (8002a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800299e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a0:	4a24      	ldr	r2, [pc, #144]	; (8002a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a6:	6593      	str	r3, [r2, #88]	; 0x58
 80029a8:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029b4:	f7fe fe12 	bl	80015dc <HAL_PWREx_GetVoltageRange>
 80029b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029ba:	4b1e      	ldr	r3, [pc, #120]	; (8002a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029be:	4a1d      	ldr	r2, [pc, #116]	; (8002a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029cc:	d10b      	bne.n	80029e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b80      	cmp	r3, #128	; 0x80
 80029d2:	d919      	bls.n	8002a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2ba0      	cmp	r3, #160	; 0xa0
 80029d8:	d902      	bls.n	80029e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029da:	2302      	movs	r3, #2
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	e013      	b.n	8002a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029e0:	2301      	movs	r3, #1
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	e010      	b.n	8002a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b80      	cmp	r3, #128	; 0x80
 80029ea:	d902      	bls.n	80029f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80029ec:	2303      	movs	r3, #3
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	e00a      	b.n	8002a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b80      	cmp	r3, #128	; 0x80
 80029f6:	d102      	bne.n	80029fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029f8:	2302      	movs	r3, #2
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	e004      	b.n	8002a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b70      	cmp	r3, #112	; 0x70
 8002a02:	d101      	bne.n	8002a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a04:	2301      	movs	r3, #1
 8002a06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a08:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f023 0207 	bic.w	r2, r3, #7
 8002a10:	4909      	ldr	r1, [pc, #36]	; (8002a38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a18:	4b07      	ldr	r3, [pc, #28]	; (8002a38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d001      	beq.n	8002a2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40022000 	.word	0x40022000

08002a3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a44:	2300      	movs	r3, #0
 8002a46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a48:	2300      	movs	r3, #0
 8002a4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d041      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a60:	d02a      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002a62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a66:	d824      	bhi.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a6c:	d008      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a72:	d81e      	bhi.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002a78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a7c:	d010      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a7e:	e018      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a80:	4b86      	ldr	r3, [pc, #536]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4a85      	ldr	r2, [pc, #532]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a8a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a8c:	e015      	b.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3304      	adds	r3, #4
 8002a92:	2100      	movs	r1, #0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 fabb 	bl	8003010 <RCCEx_PLLSAI1_Config>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a9e:	e00c      	b.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3320      	adds	r3, #32
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fba6 	bl	80031f8 <RCCEx_PLLSAI2_Config>
 8002aac:	4603      	mov	r3, r0
 8002aae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ab0:	e003      	b.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	74fb      	strb	r3, [r7, #19]
      break;
 8002ab6:	e000      	b.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ab8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aba:	7cfb      	ldrb	r3, [r7, #19]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10b      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ac0:	4b76      	ldr	r3, [pc, #472]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ace:	4973      	ldr	r1, [pc, #460]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ad6:	e001      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad8:	7cfb      	ldrb	r3, [r7, #19]
 8002ada:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d041      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002af0:	d02a      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002af2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002af6:	d824      	bhi.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002af8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002afc:	d008      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002afe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b02:	d81e      	bhi.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00a      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b0c:	d010      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b0e:	e018      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b10:	4b62      	ldr	r3, [pc, #392]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4a61      	ldr	r2, [pc, #388]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b1a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b1c:	e015      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3304      	adds	r3, #4
 8002b22:	2100      	movs	r1, #0
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 fa73 	bl	8003010 <RCCEx_PLLSAI1_Config>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b2e:	e00c      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3320      	adds	r3, #32
 8002b34:	2100      	movs	r1, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 fb5e 	bl	80031f8 <RCCEx_PLLSAI2_Config>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b40:	e003      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	74fb      	strb	r3, [r7, #19]
      break;
 8002b46:	e000      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002b48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b4a:	7cfb      	ldrb	r3, [r7, #19]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10b      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b50:	4b52      	ldr	r3, [pc, #328]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b56:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b5e:	494f      	ldr	r1, [pc, #316]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b66:	e001      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b68:	7cfb      	ldrb	r3, [r7, #19]
 8002b6a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80a0 	beq.w	8002cba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b7e:	4b47      	ldr	r3, [pc, #284]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002b8e:	2300      	movs	r3, #0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00d      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b94:	4b41      	ldr	r3, [pc, #260]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	4a40      	ldr	r2, [pc, #256]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	6593      	str	r3, [r2, #88]	; 0x58
 8002ba0:	4b3e      	ldr	r3, [pc, #248]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bac:	2301      	movs	r3, #1
 8002bae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bb0:	4b3b      	ldr	r3, [pc, #236]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a3a      	ldr	r2, [pc, #232]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bbc:	f7fd fd08 	bl	80005d0 <HAL_GetTick>
 8002bc0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bc2:	e009      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc4:	f7fd fd04 	bl	80005d0 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d902      	bls.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	74fb      	strb	r3, [r7, #19]
        break;
 8002bd6:	e005      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bd8:	4b31      	ldr	r3, [pc, #196]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0ef      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002be4:	7cfb      	ldrb	r3, [r7, #19]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d15c      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bea:	4b2c      	ldr	r3, [pc, #176]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d01f      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d019      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c08:	4b24      	ldr	r3, [pc, #144]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c14:	4b21      	ldr	r3, [pc, #132]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1a:	4a20      	ldr	r2, [pc, #128]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c24:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2a:	4a1c      	ldr	r2, [pc, #112]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c34:	4a19      	ldr	r2, [pc, #100]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d016      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c46:	f7fd fcc3 	bl	80005d0 <HAL_GetTick>
 8002c4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c4c:	e00b      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c4e:	f7fd fcbf 	bl	80005d0 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d902      	bls.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	74fb      	strb	r3, [r7, #19]
            break;
 8002c64:	e006      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c66:	4b0d      	ldr	r3, [pc, #52]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0ec      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10c      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c7a:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c8a:	4904      	ldr	r1, [pc, #16]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c92:	e009      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c94:	7cfb      	ldrb	r3, [r7, #19]
 8002c96:	74bb      	strb	r3, [r7, #18]
 8002c98:	e006      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca4:	7cfb      	ldrb	r3, [r7, #19]
 8002ca6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ca8:	7c7b      	ldrb	r3, [r7, #17]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d105      	bne.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cae:	4b9e      	ldr	r3, [pc, #632]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb2:	4a9d      	ldr	r2, [pc, #628]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cc6:	4b98      	ldr	r3, [pc, #608]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ccc:	f023 0203 	bic.w	r2, r3, #3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	4994      	ldr	r1, [pc, #592]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ce8:	4b8f      	ldr	r3, [pc, #572]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cee:	f023 020c 	bic.w	r2, r3, #12
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf6:	498c      	ldr	r1, [pc, #560]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d0a:	4b87      	ldr	r3, [pc, #540]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	4983      	ldr	r1, [pc, #524]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00a      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d2c:	4b7e      	ldr	r3, [pc, #504]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	497b      	ldr	r1, [pc, #492]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d4e:	4b76      	ldr	r3, [pc, #472]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5c:	4972      	ldr	r1, [pc, #456]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00a      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d70:	4b6d      	ldr	r3, [pc, #436]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7e:	496a      	ldr	r1, [pc, #424]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d92:	4b65      	ldr	r3, [pc, #404]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da0:	4961      	ldr	r1, [pc, #388]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00a      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002db4:	4b5c      	ldr	r3, [pc, #368]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc2:	4959      	ldr	r1, [pc, #356]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00a      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dd6:	4b54      	ldr	r3, [pc, #336]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ddc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de4:	4950      	ldr	r1, [pc, #320]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002df8:	4b4b      	ldr	r3, [pc, #300]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e06:	4948      	ldr	r1, [pc, #288]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e1a:	4b43      	ldr	r3, [pc, #268]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e28:	493f      	ldr	r1, [pc, #252]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d028      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e3c:	4b3a      	ldr	r3, [pc, #232]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e4a:	4937      	ldr	r1, [pc, #220]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e5a:	d106      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e5c:	4b32      	ldr	r3, [pc, #200]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4a31      	ldr	r2, [pc, #196]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e66:	60d3      	str	r3, [r2, #12]
 8002e68:	e011      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e72:	d10c      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3304      	adds	r3, #4
 8002e78:	2101      	movs	r1, #1
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 f8c8 	bl	8003010 <RCCEx_PLLSAI1_Config>
 8002e80:	4603      	mov	r3, r0
 8002e82:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e84:	7cfb      	ldrb	r3, [r7, #19]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002e8a:	7cfb      	ldrb	r3, [r7, #19]
 8002e8c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d028      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e9a:	4b23      	ldr	r3, [pc, #140]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea8:	491f      	ldr	r1, [pc, #124]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eb8:	d106      	bne.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eba:	4b1b      	ldr	r3, [pc, #108]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	4a1a      	ldr	r2, [pc, #104]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ec4:	60d3      	str	r3, [r2, #12]
 8002ec6:	e011      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ecc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 f899 	bl	8003010 <RCCEx_PLLSAI1_Config>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ee2:	7cfb      	ldrb	r3, [r7, #19]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002ee8:	7cfb      	ldrb	r3, [r7, #19]
 8002eea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d02b      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f06:	4908      	ldr	r1, [pc, #32]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f16:	d109      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	4a02      	ldr	r2, [pc, #8]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f22:	60d3      	str	r3, [r2, #12]
 8002f24:	e014      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f34:	d10c      	bne.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 f867 	bl	8003010 <RCCEx_PLLSAI1_Config>
 8002f42:	4603      	mov	r3, r0
 8002f44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f46:	7cfb      	ldrb	r3, [r7, #19]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002f4c:	7cfb      	ldrb	r3, [r7, #19]
 8002f4e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d02f      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f5c:	4b2b      	ldr	r3, [pc, #172]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f6a:	4928      	ldr	r1, [pc, #160]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f7a:	d10d      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	2102      	movs	r1, #2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 f844 	bl	8003010 <RCCEx_PLLSAI1_Config>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f8c:	7cfb      	ldrb	r3, [r7, #19]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d014      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f92:	7cfb      	ldrb	r3, [r7, #19]
 8002f94:	74bb      	strb	r3, [r7, #18]
 8002f96:	e011      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3320      	adds	r3, #32
 8002fa6:	2102      	movs	r1, #2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 f925 	bl	80031f8 <RCCEx_PLLSAI2_Config>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fb2:	7cfb      	ldrb	r3, [r7, #19]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002fb8:	7cfb      	ldrb	r3, [r7, #19]
 8002fba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00a      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002fc8:	4b10      	ldr	r3, [pc, #64]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fd6:	490d      	ldr	r1, [pc, #52]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00b      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fea:	4b08      	ldr	r3, [pc, #32]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ffa:	4904      	ldr	r1, [pc, #16]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003002:	7cbb      	ldrb	r3, [r7, #18]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40021000 	.word	0x40021000

08003010 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800301e:	4b75      	ldr	r3, [pc, #468]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d018      	beq.n	800305c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800302a:	4b72      	ldr	r3, [pc, #456]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f003 0203 	and.w	r2, r3, #3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d10d      	bne.n	8003056 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
       ||
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003042:	4b6c      	ldr	r3, [pc, #432]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	091b      	lsrs	r3, r3, #4
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
       ||
 8003052:	429a      	cmp	r2, r3
 8003054:	d047      	beq.n	80030e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	73fb      	strb	r3, [r7, #15]
 800305a:	e044      	b.n	80030e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b03      	cmp	r3, #3
 8003062:	d018      	beq.n	8003096 <RCCEx_PLLSAI1_Config+0x86>
 8003064:	2b03      	cmp	r3, #3
 8003066:	d825      	bhi.n	80030b4 <RCCEx_PLLSAI1_Config+0xa4>
 8003068:	2b01      	cmp	r3, #1
 800306a:	d002      	beq.n	8003072 <RCCEx_PLLSAI1_Config+0x62>
 800306c:	2b02      	cmp	r3, #2
 800306e:	d009      	beq.n	8003084 <RCCEx_PLLSAI1_Config+0x74>
 8003070:	e020      	b.n	80030b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003072:	4b60      	ldr	r3, [pc, #384]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d11d      	bne.n	80030ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003082:	e01a      	b.n	80030ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003084:	4b5b      	ldr	r3, [pc, #364]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308c:	2b00      	cmp	r3, #0
 800308e:	d116      	bne.n	80030be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003094:	e013      	b.n	80030be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003096:	4b57      	ldr	r3, [pc, #348]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10f      	bne.n	80030c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030a2:	4b54      	ldr	r3, [pc, #336]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d109      	bne.n	80030c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030b2:	e006      	b.n	80030c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	73fb      	strb	r3, [r7, #15]
      break;
 80030b8:	e004      	b.n	80030c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030ba:	bf00      	nop
 80030bc:	e002      	b.n	80030c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030be:	bf00      	nop
 80030c0:	e000      	b.n	80030c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10d      	bne.n	80030e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030ca:	4b4a      	ldr	r3, [pc, #296]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6819      	ldr	r1, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	3b01      	subs	r3, #1
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	430b      	orrs	r3, r1
 80030e0:	4944      	ldr	r1, [pc, #272]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d17d      	bne.n	80031e8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80030ec:	4b41      	ldr	r3, [pc, #260]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a40      	ldr	r2, [pc, #256]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030f8:	f7fd fa6a 	bl	80005d0 <HAL_GetTick>
 80030fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030fe:	e009      	b.n	8003114 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003100:	f7fd fa66 	bl	80005d0 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d902      	bls.n	8003114 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	73fb      	strb	r3, [r7, #15]
        break;
 8003112:	e005      	b.n	8003120 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003114:	4b37      	ldr	r3, [pc, #220]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1ef      	bne.n	8003100 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003120:	7bfb      	ldrb	r3, [r7, #15]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d160      	bne.n	80031e8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d111      	bne.n	8003150 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800312c:	4b31      	ldr	r3, [pc, #196]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6892      	ldr	r2, [r2, #8]
 800313c:	0211      	lsls	r1, r2, #8
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	68d2      	ldr	r2, [r2, #12]
 8003142:	0912      	lsrs	r2, r2, #4
 8003144:	0452      	lsls	r2, r2, #17
 8003146:	430a      	orrs	r2, r1
 8003148:	492a      	ldr	r1, [pc, #168]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800314a:	4313      	orrs	r3, r2
 800314c:	610b      	str	r3, [r1, #16]
 800314e:	e027      	b.n	80031a0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d112      	bne.n	800317c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003156:	4b27      	ldr	r3, [pc, #156]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800315e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6892      	ldr	r2, [r2, #8]
 8003166:	0211      	lsls	r1, r2, #8
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6912      	ldr	r2, [r2, #16]
 800316c:	0852      	lsrs	r2, r2, #1
 800316e:	3a01      	subs	r2, #1
 8003170:	0552      	lsls	r2, r2, #21
 8003172:	430a      	orrs	r2, r1
 8003174:	491f      	ldr	r1, [pc, #124]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003176:	4313      	orrs	r3, r2
 8003178:	610b      	str	r3, [r1, #16]
 800317a:	e011      	b.n	80031a0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800317c:	4b1d      	ldr	r3, [pc, #116]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003184:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6892      	ldr	r2, [r2, #8]
 800318c:	0211      	lsls	r1, r2, #8
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6952      	ldr	r2, [r2, #20]
 8003192:	0852      	lsrs	r2, r2, #1
 8003194:	3a01      	subs	r2, #1
 8003196:	0652      	lsls	r2, r2, #25
 8003198:	430a      	orrs	r2, r1
 800319a:	4916      	ldr	r1, [pc, #88]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800319c:	4313      	orrs	r3, r2
 800319e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031a0:	4b14      	ldr	r3, [pc, #80]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a13      	ldr	r2, [pc, #76]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ac:	f7fd fa10 	bl	80005d0 <HAL_GetTick>
 80031b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031b2:	e009      	b.n	80031c8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031b4:	f7fd fa0c 	bl	80005d0 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d902      	bls.n	80031c8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	73fb      	strb	r3, [r7, #15]
          break;
 80031c6:	e005      	b.n	80031d4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031c8:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0ef      	beq.n	80031b4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d106      	bne.n	80031e8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031da:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031dc:	691a      	ldr	r2, [r3, #16]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	4904      	ldr	r1, [pc, #16]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40021000 	.word	0x40021000

080031f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003206:	4b6a      	ldr	r3, [pc, #424]	; (80033b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d018      	beq.n	8003244 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003212:	4b67      	ldr	r3, [pc, #412]	; (80033b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f003 0203 	and.w	r2, r3, #3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d10d      	bne.n	800323e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
       ||
 8003226:	2b00      	cmp	r3, #0
 8003228:	d009      	beq.n	800323e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800322a:	4b61      	ldr	r3, [pc, #388]	; (80033b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	091b      	lsrs	r3, r3, #4
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
       ||
 800323a:	429a      	cmp	r2, r3
 800323c:	d047      	beq.n	80032ce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	73fb      	strb	r3, [r7, #15]
 8003242:	e044      	b.n	80032ce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b03      	cmp	r3, #3
 800324a:	d018      	beq.n	800327e <RCCEx_PLLSAI2_Config+0x86>
 800324c:	2b03      	cmp	r3, #3
 800324e:	d825      	bhi.n	800329c <RCCEx_PLLSAI2_Config+0xa4>
 8003250:	2b01      	cmp	r3, #1
 8003252:	d002      	beq.n	800325a <RCCEx_PLLSAI2_Config+0x62>
 8003254:	2b02      	cmp	r3, #2
 8003256:	d009      	beq.n	800326c <RCCEx_PLLSAI2_Config+0x74>
 8003258:	e020      	b.n	800329c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800325a:	4b55      	ldr	r3, [pc, #340]	; (80033b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d11d      	bne.n	80032a2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800326a:	e01a      	b.n	80032a2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800326c:	4b50      	ldr	r3, [pc, #320]	; (80033b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003274:	2b00      	cmp	r3, #0
 8003276:	d116      	bne.n	80032a6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800327c:	e013      	b.n	80032a6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800327e:	4b4c      	ldr	r3, [pc, #304]	; (80033b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10f      	bne.n	80032aa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800328a:	4b49      	ldr	r3, [pc, #292]	; (80033b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d109      	bne.n	80032aa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800329a:	e006      	b.n	80032aa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
      break;
 80032a0:	e004      	b.n	80032ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032a2:	bf00      	nop
 80032a4:	e002      	b.n	80032ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032a6:	bf00      	nop
 80032a8:	e000      	b.n	80032ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10d      	bne.n	80032ce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032b2:	4b3f      	ldr	r3, [pc, #252]	; (80033b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6819      	ldr	r1, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	430b      	orrs	r3, r1
 80032c8:	4939      	ldr	r1, [pc, #228]	; (80033b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d167      	bne.n	80033a4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80032d4:	4b36      	ldr	r3, [pc, #216]	; (80033b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a35      	ldr	r2, [pc, #212]	; (80033b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032e0:	f7fd f976 	bl	80005d0 <HAL_GetTick>
 80032e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032e6:	e009      	b.n	80032fc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032e8:	f7fd f972 	bl	80005d0 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d902      	bls.n	80032fc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	73fb      	strb	r3, [r7, #15]
        break;
 80032fa:	e005      	b.n	8003308 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032fc:	4b2c      	ldr	r3, [pc, #176]	; (80033b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1ef      	bne.n	80032e8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d14a      	bne.n	80033a4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d111      	bne.n	8003338 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003314:	4b26      	ldr	r3, [pc, #152]	; (80033b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800331c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6892      	ldr	r2, [r2, #8]
 8003324:	0211      	lsls	r1, r2, #8
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	68d2      	ldr	r2, [r2, #12]
 800332a:	0912      	lsrs	r2, r2, #4
 800332c:	0452      	lsls	r2, r2, #17
 800332e:	430a      	orrs	r2, r1
 8003330:	491f      	ldr	r1, [pc, #124]	; (80033b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003332:	4313      	orrs	r3, r2
 8003334:	614b      	str	r3, [r1, #20]
 8003336:	e011      	b.n	800335c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003338:	4b1d      	ldr	r3, [pc, #116]	; (80033b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003340:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6892      	ldr	r2, [r2, #8]
 8003348:	0211      	lsls	r1, r2, #8
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6912      	ldr	r2, [r2, #16]
 800334e:	0852      	lsrs	r2, r2, #1
 8003350:	3a01      	subs	r2, #1
 8003352:	0652      	lsls	r2, r2, #25
 8003354:	430a      	orrs	r2, r1
 8003356:	4916      	ldr	r1, [pc, #88]	; (80033b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003358:	4313      	orrs	r3, r2
 800335a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800335c:	4b14      	ldr	r3, [pc, #80]	; (80033b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a13      	ldr	r2, [pc, #76]	; (80033b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003366:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003368:	f7fd f932 	bl	80005d0 <HAL_GetTick>
 800336c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800336e:	e009      	b.n	8003384 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003370:	f7fd f92e 	bl	80005d0 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d902      	bls.n	8003384 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	73fb      	strb	r3, [r7, #15]
          break;
 8003382:	e005      	b.n	8003390 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003384:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0ef      	beq.n	8003370 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003390:	7bfb      	ldrb	r3, [r7, #15]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003396:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003398:	695a      	ldr	r2, [r3, #20]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	4904      	ldr	r1, [pc, #16]	; (80033b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40021000 	.word	0x40021000

080033b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e049      	b.n	800345a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f001 feb4 	bl	8005148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3304      	adds	r3, #4
 80033f0:	4619      	mov	r1, r3
 80033f2:	4610      	mov	r0, r2
 80033f4:	f000 fab4 	bl	8003960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b01      	cmp	r3, #1
 8003476:	d001      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e04f      	b.n	800351c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0201 	orr.w	r2, r2, #1
 8003492:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a23      	ldr	r2, [pc, #140]	; (8003528 <HAL_TIM_Base_Start_IT+0xc4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d01d      	beq.n	80034da <HAL_TIM_Base_Start_IT+0x76>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a6:	d018      	beq.n	80034da <HAL_TIM_Base_Start_IT+0x76>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a1f      	ldr	r2, [pc, #124]	; (800352c <HAL_TIM_Base_Start_IT+0xc8>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d013      	beq.n	80034da <HAL_TIM_Base_Start_IT+0x76>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a1e      	ldr	r2, [pc, #120]	; (8003530 <HAL_TIM_Base_Start_IT+0xcc>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00e      	beq.n	80034da <HAL_TIM_Base_Start_IT+0x76>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a1c      	ldr	r2, [pc, #112]	; (8003534 <HAL_TIM_Base_Start_IT+0xd0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d009      	beq.n	80034da <HAL_TIM_Base_Start_IT+0x76>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a1b      	ldr	r2, [pc, #108]	; (8003538 <HAL_TIM_Base_Start_IT+0xd4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d004      	beq.n	80034da <HAL_TIM_Base_Start_IT+0x76>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a19      	ldr	r2, [pc, #100]	; (800353c <HAL_TIM_Base_Start_IT+0xd8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d115      	bne.n	8003506 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	4b17      	ldr	r3, [pc, #92]	; (8003540 <HAL_TIM_Base_Start_IT+0xdc>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b06      	cmp	r3, #6
 80034ea:	d015      	beq.n	8003518 <HAL_TIM_Base_Start_IT+0xb4>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f2:	d011      	beq.n	8003518 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003504:	e008      	b.n	8003518 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 0201 	orr.w	r2, r2, #1
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	e000      	b.n	800351a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003518:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	40012c00 	.word	0x40012c00
 800352c:	40000400 	.word	0x40000400
 8003530:	40000800 	.word	0x40000800
 8003534:	40000c00 	.word	0x40000c00
 8003538:	40013400 	.word	0x40013400
 800353c:	40014000 	.word	0x40014000
 8003540:	00010007 	.word	0x00010007

08003544 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b02      	cmp	r3, #2
 8003558:	d122      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b02      	cmp	r3, #2
 8003566:	d11b      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f06f 0202 	mvn.w	r2, #2
 8003570:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f9cb 	bl	8003922 <HAL_TIM_IC_CaptureCallback>
 800358c:	e005      	b.n	800359a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f9bd 	bl	800390e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f9ce 	bl	8003936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d122      	bne.n	80035f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d11b      	bne.n	80035f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0204 	mvn.w	r2, #4
 80035c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2202      	movs	r2, #2
 80035ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f9a1 	bl	8003922 <HAL_TIM_IC_CaptureCallback>
 80035e0:	e005      	b.n	80035ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f993 	bl	800390e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f9a4 	bl	8003936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d122      	bne.n	8003648 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b08      	cmp	r3, #8
 800360e:	d11b      	bne.n	8003648 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0208 	mvn.w	r2, #8
 8003618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2204      	movs	r2, #4
 800361e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f977 	bl	8003922 <HAL_TIM_IC_CaptureCallback>
 8003634:	e005      	b.n	8003642 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f969 	bl	800390e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f97a 	bl	8003936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 0310 	and.w	r3, r3, #16
 8003652:	2b10      	cmp	r3, #16
 8003654:	d122      	bne.n	800369c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	2b10      	cmp	r3, #16
 8003662:	d11b      	bne.n	800369c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0210 	mvn.w	r2, #16
 800366c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2208      	movs	r2, #8
 8003672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f94d 	bl	8003922 <HAL_TIM_IC_CaptureCallback>
 8003688:	e005      	b.n	8003696 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f93f 	bl	800390e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f950 	bl	8003936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d10e      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d107      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f06f 0201 	mvn.w	r2, #1
 80036c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f001 fbf0 	bl	8004ea8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d2:	2b80      	cmp	r3, #128	; 0x80
 80036d4:	d10e      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e0:	2b80      	cmp	r3, #128	; 0x80
 80036e2:	d107      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 fafc 	bl	8003cec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003702:	d10e      	bne.n	8003722 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370e:	2b80      	cmp	r3, #128	; 0x80
 8003710:	d107      	bne.n	8003722 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800371a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 faef 	bl	8003d00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372c:	2b40      	cmp	r3, #64	; 0x40
 800372e:	d10e      	bne.n	800374e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373a:	2b40      	cmp	r3, #64	; 0x40
 800373c:	d107      	bne.n	800374e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f8fe 	bl	800394a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b20      	cmp	r3, #32
 800375a:	d10e      	bne.n	800377a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b20      	cmp	r3, #32
 8003768:	d107      	bne.n	800377a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f06f 0220 	mvn.w	r2, #32
 8003772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 faaf 	bl	8003cd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b084      	sub	sp, #16
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_TIM_ConfigClockSource+0x18>
 8003796:	2302      	movs	r3, #2
 8003798:	e0b5      	b.n	8003906 <HAL_TIM_ConfigClockSource+0x184>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2202      	movs	r2, #2
 80037a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037bc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037c4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037d6:	d03e      	beq.n	8003856 <HAL_TIM_ConfigClockSource+0xd4>
 80037d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037dc:	f200 8087 	bhi.w	80038ee <HAL_TIM_ConfigClockSource+0x16c>
 80037e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e4:	f000 8085 	beq.w	80038f2 <HAL_TIM_ConfigClockSource+0x170>
 80037e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ec:	d87f      	bhi.n	80038ee <HAL_TIM_ConfigClockSource+0x16c>
 80037ee:	2b70      	cmp	r3, #112	; 0x70
 80037f0:	d01a      	beq.n	8003828 <HAL_TIM_ConfigClockSource+0xa6>
 80037f2:	2b70      	cmp	r3, #112	; 0x70
 80037f4:	d87b      	bhi.n	80038ee <HAL_TIM_ConfigClockSource+0x16c>
 80037f6:	2b60      	cmp	r3, #96	; 0x60
 80037f8:	d050      	beq.n	800389c <HAL_TIM_ConfigClockSource+0x11a>
 80037fa:	2b60      	cmp	r3, #96	; 0x60
 80037fc:	d877      	bhi.n	80038ee <HAL_TIM_ConfigClockSource+0x16c>
 80037fe:	2b50      	cmp	r3, #80	; 0x50
 8003800:	d03c      	beq.n	800387c <HAL_TIM_ConfigClockSource+0xfa>
 8003802:	2b50      	cmp	r3, #80	; 0x50
 8003804:	d873      	bhi.n	80038ee <HAL_TIM_ConfigClockSource+0x16c>
 8003806:	2b40      	cmp	r3, #64	; 0x40
 8003808:	d058      	beq.n	80038bc <HAL_TIM_ConfigClockSource+0x13a>
 800380a:	2b40      	cmp	r3, #64	; 0x40
 800380c:	d86f      	bhi.n	80038ee <HAL_TIM_ConfigClockSource+0x16c>
 800380e:	2b30      	cmp	r3, #48	; 0x30
 8003810:	d064      	beq.n	80038dc <HAL_TIM_ConfigClockSource+0x15a>
 8003812:	2b30      	cmp	r3, #48	; 0x30
 8003814:	d86b      	bhi.n	80038ee <HAL_TIM_ConfigClockSource+0x16c>
 8003816:	2b20      	cmp	r3, #32
 8003818:	d060      	beq.n	80038dc <HAL_TIM_ConfigClockSource+0x15a>
 800381a:	2b20      	cmp	r3, #32
 800381c:	d867      	bhi.n	80038ee <HAL_TIM_ConfigClockSource+0x16c>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d05c      	beq.n	80038dc <HAL_TIM_ConfigClockSource+0x15a>
 8003822:	2b10      	cmp	r3, #16
 8003824:	d05a      	beq.n	80038dc <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003826:	e062      	b.n	80038ee <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	6899      	ldr	r1, [r3, #8]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f000 f9a6 	bl	8003b88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800384a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	609a      	str	r2, [r3, #8]
      break;
 8003854:	e04e      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	6899      	ldr	r1, [r3, #8]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f000 f98f 	bl	8003b88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003878:	609a      	str	r2, [r3, #8]
      break;
 800387a:	e03b      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6818      	ldr	r0, [r3, #0]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	6859      	ldr	r1, [r3, #4]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	461a      	mov	r2, r3
 800388a:	f000 f903 	bl	8003a94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2150      	movs	r1, #80	; 0x50
 8003894:	4618      	mov	r0, r3
 8003896:	f000 f95c 	bl	8003b52 <TIM_ITRx_SetConfig>
      break;
 800389a:	e02b      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	6859      	ldr	r1, [r3, #4]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	461a      	mov	r2, r3
 80038aa:	f000 f922 	bl	8003af2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2160      	movs	r1, #96	; 0x60
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 f94c 	bl	8003b52 <TIM_ITRx_SetConfig>
      break;
 80038ba:	e01b      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6818      	ldr	r0, [r3, #0]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	461a      	mov	r2, r3
 80038ca:	f000 f8e3 	bl	8003a94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2140      	movs	r1, #64	; 0x40
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 f93c 	bl	8003b52 <TIM_ITRx_SetConfig>
      break;
 80038da:	e00b      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4619      	mov	r1, r3
 80038e6:	4610      	mov	r0, r2
 80038e8:	f000 f933 	bl	8003b52 <TIM_ITRx_SetConfig>
        break;
 80038ec:	e002      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80038ee:	bf00      	nop
 80038f0:	e000      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80038f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
	...

08003960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a40      	ldr	r2, [pc, #256]	; (8003a74 <TIM_Base_SetConfig+0x114>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d013      	beq.n	80039a0 <TIM_Base_SetConfig+0x40>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397e:	d00f      	beq.n	80039a0 <TIM_Base_SetConfig+0x40>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a3d      	ldr	r2, [pc, #244]	; (8003a78 <TIM_Base_SetConfig+0x118>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00b      	beq.n	80039a0 <TIM_Base_SetConfig+0x40>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a3c      	ldr	r2, [pc, #240]	; (8003a7c <TIM_Base_SetConfig+0x11c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d007      	beq.n	80039a0 <TIM_Base_SetConfig+0x40>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a3b      	ldr	r2, [pc, #236]	; (8003a80 <TIM_Base_SetConfig+0x120>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d003      	beq.n	80039a0 <TIM_Base_SetConfig+0x40>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a3a      	ldr	r2, [pc, #232]	; (8003a84 <TIM_Base_SetConfig+0x124>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d108      	bne.n	80039b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a2f      	ldr	r2, [pc, #188]	; (8003a74 <TIM_Base_SetConfig+0x114>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d01f      	beq.n	80039fa <TIM_Base_SetConfig+0x9a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c0:	d01b      	beq.n	80039fa <TIM_Base_SetConfig+0x9a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a2c      	ldr	r2, [pc, #176]	; (8003a78 <TIM_Base_SetConfig+0x118>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d017      	beq.n	80039fa <TIM_Base_SetConfig+0x9a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a2b      	ldr	r2, [pc, #172]	; (8003a7c <TIM_Base_SetConfig+0x11c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d013      	beq.n	80039fa <TIM_Base_SetConfig+0x9a>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a2a      	ldr	r2, [pc, #168]	; (8003a80 <TIM_Base_SetConfig+0x120>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00f      	beq.n	80039fa <TIM_Base_SetConfig+0x9a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a29      	ldr	r2, [pc, #164]	; (8003a84 <TIM_Base_SetConfig+0x124>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d00b      	beq.n	80039fa <TIM_Base_SetConfig+0x9a>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a28      	ldr	r2, [pc, #160]	; (8003a88 <TIM_Base_SetConfig+0x128>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d007      	beq.n	80039fa <TIM_Base_SetConfig+0x9a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a27      	ldr	r2, [pc, #156]	; (8003a8c <TIM_Base_SetConfig+0x12c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d003      	beq.n	80039fa <TIM_Base_SetConfig+0x9a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a26      	ldr	r2, [pc, #152]	; (8003a90 <TIM_Base_SetConfig+0x130>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d108      	bne.n	8003a0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a10      	ldr	r2, [pc, #64]	; (8003a74 <TIM_Base_SetConfig+0x114>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00f      	beq.n	8003a58 <TIM_Base_SetConfig+0xf8>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a12      	ldr	r2, [pc, #72]	; (8003a84 <TIM_Base_SetConfig+0x124>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00b      	beq.n	8003a58 <TIM_Base_SetConfig+0xf8>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a11      	ldr	r2, [pc, #68]	; (8003a88 <TIM_Base_SetConfig+0x128>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d007      	beq.n	8003a58 <TIM_Base_SetConfig+0xf8>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a10      	ldr	r2, [pc, #64]	; (8003a8c <TIM_Base_SetConfig+0x12c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d003      	beq.n	8003a58 <TIM_Base_SetConfig+0xf8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a0f      	ldr	r2, [pc, #60]	; (8003a90 <TIM_Base_SetConfig+0x130>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d103      	bne.n	8003a60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	615a      	str	r2, [r3, #20]
}
 8003a66:	bf00      	nop
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40012c00 	.word	0x40012c00
 8003a78:	40000400 	.word	0x40000400
 8003a7c:	40000800 	.word	0x40000800
 8003a80:	40000c00 	.word	0x40000c00
 8003a84:	40013400 	.word	0x40013400
 8003a88:	40014000 	.word	0x40014000
 8003a8c:	40014400 	.word	0x40014400
 8003a90:	40014800 	.word	0x40014800

08003a94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	f023 0201 	bic.w	r2, r3, #1
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f023 030a 	bic.w	r3, r3, #10
 8003ad0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	621a      	str	r2, [r3, #32]
}
 8003ae6:	bf00      	nop
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b087      	sub	sp, #28
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	f023 0210 	bic.w	r2, r3, #16
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	031b      	lsls	r3, r3, #12
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	621a      	str	r2, [r3, #32]
}
 8003b46:	bf00      	nop
 8003b48:	371c      	adds	r7, #28
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b085      	sub	sp, #20
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f043 0307 	orr.w	r3, r3, #7
 8003b74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	609a      	str	r2, [r3, #8]
}
 8003b7c:	bf00      	nop
 8003b7e:	3714      	adds	r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
 8003b94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	021a      	lsls	r2, r3, #8
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	609a      	str	r2, [r3, #8]
}
 8003bbc:	bf00      	nop
 8003bbe:	371c      	adds	r7, #28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e068      	b.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a2e      	ldr	r2, [pc, #184]	; (8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d004      	beq.n	8003c14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a2d      	ldr	r2, [pc, #180]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d108      	bne.n	8003c26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a1e      	ldr	r2, [pc, #120]	; (8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d01d      	beq.n	8003c86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c52:	d018      	beq.n	8003c86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a1b      	ldr	r2, [pc, #108]	; (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d013      	beq.n	8003c86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a1a      	ldr	r2, [pc, #104]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d00e      	beq.n	8003c86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a18      	ldr	r2, [pc, #96]	; (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d009      	beq.n	8003c86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a13      	ldr	r2, [pc, #76]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d004      	beq.n	8003c86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a14      	ldr	r2, [pc, #80]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d10c      	bne.n	8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40012c00 	.word	0x40012c00
 8003cc4:	40013400 	.word	0x40013400
 8003cc8:	40000400 	.word	0x40000400
 8003ccc:	40000800 	.word	0x40000800
 8003cd0:	40000c00 	.word	0x40000c00
 8003cd4:	40014000 	.word	0x40014000

08003cd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e040      	b.n	8003da8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d106      	bne.n	8003d3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f001 fa24 	bl	8005184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2224      	movs	r2, #36	; 0x24
 8003d40:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0201 	bic.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f8c0 	bl	8003ed8 <UART_SetConfig>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d101      	bne.n	8003d62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e022      	b.n	8003da8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fb3e 	bl	80043ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 fbc5 	bl	8004530 <UART_CheckIdleState>
 8003da6:	4603      	mov	r3, r0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08a      	sub	sp, #40	; 0x28
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	603b      	str	r3, [r7, #0]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	f040 8082 	bne.w	8003ece <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <HAL_UART_Transmit+0x26>
 8003dd0:	88fb      	ldrh	r3, [r7, #6]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e07a      	b.n	8003ed0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_UART_Transmit+0x38>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e073      	b.n	8003ed0 <HAL_UART_Transmit+0x120>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2221      	movs	r2, #33	; 0x21
 8003dfc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dfe:	f7fc fbe7 	bl	80005d0 <HAL_GetTick>
 8003e02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	88fa      	ldrh	r2, [r7, #6]
 8003e08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	88fa      	ldrh	r2, [r7, #6]
 8003e10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1c:	d108      	bne.n	8003e30 <HAL_UART_Transmit+0x80>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d104      	bne.n	8003e30 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	61bb      	str	r3, [r7, #24]
 8003e2e:	e003      	b.n	8003e38 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003e40:	e02d      	b.n	8003e9e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	2180      	movs	r1, #128	; 0x80
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 fbb8 	bl	80045c2 <UART_WaitOnFlagUntilTimeout>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e039      	b.n	8003ed0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10b      	bne.n	8003e7a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	881a      	ldrh	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e6e:	b292      	uxth	r2, r2
 8003e70:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	3302      	adds	r3, #2
 8003e76:	61bb      	str	r3, [r7, #24]
 8003e78:	e008      	b.n	8003e8c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	781a      	ldrb	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	b292      	uxth	r2, r2
 8003e84:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1cb      	bne.n	8003e42 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	2140      	movs	r1, #64	; 0x40
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 fb84 	bl	80045c2 <UART_WaitOnFlagUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e005      	b.n	8003ed0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	e000      	b.n	8003ed0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003ece:	2302      	movs	r3, #2
  }
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3720      	adds	r7, #32
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ed8:	b5b0      	push	{r4, r5, r7, lr}
 8003eda:	b088      	sub	sp, #32
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	4bad      	ldr	r3, [pc, #692]	; (80041b8 <UART_SetConfig+0x2e0>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6812      	ldr	r2, [r2, #0]
 8003f0a:	69f9      	ldr	r1, [r7, #28]
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4aa2      	ldr	r2, [pc, #648]	; (80041bc <UART_SetConfig+0x2e4>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d004      	beq.n	8003f40 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	69fa      	ldr	r2, [r7, #28]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69fa      	ldr	r2, [r7, #28]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a99      	ldr	r2, [pc, #612]	; (80041c0 <UART_SetConfig+0x2e8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d121      	bne.n	8003fa2 <UART_SetConfig+0xca>
 8003f5e:	4b99      	ldr	r3, [pc, #612]	; (80041c4 <UART_SetConfig+0x2ec>)
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d817      	bhi.n	8003f9c <UART_SetConfig+0xc4>
 8003f6c:	a201      	add	r2, pc, #4	; (adr r2, 8003f74 <UART_SetConfig+0x9c>)
 8003f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f72:	bf00      	nop
 8003f74:	08003f85 	.word	0x08003f85
 8003f78:	08003f91 	.word	0x08003f91
 8003f7c:	08003f8b 	.word	0x08003f8b
 8003f80:	08003f97 	.word	0x08003f97
 8003f84:	2301      	movs	r3, #1
 8003f86:	76fb      	strb	r3, [r7, #27]
 8003f88:	e0e7      	b.n	800415a <UART_SetConfig+0x282>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	76fb      	strb	r3, [r7, #27]
 8003f8e:	e0e4      	b.n	800415a <UART_SetConfig+0x282>
 8003f90:	2304      	movs	r3, #4
 8003f92:	76fb      	strb	r3, [r7, #27]
 8003f94:	e0e1      	b.n	800415a <UART_SetConfig+0x282>
 8003f96:	2308      	movs	r3, #8
 8003f98:	76fb      	strb	r3, [r7, #27]
 8003f9a:	e0de      	b.n	800415a <UART_SetConfig+0x282>
 8003f9c:	2310      	movs	r3, #16
 8003f9e:	76fb      	strb	r3, [r7, #27]
 8003fa0:	e0db      	b.n	800415a <UART_SetConfig+0x282>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a88      	ldr	r2, [pc, #544]	; (80041c8 <UART_SetConfig+0x2f0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d132      	bne.n	8004012 <UART_SetConfig+0x13a>
 8003fac:	4b85      	ldr	r3, [pc, #532]	; (80041c4 <UART_SetConfig+0x2ec>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb2:	f003 030c 	and.w	r3, r3, #12
 8003fb6:	2b0c      	cmp	r3, #12
 8003fb8:	d828      	bhi.n	800400c <UART_SetConfig+0x134>
 8003fba:	a201      	add	r2, pc, #4	; (adr r2, 8003fc0 <UART_SetConfig+0xe8>)
 8003fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc0:	08003ff5 	.word	0x08003ff5
 8003fc4:	0800400d 	.word	0x0800400d
 8003fc8:	0800400d 	.word	0x0800400d
 8003fcc:	0800400d 	.word	0x0800400d
 8003fd0:	08004001 	.word	0x08004001
 8003fd4:	0800400d 	.word	0x0800400d
 8003fd8:	0800400d 	.word	0x0800400d
 8003fdc:	0800400d 	.word	0x0800400d
 8003fe0:	08003ffb 	.word	0x08003ffb
 8003fe4:	0800400d 	.word	0x0800400d
 8003fe8:	0800400d 	.word	0x0800400d
 8003fec:	0800400d 	.word	0x0800400d
 8003ff0:	08004007 	.word	0x08004007
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	76fb      	strb	r3, [r7, #27]
 8003ff8:	e0af      	b.n	800415a <UART_SetConfig+0x282>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	76fb      	strb	r3, [r7, #27]
 8003ffe:	e0ac      	b.n	800415a <UART_SetConfig+0x282>
 8004000:	2304      	movs	r3, #4
 8004002:	76fb      	strb	r3, [r7, #27]
 8004004:	e0a9      	b.n	800415a <UART_SetConfig+0x282>
 8004006:	2308      	movs	r3, #8
 8004008:	76fb      	strb	r3, [r7, #27]
 800400a:	e0a6      	b.n	800415a <UART_SetConfig+0x282>
 800400c:	2310      	movs	r3, #16
 800400e:	76fb      	strb	r3, [r7, #27]
 8004010:	e0a3      	b.n	800415a <UART_SetConfig+0x282>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a6d      	ldr	r2, [pc, #436]	; (80041cc <UART_SetConfig+0x2f4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d120      	bne.n	800405e <UART_SetConfig+0x186>
 800401c:	4b69      	ldr	r3, [pc, #420]	; (80041c4 <UART_SetConfig+0x2ec>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004026:	2b30      	cmp	r3, #48	; 0x30
 8004028:	d013      	beq.n	8004052 <UART_SetConfig+0x17a>
 800402a:	2b30      	cmp	r3, #48	; 0x30
 800402c:	d814      	bhi.n	8004058 <UART_SetConfig+0x180>
 800402e:	2b20      	cmp	r3, #32
 8004030:	d009      	beq.n	8004046 <UART_SetConfig+0x16e>
 8004032:	2b20      	cmp	r3, #32
 8004034:	d810      	bhi.n	8004058 <UART_SetConfig+0x180>
 8004036:	2b00      	cmp	r3, #0
 8004038:	d002      	beq.n	8004040 <UART_SetConfig+0x168>
 800403a:	2b10      	cmp	r3, #16
 800403c:	d006      	beq.n	800404c <UART_SetConfig+0x174>
 800403e:	e00b      	b.n	8004058 <UART_SetConfig+0x180>
 8004040:	2300      	movs	r3, #0
 8004042:	76fb      	strb	r3, [r7, #27]
 8004044:	e089      	b.n	800415a <UART_SetConfig+0x282>
 8004046:	2302      	movs	r3, #2
 8004048:	76fb      	strb	r3, [r7, #27]
 800404a:	e086      	b.n	800415a <UART_SetConfig+0x282>
 800404c:	2304      	movs	r3, #4
 800404e:	76fb      	strb	r3, [r7, #27]
 8004050:	e083      	b.n	800415a <UART_SetConfig+0x282>
 8004052:	2308      	movs	r3, #8
 8004054:	76fb      	strb	r3, [r7, #27]
 8004056:	e080      	b.n	800415a <UART_SetConfig+0x282>
 8004058:	2310      	movs	r3, #16
 800405a:	76fb      	strb	r3, [r7, #27]
 800405c:	e07d      	b.n	800415a <UART_SetConfig+0x282>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a5b      	ldr	r2, [pc, #364]	; (80041d0 <UART_SetConfig+0x2f8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d120      	bne.n	80040aa <UART_SetConfig+0x1d2>
 8004068:	4b56      	ldr	r3, [pc, #344]	; (80041c4 <UART_SetConfig+0x2ec>)
 800406a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004072:	2bc0      	cmp	r3, #192	; 0xc0
 8004074:	d013      	beq.n	800409e <UART_SetConfig+0x1c6>
 8004076:	2bc0      	cmp	r3, #192	; 0xc0
 8004078:	d814      	bhi.n	80040a4 <UART_SetConfig+0x1cc>
 800407a:	2b80      	cmp	r3, #128	; 0x80
 800407c:	d009      	beq.n	8004092 <UART_SetConfig+0x1ba>
 800407e:	2b80      	cmp	r3, #128	; 0x80
 8004080:	d810      	bhi.n	80040a4 <UART_SetConfig+0x1cc>
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <UART_SetConfig+0x1b4>
 8004086:	2b40      	cmp	r3, #64	; 0x40
 8004088:	d006      	beq.n	8004098 <UART_SetConfig+0x1c0>
 800408a:	e00b      	b.n	80040a4 <UART_SetConfig+0x1cc>
 800408c:	2300      	movs	r3, #0
 800408e:	76fb      	strb	r3, [r7, #27]
 8004090:	e063      	b.n	800415a <UART_SetConfig+0x282>
 8004092:	2302      	movs	r3, #2
 8004094:	76fb      	strb	r3, [r7, #27]
 8004096:	e060      	b.n	800415a <UART_SetConfig+0x282>
 8004098:	2304      	movs	r3, #4
 800409a:	76fb      	strb	r3, [r7, #27]
 800409c:	e05d      	b.n	800415a <UART_SetConfig+0x282>
 800409e:	2308      	movs	r3, #8
 80040a0:	76fb      	strb	r3, [r7, #27]
 80040a2:	e05a      	b.n	800415a <UART_SetConfig+0x282>
 80040a4:	2310      	movs	r3, #16
 80040a6:	76fb      	strb	r3, [r7, #27]
 80040a8:	e057      	b.n	800415a <UART_SetConfig+0x282>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a49      	ldr	r2, [pc, #292]	; (80041d4 <UART_SetConfig+0x2fc>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d125      	bne.n	8004100 <UART_SetConfig+0x228>
 80040b4:	4b43      	ldr	r3, [pc, #268]	; (80041c4 <UART_SetConfig+0x2ec>)
 80040b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040c2:	d017      	beq.n	80040f4 <UART_SetConfig+0x21c>
 80040c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040c8:	d817      	bhi.n	80040fa <UART_SetConfig+0x222>
 80040ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040ce:	d00b      	beq.n	80040e8 <UART_SetConfig+0x210>
 80040d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040d4:	d811      	bhi.n	80040fa <UART_SetConfig+0x222>
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <UART_SetConfig+0x20a>
 80040da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040de:	d006      	beq.n	80040ee <UART_SetConfig+0x216>
 80040e0:	e00b      	b.n	80040fa <UART_SetConfig+0x222>
 80040e2:	2300      	movs	r3, #0
 80040e4:	76fb      	strb	r3, [r7, #27]
 80040e6:	e038      	b.n	800415a <UART_SetConfig+0x282>
 80040e8:	2302      	movs	r3, #2
 80040ea:	76fb      	strb	r3, [r7, #27]
 80040ec:	e035      	b.n	800415a <UART_SetConfig+0x282>
 80040ee:	2304      	movs	r3, #4
 80040f0:	76fb      	strb	r3, [r7, #27]
 80040f2:	e032      	b.n	800415a <UART_SetConfig+0x282>
 80040f4:	2308      	movs	r3, #8
 80040f6:	76fb      	strb	r3, [r7, #27]
 80040f8:	e02f      	b.n	800415a <UART_SetConfig+0x282>
 80040fa:	2310      	movs	r3, #16
 80040fc:	76fb      	strb	r3, [r7, #27]
 80040fe:	e02c      	b.n	800415a <UART_SetConfig+0x282>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a2d      	ldr	r2, [pc, #180]	; (80041bc <UART_SetConfig+0x2e4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d125      	bne.n	8004156 <UART_SetConfig+0x27e>
 800410a:	4b2e      	ldr	r3, [pc, #184]	; (80041c4 <UART_SetConfig+0x2ec>)
 800410c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004110:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004114:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004118:	d017      	beq.n	800414a <UART_SetConfig+0x272>
 800411a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800411e:	d817      	bhi.n	8004150 <UART_SetConfig+0x278>
 8004120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004124:	d00b      	beq.n	800413e <UART_SetConfig+0x266>
 8004126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800412a:	d811      	bhi.n	8004150 <UART_SetConfig+0x278>
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <UART_SetConfig+0x260>
 8004130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004134:	d006      	beq.n	8004144 <UART_SetConfig+0x26c>
 8004136:	e00b      	b.n	8004150 <UART_SetConfig+0x278>
 8004138:	2300      	movs	r3, #0
 800413a:	76fb      	strb	r3, [r7, #27]
 800413c:	e00d      	b.n	800415a <UART_SetConfig+0x282>
 800413e:	2302      	movs	r3, #2
 8004140:	76fb      	strb	r3, [r7, #27]
 8004142:	e00a      	b.n	800415a <UART_SetConfig+0x282>
 8004144:	2304      	movs	r3, #4
 8004146:	76fb      	strb	r3, [r7, #27]
 8004148:	e007      	b.n	800415a <UART_SetConfig+0x282>
 800414a:	2308      	movs	r3, #8
 800414c:	76fb      	strb	r3, [r7, #27]
 800414e:	e004      	b.n	800415a <UART_SetConfig+0x282>
 8004150:	2310      	movs	r3, #16
 8004152:	76fb      	strb	r3, [r7, #27]
 8004154:	e001      	b.n	800415a <UART_SetConfig+0x282>
 8004156:	2310      	movs	r3, #16
 8004158:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a17      	ldr	r2, [pc, #92]	; (80041bc <UART_SetConfig+0x2e4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	f040 8087 	bne.w	8004274 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004166:	7efb      	ldrb	r3, [r7, #27]
 8004168:	2b08      	cmp	r3, #8
 800416a:	d837      	bhi.n	80041dc <UART_SetConfig+0x304>
 800416c:	a201      	add	r2, pc, #4	; (adr r2, 8004174 <UART_SetConfig+0x29c>)
 800416e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004172:	bf00      	nop
 8004174:	08004199 	.word	0x08004199
 8004178:	080041dd 	.word	0x080041dd
 800417c:	080041a1 	.word	0x080041a1
 8004180:	080041dd 	.word	0x080041dd
 8004184:	080041a7 	.word	0x080041a7
 8004188:	080041dd 	.word	0x080041dd
 800418c:	080041dd 	.word	0x080041dd
 8004190:	080041dd 	.word	0x080041dd
 8004194:	080041af 	.word	0x080041af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004198:	f7fe fb92 	bl	80028c0 <HAL_RCC_GetPCLK1Freq>
 800419c:	6178      	str	r0, [r7, #20]
        break;
 800419e:	e022      	b.n	80041e6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041a0:	4b0d      	ldr	r3, [pc, #52]	; (80041d8 <UART_SetConfig+0x300>)
 80041a2:	617b      	str	r3, [r7, #20]
        break;
 80041a4:	e01f      	b.n	80041e6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041a6:	f7fe faf3 	bl	8002790 <HAL_RCC_GetSysClockFreq>
 80041aa:	6178      	str	r0, [r7, #20]
        break;
 80041ac:	e01b      	b.n	80041e6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041b2:	617b      	str	r3, [r7, #20]
        break;
 80041b4:	e017      	b.n	80041e6 <UART_SetConfig+0x30e>
 80041b6:	bf00      	nop
 80041b8:	efff69f3 	.word	0xefff69f3
 80041bc:	40008000 	.word	0x40008000
 80041c0:	40013800 	.word	0x40013800
 80041c4:	40021000 	.word	0x40021000
 80041c8:	40004400 	.word	0x40004400
 80041cc:	40004800 	.word	0x40004800
 80041d0:	40004c00 	.word	0x40004c00
 80041d4:	40005000 	.word	0x40005000
 80041d8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	76bb      	strb	r3, [r7, #26]
        break;
 80041e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 80f1 	beq.w	80043d0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	4413      	add	r3, r2
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d305      	bcc.n	800420a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	429a      	cmp	r2, r3
 8004208:	d902      	bls.n	8004210 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	76bb      	strb	r3, [r7, #26]
 800420e:	e0df      	b.n	80043d0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	4618      	mov	r0, r3
 8004214:	f04f 0100 	mov.w	r1, #0
 8004218:	f04f 0200 	mov.w	r2, #0
 800421c:	f04f 0300 	mov.w	r3, #0
 8004220:	020b      	lsls	r3, r1, #8
 8004222:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004226:	0202      	lsls	r2, r0, #8
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	6849      	ldr	r1, [r1, #4]
 800422c:	0849      	lsrs	r1, r1, #1
 800422e:	4608      	mov	r0, r1
 8004230:	f04f 0100 	mov.w	r1, #0
 8004234:	1814      	adds	r4, r2, r0
 8004236:	eb43 0501 	adc.w	r5, r3, r1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	461a      	mov	r2, r3
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	4620      	mov	r0, r4
 8004246:	4629      	mov	r1, r5
 8004248:	f7fc f81a 	bl	8000280 <__aeabi_uldivmod>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4613      	mov	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800425a:	d308      	bcc.n	800426e <UART_SetConfig+0x396>
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004262:	d204      	bcs.n	800426e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	60da      	str	r2, [r3, #12]
 800426c:	e0b0      	b.n	80043d0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	76bb      	strb	r3, [r7, #26]
 8004272:	e0ad      	b.n	80043d0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800427c:	d15c      	bne.n	8004338 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800427e:	7efb      	ldrb	r3, [r7, #27]
 8004280:	2b08      	cmp	r3, #8
 8004282:	d828      	bhi.n	80042d6 <UART_SetConfig+0x3fe>
 8004284:	a201      	add	r2, pc, #4	; (adr r2, 800428c <UART_SetConfig+0x3b4>)
 8004286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428a:	bf00      	nop
 800428c:	080042b1 	.word	0x080042b1
 8004290:	080042b9 	.word	0x080042b9
 8004294:	080042c1 	.word	0x080042c1
 8004298:	080042d7 	.word	0x080042d7
 800429c:	080042c7 	.word	0x080042c7
 80042a0:	080042d7 	.word	0x080042d7
 80042a4:	080042d7 	.word	0x080042d7
 80042a8:	080042d7 	.word	0x080042d7
 80042ac:	080042cf 	.word	0x080042cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042b0:	f7fe fb06 	bl	80028c0 <HAL_RCC_GetPCLK1Freq>
 80042b4:	6178      	str	r0, [r7, #20]
        break;
 80042b6:	e013      	b.n	80042e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042b8:	f7fe fb18 	bl	80028ec <HAL_RCC_GetPCLK2Freq>
 80042bc:	6178      	str	r0, [r7, #20]
        break;
 80042be:	e00f      	b.n	80042e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042c0:	4b49      	ldr	r3, [pc, #292]	; (80043e8 <UART_SetConfig+0x510>)
 80042c2:	617b      	str	r3, [r7, #20]
        break;
 80042c4:	e00c      	b.n	80042e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042c6:	f7fe fa63 	bl	8002790 <HAL_RCC_GetSysClockFreq>
 80042ca:	6178      	str	r0, [r7, #20]
        break;
 80042cc:	e008      	b.n	80042e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042d2:	617b      	str	r3, [r7, #20]
        break;
 80042d4:	e004      	b.n	80042e0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	76bb      	strb	r3, [r7, #26]
        break;
 80042de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d074      	beq.n	80043d0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	005a      	lsls	r2, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	085b      	lsrs	r3, r3, #1
 80042f0:	441a      	add	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	2b0f      	cmp	r3, #15
 8004302:	d916      	bls.n	8004332 <UART_SetConfig+0x45a>
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800430a:	d212      	bcs.n	8004332 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	b29b      	uxth	r3, r3
 8004310:	f023 030f 	bic.w	r3, r3, #15
 8004314:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	085b      	lsrs	r3, r3, #1
 800431a:	b29b      	uxth	r3, r3
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	b29a      	uxth	r2, r3
 8004322:	89fb      	ldrh	r3, [r7, #14]
 8004324:	4313      	orrs	r3, r2
 8004326:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	89fa      	ldrh	r2, [r7, #14]
 800432e:	60da      	str	r2, [r3, #12]
 8004330:	e04e      	b.n	80043d0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	76bb      	strb	r3, [r7, #26]
 8004336:	e04b      	b.n	80043d0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004338:	7efb      	ldrb	r3, [r7, #27]
 800433a:	2b08      	cmp	r3, #8
 800433c:	d827      	bhi.n	800438e <UART_SetConfig+0x4b6>
 800433e:	a201      	add	r2, pc, #4	; (adr r2, 8004344 <UART_SetConfig+0x46c>)
 8004340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004344:	08004369 	.word	0x08004369
 8004348:	08004371 	.word	0x08004371
 800434c:	08004379 	.word	0x08004379
 8004350:	0800438f 	.word	0x0800438f
 8004354:	0800437f 	.word	0x0800437f
 8004358:	0800438f 	.word	0x0800438f
 800435c:	0800438f 	.word	0x0800438f
 8004360:	0800438f 	.word	0x0800438f
 8004364:	08004387 	.word	0x08004387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004368:	f7fe faaa 	bl	80028c0 <HAL_RCC_GetPCLK1Freq>
 800436c:	6178      	str	r0, [r7, #20]
        break;
 800436e:	e013      	b.n	8004398 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004370:	f7fe fabc 	bl	80028ec <HAL_RCC_GetPCLK2Freq>
 8004374:	6178      	str	r0, [r7, #20]
        break;
 8004376:	e00f      	b.n	8004398 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004378:	4b1b      	ldr	r3, [pc, #108]	; (80043e8 <UART_SetConfig+0x510>)
 800437a:	617b      	str	r3, [r7, #20]
        break;
 800437c:	e00c      	b.n	8004398 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800437e:	f7fe fa07 	bl	8002790 <HAL_RCC_GetSysClockFreq>
 8004382:	6178      	str	r0, [r7, #20]
        break;
 8004384:	e008      	b.n	8004398 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800438a:	617b      	str	r3, [r7, #20]
        break;
 800438c:	e004      	b.n	8004398 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	76bb      	strb	r3, [r7, #26]
        break;
 8004396:	bf00      	nop
    }

    if (pclk != 0U)
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d018      	beq.n	80043d0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	085a      	lsrs	r2, r3, #1
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	441a      	add	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	2b0f      	cmp	r3, #15
 80043b8:	d908      	bls.n	80043cc <UART_SetConfig+0x4f4>
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c0:	d204      	bcs.n	80043cc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	60da      	str	r2, [r3, #12]
 80043ca:	e001      	b.n	80043d0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80043dc:	7ebb      	ldrb	r3, [r7, #26]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3720      	adds	r7, #32
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bdb0      	pop	{r4, r5, r7, pc}
 80043e6:	bf00      	nop
 80043e8:	00f42400 	.word	0x00f42400

080043ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	f003 0320 	and.w	r3, r3, #32
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d01a      	beq.n	8004502 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ea:	d10a      	bne.n	8004502 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	605a      	str	r2, [r3, #4]
  }
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af02      	add	r7, sp, #8
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004540:	f7fc f846 	bl	80005d0 <HAL_GetTick>
 8004544:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b08      	cmp	r3, #8
 8004552:	d10e      	bne.n	8004572 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004554:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f82d 	bl	80045c2 <UART_WaitOnFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e023      	b.n	80045ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b04      	cmp	r3, #4
 800457e:	d10e      	bne.n	800459e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004580:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f817 	bl	80045c2 <UART_WaitOnFlagUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e00d      	b.n	80045ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2220      	movs	r2, #32
 80045a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	603b      	str	r3, [r7, #0]
 80045ce:	4613      	mov	r3, r2
 80045d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045d2:	e05e      	b.n	8004692 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045da:	d05a      	beq.n	8004692 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045dc:	f7fb fff8 	bl	80005d0 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d302      	bcc.n	80045f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d11b      	bne.n	800462a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004600:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0201 	bic.w	r2, r2, #1
 8004610:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2220      	movs	r2, #32
 8004616:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2220      	movs	r2, #32
 800461c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e043      	b.n	80046b2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d02c      	beq.n	8004692 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004646:	d124      	bne.n	8004692 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004650:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004660:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0201 	bic.w	r2, r2, #1
 8004670:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2220      	movs	r2, #32
 8004676:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2220      	movs	r2, #32
 800467c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2220      	movs	r2, #32
 8004682:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e00f      	b.n	80046b2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69da      	ldr	r2, [r3, #28]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4013      	ands	r3, r2
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	429a      	cmp	r2, r3
 80046a0:	bf0c      	ite	eq
 80046a2:	2301      	moveq	r3, #1
 80046a4:	2300      	movne	r3, #0
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d091      	beq.n	80045d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <printWelcome>:
		B5[i] =  0.33*(1 + arm_sin_f32(2*pi*i/45))*256;
	}
}


void printWelcome(){
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
	  sprintf(buffer, "       Welcome to our game! \r \n");
 80046c0:	4954      	ldr	r1, [pc, #336]	; (8004814 <printWelcome+0x158>)
 80046c2:	4855      	ldr	r0, [pc, #340]	; (8004818 <printWelcome+0x15c>)
 80046c4:	f000 fff2 	bl	80056ac <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 80046c8:	4853      	ldr	r0, [pc, #332]	; (8004818 <printWelcome+0x15c>)
 80046ca:	f7fb fd81 	bl	80001d0 <strlen>
 80046ce:	4603      	mov	r3, r0
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	f247 5330 	movw	r3, #30000	; 0x7530
 80046d6:	4950      	ldr	r1, [pc, #320]	; (8004818 <printWelcome+0x15c>)
 80046d8:	4850      	ldr	r0, [pc, #320]	; (800481c <printWelcome+0x160>)
 80046da:	f7ff fb69 	bl	8003db0 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 80046de:	484e      	ldr	r0, [pc, #312]	; (8004818 <printWelcome+0x15c>)
 80046e0:	f7fb fd76 	bl	80001d0 <strlen>
 80046e4:	4603      	mov	r3, r0
 80046e6:	461a      	mov	r2, r3
 80046e8:	2100      	movs	r1, #0
 80046ea:	484b      	ldr	r0, [pc, #300]	; (8004818 <printWelcome+0x15c>)
 80046ec:	f000 ff96 	bl	800561c <memset>

	  sprintf(buffer, "------------------------------ \r \n");
 80046f0:	494b      	ldr	r1, [pc, #300]	; (8004820 <printWelcome+0x164>)
 80046f2:	4849      	ldr	r0, [pc, #292]	; (8004818 <printWelcome+0x15c>)
 80046f4:	f000 ffda 	bl	80056ac <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 80046f8:	4847      	ldr	r0, [pc, #284]	; (8004818 <printWelcome+0x15c>)
 80046fa:	f7fb fd69 	bl	80001d0 <strlen>
 80046fe:	4603      	mov	r3, r0
 8004700:	b29a      	uxth	r2, r3
 8004702:	f247 5330 	movw	r3, #30000	; 0x7530
 8004706:	4944      	ldr	r1, [pc, #272]	; (8004818 <printWelcome+0x15c>)
 8004708:	4844      	ldr	r0, [pc, #272]	; (800481c <printWelcome+0x160>)
 800470a:	f7ff fb51 	bl	8003db0 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 800470e:	4842      	ldr	r0, [pc, #264]	; (8004818 <printWelcome+0x15c>)
 8004710:	f7fb fd5e 	bl	80001d0 <strlen>
 8004714:	4603      	mov	r3, r0
 8004716:	461a      	mov	r2, r3
 8004718:	2100      	movs	r1, #0
 800471a:	483f      	ldr	r0, [pc, #252]	; (8004818 <printWelcome+0x15c>)
 800471c:	f000 ff7e 	bl	800561c <memset>

	  sprintf(buffer, "|                             | \r \n");
 8004720:	4940      	ldr	r1, [pc, #256]	; (8004824 <printWelcome+0x168>)
 8004722:	483d      	ldr	r0, [pc, #244]	; (8004818 <printWelcome+0x15c>)
 8004724:	f000 ffc2 	bl	80056ac <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8004728:	483b      	ldr	r0, [pc, #236]	; (8004818 <printWelcome+0x15c>)
 800472a:	f7fb fd51 	bl	80001d0 <strlen>
 800472e:	4603      	mov	r3, r0
 8004730:	b29a      	uxth	r2, r3
 8004732:	f247 5330 	movw	r3, #30000	; 0x7530
 8004736:	4938      	ldr	r1, [pc, #224]	; (8004818 <printWelcome+0x15c>)
 8004738:	4838      	ldr	r0, [pc, #224]	; (800481c <printWelcome+0x160>)
 800473a:	f7ff fb39 	bl	8003db0 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 800473e:	4836      	ldr	r0, [pc, #216]	; (8004818 <printWelcome+0x15c>)
 8004740:	f7fb fd46 	bl	80001d0 <strlen>
 8004744:	4603      	mov	r3, r0
 8004746:	461a      	mov	r2, r3
 8004748:	2100      	movs	r1, #0
 800474a:	4833      	ldr	r0, [pc, #204]	; (8004818 <printWelcome+0x15c>)
 800474c:	f000 ff66 	bl	800561c <memset>

	  sprintf(buffer, "|                             | \r \n");
 8004750:	4934      	ldr	r1, [pc, #208]	; (8004824 <printWelcome+0x168>)
 8004752:	4831      	ldr	r0, [pc, #196]	; (8004818 <printWelcome+0x15c>)
 8004754:	f000 ffaa 	bl	80056ac <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8004758:	482f      	ldr	r0, [pc, #188]	; (8004818 <printWelcome+0x15c>)
 800475a:	f7fb fd39 	bl	80001d0 <strlen>
 800475e:	4603      	mov	r3, r0
 8004760:	b29a      	uxth	r2, r3
 8004762:	f247 5330 	movw	r3, #30000	; 0x7530
 8004766:	492c      	ldr	r1, [pc, #176]	; (8004818 <printWelcome+0x15c>)
 8004768:	482c      	ldr	r0, [pc, #176]	; (800481c <printWelcome+0x160>)
 800476a:	f7ff fb21 	bl	8003db0 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 800476e:	482a      	ldr	r0, [pc, #168]	; (8004818 <printWelcome+0x15c>)
 8004770:	f7fb fd2e 	bl	80001d0 <strlen>
 8004774:	4603      	mov	r3, r0
 8004776:	461a      	mov	r2, r3
 8004778:	2100      	movs	r1, #0
 800477a:	4827      	ldr	r0, [pc, #156]	; (8004818 <printWelcome+0x15c>)
 800477c:	f000 ff4e 	bl	800561c <memset>

	  sprintf(buffer, "|                             | \r \n");
 8004780:	4928      	ldr	r1, [pc, #160]	; (8004824 <printWelcome+0x168>)
 8004782:	4825      	ldr	r0, [pc, #148]	; (8004818 <printWelcome+0x15c>)
 8004784:	f000 ff92 	bl	80056ac <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8004788:	4823      	ldr	r0, [pc, #140]	; (8004818 <printWelcome+0x15c>)
 800478a:	f7fb fd21 	bl	80001d0 <strlen>
 800478e:	4603      	mov	r3, r0
 8004790:	b29a      	uxth	r2, r3
 8004792:	f247 5330 	movw	r3, #30000	; 0x7530
 8004796:	4920      	ldr	r1, [pc, #128]	; (8004818 <printWelcome+0x15c>)
 8004798:	4820      	ldr	r0, [pc, #128]	; (800481c <printWelcome+0x160>)
 800479a:	f7ff fb09 	bl	8003db0 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 800479e:	481e      	ldr	r0, [pc, #120]	; (8004818 <printWelcome+0x15c>)
 80047a0:	f7fb fd16 	bl	80001d0 <strlen>
 80047a4:	4603      	mov	r3, r0
 80047a6:	461a      	mov	r2, r3
 80047a8:	2100      	movs	r1, #0
 80047aa:	481b      	ldr	r0, [pc, #108]	; (8004818 <printWelcome+0x15c>)
 80047ac:	f000 ff36 	bl	800561c <memset>

	  sprintf(buffer, "|                             | \r \n");
 80047b0:	491c      	ldr	r1, [pc, #112]	; (8004824 <printWelcome+0x168>)
 80047b2:	4819      	ldr	r0, [pc, #100]	; (8004818 <printWelcome+0x15c>)
 80047b4:	f000 ff7a 	bl	80056ac <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 80047b8:	4817      	ldr	r0, [pc, #92]	; (8004818 <printWelcome+0x15c>)
 80047ba:	f7fb fd09 	bl	80001d0 <strlen>
 80047be:	4603      	mov	r3, r0
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	f247 5330 	movw	r3, #30000	; 0x7530
 80047c6:	4914      	ldr	r1, [pc, #80]	; (8004818 <printWelcome+0x15c>)
 80047c8:	4814      	ldr	r0, [pc, #80]	; (800481c <printWelcome+0x160>)
 80047ca:	f7ff faf1 	bl	8003db0 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 80047ce:	4812      	ldr	r0, [pc, #72]	; (8004818 <printWelcome+0x15c>)
 80047d0:	f7fb fcfe 	bl	80001d0 <strlen>
 80047d4:	4603      	mov	r3, r0
 80047d6:	461a      	mov	r2, r3
 80047d8:	2100      	movs	r1, #0
 80047da:	480f      	ldr	r0, [pc, #60]	; (8004818 <printWelcome+0x15c>)
 80047dc:	f000 ff1e 	bl	800561c <memset>

	  sprintf(buffer, "------------------------------ \r \n");
 80047e0:	490f      	ldr	r1, [pc, #60]	; (8004820 <printWelcome+0x164>)
 80047e2:	480d      	ldr	r0, [pc, #52]	; (8004818 <printWelcome+0x15c>)
 80047e4:	f000 ff62 	bl	80056ac <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 80047e8:	480b      	ldr	r0, [pc, #44]	; (8004818 <printWelcome+0x15c>)
 80047ea:	f7fb fcf1 	bl	80001d0 <strlen>
 80047ee:	4603      	mov	r3, r0
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	f247 5330 	movw	r3, #30000	; 0x7530
 80047f6:	4908      	ldr	r1, [pc, #32]	; (8004818 <printWelcome+0x15c>)
 80047f8:	4808      	ldr	r0, [pc, #32]	; (800481c <printWelcome+0x160>)
 80047fa:	f7ff fad9 	bl	8003db0 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 80047fe:	4806      	ldr	r0, [pc, #24]	; (8004818 <printWelcome+0x15c>)
 8004800:	f7fb fce6 	bl	80001d0 <strlen>
 8004804:	4603      	mov	r3, r0
 8004806:	461a      	mov	r2, r3
 8004808:	2100      	movs	r1, #0
 800480a:	4803      	ldr	r0, [pc, #12]	; (8004818 <printWelcome+0x15c>)
 800480c:	f000 ff06 	bl	800561c <memset>
}
 8004810:	bf00      	nop
 8004812:	bd80      	pop	{r7, pc}
 8004814:	080069ec 	.word	0x080069ec
 8004818:	2000ace8 	.word	0x2000ace8
 800481c:	2000ae64 	.word	0x2000ae64
 8004820:	08006a0c 	.word	0x08006a0c
 8004824:	08006a30 	.word	0x08006a30

08004828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800482e:	f7fb fea3 	bl	8000578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004832:	f000 f88f 	bl	8004954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004836:	f000 f9d3 	bl	8004be0 <MX_GPIO_Init>
  MX_TIM2_Init();
 800483a:	f000 f935 	bl	8004aa8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800483e:	f000 f981 	bl	8004b44 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8004842:	f000 f9af 	bl	8004ba4 <MX_DMA_Init>
  MX_DAC1_Init();
 8004846:	f000 f8d7 	bl	80049f8 <MX_DAC1_Init>
  MX_QUADSPI_Init();
 800484a:	f000 f907 	bl	8004a5c <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800484e:	483c      	ldr	r0, [pc, #240]	; (8004940 <main+0x118>)
 8004850:	f7fe fe08 	bl	8003464 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 8004854:	2308      	movs	r3, #8
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	f245 6322 	movw	r3, #22050	; 0x5622
 800485c:	4a39      	ldr	r2, [pc, #228]	; (8004944 <main+0x11c>)
 800485e:	2100      	movs	r1, #0
 8004860:	4839      	ldr	r0, [pc, #228]	; (8004948 <main+0x120>)
 8004862:	f7fb ffe9 	bl	8000838 <HAL_DAC_Start_DMA>
  printWelcome();
 8004866:	f7ff ff29 	bl	80046bc <printWelcome>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if( HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin)==1){
 800486a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800486e:	4837      	ldr	r0, [pc, #220]	; (800494c <main+0x124>)
 8004870:	f7fc fe46 	bl	8001500 <HAL_GPIO_ReadPin>
 8004874:	4603      	mov	r3, r0
 8004876:	2b01      	cmp	r3, #1
 8004878:	d110      	bne.n	800489c <main+0x74>
	 		  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 800487a:	2201      	movs	r2, #1
 800487c:	2120      	movs	r1, #32
 800487e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004882:	f7fc fe55 	bl	8001530 <HAL_GPIO_WritePin>
	 		  HAL_Delay(500);
 8004886:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800488a:	f7fb fead 	bl	80005e8 <HAL_Delay>
	 		 HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 800488e:	2200      	movs	r2, #0
 8004890:	2120      	movs	r1, #32
 8004892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004896:	f7fc fe4b 	bl	8001530 <HAL_GPIO_WritePin>
 800489a:	e7e6      	b.n	800486a <main+0x42>
	 	  }
	  else if( HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin)==1){
 800489c:	2101      	movs	r1, #1
 800489e:	482c      	ldr	r0, [pc, #176]	; (8004950 <main+0x128>)
 80048a0:	f7fc fe2e 	bl	8001500 <HAL_GPIO_ReadPin>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d110      	bne.n	80048cc <main+0xa4>
		  HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 80048aa:	2201      	movs	r2, #1
 80048ac:	2140      	movs	r1, #64	; 0x40
 80048ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048b2:	f7fc fe3d 	bl	8001530 <HAL_GPIO_WritePin>
		 HAL_Delay(500);
 80048b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80048ba:	f7fb fe95 	bl	80005e8 <HAL_Delay>
		 HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 80048be:	2200      	movs	r2, #0
 80048c0:	2140      	movs	r1, #64	; 0x40
 80048c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048c6:	f7fc fe33 	bl	8001530 <HAL_GPIO_WritePin>
 80048ca:	e7ce      	b.n	800486a <main+0x42>
	  }
	  else if( HAL_GPIO_ReadPin(PB3_GPIO_Port, PB3_Pin)==1){
 80048cc:	2108      	movs	r1, #8
 80048ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048d2:	f7fc fe15 	bl	8001500 <HAL_GPIO_ReadPin>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d112      	bne.n	8004902 <main+0xda>
		  HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 80048dc:	2201      	movs	r2, #1
 80048de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048e6:	f7fc fe23 	bl	8001530 <HAL_GPIO_WritePin>
		 	 		  HAL_Delay(500);
 80048ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80048ee:	f7fb fe7b 	bl	80005e8 <HAL_Delay>
		 	 		 HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 80048f2:	2200      	movs	r2, #0
 80048f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048fc:	f7fc fe18 	bl	8001530 <HAL_GPIO_WritePin>
 8004900:	e7b3      	b.n	800486a <main+0x42>
	  }
	  else if( HAL_GPIO_ReadPin(PB4_GPIO_Port, PB4_Pin)==1){
 8004902:	2110      	movs	r1, #16
 8004904:	4812      	ldr	r0, [pc, #72]	; (8004950 <main+0x128>)
 8004906:	f7fc fdfb 	bl	8001500 <HAL_GPIO_ReadPin>
 800490a:	4603      	mov	r3, r0
 800490c:	2b01      	cmp	r3, #1
 800490e:	d110      	bne.n	8004932 <main+0x10a>
		  HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 8004910:	2201      	movs	r2, #1
 8004912:	2104      	movs	r1, #4
 8004914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004918:	f7fc fe0a 	bl	8001530 <HAL_GPIO_WritePin>
		 	 		  HAL_Delay(500);
 800491c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004920:	f7fb fe62 	bl	80005e8 <HAL_Delay>
		 	 		 HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8004924:	2200      	movs	r2, #0
 8004926:	2104      	movs	r1, #4
 8004928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800492c:	f7fc fe00 	bl	8001530 <HAL_GPIO_WritePin>
 8004930:	e79b      	b.n	800486a <main+0x42>
	  }
	  else{
		  HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
 8004932:	2200      	movs	r2, #0
 8004934:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004938:	4805      	ldr	r0, [pc, #20]	; (8004950 <main+0x128>)
 800493a:	f7fc fdf9 	bl	8001530 <HAL_GPIO_WritePin>
	  if( HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin)==1){
 800493e:	e794      	b.n	800486a <main+0x42>
 8004940:	2000af04 	.word	0x2000af04
 8004944:	20000094 	.word	0x20000094
 8004948:	2000ad5c 	.word	0x2000ad5c
 800494c:	48000c00 	.word	0x48000c00
 8004950:	48000400 	.word	0x48000400

08004954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b096      	sub	sp, #88	; 0x58
 8004958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800495a:	f107 0314 	add.w	r3, r7, #20
 800495e:	2244      	movs	r2, #68	; 0x44
 8004960:	2100      	movs	r1, #0
 8004962:	4618      	mov	r0, r3
 8004964:	f000 fe5a 	bl	800561c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004968:	463b      	mov	r3, r7
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	605a      	str	r2, [r3, #4]
 8004970:	609a      	str	r2, [r3, #8]
 8004972:	60da      	str	r2, [r3, #12]
 8004974:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004976:	f44f 7000 	mov.w	r0, #512	; 0x200
 800497a:	f7fc fe3d 	bl	80015f8 <HAL_PWREx_ControlVoltageScaling>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8004984:	f000 faa2 	bl	8004ecc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004988:	2310      	movs	r3, #16
 800498a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800498c:	2301      	movs	r3, #1
 800498e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004990:	2300      	movs	r3, #0
 8004992:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004994:	2360      	movs	r3, #96	; 0x60
 8004996:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004998:	2302      	movs	r3, #2
 800499a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800499c:	2301      	movs	r3, #1
 800499e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80049a0:	2301      	movs	r3, #1
 80049a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80049a4:	2328      	movs	r3, #40	; 0x28
 80049a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80049a8:	2307      	movs	r3, #7
 80049aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80049ac:	2302      	movs	r3, #2
 80049ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80049b0:	2302      	movs	r3, #2
 80049b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80049b4:	f107 0314 	add.w	r3, r7, #20
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7fd fa21 	bl	8001e00 <HAL_RCC_OscConfig>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80049c4:	f000 fa82 	bl	8004ecc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049c8:	230f      	movs	r3, #15
 80049ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049cc:	2303      	movs	r3, #3
 80049ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80049d8:	2300      	movs	r3, #0
 80049da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80049dc:	463b      	mov	r3, r7
 80049de:	2104      	movs	r1, #4
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7fd fdf3 	bl	80025cc <HAL_RCC_ClockConfig>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80049ec:	f000 fa6e 	bl	8004ecc <Error_Handler>
  }
}
 80049f0:	bf00      	nop
 80049f2:	3758      	adds	r7, #88	; 0x58
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08a      	sub	sp, #40	; 0x28
 80049fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80049fe:	1d3b      	adds	r3, r7, #4
 8004a00:	2224      	movs	r2, #36	; 0x24
 8004a02:	2100      	movs	r1, #0
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 fe09 	bl	800561c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8004a0a:	4b12      	ldr	r3, [pc, #72]	; (8004a54 <MX_DAC1_Init+0x5c>)
 8004a0c:	4a12      	ldr	r2, [pc, #72]	; (8004a58 <MX_DAC1_Init+0x60>)
 8004a0e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004a10:	4810      	ldr	r0, [pc, #64]	; (8004a54 <MX_DAC1_Init+0x5c>)
 8004a12:	f7fb feef 	bl	80007f4 <HAL_DAC_Init>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8004a1c:	f000 fa56 	bl	8004ecc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004a20:	2300      	movs	r3, #0
 8004a22:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8004a24:	2324      	movs	r3, #36	; 0x24
 8004a26:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004a34:	1d3b      	adds	r3, r7, #4
 8004a36:	2200      	movs	r2, #0
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4806      	ldr	r0, [pc, #24]	; (8004a54 <MX_DAC1_Init+0x5c>)
 8004a3c:	f7fb ffdc 	bl	80009f8 <HAL_DAC_ConfigChannel>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8004a46:	f000 fa41 	bl	8004ecc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8004a4a:	bf00      	nop
 8004a4c:	3728      	adds	r7, #40	; 0x28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	2000ad5c 	.word	0x2000ad5c
 8004a58:	40007400 	.word	0x40007400

08004a5c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8004a60:	4b0f      	ldr	r3, [pc, #60]	; (8004aa0 <MX_QUADSPI_Init+0x44>)
 8004a62:	4a10      	ldr	r2, [pc, #64]	; (8004aa4 <MX_QUADSPI_Init+0x48>)
 8004a64:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8004a66:	4b0e      	ldr	r3, [pc, #56]	; (8004aa0 <MX_QUADSPI_Init+0x44>)
 8004a68:	22ff      	movs	r2, #255	; 0xff
 8004a6a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8004a6c:	4b0c      	ldr	r3, [pc, #48]	; (8004aa0 <MX_QUADSPI_Init+0x44>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8004a72:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <MX_QUADSPI_Init+0x44>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8004a78:	4b09      	ldr	r3, [pc, #36]	; (8004aa0 <MX_QUADSPI_Init+0x44>)
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8004a7e:	4b08      	ldr	r3, [pc, #32]	; (8004aa0 <MX_QUADSPI_Init+0x44>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8004a84:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <MX_QUADSPI_Init+0x44>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8004a8a:	4805      	ldr	r0, [pc, #20]	; (8004aa0 <MX_QUADSPI_Init+0x44>)
 8004a8c:	f7fc fe0a 	bl	80016a4 <HAL_QSPI_Init>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8004a96:	f000 fa19 	bl	8004ecc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8004a9a:	bf00      	nop
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	2000af50 	.word	0x2000af50
 8004aa4:	a0001000 	.word	0xa0001000

08004aa8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004aae:	f107 0310 	add.w	r3, r7, #16
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	605a      	str	r2, [r3, #4]
 8004ab8:	609a      	str	r2, [r3, #8]
 8004aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004abc:	1d3b      	adds	r3, r7, #4
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	605a      	str	r2, [r3, #4]
 8004ac4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004ac6:	4b1e      	ldr	r3, [pc, #120]	; (8004b40 <MX_TIM2_Init+0x98>)
 8004ac8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004acc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004ace:	4b1c      	ldr	r3, [pc, #112]	; (8004b40 <MX_TIM2_Init+0x98>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ad4:	4b1a      	ldr	r3, [pc, #104]	; (8004b40 <MX_TIM2_Init+0x98>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 8004ada:	4b19      	ldr	r3, [pc, #100]	; (8004b40 <MX_TIM2_Init+0x98>)
 8004adc:	f240 7216 	movw	r2, #1814	; 0x716
 8004ae0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ae2:	4b17      	ldr	r3, [pc, #92]	; (8004b40 <MX_TIM2_Init+0x98>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ae8:	4b15      	ldr	r3, [pc, #84]	; (8004b40 <MX_TIM2_Init+0x98>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004aee:	4814      	ldr	r0, [pc, #80]	; (8004b40 <MX_TIM2_Init+0x98>)
 8004af0:	f7fe fc60 	bl	80033b4 <HAL_TIM_Base_Init>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004afa:	f000 f9e7 	bl	8004ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004b04:	f107 0310 	add.w	r3, r7, #16
 8004b08:	4619      	mov	r1, r3
 8004b0a:	480d      	ldr	r0, [pc, #52]	; (8004b40 <MX_TIM2_Init+0x98>)
 8004b0c:	f7fe fe39 	bl	8003782 <HAL_TIM_ConfigClockSource>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004b16:	f000 f9d9 	bl	8004ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004b1a:	2320      	movs	r3, #32
 8004b1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004b22:	1d3b      	adds	r3, r7, #4
 8004b24:	4619      	mov	r1, r3
 8004b26:	4806      	ldr	r0, [pc, #24]	; (8004b40 <MX_TIM2_Init+0x98>)
 8004b28:	f7ff f84e 	bl	8003bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004b32:	f000 f9cb 	bl	8004ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004b36:	bf00      	nop
 8004b38:	3720      	adds	r7, #32
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	2000af04 	.word	0x2000af04

08004b44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004b48:	4b14      	ldr	r3, [pc, #80]	; (8004b9c <MX_USART1_UART_Init+0x58>)
 8004b4a:	4a15      	ldr	r2, [pc, #84]	; (8004ba0 <MX_USART1_UART_Init+0x5c>)
 8004b4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004b4e:	4b13      	ldr	r3, [pc, #76]	; (8004b9c <MX_USART1_UART_Init+0x58>)
 8004b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004b56:	4b11      	ldr	r3, [pc, #68]	; (8004b9c <MX_USART1_UART_Init+0x58>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004b5c:	4b0f      	ldr	r3, [pc, #60]	; (8004b9c <MX_USART1_UART_Init+0x58>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004b62:	4b0e      	ldr	r3, [pc, #56]	; (8004b9c <MX_USART1_UART_Init+0x58>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004b68:	4b0c      	ldr	r3, [pc, #48]	; (8004b9c <MX_USART1_UART_Init+0x58>)
 8004b6a:	220c      	movs	r2, #12
 8004b6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b6e:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <MX_USART1_UART_Init+0x58>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b74:	4b09      	ldr	r3, [pc, #36]	; (8004b9c <MX_USART1_UART_Init+0x58>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b7a:	4b08      	ldr	r3, [pc, #32]	; (8004b9c <MX_USART1_UART_Init+0x58>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b80:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <MX_USART1_UART_Init+0x58>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004b86:	4805      	ldr	r0, [pc, #20]	; (8004b9c <MX_USART1_UART_Init+0x58>)
 8004b88:	f7ff f8c4 	bl	8003d14 <HAL_UART_Init>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004b92:	f000 f99b 	bl	8004ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004b96:	bf00      	nop
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	2000ae64 	.word	0x2000ae64
 8004ba0:	40013800 	.word	0x40013800

08004ba4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004baa:	4b0c      	ldr	r3, [pc, #48]	; (8004bdc <MX_DMA_Init+0x38>)
 8004bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bae:	4a0b      	ldr	r2, [pc, #44]	; (8004bdc <MX_DMA_Init+0x38>)
 8004bb0:	f043 0301 	orr.w	r3, r3, #1
 8004bb4:	6493      	str	r3, [r2, #72]	; 0x48
 8004bb6:	4b09      	ldr	r3, [pc, #36]	; (8004bdc <MX_DMA_Init+0x38>)
 8004bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	607b      	str	r3, [r7, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	200d      	movs	r0, #13
 8004bc8:	f7fb fdea 	bl	80007a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004bcc:	200d      	movs	r0, #13
 8004bce:	f7fb fe03 	bl	80007d8 <HAL_NVIC_EnableIRQ>

}
 8004bd2:	bf00      	nop
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	40021000 	.word	0x40021000

08004be0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b08a      	sub	sp, #40	; 0x28
 8004be4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004be6:	f107 0314 	add.w	r3, r7, #20
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	605a      	str	r2, [r3, #4]
 8004bf0:	609a      	str	r2, [r3, #8]
 8004bf2:	60da      	str	r2, [r3, #12]
 8004bf4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004bf6:	4b63      	ldr	r3, [pc, #396]	; (8004d84 <MX_GPIO_Init+0x1a4>)
 8004bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfa:	4a62      	ldr	r2, [pc, #392]	; (8004d84 <MX_GPIO_Init+0x1a4>)
 8004bfc:	f043 0310 	orr.w	r3, r3, #16
 8004c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c02:	4b60      	ldr	r3, [pc, #384]	; (8004d84 <MX_GPIO_Init+0x1a4>)
 8004c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c06:	f003 0310 	and.w	r3, r3, #16
 8004c0a:	613b      	str	r3, [r7, #16]
 8004c0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c0e:	4b5d      	ldr	r3, [pc, #372]	; (8004d84 <MX_GPIO_Init+0x1a4>)
 8004c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c12:	4a5c      	ldr	r2, [pc, #368]	; (8004d84 <MX_GPIO_Init+0x1a4>)
 8004c14:	f043 0304 	orr.w	r3, r3, #4
 8004c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c1a:	4b5a      	ldr	r3, [pc, #360]	; (8004d84 <MX_GPIO_Init+0x1a4>)
 8004c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1e:	f003 0304 	and.w	r3, r3, #4
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c26:	4b57      	ldr	r3, [pc, #348]	; (8004d84 <MX_GPIO_Init+0x1a4>)
 8004c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2a:	4a56      	ldr	r2, [pc, #344]	; (8004d84 <MX_GPIO_Init+0x1a4>)
 8004c2c:	f043 0301 	orr.w	r3, r3, #1
 8004c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c32:	4b54      	ldr	r3, [pc, #336]	; (8004d84 <MX_GPIO_Init+0x1a4>)
 8004c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	60bb      	str	r3, [r7, #8]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c3e:	4b51      	ldr	r3, [pc, #324]	; (8004d84 <MX_GPIO_Init+0x1a4>)
 8004c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c42:	4a50      	ldr	r2, [pc, #320]	; (8004d84 <MX_GPIO_Init+0x1a4>)
 8004c44:	f043 0302 	orr.w	r3, r3, #2
 8004c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c4a:	4b4e      	ldr	r3, [pc, #312]	; (8004d84 <MX_GPIO_Init+0x1a4>)
 8004c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	607b      	str	r3, [r7, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c56:	4b4b      	ldr	r3, [pc, #300]	; (8004d84 <MX_GPIO_Init+0x1a4>)
 8004c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5a:	4a4a      	ldr	r2, [pc, #296]	; (8004d84 <MX_GPIO_Init+0x1a4>)
 8004c5c:	f043 0308 	orr.w	r3, r3, #8
 8004c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c62:	4b48      	ldr	r3, [pc, #288]	; (8004d84 <MX_GPIO_Init+0x1a4>)
 8004c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2108      	movs	r1, #8
 8004c72:	4845      	ldr	r0, [pc, #276]	; (8004d88 <MX_GPIO_Init+0x1a8>)
 8004c74:	f7fc fc5c 	bl	8001530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f248 0164 	movw	r1, #32868	; 0x8064
 8004c7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c82:	f7fc fc55 	bl	8001530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004c86:	2200      	movs	r2, #0
 8004c88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004c8c:	483f      	ldr	r0, [pc, #252]	; (8004d8c <MX_GPIO_Init+0x1ac>)
 8004c8e:	f7fc fc4f 	bl	8001530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8004c92:	2308      	movs	r3, #8
 8004c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c96:	2301      	movs	r3, #1
 8004c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8004ca2:	f107 0314 	add.w	r3, r7, #20
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4837      	ldr	r0, [pc, #220]	; (8004d88 <MX_GPIO_Init+0x1a8>)
 8004caa:	f7fc fa7f 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BluePB_Pin */
  GPIO_InitStruct.Pin = BluePB_Pin;
 8004cae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004cb4:	4b36      	ldr	r3, [pc, #216]	; (8004d90 <MX_GPIO_Init+0x1b0>)
 8004cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BluePB_GPIO_Port, &GPIO_InitStruct);
 8004cbc:	f107 0314 	add.w	r3, r7, #20
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	4834      	ldr	r0, [pc, #208]	; (8004d94 <MX_GPIO_Init+0x1b4>)
 8004cc4:	f7fc fa72 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8004cc8:	f248 0364 	movw	r3, #32868	; 0x8064
 8004ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cda:	f107 0314 	add.w	r3, r7, #20
 8004cde:	4619      	mov	r1, r3
 8004ce0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ce4:	f7fc fa62 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3_Pin */
  GPIO_InitStruct.Pin = PB3_Pin;
 8004ce8:	2308      	movs	r3, #8
 8004cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004cec:	4b28      	ldr	r3, [pc, #160]	; (8004d90 <MX_GPIO_Init+0x1b0>)
 8004cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB3_GPIO_Port, &GPIO_InitStruct);
 8004cf4:	f107 0314 	add.w	r3, r7, #20
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cfe:	f7fc fa55 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2_Pin PB1 PB4_Pin */
  GPIO_InitStruct.Pin = PB2_Pin|GPIO_PIN_1|PB4_Pin;
 8004d02:	2313      	movs	r3, #19
 8004d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d06:	4b22      	ldr	r3, [pc, #136]	; (8004d90 <MX_GPIO_Init+0x1b0>)
 8004d08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d0e:	f107 0314 	add.w	r3, r7, #20
 8004d12:	4619      	mov	r1, r3
 8004d14:	481d      	ldr	r0, [pc, #116]	; (8004d8c <MX_GPIO_Init+0x1ac>)
 8004d16:	f7fc fa49 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ROW1_Pin */
  GPIO_InitStruct.Pin = ROW1_Pin;
 8004d1a:	2304      	movs	r3, #4
 8004d1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d22:	2300      	movs	r3, #0
 8004d24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROW1_GPIO_Port, &GPIO_InitStruct);
 8004d26:	f107 0314 	add.w	r3, r7, #20
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	4817      	ldr	r0, [pc, #92]	; (8004d8c <MX_GPIO_Init+0x1ac>)
 8004d2e:	f7fc fa3d 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8004d32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d40:	2300      	movs	r3, #0
 8004d42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004d44:	f107 0314 	add.w	r3, r7, #20
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4810      	ldr	r0, [pc, #64]	; (8004d8c <MX_GPIO_Init+0x1ac>)
 8004d4c:	f7fc fa2e 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1_Pin */
  GPIO_InitStruct.Pin = PB1_Pin;
 8004d50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d56:	4b0e      	ldr	r3, [pc, #56]	; (8004d90 <MX_GPIO_Init+0x1b0>)
 8004d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB1_GPIO_Port, &GPIO_InitStruct);
 8004d5e:	f107 0314 	add.w	r3, r7, #20
 8004d62:	4619      	mov	r1, r3
 8004d64:	480c      	ldr	r0, [pc, #48]	; (8004d98 <MX_GPIO_Init+0x1b8>)
 8004d66:	f7fc fa21 	bl	80011ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	2028      	movs	r0, #40	; 0x28
 8004d70:	f7fb fd16 	bl	80007a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004d74:	2028      	movs	r0, #40	; 0x28
 8004d76:	f7fb fd2f 	bl	80007d8 <HAL_NVIC_EnableIRQ>

}
 8004d7a:	bf00      	nop
 8004d7c:	3728      	adds	r7, #40	; 0x28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40021000 	.word	0x40021000
 8004d88:	48001000 	.word	0x48001000
 8004d8c:	48000400 	.word	0x48000400
 8004d90:	10110000 	.word	0x10110000
 8004d94:	48000800 	.word	0x48000800
 8004d98:	48000c00 	.word	0x48000c00

08004d9c <HAL_DAC_ConvCpltCallbackCh1>:

/* USER CODE BEGIN 4 */
int lower = 1;
int upper = 3;

void HAL_DAC_ConvCpltCallbackCh1 (DAC_HandleTypeDef * hdac){
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af02      	add	r7, sp, #8
 8004da2:	6078      	str	r0, [r7, #4]
	if(isDelaying == 1) return;
 8004da4:	4b35      	ldr	r3, [pc, #212]	; (8004e7c <HAL_DAC_ConvCpltCallbackCh1+0xe0>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d063      	beq.n	8004e74 <HAL_DAC_ConvCpltCallbackCh1+0xd8>
	if(DAC_status == 1){
 8004dac:	4b34      	ldr	r3, [pc, #208]	; (8004e80 <HAL_DAC_ConvCpltCallbackCh1+0xe4>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d116      	bne.n	8004de2 <HAL_DAC_ConvCpltCallbackCh1+0x46>
		if(BSP_QSPI_Read((uint8_t *)play, 0x02AEAA, 22050) != QSPI_OK){
 8004db4:	f245 6222 	movw	r2, #22050	; 0x5622
 8004db8:	4932      	ldr	r1, [pc, #200]	; (8004e84 <HAL_DAC_ConvCpltCallbackCh1+0xe8>)
 8004dba:	4833      	ldr	r0, [pc, #204]	; (8004e88 <HAL_DAC_ConvCpltCallbackCh1+0xec>)
 8004dbc:	f000 f88c 	bl	8004ed8 <BSP_QSPI_Read>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <HAL_DAC_ConvCpltCallbackCh1+0x2e>
					  Error_Handler();
 8004dc6:	f000 f881 	bl	8004ecc <Error_Handler>
		}
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, empty, 22050, DAC_ALIGN_8B_R);
 8004dca:	2308      	movs	r3, #8
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	f245 6322 	movw	r3, #22050	; 0x5622
 8004dd2:	4a2e      	ldr	r2, [pc, #184]	; (8004e8c <HAL_DAC_ConvCpltCallbackCh1+0xf0>)
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	482e      	ldr	r0, [pc, #184]	; (8004e90 <HAL_DAC_ConvCpltCallbackCh1+0xf4>)
 8004dd8:	f7fb fd2e 	bl	8000838 <HAL_DAC_Start_DMA>
		DAC_status = 0;
 8004ddc:	4b28      	ldr	r3, [pc, #160]	; (8004e80 <HAL_DAC_ConvCpltCallbackCh1+0xe4>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]
	}
	int randomnumber = (rand() % (upper - lower + 1)) + lower;
 8004de2:	f000 fc23 	bl	800562c <rand>
 8004de6:	4602      	mov	r2, r0
 8004de8:	4b2a      	ldr	r3, [pc, #168]	; (8004e94 <HAL_DAC_ConvCpltCallbackCh1+0xf8>)
 8004dea:	6819      	ldr	r1, [r3, #0]
 8004dec:	4b2a      	ldr	r3, [pc, #168]	; (8004e98 <HAL_DAC_ConvCpltCallbackCh1+0xfc>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	1acb      	subs	r3, r1, r3
 8004df2:	3301      	adds	r3, #1
 8004df4:	fb92 f1f3 	sdiv	r1, r2, r3
 8004df8:	fb03 f301 	mul.w	r3, r3, r1
 8004dfc:	1ad2      	subs	r2, r2, r3
 8004dfe:	4b26      	ldr	r3, [pc, #152]	; (8004e98 <HAL_DAC_ConvCpltCallbackCh1+0xfc>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4413      	add	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]
	if(randomnumber%3 == 0){
 8004e06:	68f9      	ldr	r1, [r7, #12]
 8004e08:	4b24      	ldr	r3, [pc, #144]	; (8004e9c <HAL_DAC_ConvCpltCallbackCh1+0x100>)
 8004e0a:	fb83 3201 	smull	r3, r2, r3, r1
 8004e0e:	17cb      	asrs	r3, r1, #31
 8004e10:	1ad2      	subs	r2, r2, r3
 8004e12:	4613      	mov	r3, r2
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	4413      	add	r3, r2
 8004e18:	1aca      	subs	r2, r1, r3
 8004e1a:	2a00      	cmp	r2, #0
 8004e1c:	d12b      	bne.n	8004e76 <HAL_DAC_ConvCpltCallbackCh1+0xda>
		LED_status2 = (LED_status2 + 1) % 2;
 8004e1e:	4b20      	ldr	r3, [pc, #128]	; (8004ea0 <HAL_DAC_ConvCpltCallbackCh1+0x104>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3301      	adds	r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	bfb8      	it	lt
 8004e2c:	425b      	neglt	r3, r3
 8004e2e:	4a1c      	ldr	r2, [pc, #112]	; (8004ea0 <HAL_DAC_ConvCpltCallbackCh1+0x104>)
 8004e30:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8004e32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e36:	481b      	ldr	r0, [pc, #108]	; (8004ea4 <HAL_DAC_ConvCpltCallbackCh1+0x108>)
 8004e38:	f7fc fb92 	bl	8001560 <HAL_GPIO_TogglePin>
		if(LED_status2){
 8004e3c:	4b18      	ldr	r3, [pc, #96]	; (8004ea0 <HAL_DAC_ConvCpltCallbackCh1+0x104>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d018      	beq.n	8004e76 <HAL_DAC_ConvCpltCallbackCh1+0xda>
			DAC_status = 1;
 8004e44:	4b0e      	ldr	r3, [pc, #56]	; (8004e80 <HAL_DAC_ConvCpltCallbackCh1+0xe4>)
 8004e46:	2201      	movs	r2, #1
 8004e48:	601a      	str	r2, [r3, #0]
			if(BSP_QSPI_Read((uint8_t *)play, 0x000000, 22050) != QSPI_OK){
 8004e4a:	f245 6222 	movw	r2, #22050	; 0x5622
 8004e4e:	2100      	movs	r1, #0
 8004e50:	480d      	ldr	r0, [pc, #52]	; (8004e88 <HAL_DAC_ConvCpltCallbackCh1+0xec>)
 8004e52:	f000 f841 	bl	8004ed8 <BSP_QSPI_Read>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <HAL_DAC_ConvCpltCallbackCh1+0xc4>
								  Error_Handler();
 8004e5c:	f000 f836 	bl	8004ecc <Error_Handler>
			}
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, 22050, DAC_ALIGN_8B_R);
 8004e60:	2308      	movs	r3, #8
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	f245 6322 	movw	r3, #22050	; 0x5622
 8004e68:	4a07      	ldr	r2, [pc, #28]	; (8004e88 <HAL_DAC_ConvCpltCallbackCh1+0xec>)
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	4808      	ldr	r0, [pc, #32]	; (8004e90 <HAL_DAC_ConvCpltCallbackCh1+0xf4>)
 8004e6e:	f7fb fce3 	bl	8000838 <HAL_DAC_Start_DMA>
 8004e72:	e000      	b.n	8004e76 <HAL_DAC_ConvCpltCallbackCh1+0xda>
	if(isDelaying == 1) return;
 8004e74:	bf00      	nop
		}

	}
}
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	2000ace0 	.word	0x2000ace0
 8004e80:	2000acdc 	.word	0x2000acdc
 8004e84:	0002aeaa 	.word	0x0002aeaa
 8004e88:	20000094 	.word	0x20000094
 8004e8c:	200056b8 	.word	0x200056b8
 8004e90:	2000ad5c 	.word	0x2000ad5c
 8004e94:	2000000c 	.word	0x2000000c
 8004e98:	20000008 	.word	0x20000008
 8004e9c:	55555556 	.word	0x55555556
 8004ea0:	2000ace4 	.word	0x2000ace4
 8004ea4:	48000400 	.word	0x48000400

08004ea8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a04      	ldr	r2, [pc, #16]	; (8004ec8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d101      	bne.n	8004ebe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004eba:	f7fb fb75 	bl	80005a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004ebe:	bf00      	nop
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40014800 	.word	0x40014800

08004ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004ed0:	b672      	cpsid	i
}
 8004ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004ed4:	e7fe      	b.n	8004ed4 <Error_Handler+0x8>
	...

08004ed8 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b092      	sub	sp, #72	; 0x48
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 8004ee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction        = QUAD_INOUT_READ_CMD;
 8004eea:	23eb      	movs	r3, #235	; 0xeb
 8004eec:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = QSPI_ADDRESS_4_LINES;
 8004eee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = QSPI_ADDRESS_24_BITS;
 8004ef4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ef8:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = ReadAddr;
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 8004efe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004f02:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8004f04:	2300      	movs	r3, #0
 8004f06:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytes     = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8004f08:	23aa      	movs	r3, #170	; 0xaa
 8004f0a:	61bb      	str	r3, [r7, #24]
  sCommand.DataMode           = QSPI_DATA_4_LINES;
 8004f0c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8004f10:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles        = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8004f12:	2304      	movs	r3, #4
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData             = Size;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode            = QSPI_DDR_MODE_DISABLE;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 8004f22:	2300      	movs	r3, #0
 8004f24:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004f26:	f107 0310 	add.w	r3, r7, #16
 8004f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2e:	4619      	mov	r1, r3
 8004f30:	480b      	ldr	r0, [pc, #44]	; (8004f60 <BSP_QSPI_Read+0x88>)
 8004f32:	f7fc fc2d 	bl	8001790 <HAL_QSPI_Command>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <BSP_QSPI_Read+0x68>
  {
    return QSPI_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e00b      	b.n	8004f58 <BSP_QSPI_Read+0x80>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f44:	68f9      	ldr	r1, [r7, #12]
 8004f46:	4806      	ldr	r0, [pc, #24]	; (8004f60 <BSP_QSPI_Read+0x88>)
 8004f48:	f7fc fc80 	bl	800184c <HAL_QSPI_Receive>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e000      	b.n	8004f58 <BSP_QSPI_Read+0x80>
  }

  return QSPI_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3748      	adds	r7, #72	; 0x48
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	2000afb0 	.word	0x2000afb0

08004f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f6a:	4b0f      	ldr	r3, [pc, #60]	; (8004fa8 <HAL_MspInit+0x44>)
 8004f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f6e:	4a0e      	ldr	r2, [pc, #56]	; (8004fa8 <HAL_MspInit+0x44>)
 8004f70:	f043 0301 	orr.w	r3, r3, #1
 8004f74:	6613      	str	r3, [r2, #96]	; 0x60
 8004f76:	4b0c      	ldr	r3, [pc, #48]	; (8004fa8 <HAL_MspInit+0x44>)
 8004f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	607b      	str	r3, [r7, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f82:	4b09      	ldr	r3, [pc, #36]	; (8004fa8 <HAL_MspInit+0x44>)
 8004f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f86:	4a08      	ldr	r2, [pc, #32]	; (8004fa8 <HAL_MspInit+0x44>)
 8004f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f8c:	6593      	str	r3, [r2, #88]	; 0x58
 8004f8e:	4b06      	ldr	r3, [pc, #24]	; (8004fa8 <HAL_MspInit+0x44>)
 8004f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f96:	603b      	str	r3, [r7, #0]
 8004f98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40021000 	.word	0x40021000

08004fac <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b08a      	sub	sp, #40	; 0x28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fb4:	f107 0314 	add.w	r3, r7, #20
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	605a      	str	r2, [r3, #4]
 8004fbe:	609a      	str	r2, [r3, #8]
 8004fc0:	60da      	str	r2, [r3, #12]
 8004fc2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a2a      	ldr	r2, [pc, #168]	; (8005074 <HAL_DAC_MspInit+0xc8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d14d      	bne.n	800506a <HAL_DAC_MspInit+0xbe>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8004fce:	4b2a      	ldr	r3, [pc, #168]	; (8005078 <HAL_DAC_MspInit+0xcc>)
 8004fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd2:	4a29      	ldr	r2, [pc, #164]	; (8005078 <HAL_DAC_MspInit+0xcc>)
 8004fd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fd8:	6593      	str	r3, [r2, #88]	; 0x58
 8004fda:	4b27      	ldr	r3, [pc, #156]	; (8005078 <HAL_DAC_MspInit+0xcc>)
 8004fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fe2:	613b      	str	r3, [r7, #16]
 8004fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fe6:	4b24      	ldr	r3, [pc, #144]	; (8005078 <HAL_DAC_MspInit+0xcc>)
 8004fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fea:	4a23      	ldr	r2, [pc, #140]	; (8005078 <HAL_DAC_MspInit+0xcc>)
 8004fec:	f043 0301 	orr.w	r3, r3, #1
 8004ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ff2:	4b21      	ldr	r3, [pc, #132]	; (8005078 <HAL_DAC_MspInit+0xcc>)
 8004ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004ffe:	2310      	movs	r3, #16
 8005000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005002:	2303      	movs	r3, #3
 8005004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005006:	2300      	movs	r3, #0
 8005008:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800500a:	f107 0314 	add.w	r3, r7, #20
 800500e:	4619      	mov	r1, r3
 8005010:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005014:	f7fc f8ca 	bl	80011ac <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8005018:	4b18      	ldr	r3, [pc, #96]	; (800507c <HAL_DAC_MspInit+0xd0>)
 800501a:	4a19      	ldr	r2, [pc, #100]	; (8005080 <HAL_DAC_MspInit+0xd4>)
 800501c:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 800501e:	4b17      	ldr	r3, [pc, #92]	; (800507c <HAL_DAC_MspInit+0xd0>)
 8005020:	2206      	movs	r2, #6
 8005022:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005024:	4b15      	ldr	r3, [pc, #84]	; (800507c <HAL_DAC_MspInit+0xd0>)
 8005026:	2210      	movs	r2, #16
 8005028:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800502a:	4b14      	ldr	r3, [pc, #80]	; (800507c <HAL_DAC_MspInit+0xd0>)
 800502c:	2200      	movs	r2, #0
 800502e:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005030:	4b12      	ldr	r3, [pc, #72]	; (800507c <HAL_DAC_MspInit+0xd0>)
 8005032:	2280      	movs	r2, #128	; 0x80
 8005034:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005036:	4b11      	ldr	r3, [pc, #68]	; (800507c <HAL_DAC_MspInit+0xd0>)
 8005038:	2200      	movs	r2, #0
 800503a:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800503c:	4b0f      	ldr	r3, [pc, #60]	; (800507c <HAL_DAC_MspInit+0xd0>)
 800503e:	2200      	movs	r2, #0
 8005040:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8005042:	4b0e      	ldr	r3, [pc, #56]	; (800507c <HAL_DAC_MspInit+0xd0>)
 8005044:	2220      	movs	r2, #32
 8005046:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8005048:	4b0c      	ldr	r3, [pc, #48]	; (800507c <HAL_DAC_MspInit+0xd0>)
 800504a:	2200      	movs	r2, #0
 800504c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 800504e:	480b      	ldr	r0, [pc, #44]	; (800507c <HAL_DAC_MspInit+0xd0>)
 8005050:	f7fb fe76 	bl	8000d40 <HAL_DMA_Init>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 800505a:	f7ff ff37 	bl	8004ecc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a06      	ldr	r2, [pc, #24]	; (800507c <HAL_DAC_MspInit+0xd0>)
 8005062:	609a      	str	r2, [r3, #8]
 8005064:	4a05      	ldr	r2, [pc, #20]	; (800507c <HAL_DAC_MspInit+0xd0>)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800506a:	bf00      	nop
 800506c:	3728      	adds	r7, #40	; 0x28
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	40007400 	.word	0x40007400
 8005078:	40021000 	.word	0x40021000
 800507c:	2000adc0 	.word	0x2000adc0
 8005080:	40020030 	.word	0x40020030

08005084 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b08a      	sub	sp, #40	; 0x28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800508c:	f107 0314 	add.w	r3, r7, #20
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	605a      	str	r2, [r3, #4]
 8005096:	609a      	str	r2, [r3, #8]
 8005098:	60da      	str	r2, [r3, #12]
 800509a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a26      	ldr	r2, [pc, #152]	; (800513c <HAL_QSPI_MspInit+0xb8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d145      	bne.n	8005132 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80050a6:	4b26      	ldr	r3, [pc, #152]	; (8005140 <HAL_QSPI_MspInit+0xbc>)
 80050a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050aa:	4a25      	ldr	r2, [pc, #148]	; (8005140 <HAL_QSPI_MspInit+0xbc>)
 80050ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b0:	6513      	str	r3, [r2, #80]	; 0x50
 80050b2:	4b23      	ldr	r3, [pc, #140]	; (8005140 <HAL_QSPI_MspInit+0xbc>)
 80050b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ba:	613b      	str	r3, [r7, #16]
 80050bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050be:	4b20      	ldr	r3, [pc, #128]	; (8005140 <HAL_QSPI_MspInit+0xbc>)
 80050c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050c2:	4a1f      	ldr	r2, [pc, #124]	; (8005140 <HAL_QSPI_MspInit+0xbc>)
 80050c4:	f043 0301 	orr.w	r3, r3, #1
 80050c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050ca:	4b1d      	ldr	r3, [pc, #116]	; (8005140 <HAL_QSPI_MspInit+0xbc>)
 80050cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80050d6:	4b1a      	ldr	r3, [pc, #104]	; (8005140 <HAL_QSPI_MspInit+0xbc>)
 80050d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050da:	4a19      	ldr	r2, [pc, #100]	; (8005140 <HAL_QSPI_MspInit+0xbc>)
 80050dc:	f043 0310 	orr.w	r3, r3, #16
 80050e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050e2:	4b17      	ldr	r3, [pc, #92]	; (8005140 <HAL_QSPI_MspInit+0xbc>)
 80050e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e6:	f003 0310 	and.w	r3, r3, #16
 80050ea:	60bb      	str	r3, [r7, #8]
 80050ec:	68bb      	ldr	r3, [r7, #8]
    PE11     ------> QUADSPI_NCS
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80050ee:	2380      	movs	r3, #128	; 0x80
 80050f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050f2:	2302      	movs	r3, #2
 80050f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f6:	2300      	movs	r3, #0
 80050f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050fa:	2303      	movs	r3, #3
 80050fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80050fe:	230a      	movs	r3, #10
 8005100:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005102:	f107 0314 	add.w	r3, r7, #20
 8005106:	4619      	mov	r1, r3
 8005108:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800510c:	f7fc f84e 	bl	80011ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8005110:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
 8005114:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005116:	2302      	movs	r3, #2
 8005118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800511a:	2300      	movs	r3, #0
 800511c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800511e:	2303      	movs	r3, #3
 8005120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8005122:	230a      	movs	r3, #10
 8005124:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005126:	f107 0314 	add.w	r3, r7, #20
 800512a:	4619      	mov	r1, r3
 800512c:	4805      	ldr	r0, [pc, #20]	; (8005144 <HAL_QSPI_MspInit+0xc0>)
 800512e:	f7fc f83d 	bl	80011ac <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8005132:	bf00      	nop
 8005134:	3728      	adds	r7, #40	; 0x28
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	a0001000 	.word	0xa0001000
 8005140:	40021000 	.word	0x40021000
 8005144:	48001000 	.word	0x48001000

08005148 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005158:	d10b      	bne.n	8005172 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800515a:	4b09      	ldr	r3, [pc, #36]	; (8005180 <HAL_TIM_Base_MspInit+0x38>)
 800515c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515e:	4a08      	ldr	r2, [pc, #32]	; (8005180 <HAL_TIM_Base_MspInit+0x38>)
 8005160:	f043 0301 	orr.w	r3, r3, #1
 8005164:	6593      	str	r3, [r2, #88]	; 0x58
 8005166:	4b06      	ldr	r3, [pc, #24]	; (8005180 <HAL_TIM_Base_MspInit+0x38>)
 8005168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005172:	bf00      	nop
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	40021000 	.word	0x40021000

08005184 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b0ac      	sub	sp, #176	; 0xb0
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800518c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005190:	2200      	movs	r2, #0
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	605a      	str	r2, [r3, #4]
 8005196:	609a      	str	r2, [r3, #8]
 8005198:	60da      	str	r2, [r3, #12]
 800519a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800519c:	f107 0314 	add.w	r3, r7, #20
 80051a0:	2288      	movs	r2, #136	; 0x88
 80051a2:	2100      	movs	r1, #0
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fa39 	bl	800561c <memset>
  if(huart->Instance==USART1)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a21      	ldr	r2, [pc, #132]	; (8005234 <HAL_UART_MspInit+0xb0>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d13a      	bne.n	800522a <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80051b4:	2301      	movs	r3, #1
 80051b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80051b8:	2300      	movs	r3, #0
 80051ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051bc:	f107 0314 	add.w	r3, r7, #20
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fd fc3b 	bl	8002a3c <HAL_RCCEx_PeriphCLKConfig>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80051cc:	f7ff fe7e 	bl	8004ecc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80051d0:	4b19      	ldr	r3, [pc, #100]	; (8005238 <HAL_UART_MspInit+0xb4>)
 80051d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d4:	4a18      	ldr	r2, [pc, #96]	; (8005238 <HAL_UART_MspInit+0xb4>)
 80051d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051da:	6613      	str	r3, [r2, #96]	; 0x60
 80051dc:	4b16      	ldr	r3, [pc, #88]	; (8005238 <HAL_UART_MspInit+0xb4>)
 80051de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051e8:	4b13      	ldr	r3, [pc, #76]	; (8005238 <HAL_UART_MspInit+0xb4>)
 80051ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ec:	4a12      	ldr	r2, [pc, #72]	; (8005238 <HAL_UART_MspInit+0xb4>)
 80051ee:	f043 0302 	orr.w	r3, r3, #2
 80051f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051f4:	4b10      	ldr	r3, [pc, #64]	; (8005238 <HAL_UART_MspInit+0xb4>)
 80051f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	60fb      	str	r3, [r7, #12]
 80051fe:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005200:	23c0      	movs	r3, #192	; 0xc0
 8005202:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005206:	2302      	movs	r3, #2
 8005208:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800520c:	2300      	movs	r3, #0
 800520e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005212:	2303      	movs	r3, #3
 8005214:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005218:	2307      	movs	r3, #7
 800521a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800521e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005222:	4619      	mov	r1, r3
 8005224:	4805      	ldr	r0, [pc, #20]	; (800523c <HAL_UART_MspInit+0xb8>)
 8005226:	f7fb ffc1 	bl	80011ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800522a:	bf00      	nop
 800522c:	37b0      	adds	r7, #176	; 0xb0
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	40013800 	.word	0x40013800
 8005238:	40021000 	.word	0x40021000
 800523c:	48000400 	.word	0x48000400

08005240 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08c      	sub	sp, #48	; 0x30
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005248:	2300      	movs	r3, #0
 800524a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800524c:	2300      	movs	r3, #0
 800524e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8005250:	2200      	movs	r2, #0
 8005252:	6879      	ldr	r1, [r7, #4]
 8005254:	201a      	movs	r0, #26
 8005256:	f7fb faa3 	bl	80007a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800525a:	201a      	movs	r0, #26
 800525c:	f7fb fabc 	bl	80007d8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8005260:	4b1e      	ldr	r3, [pc, #120]	; (80052dc <HAL_InitTick+0x9c>)
 8005262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005264:	4a1d      	ldr	r2, [pc, #116]	; (80052dc <HAL_InitTick+0x9c>)
 8005266:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800526a:	6613      	str	r3, [r2, #96]	; 0x60
 800526c:	4b1b      	ldr	r3, [pc, #108]	; (80052dc <HAL_InitTick+0x9c>)
 800526e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005270:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005278:	f107 0210 	add.w	r2, r7, #16
 800527c:	f107 0314 	add.w	r3, r7, #20
 8005280:	4611      	mov	r1, r2
 8005282:	4618      	mov	r0, r3
 8005284:	f7fd fb48 	bl	8002918 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005288:	f7fd fb30 	bl	80028ec <HAL_RCC_GetPCLK2Freq>
 800528c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800528e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005290:	4a13      	ldr	r2, [pc, #76]	; (80052e0 <HAL_InitTick+0xa0>)
 8005292:	fba2 2303 	umull	r2, r3, r2, r3
 8005296:	0c9b      	lsrs	r3, r3, #18
 8005298:	3b01      	subs	r3, #1
 800529a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800529c:	4b11      	ldr	r3, [pc, #68]	; (80052e4 <HAL_InitTick+0xa4>)
 800529e:	4a12      	ldr	r2, [pc, #72]	; (80052e8 <HAL_InitTick+0xa8>)
 80052a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80052a2:	4b10      	ldr	r3, [pc, #64]	; (80052e4 <HAL_InitTick+0xa4>)
 80052a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80052a8:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80052aa:	4a0e      	ldr	r2, [pc, #56]	; (80052e4 <HAL_InitTick+0xa4>)
 80052ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ae:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80052b0:	4b0c      	ldr	r3, [pc, #48]	; (80052e4 <HAL_InitTick+0xa4>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052b6:	4b0b      	ldr	r3, [pc, #44]	; (80052e4 <HAL_InitTick+0xa4>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 80052bc:	4809      	ldr	r0, [pc, #36]	; (80052e4 <HAL_InitTick+0xa4>)
 80052be:	f7fe f879 	bl	80033b4 <HAL_TIM_Base_Init>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d104      	bne.n	80052d2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80052c8:	4806      	ldr	r0, [pc, #24]	; (80052e4 <HAL_InitTick+0xa4>)
 80052ca:	f7fe f8cb 	bl	8003464 <HAL_TIM_Base_Start_IT>
 80052ce:	4603      	mov	r3, r0
 80052d0:	e000      	b.n	80052d4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3730      	adds	r7, #48	; 0x30
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	40021000 	.word	0x40021000
 80052e0:	431bde83 	.word	0x431bde83
 80052e4:	2000aff4 	.word	0x2000aff4
 80052e8:	40014800 	.word	0x40014800

080052ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80052f0:	e7fe      	b.n	80052f0 <NMI_Handler+0x4>

080052f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052f2:	b480      	push	{r7}
 80052f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052f6:	e7fe      	b.n	80052f6 <HardFault_Handler+0x4>

080052f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052fc:	e7fe      	b.n	80052fc <MemManage_Handler+0x4>

080052fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052fe:	b480      	push	{r7}
 8005300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005302:	e7fe      	b.n	8005302 <BusFault_Handler+0x4>

08005304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005308:	e7fe      	b.n	8005308 <UsageFault_Handler+0x4>

0800530a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800530a:	b480      	push	{r7}
 800530c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800530e:	bf00      	nop
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800531c:	bf00      	nop
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005326:	b480      	push	{r7}
 8005328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800532a:	bf00      	nop
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005334:	b480      	push	{r7}
 8005336:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005338:	bf00      	nop
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
	...

08005344 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8005348:	4802      	ldr	r0, [pc, #8]	; (8005354 <DMA1_Channel3_IRQHandler+0x10>)
 800534a:	f7fb fe4f 	bl	8000fec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800534e:	bf00      	nop
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	2000adc0 	.word	0x2000adc0

08005358 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800535c:	4802      	ldr	r0, [pc, #8]	; (8005368 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800535e:	f7fe f8f1 	bl	8003544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8005362:	bf00      	nop
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	2000aff4 	.word	0x2000aff4

0800536c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005370:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005374:	f7fc f90e 	bl	8001594 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8005378:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800537c:	f7fc f90a 	bl	8001594 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005380:	bf00      	nop
 8005382:	bd80      	pop	{r7, pc}

08005384 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
	return 1;
 8005388:	2301      	movs	r3, #1
}
 800538a:	4618      	mov	r0, r3
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <_kill>:

int _kill(int pid, int sig)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800539e:	f000 f913 	bl	80055c8 <__errno>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2216      	movs	r2, #22
 80053a6:	601a      	str	r2, [r3, #0]
	return -1;
 80053a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <_exit>:

void _exit (int status)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80053bc:	f04f 31ff 	mov.w	r1, #4294967295
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7ff ffe7 	bl	8005394 <_kill>
	while (1) {}		/* Make sure we hang here */
 80053c6:	e7fe      	b.n	80053c6 <_exit+0x12>

080053c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053d4:	2300      	movs	r3, #0
 80053d6:	617b      	str	r3, [r7, #20]
 80053d8:	e00a      	b.n	80053f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80053da:	f3af 8000 	nop.w
 80053de:	4601      	mov	r1, r0
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	60ba      	str	r2, [r7, #8]
 80053e6:	b2ca      	uxtb	r2, r1
 80053e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	3301      	adds	r3, #1
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	dbf0      	blt.n	80053da <_read+0x12>
	}

return len;
 80053f8:	687b      	ldr	r3, [r7, #4]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b086      	sub	sp, #24
 8005406:	af00      	add	r7, sp, #0
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800540e:	2300      	movs	r3, #0
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	e009      	b.n	8005428 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	60ba      	str	r2, [r7, #8]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	4618      	mov	r0, r3
 800541e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	3301      	adds	r3, #1
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	429a      	cmp	r2, r3
 800542e:	dbf1      	blt.n	8005414 <_write+0x12>
	}
	return len;
 8005430:	687b      	ldr	r3, [r7, #4]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3718      	adds	r7, #24
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <_close>:

int _close(int file)
{
 800543a:	b480      	push	{r7}
 800543c:	b083      	sub	sp, #12
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
	return -1;
 8005442:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005446:	4618      	mov	r0, r3
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005462:	605a      	str	r2, [r3, #4]
	return 0;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <_isatty>:

int _isatty(int file)
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
	return 1;
 800547a:	2301      	movs	r3, #1
}
 800547c:	4618      	mov	r0, r3
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
	return 0;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
	...

080054a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80054ac:	4a14      	ldr	r2, [pc, #80]	; (8005500 <_sbrk+0x5c>)
 80054ae:	4b15      	ldr	r3, [pc, #84]	; (8005504 <_sbrk+0x60>)
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80054b8:	4b13      	ldr	r3, [pc, #76]	; (8005508 <_sbrk+0x64>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d102      	bne.n	80054c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80054c0:	4b11      	ldr	r3, [pc, #68]	; (8005508 <_sbrk+0x64>)
 80054c2:	4a12      	ldr	r2, [pc, #72]	; (800550c <_sbrk+0x68>)
 80054c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80054c6:	4b10      	ldr	r3, [pc, #64]	; (8005508 <_sbrk+0x64>)
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4413      	add	r3, r2
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d207      	bcs.n	80054e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80054d4:	f000 f878 	bl	80055c8 <__errno>
 80054d8:	4603      	mov	r3, r0
 80054da:	220c      	movs	r2, #12
 80054dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80054de:	f04f 33ff 	mov.w	r3, #4294967295
 80054e2:	e009      	b.n	80054f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80054e4:	4b08      	ldr	r3, [pc, #32]	; (8005508 <_sbrk+0x64>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80054ea:	4b07      	ldr	r3, [pc, #28]	; (8005508 <_sbrk+0x64>)
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4413      	add	r3, r2
 80054f2:	4a05      	ldr	r2, [pc, #20]	; (8005508 <_sbrk+0x64>)
 80054f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80054f6:	68fb      	ldr	r3, [r7, #12]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	20018000 	.word	0x20018000
 8005504:	00000400 	.word	0x00000400
 8005508:	2000ad4c 	.word	0x2000ad4c
 800550c:	2000b050 	.word	0x2000b050

08005510 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005510:	b480      	push	{r7}
 8005512:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005514:	4b15      	ldr	r3, [pc, #84]	; (800556c <SystemInit+0x5c>)
 8005516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551a:	4a14      	ldr	r2, [pc, #80]	; (800556c <SystemInit+0x5c>)
 800551c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005520:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005524:	4b12      	ldr	r3, [pc, #72]	; (8005570 <SystemInit+0x60>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a11      	ldr	r2, [pc, #68]	; (8005570 <SystemInit+0x60>)
 800552a:	f043 0301 	orr.w	r3, r3, #1
 800552e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005530:	4b0f      	ldr	r3, [pc, #60]	; (8005570 <SystemInit+0x60>)
 8005532:	2200      	movs	r2, #0
 8005534:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005536:	4b0e      	ldr	r3, [pc, #56]	; (8005570 <SystemInit+0x60>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a0d      	ldr	r2, [pc, #52]	; (8005570 <SystemInit+0x60>)
 800553c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005540:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005544:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005546:	4b0a      	ldr	r3, [pc, #40]	; (8005570 <SystemInit+0x60>)
 8005548:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800554c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800554e:	4b08      	ldr	r3, [pc, #32]	; (8005570 <SystemInit+0x60>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a07      	ldr	r2, [pc, #28]	; (8005570 <SystemInit+0x60>)
 8005554:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005558:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800555a:	4b05      	ldr	r3, [pc, #20]	; (8005570 <SystemInit+0x60>)
 800555c:	2200      	movs	r2, #0
 800555e:	619a      	str	r2, [r3, #24]
}
 8005560:	bf00      	nop
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	e000ed00 	.word	0xe000ed00
 8005570:	40021000 	.word	0x40021000

08005574 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80055ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005578:	f7ff ffca 	bl	8005510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800557c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800557e:	e003      	b.n	8005588 <LoopCopyDataInit>

08005580 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005580:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005582:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005584:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005586:	3104      	adds	r1, #4

08005588 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005588:	480a      	ldr	r0, [pc, #40]	; (80055b4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800558a:	4b0b      	ldr	r3, [pc, #44]	; (80055b8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800558c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800558e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005590:	d3f6      	bcc.n	8005580 <CopyDataInit>
	ldr	r2, =_sbss
 8005592:	4a0a      	ldr	r2, [pc, #40]	; (80055bc <LoopForever+0x12>)
	b	LoopFillZerobss
 8005594:	e002      	b.n	800559c <LoopFillZerobss>

08005596 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005596:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005598:	f842 3b04 	str.w	r3, [r2], #4

0800559c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800559c:	4b08      	ldr	r3, [pc, #32]	; (80055c0 <LoopForever+0x16>)
	cmp	r2, r3
 800559e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80055a0:	d3f9      	bcc.n	8005596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80055a2:	f000 f817 	bl	80055d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80055a6:	f7ff f93f 	bl	8004828 <main>

080055aa <LoopForever>:

LoopForever:
    b LoopForever
 80055aa:	e7fe      	b.n	80055aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80055ac:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80055b0:	08006bf8 	.word	0x08006bf8
	ldr	r0, =_sdata
 80055b4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80055b8:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 80055bc:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 80055c0:	2000b050 	.word	0x2000b050

080055c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80055c4:	e7fe      	b.n	80055c4 <ADC1_2_IRQHandler>
	...

080055c8 <__errno>:
 80055c8:	4b01      	ldr	r3, [pc, #4]	; (80055d0 <__errno+0x8>)
 80055ca:	6818      	ldr	r0, [r3, #0]
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	20000014 	.word	0x20000014

080055d4 <__libc_init_array>:
 80055d4:	b570      	push	{r4, r5, r6, lr}
 80055d6:	4d0d      	ldr	r5, [pc, #52]	; (800560c <__libc_init_array+0x38>)
 80055d8:	4c0d      	ldr	r4, [pc, #52]	; (8005610 <__libc_init_array+0x3c>)
 80055da:	1b64      	subs	r4, r4, r5
 80055dc:	10a4      	asrs	r4, r4, #2
 80055de:	2600      	movs	r6, #0
 80055e0:	42a6      	cmp	r6, r4
 80055e2:	d109      	bne.n	80055f8 <__libc_init_array+0x24>
 80055e4:	4d0b      	ldr	r5, [pc, #44]	; (8005614 <__libc_init_array+0x40>)
 80055e6:	4c0c      	ldr	r4, [pc, #48]	; (8005618 <__libc_init_array+0x44>)
 80055e8:	f001 f9f4 	bl	80069d4 <_init>
 80055ec:	1b64      	subs	r4, r4, r5
 80055ee:	10a4      	asrs	r4, r4, #2
 80055f0:	2600      	movs	r6, #0
 80055f2:	42a6      	cmp	r6, r4
 80055f4:	d105      	bne.n	8005602 <__libc_init_array+0x2e>
 80055f6:	bd70      	pop	{r4, r5, r6, pc}
 80055f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80055fc:	4798      	blx	r3
 80055fe:	3601      	adds	r6, #1
 8005600:	e7ee      	b.n	80055e0 <__libc_init_array+0xc>
 8005602:	f855 3b04 	ldr.w	r3, [r5], #4
 8005606:	4798      	blx	r3
 8005608:	3601      	adds	r6, #1
 800560a:	e7f2      	b.n	80055f2 <__libc_init_array+0x1e>
 800560c:	08006bf0 	.word	0x08006bf0
 8005610:	08006bf0 	.word	0x08006bf0
 8005614:	08006bf0 	.word	0x08006bf0
 8005618:	08006bf4 	.word	0x08006bf4

0800561c <memset>:
 800561c:	4402      	add	r2, r0
 800561e:	4603      	mov	r3, r0
 8005620:	4293      	cmp	r3, r2
 8005622:	d100      	bne.n	8005626 <memset+0xa>
 8005624:	4770      	bx	lr
 8005626:	f803 1b01 	strb.w	r1, [r3], #1
 800562a:	e7f9      	b.n	8005620 <memset+0x4>

0800562c <rand>:
 800562c:	4b17      	ldr	r3, [pc, #92]	; (800568c <rand+0x60>)
 800562e:	b510      	push	{r4, lr}
 8005630:	681c      	ldr	r4, [r3, #0]
 8005632:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005634:	b9b3      	cbnz	r3, 8005664 <rand+0x38>
 8005636:	2018      	movs	r0, #24
 8005638:	f000 f888 	bl	800574c <malloc>
 800563c:	63a0      	str	r0, [r4, #56]	; 0x38
 800563e:	b928      	cbnz	r0, 800564c <rand+0x20>
 8005640:	4602      	mov	r2, r0
 8005642:	4b13      	ldr	r3, [pc, #76]	; (8005690 <rand+0x64>)
 8005644:	4813      	ldr	r0, [pc, #76]	; (8005694 <rand+0x68>)
 8005646:	214e      	movs	r1, #78	; 0x4e
 8005648:	f000 f850 	bl	80056ec <__assert_func>
 800564c:	4a12      	ldr	r2, [pc, #72]	; (8005698 <rand+0x6c>)
 800564e:	4b13      	ldr	r3, [pc, #76]	; (800569c <rand+0x70>)
 8005650:	e9c0 2300 	strd	r2, r3, [r0]
 8005654:	4b12      	ldr	r3, [pc, #72]	; (80056a0 <rand+0x74>)
 8005656:	6083      	str	r3, [r0, #8]
 8005658:	230b      	movs	r3, #11
 800565a:	8183      	strh	r3, [r0, #12]
 800565c:	2201      	movs	r2, #1
 800565e:	2300      	movs	r3, #0
 8005660:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005664:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005666:	480f      	ldr	r0, [pc, #60]	; (80056a4 <rand+0x78>)
 8005668:	690a      	ldr	r2, [r1, #16]
 800566a:	694b      	ldr	r3, [r1, #20]
 800566c:	4c0e      	ldr	r4, [pc, #56]	; (80056a8 <rand+0x7c>)
 800566e:	4350      	muls	r0, r2
 8005670:	fb04 0003 	mla	r0, r4, r3, r0
 8005674:	fba2 3404 	umull	r3, r4, r2, r4
 8005678:	1c5a      	adds	r2, r3, #1
 800567a:	4404      	add	r4, r0
 800567c:	f144 0000 	adc.w	r0, r4, #0
 8005680:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8005684:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005688:	bd10      	pop	{r4, pc}
 800568a:	bf00      	nop
 800568c:	20000014 	.word	0x20000014
 8005690:	08006aa0 	.word	0x08006aa0
 8005694:	08006ab7 	.word	0x08006ab7
 8005698:	abcd330e 	.word	0xabcd330e
 800569c:	e66d1234 	.word	0xe66d1234
 80056a0:	0005deec 	.word	0x0005deec
 80056a4:	5851f42d 	.word	0x5851f42d
 80056a8:	4c957f2d 	.word	0x4c957f2d

080056ac <siprintf>:
 80056ac:	b40e      	push	{r1, r2, r3}
 80056ae:	b500      	push	{lr}
 80056b0:	b09c      	sub	sp, #112	; 0x70
 80056b2:	ab1d      	add	r3, sp, #116	; 0x74
 80056b4:	9002      	str	r0, [sp, #8]
 80056b6:	9006      	str	r0, [sp, #24]
 80056b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056bc:	4809      	ldr	r0, [pc, #36]	; (80056e4 <siprintf+0x38>)
 80056be:	9107      	str	r1, [sp, #28]
 80056c0:	9104      	str	r1, [sp, #16]
 80056c2:	4909      	ldr	r1, [pc, #36]	; (80056e8 <siprintf+0x3c>)
 80056c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80056c8:	9105      	str	r1, [sp, #20]
 80056ca:	6800      	ldr	r0, [r0, #0]
 80056cc:	9301      	str	r3, [sp, #4]
 80056ce:	a902      	add	r1, sp, #8
 80056d0:	f000 f94a 	bl	8005968 <_svfiprintf_r>
 80056d4:	9b02      	ldr	r3, [sp, #8]
 80056d6:	2200      	movs	r2, #0
 80056d8:	701a      	strb	r2, [r3, #0]
 80056da:	b01c      	add	sp, #112	; 0x70
 80056dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80056e0:	b003      	add	sp, #12
 80056e2:	4770      	bx	lr
 80056e4:	20000014 	.word	0x20000014
 80056e8:	ffff0208 	.word	0xffff0208

080056ec <__assert_func>:
 80056ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80056ee:	4614      	mov	r4, r2
 80056f0:	461a      	mov	r2, r3
 80056f2:	4b09      	ldr	r3, [pc, #36]	; (8005718 <__assert_func+0x2c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4605      	mov	r5, r0
 80056f8:	68d8      	ldr	r0, [r3, #12]
 80056fa:	b14c      	cbz	r4, 8005710 <__assert_func+0x24>
 80056fc:	4b07      	ldr	r3, [pc, #28]	; (800571c <__assert_func+0x30>)
 80056fe:	9100      	str	r1, [sp, #0]
 8005700:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005704:	4906      	ldr	r1, [pc, #24]	; (8005720 <__assert_func+0x34>)
 8005706:	462b      	mov	r3, r5
 8005708:	f000 f80e 	bl	8005728 <fiprintf>
 800570c:	f000 fdea 	bl	80062e4 <abort>
 8005710:	4b04      	ldr	r3, [pc, #16]	; (8005724 <__assert_func+0x38>)
 8005712:	461c      	mov	r4, r3
 8005714:	e7f3      	b.n	80056fe <__assert_func+0x12>
 8005716:	bf00      	nop
 8005718:	20000014 	.word	0x20000014
 800571c:	08006b16 	.word	0x08006b16
 8005720:	08006b23 	.word	0x08006b23
 8005724:	08006b51 	.word	0x08006b51

08005728 <fiprintf>:
 8005728:	b40e      	push	{r1, r2, r3}
 800572a:	b503      	push	{r0, r1, lr}
 800572c:	4601      	mov	r1, r0
 800572e:	ab03      	add	r3, sp, #12
 8005730:	4805      	ldr	r0, [pc, #20]	; (8005748 <fiprintf+0x20>)
 8005732:	f853 2b04 	ldr.w	r2, [r3], #4
 8005736:	6800      	ldr	r0, [r0, #0]
 8005738:	9301      	str	r3, [sp, #4]
 800573a:	f000 fa3f 	bl	8005bbc <_vfiprintf_r>
 800573e:	b002      	add	sp, #8
 8005740:	f85d eb04 	ldr.w	lr, [sp], #4
 8005744:	b003      	add	sp, #12
 8005746:	4770      	bx	lr
 8005748:	20000014 	.word	0x20000014

0800574c <malloc>:
 800574c:	4b02      	ldr	r3, [pc, #8]	; (8005758 <malloc+0xc>)
 800574e:	4601      	mov	r1, r0
 8005750:	6818      	ldr	r0, [r3, #0]
 8005752:	f000 b853 	b.w	80057fc <_malloc_r>
 8005756:	bf00      	nop
 8005758:	20000014 	.word	0x20000014

0800575c <_free_r>:
 800575c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800575e:	2900      	cmp	r1, #0
 8005760:	d048      	beq.n	80057f4 <_free_r+0x98>
 8005762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005766:	9001      	str	r0, [sp, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	f1a1 0404 	sub.w	r4, r1, #4
 800576e:	bfb8      	it	lt
 8005770:	18e4      	addlt	r4, r4, r3
 8005772:	f001 f805 	bl	8006780 <__malloc_lock>
 8005776:	4a20      	ldr	r2, [pc, #128]	; (80057f8 <_free_r+0x9c>)
 8005778:	9801      	ldr	r0, [sp, #4]
 800577a:	6813      	ldr	r3, [r2, #0]
 800577c:	4615      	mov	r5, r2
 800577e:	b933      	cbnz	r3, 800578e <_free_r+0x32>
 8005780:	6063      	str	r3, [r4, #4]
 8005782:	6014      	str	r4, [r2, #0]
 8005784:	b003      	add	sp, #12
 8005786:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800578a:	f000 bfff 	b.w	800678c <__malloc_unlock>
 800578e:	42a3      	cmp	r3, r4
 8005790:	d90b      	bls.n	80057aa <_free_r+0x4e>
 8005792:	6821      	ldr	r1, [r4, #0]
 8005794:	1862      	adds	r2, r4, r1
 8005796:	4293      	cmp	r3, r2
 8005798:	bf04      	itt	eq
 800579a:	681a      	ldreq	r2, [r3, #0]
 800579c:	685b      	ldreq	r3, [r3, #4]
 800579e:	6063      	str	r3, [r4, #4]
 80057a0:	bf04      	itt	eq
 80057a2:	1852      	addeq	r2, r2, r1
 80057a4:	6022      	streq	r2, [r4, #0]
 80057a6:	602c      	str	r4, [r5, #0]
 80057a8:	e7ec      	b.n	8005784 <_free_r+0x28>
 80057aa:	461a      	mov	r2, r3
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	b10b      	cbz	r3, 80057b4 <_free_r+0x58>
 80057b0:	42a3      	cmp	r3, r4
 80057b2:	d9fa      	bls.n	80057aa <_free_r+0x4e>
 80057b4:	6811      	ldr	r1, [r2, #0]
 80057b6:	1855      	adds	r5, r2, r1
 80057b8:	42a5      	cmp	r5, r4
 80057ba:	d10b      	bne.n	80057d4 <_free_r+0x78>
 80057bc:	6824      	ldr	r4, [r4, #0]
 80057be:	4421      	add	r1, r4
 80057c0:	1854      	adds	r4, r2, r1
 80057c2:	42a3      	cmp	r3, r4
 80057c4:	6011      	str	r1, [r2, #0]
 80057c6:	d1dd      	bne.n	8005784 <_free_r+0x28>
 80057c8:	681c      	ldr	r4, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	6053      	str	r3, [r2, #4]
 80057ce:	4421      	add	r1, r4
 80057d0:	6011      	str	r1, [r2, #0]
 80057d2:	e7d7      	b.n	8005784 <_free_r+0x28>
 80057d4:	d902      	bls.n	80057dc <_free_r+0x80>
 80057d6:	230c      	movs	r3, #12
 80057d8:	6003      	str	r3, [r0, #0]
 80057da:	e7d3      	b.n	8005784 <_free_r+0x28>
 80057dc:	6825      	ldr	r5, [r4, #0]
 80057de:	1961      	adds	r1, r4, r5
 80057e0:	428b      	cmp	r3, r1
 80057e2:	bf04      	itt	eq
 80057e4:	6819      	ldreq	r1, [r3, #0]
 80057e6:	685b      	ldreq	r3, [r3, #4]
 80057e8:	6063      	str	r3, [r4, #4]
 80057ea:	bf04      	itt	eq
 80057ec:	1949      	addeq	r1, r1, r5
 80057ee:	6021      	streq	r1, [r4, #0]
 80057f0:	6054      	str	r4, [r2, #4]
 80057f2:	e7c7      	b.n	8005784 <_free_r+0x28>
 80057f4:	b003      	add	sp, #12
 80057f6:	bd30      	pop	{r4, r5, pc}
 80057f8:	2000ad50 	.word	0x2000ad50

080057fc <_malloc_r>:
 80057fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fe:	1ccd      	adds	r5, r1, #3
 8005800:	f025 0503 	bic.w	r5, r5, #3
 8005804:	3508      	adds	r5, #8
 8005806:	2d0c      	cmp	r5, #12
 8005808:	bf38      	it	cc
 800580a:	250c      	movcc	r5, #12
 800580c:	2d00      	cmp	r5, #0
 800580e:	4606      	mov	r6, r0
 8005810:	db01      	blt.n	8005816 <_malloc_r+0x1a>
 8005812:	42a9      	cmp	r1, r5
 8005814:	d903      	bls.n	800581e <_malloc_r+0x22>
 8005816:	230c      	movs	r3, #12
 8005818:	6033      	str	r3, [r6, #0]
 800581a:	2000      	movs	r0, #0
 800581c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800581e:	f000 ffaf 	bl	8006780 <__malloc_lock>
 8005822:	4921      	ldr	r1, [pc, #132]	; (80058a8 <_malloc_r+0xac>)
 8005824:	680a      	ldr	r2, [r1, #0]
 8005826:	4614      	mov	r4, r2
 8005828:	b99c      	cbnz	r4, 8005852 <_malloc_r+0x56>
 800582a:	4f20      	ldr	r7, [pc, #128]	; (80058ac <_malloc_r+0xb0>)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	b923      	cbnz	r3, 800583a <_malloc_r+0x3e>
 8005830:	4621      	mov	r1, r4
 8005832:	4630      	mov	r0, r6
 8005834:	f000 fc86 	bl	8006144 <_sbrk_r>
 8005838:	6038      	str	r0, [r7, #0]
 800583a:	4629      	mov	r1, r5
 800583c:	4630      	mov	r0, r6
 800583e:	f000 fc81 	bl	8006144 <_sbrk_r>
 8005842:	1c43      	adds	r3, r0, #1
 8005844:	d123      	bne.n	800588e <_malloc_r+0x92>
 8005846:	230c      	movs	r3, #12
 8005848:	6033      	str	r3, [r6, #0]
 800584a:	4630      	mov	r0, r6
 800584c:	f000 ff9e 	bl	800678c <__malloc_unlock>
 8005850:	e7e3      	b.n	800581a <_malloc_r+0x1e>
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	1b5b      	subs	r3, r3, r5
 8005856:	d417      	bmi.n	8005888 <_malloc_r+0x8c>
 8005858:	2b0b      	cmp	r3, #11
 800585a:	d903      	bls.n	8005864 <_malloc_r+0x68>
 800585c:	6023      	str	r3, [r4, #0]
 800585e:	441c      	add	r4, r3
 8005860:	6025      	str	r5, [r4, #0]
 8005862:	e004      	b.n	800586e <_malloc_r+0x72>
 8005864:	6863      	ldr	r3, [r4, #4]
 8005866:	42a2      	cmp	r2, r4
 8005868:	bf0c      	ite	eq
 800586a:	600b      	streq	r3, [r1, #0]
 800586c:	6053      	strne	r3, [r2, #4]
 800586e:	4630      	mov	r0, r6
 8005870:	f000 ff8c 	bl	800678c <__malloc_unlock>
 8005874:	f104 000b 	add.w	r0, r4, #11
 8005878:	1d23      	adds	r3, r4, #4
 800587a:	f020 0007 	bic.w	r0, r0, #7
 800587e:	1ac2      	subs	r2, r0, r3
 8005880:	d0cc      	beq.n	800581c <_malloc_r+0x20>
 8005882:	1a1b      	subs	r3, r3, r0
 8005884:	50a3      	str	r3, [r4, r2]
 8005886:	e7c9      	b.n	800581c <_malloc_r+0x20>
 8005888:	4622      	mov	r2, r4
 800588a:	6864      	ldr	r4, [r4, #4]
 800588c:	e7cc      	b.n	8005828 <_malloc_r+0x2c>
 800588e:	1cc4      	adds	r4, r0, #3
 8005890:	f024 0403 	bic.w	r4, r4, #3
 8005894:	42a0      	cmp	r0, r4
 8005896:	d0e3      	beq.n	8005860 <_malloc_r+0x64>
 8005898:	1a21      	subs	r1, r4, r0
 800589a:	4630      	mov	r0, r6
 800589c:	f000 fc52 	bl	8006144 <_sbrk_r>
 80058a0:	3001      	adds	r0, #1
 80058a2:	d1dd      	bne.n	8005860 <_malloc_r+0x64>
 80058a4:	e7cf      	b.n	8005846 <_malloc_r+0x4a>
 80058a6:	bf00      	nop
 80058a8:	2000ad50 	.word	0x2000ad50
 80058ac:	2000ad54 	.word	0x2000ad54

080058b0 <__ssputs_r>:
 80058b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058b4:	688e      	ldr	r6, [r1, #8]
 80058b6:	429e      	cmp	r6, r3
 80058b8:	4682      	mov	sl, r0
 80058ba:	460c      	mov	r4, r1
 80058bc:	4690      	mov	r8, r2
 80058be:	461f      	mov	r7, r3
 80058c0:	d838      	bhi.n	8005934 <__ssputs_r+0x84>
 80058c2:	898a      	ldrh	r2, [r1, #12]
 80058c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058c8:	d032      	beq.n	8005930 <__ssputs_r+0x80>
 80058ca:	6825      	ldr	r5, [r4, #0]
 80058cc:	6909      	ldr	r1, [r1, #16]
 80058ce:	eba5 0901 	sub.w	r9, r5, r1
 80058d2:	6965      	ldr	r5, [r4, #20]
 80058d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058dc:	3301      	adds	r3, #1
 80058de:	444b      	add	r3, r9
 80058e0:	106d      	asrs	r5, r5, #1
 80058e2:	429d      	cmp	r5, r3
 80058e4:	bf38      	it	cc
 80058e6:	461d      	movcc	r5, r3
 80058e8:	0553      	lsls	r3, r2, #21
 80058ea:	d531      	bpl.n	8005950 <__ssputs_r+0xa0>
 80058ec:	4629      	mov	r1, r5
 80058ee:	f7ff ff85 	bl	80057fc <_malloc_r>
 80058f2:	4606      	mov	r6, r0
 80058f4:	b950      	cbnz	r0, 800590c <__ssputs_r+0x5c>
 80058f6:	230c      	movs	r3, #12
 80058f8:	f8ca 3000 	str.w	r3, [sl]
 80058fc:	89a3      	ldrh	r3, [r4, #12]
 80058fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005902:	81a3      	strh	r3, [r4, #12]
 8005904:	f04f 30ff 	mov.w	r0, #4294967295
 8005908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800590c:	6921      	ldr	r1, [r4, #16]
 800590e:	464a      	mov	r2, r9
 8005910:	f000 ff0e 	bl	8006730 <memcpy>
 8005914:	89a3      	ldrh	r3, [r4, #12]
 8005916:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800591a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800591e:	81a3      	strh	r3, [r4, #12]
 8005920:	6126      	str	r6, [r4, #16]
 8005922:	6165      	str	r5, [r4, #20]
 8005924:	444e      	add	r6, r9
 8005926:	eba5 0509 	sub.w	r5, r5, r9
 800592a:	6026      	str	r6, [r4, #0]
 800592c:	60a5      	str	r5, [r4, #8]
 800592e:	463e      	mov	r6, r7
 8005930:	42be      	cmp	r6, r7
 8005932:	d900      	bls.n	8005936 <__ssputs_r+0x86>
 8005934:	463e      	mov	r6, r7
 8005936:	4632      	mov	r2, r6
 8005938:	6820      	ldr	r0, [r4, #0]
 800593a:	4641      	mov	r1, r8
 800593c:	f000 ff06 	bl	800674c <memmove>
 8005940:	68a3      	ldr	r3, [r4, #8]
 8005942:	6822      	ldr	r2, [r4, #0]
 8005944:	1b9b      	subs	r3, r3, r6
 8005946:	4432      	add	r2, r6
 8005948:	60a3      	str	r3, [r4, #8]
 800594a:	6022      	str	r2, [r4, #0]
 800594c:	2000      	movs	r0, #0
 800594e:	e7db      	b.n	8005908 <__ssputs_r+0x58>
 8005950:	462a      	mov	r2, r5
 8005952:	f000 ff21 	bl	8006798 <_realloc_r>
 8005956:	4606      	mov	r6, r0
 8005958:	2800      	cmp	r0, #0
 800595a:	d1e1      	bne.n	8005920 <__ssputs_r+0x70>
 800595c:	6921      	ldr	r1, [r4, #16]
 800595e:	4650      	mov	r0, sl
 8005960:	f7ff fefc 	bl	800575c <_free_r>
 8005964:	e7c7      	b.n	80058f6 <__ssputs_r+0x46>
	...

08005968 <_svfiprintf_r>:
 8005968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800596c:	4698      	mov	r8, r3
 800596e:	898b      	ldrh	r3, [r1, #12]
 8005970:	061b      	lsls	r3, r3, #24
 8005972:	b09d      	sub	sp, #116	; 0x74
 8005974:	4607      	mov	r7, r0
 8005976:	460d      	mov	r5, r1
 8005978:	4614      	mov	r4, r2
 800597a:	d50e      	bpl.n	800599a <_svfiprintf_r+0x32>
 800597c:	690b      	ldr	r3, [r1, #16]
 800597e:	b963      	cbnz	r3, 800599a <_svfiprintf_r+0x32>
 8005980:	2140      	movs	r1, #64	; 0x40
 8005982:	f7ff ff3b 	bl	80057fc <_malloc_r>
 8005986:	6028      	str	r0, [r5, #0]
 8005988:	6128      	str	r0, [r5, #16]
 800598a:	b920      	cbnz	r0, 8005996 <_svfiprintf_r+0x2e>
 800598c:	230c      	movs	r3, #12
 800598e:	603b      	str	r3, [r7, #0]
 8005990:	f04f 30ff 	mov.w	r0, #4294967295
 8005994:	e0d1      	b.n	8005b3a <_svfiprintf_r+0x1d2>
 8005996:	2340      	movs	r3, #64	; 0x40
 8005998:	616b      	str	r3, [r5, #20]
 800599a:	2300      	movs	r3, #0
 800599c:	9309      	str	r3, [sp, #36]	; 0x24
 800599e:	2320      	movs	r3, #32
 80059a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80059a8:	2330      	movs	r3, #48	; 0x30
 80059aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b54 <_svfiprintf_r+0x1ec>
 80059ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059b2:	f04f 0901 	mov.w	r9, #1
 80059b6:	4623      	mov	r3, r4
 80059b8:	469a      	mov	sl, r3
 80059ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059be:	b10a      	cbz	r2, 80059c4 <_svfiprintf_r+0x5c>
 80059c0:	2a25      	cmp	r2, #37	; 0x25
 80059c2:	d1f9      	bne.n	80059b8 <_svfiprintf_r+0x50>
 80059c4:	ebba 0b04 	subs.w	fp, sl, r4
 80059c8:	d00b      	beq.n	80059e2 <_svfiprintf_r+0x7a>
 80059ca:	465b      	mov	r3, fp
 80059cc:	4622      	mov	r2, r4
 80059ce:	4629      	mov	r1, r5
 80059d0:	4638      	mov	r0, r7
 80059d2:	f7ff ff6d 	bl	80058b0 <__ssputs_r>
 80059d6:	3001      	adds	r0, #1
 80059d8:	f000 80aa 	beq.w	8005b30 <_svfiprintf_r+0x1c8>
 80059dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059de:	445a      	add	r2, fp
 80059e0:	9209      	str	r2, [sp, #36]	; 0x24
 80059e2:	f89a 3000 	ldrb.w	r3, [sl]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 80a2 	beq.w	8005b30 <_svfiprintf_r+0x1c8>
 80059ec:	2300      	movs	r3, #0
 80059ee:	f04f 32ff 	mov.w	r2, #4294967295
 80059f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059f6:	f10a 0a01 	add.w	sl, sl, #1
 80059fa:	9304      	str	r3, [sp, #16]
 80059fc:	9307      	str	r3, [sp, #28]
 80059fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a02:	931a      	str	r3, [sp, #104]	; 0x68
 8005a04:	4654      	mov	r4, sl
 8005a06:	2205      	movs	r2, #5
 8005a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a0c:	4851      	ldr	r0, [pc, #324]	; (8005b54 <_svfiprintf_r+0x1ec>)
 8005a0e:	f7fa fbe7 	bl	80001e0 <memchr>
 8005a12:	9a04      	ldr	r2, [sp, #16]
 8005a14:	b9d8      	cbnz	r0, 8005a4e <_svfiprintf_r+0xe6>
 8005a16:	06d0      	lsls	r0, r2, #27
 8005a18:	bf44      	itt	mi
 8005a1a:	2320      	movmi	r3, #32
 8005a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a20:	0711      	lsls	r1, r2, #28
 8005a22:	bf44      	itt	mi
 8005a24:	232b      	movmi	r3, #43	; 0x2b
 8005a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8005a30:	d015      	beq.n	8005a5e <_svfiprintf_r+0xf6>
 8005a32:	9a07      	ldr	r2, [sp, #28]
 8005a34:	4654      	mov	r4, sl
 8005a36:	2000      	movs	r0, #0
 8005a38:	f04f 0c0a 	mov.w	ip, #10
 8005a3c:	4621      	mov	r1, r4
 8005a3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a42:	3b30      	subs	r3, #48	; 0x30
 8005a44:	2b09      	cmp	r3, #9
 8005a46:	d94e      	bls.n	8005ae6 <_svfiprintf_r+0x17e>
 8005a48:	b1b0      	cbz	r0, 8005a78 <_svfiprintf_r+0x110>
 8005a4a:	9207      	str	r2, [sp, #28]
 8005a4c:	e014      	b.n	8005a78 <_svfiprintf_r+0x110>
 8005a4e:	eba0 0308 	sub.w	r3, r0, r8
 8005a52:	fa09 f303 	lsl.w	r3, r9, r3
 8005a56:	4313      	orrs	r3, r2
 8005a58:	9304      	str	r3, [sp, #16]
 8005a5a:	46a2      	mov	sl, r4
 8005a5c:	e7d2      	b.n	8005a04 <_svfiprintf_r+0x9c>
 8005a5e:	9b03      	ldr	r3, [sp, #12]
 8005a60:	1d19      	adds	r1, r3, #4
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	9103      	str	r1, [sp, #12]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	bfbb      	ittet	lt
 8005a6a:	425b      	neglt	r3, r3
 8005a6c:	f042 0202 	orrlt.w	r2, r2, #2
 8005a70:	9307      	strge	r3, [sp, #28]
 8005a72:	9307      	strlt	r3, [sp, #28]
 8005a74:	bfb8      	it	lt
 8005a76:	9204      	strlt	r2, [sp, #16]
 8005a78:	7823      	ldrb	r3, [r4, #0]
 8005a7a:	2b2e      	cmp	r3, #46	; 0x2e
 8005a7c:	d10c      	bne.n	8005a98 <_svfiprintf_r+0x130>
 8005a7e:	7863      	ldrb	r3, [r4, #1]
 8005a80:	2b2a      	cmp	r3, #42	; 0x2a
 8005a82:	d135      	bne.n	8005af0 <_svfiprintf_r+0x188>
 8005a84:	9b03      	ldr	r3, [sp, #12]
 8005a86:	1d1a      	adds	r2, r3, #4
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	9203      	str	r2, [sp, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	bfb8      	it	lt
 8005a90:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a94:	3402      	adds	r4, #2
 8005a96:	9305      	str	r3, [sp, #20]
 8005a98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b64 <_svfiprintf_r+0x1fc>
 8005a9c:	7821      	ldrb	r1, [r4, #0]
 8005a9e:	2203      	movs	r2, #3
 8005aa0:	4650      	mov	r0, sl
 8005aa2:	f7fa fb9d 	bl	80001e0 <memchr>
 8005aa6:	b140      	cbz	r0, 8005aba <_svfiprintf_r+0x152>
 8005aa8:	2340      	movs	r3, #64	; 0x40
 8005aaa:	eba0 000a 	sub.w	r0, r0, sl
 8005aae:	fa03 f000 	lsl.w	r0, r3, r0
 8005ab2:	9b04      	ldr	r3, [sp, #16]
 8005ab4:	4303      	orrs	r3, r0
 8005ab6:	3401      	adds	r4, #1
 8005ab8:	9304      	str	r3, [sp, #16]
 8005aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005abe:	4826      	ldr	r0, [pc, #152]	; (8005b58 <_svfiprintf_r+0x1f0>)
 8005ac0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ac4:	2206      	movs	r2, #6
 8005ac6:	f7fa fb8b 	bl	80001e0 <memchr>
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d038      	beq.n	8005b40 <_svfiprintf_r+0x1d8>
 8005ace:	4b23      	ldr	r3, [pc, #140]	; (8005b5c <_svfiprintf_r+0x1f4>)
 8005ad0:	bb1b      	cbnz	r3, 8005b1a <_svfiprintf_r+0x1b2>
 8005ad2:	9b03      	ldr	r3, [sp, #12]
 8005ad4:	3307      	adds	r3, #7
 8005ad6:	f023 0307 	bic.w	r3, r3, #7
 8005ada:	3308      	adds	r3, #8
 8005adc:	9303      	str	r3, [sp, #12]
 8005ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae0:	4433      	add	r3, r6
 8005ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ae4:	e767      	b.n	80059b6 <_svfiprintf_r+0x4e>
 8005ae6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005aea:	460c      	mov	r4, r1
 8005aec:	2001      	movs	r0, #1
 8005aee:	e7a5      	b.n	8005a3c <_svfiprintf_r+0xd4>
 8005af0:	2300      	movs	r3, #0
 8005af2:	3401      	adds	r4, #1
 8005af4:	9305      	str	r3, [sp, #20]
 8005af6:	4619      	mov	r1, r3
 8005af8:	f04f 0c0a 	mov.w	ip, #10
 8005afc:	4620      	mov	r0, r4
 8005afe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b02:	3a30      	subs	r2, #48	; 0x30
 8005b04:	2a09      	cmp	r2, #9
 8005b06:	d903      	bls.n	8005b10 <_svfiprintf_r+0x1a8>
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0c5      	beq.n	8005a98 <_svfiprintf_r+0x130>
 8005b0c:	9105      	str	r1, [sp, #20]
 8005b0e:	e7c3      	b.n	8005a98 <_svfiprintf_r+0x130>
 8005b10:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b14:	4604      	mov	r4, r0
 8005b16:	2301      	movs	r3, #1
 8005b18:	e7f0      	b.n	8005afc <_svfiprintf_r+0x194>
 8005b1a:	ab03      	add	r3, sp, #12
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	462a      	mov	r2, r5
 8005b20:	4b0f      	ldr	r3, [pc, #60]	; (8005b60 <_svfiprintf_r+0x1f8>)
 8005b22:	a904      	add	r1, sp, #16
 8005b24:	4638      	mov	r0, r7
 8005b26:	f3af 8000 	nop.w
 8005b2a:	1c42      	adds	r2, r0, #1
 8005b2c:	4606      	mov	r6, r0
 8005b2e:	d1d6      	bne.n	8005ade <_svfiprintf_r+0x176>
 8005b30:	89ab      	ldrh	r3, [r5, #12]
 8005b32:	065b      	lsls	r3, r3, #25
 8005b34:	f53f af2c 	bmi.w	8005990 <_svfiprintf_r+0x28>
 8005b38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b3a:	b01d      	add	sp, #116	; 0x74
 8005b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b40:	ab03      	add	r3, sp, #12
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	462a      	mov	r2, r5
 8005b46:	4b06      	ldr	r3, [pc, #24]	; (8005b60 <_svfiprintf_r+0x1f8>)
 8005b48:	a904      	add	r1, sp, #16
 8005b4a:	4638      	mov	r0, r7
 8005b4c:	f000 f9d4 	bl	8005ef8 <_printf_i>
 8005b50:	e7eb      	b.n	8005b2a <_svfiprintf_r+0x1c2>
 8005b52:	bf00      	nop
 8005b54:	08006b52 	.word	0x08006b52
 8005b58:	08006b5c 	.word	0x08006b5c
 8005b5c:	00000000 	.word	0x00000000
 8005b60:	080058b1 	.word	0x080058b1
 8005b64:	08006b58 	.word	0x08006b58

08005b68 <__sfputc_r>:
 8005b68:	6893      	ldr	r3, [r2, #8]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	b410      	push	{r4}
 8005b70:	6093      	str	r3, [r2, #8]
 8005b72:	da08      	bge.n	8005b86 <__sfputc_r+0x1e>
 8005b74:	6994      	ldr	r4, [r2, #24]
 8005b76:	42a3      	cmp	r3, r4
 8005b78:	db01      	blt.n	8005b7e <__sfputc_r+0x16>
 8005b7a:	290a      	cmp	r1, #10
 8005b7c:	d103      	bne.n	8005b86 <__sfputc_r+0x1e>
 8005b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b82:	f000 baef 	b.w	8006164 <__swbuf_r>
 8005b86:	6813      	ldr	r3, [r2, #0]
 8005b88:	1c58      	adds	r0, r3, #1
 8005b8a:	6010      	str	r0, [r2, #0]
 8005b8c:	7019      	strb	r1, [r3, #0]
 8005b8e:	4608      	mov	r0, r1
 8005b90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <__sfputs_r>:
 8005b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b98:	4606      	mov	r6, r0
 8005b9a:	460f      	mov	r7, r1
 8005b9c:	4614      	mov	r4, r2
 8005b9e:	18d5      	adds	r5, r2, r3
 8005ba0:	42ac      	cmp	r4, r5
 8005ba2:	d101      	bne.n	8005ba8 <__sfputs_r+0x12>
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	e007      	b.n	8005bb8 <__sfputs_r+0x22>
 8005ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bac:	463a      	mov	r2, r7
 8005bae:	4630      	mov	r0, r6
 8005bb0:	f7ff ffda 	bl	8005b68 <__sfputc_r>
 8005bb4:	1c43      	adds	r3, r0, #1
 8005bb6:	d1f3      	bne.n	8005ba0 <__sfputs_r+0xa>
 8005bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005bbc <_vfiprintf_r>:
 8005bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc0:	460d      	mov	r5, r1
 8005bc2:	b09d      	sub	sp, #116	; 0x74
 8005bc4:	4614      	mov	r4, r2
 8005bc6:	4698      	mov	r8, r3
 8005bc8:	4606      	mov	r6, r0
 8005bca:	b118      	cbz	r0, 8005bd4 <_vfiprintf_r+0x18>
 8005bcc:	6983      	ldr	r3, [r0, #24]
 8005bce:	b90b      	cbnz	r3, 8005bd4 <_vfiprintf_r+0x18>
 8005bd0:	f000 fcaa 	bl	8006528 <__sinit>
 8005bd4:	4b89      	ldr	r3, [pc, #548]	; (8005dfc <_vfiprintf_r+0x240>)
 8005bd6:	429d      	cmp	r5, r3
 8005bd8:	d11b      	bne.n	8005c12 <_vfiprintf_r+0x56>
 8005bda:	6875      	ldr	r5, [r6, #4]
 8005bdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bde:	07d9      	lsls	r1, r3, #31
 8005be0:	d405      	bmi.n	8005bee <_vfiprintf_r+0x32>
 8005be2:	89ab      	ldrh	r3, [r5, #12]
 8005be4:	059a      	lsls	r2, r3, #22
 8005be6:	d402      	bmi.n	8005bee <_vfiprintf_r+0x32>
 8005be8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bea:	f000 fd3b 	bl	8006664 <__retarget_lock_acquire_recursive>
 8005bee:	89ab      	ldrh	r3, [r5, #12]
 8005bf0:	071b      	lsls	r3, r3, #28
 8005bf2:	d501      	bpl.n	8005bf8 <_vfiprintf_r+0x3c>
 8005bf4:	692b      	ldr	r3, [r5, #16]
 8005bf6:	b9eb      	cbnz	r3, 8005c34 <_vfiprintf_r+0x78>
 8005bf8:	4629      	mov	r1, r5
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	f000 fb04 	bl	8006208 <__swsetup_r>
 8005c00:	b1c0      	cbz	r0, 8005c34 <_vfiprintf_r+0x78>
 8005c02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c04:	07dc      	lsls	r4, r3, #31
 8005c06:	d50e      	bpl.n	8005c26 <_vfiprintf_r+0x6a>
 8005c08:	f04f 30ff 	mov.w	r0, #4294967295
 8005c0c:	b01d      	add	sp, #116	; 0x74
 8005c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c12:	4b7b      	ldr	r3, [pc, #492]	; (8005e00 <_vfiprintf_r+0x244>)
 8005c14:	429d      	cmp	r5, r3
 8005c16:	d101      	bne.n	8005c1c <_vfiprintf_r+0x60>
 8005c18:	68b5      	ldr	r5, [r6, #8]
 8005c1a:	e7df      	b.n	8005bdc <_vfiprintf_r+0x20>
 8005c1c:	4b79      	ldr	r3, [pc, #484]	; (8005e04 <_vfiprintf_r+0x248>)
 8005c1e:	429d      	cmp	r5, r3
 8005c20:	bf08      	it	eq
 8005c22:	68f5      	ldreq	r5, [r6, #12]
 8005c24:	e7da      	b.n	8005bdc <_vfiprintf_r+0x20>
 8005c26:	89ab      	ldrh	r3, [r5, #12]
 8005c28:	0598      	lsls	r0, r3, #22
 8005c2a:	d4ed      	bmi.n	8005c08 <_vfiprintf_r+0x4c>
 8005c2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c2e:	f000 fd1a 	bl	8006666 <__retarget_lock_release_recursive>
 8005c32:	e7e9      	b.n	8005c08 <_vfiprintf_r+0x4c>
 8005c34:	2300      	movs	r3, #0
 8005c36:	9309      	str	r3, [sp, #36]	; 0x24
 8005c38:	2320      	movs	r3, #32
 8005c3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c42:	2330      	movs	r3, #48	; 0x30
 8005c44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005e08 <_vfiprintf_r+0x24c>
 8005c48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c4c:	f04f 0901 	mov.w	r9, #1
 8005c50:	4623      	mov	r3, r4
 8005c52:	469a      	mov	sl, r3
 8005c54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c58:	b10a      	cbz	r2, 8005c5e <_vfiprintf_r+0xa2>
 8005c5a:	2a25      	cmp	r2, #37	; 0x25
 8005c5c:	d1f9      	bne.n	8005c52 <_vfiprintf_r+0x96>
 8005c5e:	ebba 0b04 	subs.w	fp, sl, r4
 8005c62:	d00b      	beq.n	8005c7c <_vfiprintf_r+0xc0>
 8005c64:	465b      	mov	r3, fp
 8005c66:	4622      	mov	r2, r4
 8005c68:	4629      	mov	r1, r5
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	f7ff ff93 	bl	8005b96 <__sfputs_r>
 8005c70:	3001      	adds	r0, #1
 8005c72:	f000 80aa 	beq.w	8005dca <_vfiprintf_r+0x20e>
 8005c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c78:	445a      	add	r2, fp
 8005c7a:	9209      	str	r2, [sp, #36]	; 0x24
 8005c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 80a2 	beq.w	8005dca <_vfiprintf_r+0x20e>
 8005c86:	2300      	movs	r3, #0
 8005c88:	f04f 32ff 	mov.w	r2, #4294967295
 8005c8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c90:	f10a 0a01 	add.w	sl, sl, #1
 8005c94:	9304      	str	r3, [sp, #16]
 8005c96:	9307      	str	r3, [sp, #28]
 8005c98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c9c:	931a      	str	r3, [sp, #104]	; 0x68
 8005c9e:	4654      	mov	r4, sl
 8005ca0:	2205      	movs	r2, #5
 8005ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ca6:	4858      	ldr	r0, [pc, #352]	; (8005e08 <_vfiprintf_r+0x24c>)
 8005ca8:	f7fa fa9a 	bl	80001e0 <memchr>
 8005cac:	9a04      	ldr	r2, [sp, #16]
 8005cae:	b9d8      	cbnz	r0, 8005ce8 <_vfiprintf_r+0x12c>
 8005cb0:	06d1      	lsls	r1, r2, #27
 8005cb2:	bf44      	itt	mi
 8005cb4:	2320      	movmi	r3, #32
 8005cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cba:	0713      	lsls	r3, r2, #28
 8005cbc:	bf44      	itt	mi
 8005cbe:	232b      	movmi	r3, #43	; 0x2b
 8005cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8005cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8005cca:	d015      	beq.n	8005cf8 <_vfiprintf_r+0x13c>
 8005ccc:	9a07      	ldr	r2, [sp, #28]
 8005cce:	4654      	mov	r4, sl
 8005cd0:	2000      	movs	r0, #0
 8005cd2:	f04f 0c0a 	mov.w	ip, #10
 8005cd6:	4621      	mov	r1, r4
 8005cd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cdc:	3b30      	subs	r3, #48	; 0x30
 8005cde:	2b09      	cmp	r3, #9
 8005ce0:	d94e      	bls.n	8005d80 <_vfiprintf_r+0x1c4>
 8005ce2:	b1b0      	cbz	r0, 8005d12 <_vfiprintf_r+0x156>
 8005ce4:	9207      	str	r2, [sp, #28]
 8005ce6:	e014      	b.n	8005d12 <_vfiprintf_r+0x156>
 8005ce8:	eba0 0308 	sub.w	r3, r0, r8
 8005cec:	fa09 f303 	lsl.w	r3, r9, r3
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	9304      	str	r3, [sp, #16]
 8005cf4:	46a2      	mov	sl, r4
 8005cf6:	e7d2      	b.n	8005c9e <_vfiprintf_r+0xe2>
 8005cf8:	9b03      	ldr	r3, [sp, #12]
 8005cfa:	1d19      	adds	r1, r3, #4
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	9103      	str	r1, [sp, #12]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	bfbb      	ittet	lt
 8005d04:	425b      	neglt	r3, r3
 8005d06:	f042 0202 	orrlt.w	r2, r2, #2
 8005d0a:	9307      	strge	r3, [sp, #28]
 8005d0c:	9307      	strlt	r3, [sp, #28]
 8005d0e:	bfb8      	it	lt
 8005d10:	9204      	strlt	r2, [sp, #16]
 8005d12:	7823      	ldrb	r3, [r4, #0]
 8005d14:	2b2e      	cmp	r3, #46	; 0x2e
 8005d16:	d10c      	bne.n	8005d32 <_vfiprintf_r+0x176>
 8005d18:	7863      	ldrb	r3, [r4, #1]
 8005d1a:	2b2a      	cmp	r3, #42	; 0x2a
 8005d1c:	d135      	bne.n	8005d8a <_vfiprintf_r+0x1ce>
 8005d1e:	9b03      	ldr	r3, [sp, #12]
 8005d20:	1d1a      	adds	r2, r3, #4
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	9203      	str	r2, [sp, #12]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	bfb8      	it	lt
 8005d2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d2e:	3402      	adds	r4, #2
 8005d30:	9305      	str	r3, [sp, #20]
 8005d32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005e18 <_vfiprintf_r+0x25c>
 8005d36:	7821      	ldrb	r1, [r4, #0]
 8005d38:	2203      	movs	r2, #3
 8005d3a:	4650      	mov	r0, sl
 8005d3c:	f7fa fa50 	bl	80001e0 <memchr>
 8005d40:	b140      	cbz	r0, 8005d54 <_vfiprintf_r+0x198>
 8005d42:	2340      	movs	r3, #64	; 0x40
 8005d44:	eba0 000a 	sub.w	r0, r0, sl
 8005d48:	fa03 f000 	lsl.w	r0, r3, r0
 8005d4c:	9b04      	ldr	r3, [sp, #16]
 8005d4e:	4303      	orrs	r3, r0
 8005d50:	3401      	adds	r4, #1
 8005d52:	9304      	str	r3, [sp, #16]
 8005d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d58:	482c      	ldr	r0, [pc, #176]	; (8005e0c <_vfiprintf_r+0x250>)
 8005d5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d5e:	2206      	movs	r2, #6
 8005d60:	f7fa fa3e 	bl	80001e0 <memchr>
 8005d64:	2800      	cmp	r0, #0
 8005d66:	d03f      	beq.n	8005de8 <_vfiprintf_r+0x22c>
 8005d68:	4b29      	ldr	r3, [pc, #164]	; (8005e10 <_vfiprintf_r+0x254>)
 8005d6a:	bb1b      	cbnz	r3, 8005db4 <_vfiprintf_r+0x1f8>
 8005d6c:	9b03      	ldr	r3, [sp, #12]
 8005d6e:	3307      	adds	r3, #7
 8005d70:	f023 0307 	bic.w	r3, r3, #7
 8005d74:	3308      	adds	r3, #8
 8005d76:	9303      	str	r3, [sp, #12]
 8005d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d7a:	443b      	add	r3, r7
 8005d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d7e:	e767      	b.n	8005c50 <_vfiprintf_r+0x94>
 8005d80:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d84:	460c      	mov	r4, r1
 8005d86:	2001      	movs	r0, #1
 8005d88:	e7a5      	b.n	8005cd6 <_vfiprintf_r+0x11a>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	3401      	adds	r4, #1
 8005d8e:	9305      	str	r3, [sp, #20]
 8005d90:	4619      	mov	r1, r3
 8005d92:	f04f 0c0a 	mov.w	ip, #10
 8005d96:	4620      	mov	r0, r4
 8005d98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d9c:	3a30      	subs	r2, #48	; 0x30
 8005d9e:	2a09      	cmp	r2, #9
 8005da0:	d903      	bls.n	8005daa <_vfiprintf_r+0x1ee>
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0c5      	beq.n	8005d32 <_vfiprintf_r+0x176>
 8005da6:	9105      	str	r1, [sp, #20]
 8005da8:	e7c3      	b.n	8005d32 <_vfiprintf_r+0x176>
 8005daa:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dae:	4604      	mov	r4, r0
 8005db0:	2301      	movs	r3, #1
 8005db2:	e7f0      	b.n	8005d96 <_vfiprintf_r+0x1da>
 8005db4:	ab03      	add	r3, sp, #12
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	462a      	mov	r2, r5
 8005dba:	4b16      	ldr	r3, [pc, #88]	; (8005e14 <_vfiprintf_r+0x258>)
 8005dbc:	a904      	add	r1, sp, #16
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	f3af 8000 	nop.w
 8005dc4:	4607      	mov	r7, r0
 8005dc6:	1c78      	adds	r0, r7, #1
 8005dc8:	d1d6      	bne.n	8005d78 <_vfiprintf_r+0x1bc>
 8005dca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dcc:	07d9      	lsls	r1, r3, #31
 8005dce:	d405      	bmi.n	8005ddc <_vfiprintf_r+0x220>
 8005dd0:	89ab      	ldrh	r3, [r5, #12]
 8005dd2:	059a      	lsls	r2, r3, #22
 8005dd4:	d402      	bmi.n	8005ddc <_vfiprintf_r+0x220>
 8005dd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dd8:	f000 fc45 	bl	8006666 <__retarget_lock_release_recursive>
 8005ddc:	89ab      	ldrh	r3, [r5, #12]
 8005dde:	065b      	lsls	r3, r3, #25
 8005de0:	f53f af12 	bmi.w	8005c08 <_vfiprintf_r+0x4c>
 8005de4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005de6:	e711      	b.n	8005c0c <_vfiprintf_r+0x50>
 8005de8:	ab03      	add	r3, sp, #12
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	462a      	mov	r2, r5
 8005dee:	4b09      	ldr	r3, [pc, #36]	; (8005e14 <_vfiprintf_r+0x258>)
 8005df0:	a904      	add	r1, sp, #16
 8005df2:	4630      	mov	r0, r6
 8005df4:	f000 f880 	bl	8005ef8 <_printf_i>
 8005df8:	e7e4      	b.n	8005dc4 <_vfiprintf_r+0x208>
 8005dfa:	bf00      	nop
 8005dfc:	08006ba8 	.word	0x08006ba8
 8005e00:	08006bc8 	.word	0x08006bc8
 8005e04:	08006b88 	.word	0x08006b88
 8005e08:	08006b52 	.word	0x08006b52
 8005e0c:	08006b5c 	.word	0x08006b5c
 8005e10:	00000000 	.word	0x00000000
 8005e14:	08005b97 	.word	0x08005b97
 8005e18:	08006b58 	.word	0x08006b58

08005e1c <_printf_common>:
 8005e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e20:	4616      	mov	r6, r2
 8005e22:	4699      	mov	r9, r3
 8005e24:	688a      	ldr	r2, [r1, #8]
 8005e26:	690b      	ldr	r3, [r1, #16]
 8005e28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	bfb8      	it	lt
 8005e30:	4613      	movlt	r3, r2
 8005e32:	6033      	str	r3, [r6, #0]
 8005e34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e38:	4607      	mov	r7, r0
 8005e3a:	460c      	mov	r4, r1
 8005e3c:	b10a      	cbz	r2, 8005e42 <_printf_common+0x26>
 8005e3e:	3301      	adds	r3, #1
 8005e40:	6033      	str	r3, [r6, #0]
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	0699      	lsls	r1, r3, #26
 8005e46:	bf42      	ittt	mi
 8005e48:	6833      	ldrmi	r3, [r6, #0]
 8005e4a:	3302      	addmi	r3, #2
 8005e4c:	6033      	strmi	r3, [r6, #0]
 8005e4e:	6825      	ldr	r5, [r4, #0]
 8005e50:	f015 0506 	ands.w	r5, r5, #6
 8005e54:	d106      	bne.n	8005e64 <_printf_common+0x48>
 8005e56:	f104 0a19 	add.w	sl, r4, #25
 8005e5a:	68e3      	ldr	r3, [r4, #12]
 8005e5c:	6832      	ldr	r2, [r6, #0]
 8005e5e:	1a9b      	subs	r3, r3, r2
 8005e60:	42ab      	cmp	r3, r5
 8005e62:	dc26      	bgt.n	8005eb2 <_printf_common+0x96>
 8005e64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e68:	1e13      	subs	r3, r2, #0
 8005e6a:	6822      	ldr	r2, [r4, #0]
 8005e6c:	bf18      	it	ne
 8005e6e:	2301      	movne	r3, #1
 8005e70:	0692      	lsls	r2, r2, #26
 8005e72:	d42b      	bmi.n	8005ecc <_printf_common+0xb0>
 8005e74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e78:	4649      	mov	r1, r9
 8005e7a:	4638      	mov	r0, r7
 8005e7c:	47c0      	blx	r8
 8005e7e:	3001      	adds	r0, #1
 8005e80:	d01e      	beq.n	8005ec0 <_printf_common+0xa4>
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	68e5      	ldr	r5, [r4, #12]
 8005e86:	6832      	ldr	r2, [r6, #0]
 8005e88:	f003 0306 	and.w	r3, r3, #6
 8005e8c:	2b04      	cmp	r3, #4
 8005e8e:	bf08      	it	eq
 8005e90:	1aad      	subeq	r5, r5, r2
 8005e92:	68a3      	ldr	r3, [r4, #8]
 8005e94:	6922      	ldr	r2, [r4, #16]
 8005e96:	bf0c      	ite	eq
 8005e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e9c:	2500      	movne	r5, #0
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	bfc4      	itt	gt
 8005ea2:	1a9b      	subgt	r3, r3, r2
 8005ea4:	18ed      	addgt	r5, r5, r3
 8005ea6:	2600      	movs	r6, #0
 8005ea8:	341a      	adds	r4, #26
 8005eaa:	42b5      	cmp	r5, r6
 8005eac:	d11a      	bne.n	8005ee4 <_printf_common+0xc8>
 8005eae:	2000      	movs	r0, #0
 8005eb0:	e008      	b.n	8005ec4 <_printf_common+0xa8>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	4652      	mov	r2, sl
 8005eb6:	4649      	mov	r1, r9
 8005eb8:	4638      	mov	r0, r7
 8005eba:	47c0      	blx	r8
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	d103      	bne.n	8005ec8 <_printf_common+0xac>
 8005ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec8:	3501      	adds	r5, #1
 8005eca:	e7c6      	b.n	8005e5a <_printf_common+0x3e>
 8005ecc:	18e1      	adds	r1, r4, r3
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	2030      	movs	r0, #48	; 0x30
 8005ed2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ed6:	4422      	add	r2, r4
 8005ed8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005edc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ee0:	3302      	adds	r3, #2
 8005ee2:	e7c7      	b.n	8005e74 <_printf_common+0x58>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	4622      	mov	r2, r4
 8005ee8:	4649      	mov	r1, r9
 8005eea:	4638      	mov	r0, r7
 8005eec:	47c0      	blx	r8
 8005eee:	3001      	adds	r0, #1
 8005ef0:	d0e6      	beq.n	8005ec0 <_printf_common+0xa4>
 8005ef2:	3601      	adds	r6, #1
 8005ef4:	e7d9      	b.n	8005eaa <_printf_common+0x8e>
	...

08005ef8 <_printf_i>:
 8005ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005efc:	460c      	mov	r4, r1
 8005efe:	4691      	mov	r9, r2
 8005f00:	7e27      	ldrb	r7, [r4, #24]
 8005f02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f04:	2f78      	cmp	r7, #120	; 0x78
 8005f06:	4680      	mov	r8, r0
 8005f08:	469a      	mov	sl, r3
 8005f0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f0e:	d807      	bhi.n	8005f20 <_printf_i+0x28>
 8005f10:	2f62      	cmp	r7, #98	; 0x62
 8005f12:	d80a      	bhi.n	8005f2a <_printf_i+0x32>
 8005f14:	2f00      	cmp	r7, #0
 8005f16:	f000 80d8 	beq.w	80060ca <_printf_i+0x1d2>
 8005f1a:	2f58      	cmp	r7, #88	; 0x58
 8005f1c:	f000 80a3 	beq.w	8006066 <_printf_i+0x16e>
 8005f20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f28:	e03a      	b.n	8005fa0 <_printf_i+0xa8>
 8005f2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f2e:	2b15      	cmp	r3, #21
 8005f30:	d8f6      	bhi.n	8005f20 <_printf_i+0x28>
 8005f32:	a001      	add	r0, pc, #4	; (adr r0, 8005f38 <_printf_i+0x40>)
 8005f34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005f38:	08005f91 	.word	0x08005f91
 8005f3c:	08005fa5 	.word	0x08005fa5
 8005f40:	08005f21 	.word	0x08005f21
 8005f44:	08005f21 	.word	0x08005f21
 8005f48:	08005f21 	.word	0x08005f21
 8005f4c:	08005f21 	.word	0x08005f21
 8005f50:	08005fa5 	.word	0x08005fa5
 8005f54:	08005f21 	.word	0x08005f21
 8005f58:	08005f21 	.word	0x08005f21
 8005f5c:	08005f21 	.word	0x08005f21
 8005f60:	08005f21 	.word	0x08005f21
 8005f64:	080060b1 	.word	0x080060b1
 8005f68:	08005fd5 	.word	0x08005fd5
 8005f6c:	08006093 	.word	0x08006093
 8005f70:	08005f21 	.word	0x08005f21
 8005f74:	08005f21 	.word	0x08005f21
 8005f78:	080060d3 	.word	0x080060d3
 8005f7c:	08005f21 	.word	0x08005f21
 8005f80:	08005fd5 	.word	0x08005fd5
 8005f84:	08005f21 	.word	0x08005f21
 8005f88:	08005f21 	.word	0x08005f21
 8005f8c:	0800609b 	.word	0x0800609b
 8005f90:	680b      	ldr	r3, [r1, #0]
 8005f92:	1d1a      	adds	r2, r3, #4
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	600a      	str	r2, [r1, #0]
 8005f98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e0a3      	b.n	80060ec <_printf_i+0x1f4>
 8005fa4:	6825      	ldr	r5, [r4, #0]
 8005fa6:	6808      	ldr	r0, [r1, #0]
 8005fa8:	062e      	lsls	r6, r5, #24
 8005faa:	f100 0304 	add.w	r3, r0, #4
 8005fae:	d50a      	bpl.n	8005fc6 <_printf_i+0xce>
 8005fb0:	6805      	ldr	r5, [r0, #0]
 8005fb2:	600b      	str	r3, [r1, #0]
 8005fb4:	2d00      	cmp	r5, #0
 8005fb6:	da03      	bge.n	8005fc0 <_printf_i+0xc8>
 8005fb8:	232d      	movs	r3, #45	; 0x2d
 8005fba:	426d      	negs	r5, r5
 8005fbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fc0:	485e      	ldr	r0, [pc, #376]	; (800613c <_printf_i+0x244>)
 8005fc2:	230a      	movs	r3, #10
 8005fc4:	e019      	b.n	8005ffa <_printf_i+0x102>
 8005fc6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005fca:	6805      	ldr	r5, [r0, #0]
 8005fcc:	600b      	str	r3, [r1, #0]
 8005fce:	bf18      	it	ne
 8005fd0:	b22d      	sxthne	r5, r5
 8005fd2:	e7ef      	b.n	8005fb4 <_printf_i+0xbc>
 8005fd4:	680b      	ldr	r3, [r1, #0]
 8005fd6:	6825      	ldr	r5, [r4, #0]
 8005fd8:	1d18      	adds	r0, r3, #4
 8005fda:	6008      	str	r0, [r1, #0]
 8005fdc:	0628      	lsls	r0, r5, #24
 8005fde:	d501      	bpl.n	8005fe4 <_printf_i+0xec>
 8005fe0:	681d      	ldr	r5, [r3, #0]
 8005fe2:	e002      	b.n	8005fea <_printf_i+0xf2>
 8005fe4:	0669      	lsls	r1, r5, #25
 8005fe6:	d5fb      	bpl.n	8005fe0 <_printf_i+0xe8>
 8005fe8:	881d      	ldrh	r5, [r3, #0]
 8005fea:	4854      	ldr	r0, [pc, #336]	; (800613c <_printf_i+0x244>)
 8005fec:	2f6f      	cmp	r7, #111	; 0x6f
 8005fee:	bf0c      	ite	eq
 8005ff0:	2308      	moveq	r3, #8
 8005ff2:	230a      	movne	r3, #10
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ffa:	6866      	ldr	r6, [r4, #4]
 8005ffc:	60a6      	str	r6, [r4, #8]
 8005ffe:	2e00      	cmp	r6, #0
 8006000:	bfa2      	ittt	ge
 8006002:	6821      	ldrge	r1, [r4, #0]
 8006004:	f021 0104 	bicge.w	r1, r1, #4
 8006008:	6021      	strge	r1, [r4, #0]
 800600a:	b90d      	cbnz	r5, 8006010 <_printf_i+0x118>
 800600c:	2e00      	cmp	r6, #0
 800600e:	d04d      	beq.n	80060ac <_printf_i+0x1b4>
 8006010:	4616      	mov	r6, r2
 8006012:	fbb5 f1f3 	udiv	r1, r5, r3
 8006016:	fb03 5711 	mls	r7, r3, r1, r5
 800601a:	5dc7      	ldrb	r7, [r0, r7]
 800601c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006020:	462f      	mov	r7, r5
 8006022:	42bb      	cmp	r3, r7
 8006024:	460d      	mov	r5, r1
 8006026:	d9f4      	bls.n	8006012 <_printf_i+0x11a>
 8006028:	2b08      	cmp	r3, #8
 800602a:	d10b      	bne.n	8006044 <_printf_i+0x14c>
 800602c:	6823      	ldr	r3, [r4, #0]
 800602e:	07df      	lsls	r7, r3, #31
 8006030:	d508      	bpl.n	8006044 <_printf_i+0x14c>
 8006032:	6923      	ldr	r3, [r4, #16]
 8006034:	6861      	ldr	r1, [r4, #4]
 8006036:	4299      	cmp	r1, r3
 8006038:	bfde      	ittt	le
 800603a:	2330      	movle	r3, #48	; 0x30
 800603c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006040:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006044:	1b92      	subs	r2, r2, r6
 8006046:	6122      	str	r2, [r4, #16]
 8006048:	f8cd a000 	str.w	sl, [sp]
 800604c:	464b      	mov	r3, r9
 800604e:	aa03      	add	r2, sp, #12
 8006050:	4621      	mov	r1, r4
 8006052:	4640      	mov	r0, r8
 8006054:	f7ff fee2 	bl	8005e1c <_printf_common>
 8006058:	3001      	adds	r0, #1
 800605a:	d14c      	bne.n	80060f6 <_printf_i+0x1fe>
 800605c:	f04f 30ff 	mov.w	r0, #4294967295
 8006060:	b004      	add	sp, #16
 8006062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006066:	4835      	ldr	r0, [pc, #212]	; (800613c <_printf_i+0x244>)
 8006068:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	680e      	ldr	r6, [r1, #0]
 8006070:	061f      	lsls	r7, r3, #24
 8006072:	f856 5b04 	ldr.w	r5, [r6], #4
 8006076:	600e      	str	r6, [r1, #0]
 8006078:	d514      	bpl.n	80060a4 <_printf_i+0x1ac>
 800607a:	07d9      	lsls	r1, r3, #31
 800607c:	bf44      	itt	mi
 800607e:	f043 0320 	orrmi.w	r3, r3, #32
 8006082:	6023      	strmi	r3, [r4, #0]
 8006084:	b91d      	cbnz	r5, 800608e <_printf_i+0x196>
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	f023 0320 	bic.w	r3, r3, #32
 800608c:	6023      	str	r3, [r4, #0]
 800608e:	2310      	movs	r3, #16
 8006090:	e7b0      	b.n	8005ff4 <_printf_i+0xfc>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	f043 0320 	orr.w	r3, r3, #32
 8006098:	6023      	str	r3, [r4, #0]
 800609a:	2378      	movs	r3, #120	; 0x78
 800609c:	4828      	ldr	r0, [pc, #160]	; (8006140 <_printf_i+0x248>)
 800609e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060a2:	e7e3      	b.n	800606c <_printf_i+0x174>
 80060a4:	065e      	lsls	r6, r3, #25
 80060a6:	bf48      	it	mi
 80060a8:	b2ad      	uxthmi	r5, r5
 80060aa:	e7e6      	b.n	800607a <_printf_i+0x182>
 80060ac:	4616      	mov	r6, r2
 80060ae:	e7bb      	b.n	8006028 <_printf_i+0x130>
 80060b0:	680b      	ldr	r3, [r1, #0]
 80060b2:	6826      	ldr	r6, [r4, #0]
 80060b4:	6960      	ldr	r0, [r4, #20]
 80060b6:	1d1d      	adds	r5, r3, #4
 80060b8:	600d      	str	r5, [r1, #0]
 80060ba:	0635      	lsls	r5, r6, #24
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	d501      	bpl.n	80060c4 <_printf_i+0x1cc>
 80060c0:	6018      	str	r0, [r3, #0]
 80060c2:	e002      	b.n	80060ca <_printf_i+0x1d2>
 80060c4:	0671      	lsls	r1, r6, #25
 80060c6:	d5fb      	bpl.n	80060c0 <_printf_i+0x1c8>
 80060c8:	8018      	strh	r0, [r3, #0]
 80060ca:	2300      	movs	r3, #0
 80060cc:	6123      	str	r3, [r4, #16]
 80060ce:	4616      	mov	r6, r2
 80060d0:	e7ba      	b.n	8006048 <_printf_i+0x150>
 80060d2:	680b      	ldr	r3, [r1, #0]
 80060d4:	1d1a      	adds	r2, r3, #4
 80060d6:	600a      	str	r2, [r1, #0]
 80060d8:	681e      	ldr	r6, [r3, #0]
 80060da:	6862      	ldr	r2, [r4, #4]
 80060dc:	2100      	movs	r1, #0
 80060de:	4630      	mov	r0, r6
 80060e0:	f7fa f87e 	bl	80001e0 <memchr>
 80060e4:	b108      	cbz	r0, 80060ea <_printf_i+0x1f2>
 80060e6:	1b80      	subs	r0, r0, r6
 80060e8:	6060      	str	r0, [r4, #4]
 80060ea:	6863      	ldr	r3, [r4, #4]
 80060ec:	6123      	str	r3, [r4, #16]
 80060ee:	2300      	movs	r3, #0
 80060f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060f4:	e7a8      	b.n	8006048 <_printf_i+0x150>
 80060f6:	6923      	ldr	r3, [r4, #16]
 80060f8:	4632      	mov	r2, r6
 80060fa:	4649      	mov	r1, r9
 80060fc:	4640      	mov	r0, r8
 80060fe:	47d0      	blx	sl
 8006100:	3001      	adds	r0, #1
 8006102:	d0ab      	beq.n	800605c <_printf_i+0x164>
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	079b      	lsls	r3, r3, #30
 8006108:	d413      	bmi.n	8006132 <_printf_i+0x23a>
 800610a:	68e0      	ldr	r0, [r4, #12]
 800610c:	9b03      	ldr	r3, [sp, #12]
 800610e:	4298      	cmp	r0, r3
 8006110:	bfb8      	it	lt
 8006112:	4618      	movlt	r0, r3
 8006114:	e7a4      	b.n	8006060 <_printf_i+0x168>
 8006116:	2301      	movs	r3, #1
 8006118:	4632      	mov	r2, r6
 800611a:	4649      	mov	r1, r9
 800611c:	4640      	mov	r0, r8
 800611e:	47d0      	blx	sl
 8006120:	3001      	adds	r0, #1
 8006122:	d09b      	beq.n	800605c <_printf_i+0x164>
 8006124:	3501      	adds	r5, #1
 8006126:	68e3      	ldr	r3, [r4, #12]
 8006128:	9903      	ldr	r1, [sp, #12]
 800612a:	1a5b      	subs	r3, r3, r1
 800612c:	42ab      	cmp	r3, r5
 800612e:	dcf2      	bgt.n	8006116 <_printf_i+0x21e>
 8006130:	e7eb      	b.n	800610a <_printf_i+0x212>
 8006132:	2500      	movs	r5, #0
 8006134:	f104 0619 	add.w	r6, r4, #25
 8006138:	e7f5      	b.n	8006126 <_printf_i+0x22e>
 800613a:	bf00      	nop
 800613c:	08006b63 	.word	0x08006b63
 8006140:	08006b74 	.word	0x08006b74

08006144 <_sbrk_r>:
 8006144:	b538      	push	{r3, r4, r5, lr}
 8006146:	4d06      	ldr	r5, [pc, #24]	; (8006160 <_sbrk_r+0x1c>)
 8006148:	2300      	movs	r3, #0
 800614a:	4604      	mov	r4, r0
 800614c:	4608      	mov	r0, r1
 800614e:	602b      	str	r3, [r5, #0]
 8006150:	f7ff f9a8 	bl	80054a4 <_sbrk>
 8006154:	1c43      	adds	r3, r0, #1
 8006156:	d102      	bne.n	800615e <_sbrk_r+0x1a>
 8006158:	682b      	ldr	r3, [r5, #0]
 800615a:	b103      	cbz	r3, 800615e <_sbrk_r+0x1a>
 800615c:	6023      	str	r3, [r4, #0]
 800615e:	bd38      	pop	{r3, r4, r5, pc}
 8006160:	2000b04c 	.word	0x2000b04c

08006164 <__swbuf_r>:
 8006164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006166:	460e      	mov	r6, r1
 8006168:	4614      	mov	r4, r2
 800616a:	4605      	mov	r5, r0
 800616c:	b118      	cbz	r0, 8006176 <__swbuf_r+0x12>
 800616e:	6983      	ldr	r3, [r0, #24]
 8006170:	b90b      	cbnz	r3, 8006176 <__swbuf_r+0x12>
 8006172:	f000 f9d9 	bl	8006528 <__sinit>
 8006176:	4b21      	ldr	r3, [pc, #132]	; (80061fc <__swbuf_r+0x98>)
 8006178:	429c      	cmp	r4, r3
 800617a:	d12b      	bne.n	80061d4 <__swbuf_r+0x70>
 800617c:	686c      	ldr	r4, [r5, #4]
 800617e:	69a3      	ldr	r3, [r4, #24]
 8006180:	60a3      	str	r3, [r4, #8]
 8006182:	89a3      	ldrh	r3, [r4, #12]
 8006184:	071a      	lsls	r2, r3, #28
 8006186:	d52f      	bpl.n	80061e8 <__swbuf_r+0x84>
 8006188:	6923      	ldr	r3, [r4, #16]
 800618a:	b36b      	cbz	r3, 80061e8 <__swbuf_r+0x84>
 800618c:	6923      	ldr	r3, [r4, #16]
 800618e:	6820      	ldr	r0, [r4, #0]
 8006190:	1ac0      	subs	r0, r0, r3
 8006192:	6963      	ldr	r3, [r4, #20]
 8006194:	b2f6      	uxtb	r6, r6
 8006196:	4283      	cmp	r3, r0
 8006198:	4637      	mov	r7, r6
 800619a:	dc04      	bgt.n	80061a6 <__swbuf_r+0x42>
 800619c:	4621      	mov	r1, r4
 800619e:	4628      	mov	r0, r5
 80061a0:	f000 f92e 	bl	8006400 <_fflush_r>
 80061a4:	bb30      	cbnz	r0, 80061f4 <__swbuf_r+0x90>
 80061a6:	68a3      	ldr	r3, [r4, #8]
 80061a8:	3b01      	subs	r3, #1
 80061aa:	60a3      	str	r3, [r4, #8]
 80061ac:	6823      	ldr	r3, [r4, #0]
 80061ae:	1c5a      	adds	r2, r3, #1
 80061b0:	6022      	str	r2, [r4, #0]
 80061b2:	701e      	strb	r6, [r3, #0]
 80061b4:	6963      	ldr	r3, [r4, #20]
 80061b6:	3001      	adds	r0, #1
 80061b8:	4283      	cmp	r3, r0
 80061ba:	d004      	beq.n	80061c6 <__swbuf_r+0x62>
 80061bc:	89a3      	ldrh	r3, [r4, #12]
 80061be:	07db      	lsls	r3, r3, #31
 80061c0:	d506      	bpl.n	80061d0 <__swbuf_r+0x6c>
 80061c2:	2e0a      	cmp	r6, #10
 80061c4:	d104      	bne.n	80061d0 <__swbuf_r+0x6c>
 80061c6:	4621      	mov	r1, r4
 80061c8:	4628      	mov	r0, r5
 80061ca:	f000 f919 	bl	8006400 <_fflush_r>
 80061ce:	b988      	cbnz	r0, 80061f4 <__swbuf_r+0x90>
 80061d0:	4638      	mov	r0, r7
 80061d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061d4:	4b0a      	ldr	r3, [pc, #40]	; (8006200 <__swbuf_r+0x9c>)
 80061d6:	429c      	cmp	r4, r3
 80061d8:	d101      	bne.n	80061de <__swbuf_r+0x7a>
 80061da:	68ac      	ldr	r4, [r5, #8]
 80061dc:	e7cf      	b.n	800617e <__swbuf_r+0x1a>
 80061de:	4b09      	ldr	r3, [pc, #36]	; (8006204 <__swbuf_r+0xa0>)
 80061e0:	429c      	cmp	r4, r3
 80061e2:	bf08      	it	eq
 80061e4:	68ec      	ldreq	r4, [r5, #12]
 80061e6:	e7ca      	b.n	800617e <__swbuf_r+0x1a>
 80061e8:	4621      	mov	r1, r4
 80061ea:	4628      	mov	r0, r5
 80061ec:	f000 f80c 	bl	8006208 <__swsetup_r>
 80061f0:	2800      	cmp	r0, #0
 80061f2:	d0cb      	beq.n	800618c <__swbuf_r+0x28>
 80061f4:	f04f 37ff 	mov.w	r7, #4294967295
 80061f8:	e7ea      	b.n	80061d0 <__swbuf_r+0x6c>
 80061fa:	bf00      	nop
 80061fc:	08006ba8 	.word	0x08006ba8
 8006200:	08006bc8 	.word	0x08006bc8
 8006204:	08006b88 	.word	0x08006b88

08006208 <__swsetup_r>:
 8006208:	4b32      	ldr	r3, [pc, #200]	; (80062d4 <__swsetup_r+0xcc>)
 800620a:	b570      	push	{r4, r5, r6, lr}
 800620c:	681d      	ldr	r5, [r3, #0]
 800620e:	4606      	mov	r6, r0
 8006210:	460c      	mov	r4, r1
 8006212:	b125      	cbz	r5, 800621e <__swsetup_r+0x16>
 8006214:	69ab      	ldr	r3, [r5, #24]
 8006216:	b913      	cbnz	r3, 800621e <__swsetup_r+0x16>
 8006218:	4628      	mov	r0, r5
 800621a:	f000 f985 	bl	8006528 <__sinit>
 800621e:	4b2e      	ldr	r3, [pc, #184]	; (80062d8 <__swsetup_r+0xd0>)
 8006220:	429c      	cmp	r4, r3
 8006222:	d10f      	bne.n	8006244 <__swsetup_r+0x3c>
 8006224:	686c      	ldr	r4, [r5, #4]
 8006226:	89a3      	ldrh	r3, [r4, #12]
 8006228:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800622c:	0719      	lsls	r1, r3, #28
 800622e:	d42c      	bmi.n	800628a <__swsetup_r+0x82>
 8006230:	06dd      	lsls	r5, r3, #27
 8006232:	d411      	bmi.n	8006258 <__swsetup_r+0x50>
 8006234:	2309      	movs	r3, #9
 8006236:	6033      	str	r3, [r6, #0]
 8006238:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800623c:	81a3      	strh	r3, [r4, #12]
 800623e:	f04f 30ff 	mov.w	r0, #4294967295
 8006242:	e03e      	b.n	80062c2 <__swsetup_r+0xba>
 8006244:	4b25      	ldr	r3, [pc, #148]	; (80062dc <__swsetup_r+0xd4>)
 8006246:	429c      	cmp	r4, r3
 8006248:	d101      	bne.n	800624e <__swsetup_r+0x46>
 800624a:	68ac      	ldr	r4, [r5, #8]
 800624c:	e7eb      	b.n	8006226 <__swsetup_r+0x1e>
 800624e:	4b24      	ldr	r3, [pc, #144]	; (80062e0 <__swsetup_r+0xd8>)
 8006250:	429c      	cmp	r4, r3
 8006252:	bf08      	it	eq
 8006254:	68ec      	ldreq	r4, [r5, #12]
 8006256:	e7e6      	b.n	8006226 <__swsetup_r+0x1e>
 8006258:	0758      	lsls	r0, r3, #29
 800625a:	d512      	bpl.n	8006282 <__swsetup_r+0x7a>
 800625c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800625e:	b141      	cbz	r1, 8006272 <__swsetup_r+0x6a>
 8006260:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006264:	4299      	cmp	r1, r3
 8006266:	d002      	beq.n	800626e <__swsetup_r+0x66>
 8006268:	4630      	mov	r0, r6
 800626a:	f7ff fa77 	bl	800575c <_free_r>
 800626e:	2300      	movs	r3, #0
 8006270:	6363      	str	r3, [r4, #52]	; 0x34
 8006272:	89a3      	ldrh	r3, [r4, #12]
 8006274:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006278:	81a3      	strh	r3, [r4, #12]
 800627a:	2300      	movs	r3, #0
 800627c:	6063      	str	r3, [r4, #4]
 800627e:	6923      	ldr	r3, [r4, #16]
 8006280:	6023      	str	r3, [r4, #0]
 8006282:	89a3      	ldrh	r3, [r4, #12]
 8006284:	f043 0308 	orr.w	r3, r3, #8
 8006288:	81a3      	strh	r3, [r4, #12]
 800628a:	6923      	ldr	r3, [r4, #16]
 800628c:	b94b      	cbnz	r3, 80062a2 <__swsetup_r+0x9a>
 800628e:	89a3      	ldrh	r3, [r4, #12]
 8006290:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006298:	d003      	beq.n	80062a2 <__swsetup_r+0x9a>
 800629a:	4621      	mov	r1, r4
 800629c:	4630      	mov	r0, r6
 800629e:	f000 fa07 	bl	80066b0 <__smakebuf_r>
 80062a2:	89a0      	ldrh	r0, [r4, #12]
 80062a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062a8:	f010 0301 	ands.w	r3, r0, #1
 80062ac:	d00a      	beq.n	80062c4 <__swsetup_r+0xbc>
 80062ae:	2300      	movs	r3, #0
 80062b0:	60a3      	str	r3, [r4, #8]
 80062b2:	6963      	ldr	r3, [r4, #20]
 80062b4:	425b      	negs	r3, r3
 80062b6:	61a3      	str	r3, [r4, #24]
 80062b8:	6923      	ldr	r3, [r4, #16]
 80062ba:	b943      	cbnz	r3, 80062ce <__swsetup_r+0xc6>
 80062bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80062c0:	d1ba      	bne.n	8006238 <__swsetup_r+0x30>
 80062c2:	bd70      	pop	{r4, r5, r6, pc}
 80062c4:	0781      	lsls	r1, r0, #30
 80062c6:	bf58      	it	pl
 80062c8:	6963      	ldrpl	r3, [r4, #20]
 80062ca:	60a3      	str	r3, [r4, #8]
 80062cc:	e7f4      	b.n	80062b8 <__swsetup_r+0xb0>
 80062ce:	2000      	movs	r0, #0
 80062d0:	e7f7      	b.n	80062c2 <__swsetup_r+0xba>
 80062d2:	bf00      	nop
 80062d4:	20000014 	.word	0x20000014
 80062d8:	08006ba8 	.word	0x08006ba8
 80062dc:	08006bc8 	.word	0x08006bc8
 80062e0:	08006b88 	.word	0x08006b88

080062e4 <abort>:
 80062e4:	b508      	push	{r3, lr}
 80062e6:	2006      	movs	r0, #6
 80062e8:	f000 faa4 	bl	8006834 <raise>
 80062ec:	2001      	movs	r0, #1
 80062ee:	f7ff f861 	bl	80053b4 <_exit>
	...

080062f4 <__sflush_r>:
 80062f4:	898a      	ldrh	r2, [r1, #12]
 80062f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062fa:	4605      	mov	r5, r0
 80062fc:	0710      	lsls	r0, r2, #28
 80062fe:	460c      	mov	r4, r1
 8006300:	d458      	bmi.n	80063b4 <__sflush_r+0xc0>
 8006302:	684b      	ldr	r3, [r1, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	dc05      	bgt.n	8006314 <__sflush_r+0x20>
 8006308:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800630a:	2b00      	cmp	r3, #0
 800630c:	dc02      	bgt.n	8006314 <__sflush_r+0x20>
 800630e:	2000      	movs	r0, #0
 8006310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006316:	2e00      	cmp	r6, #0
 8006318:	d0f9      	beq.n	800630e <__sflush_r+0x1a>
 800631a:	2300      	movs	r3, #0
 800631c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006320:	682f      	ldr	r7, [r5, #0]
 8006322:	602b      	str	r3, [r5, #0]
 8006324:	d032      	beq.n	800638c <__sflush_r+0x98>
 8006326:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006328:	89a3      	ldrh	r3, [r4, #12]
 800632a:	075a      	lsls	r2, r3, #29
 800632c:	d505      	bpl.n	800633a <__sflush_r+0x46>
 800632e:	6863      	ldr	r3, [r4, #4]
 8006330:	1ac0      	subs	r0, r0, r3
 8006332:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006334:	b10b      	cbz	r3, 800633a <__sflush_r+0x46>
 8006336:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006338:	1ac0      	subs	r0, r0, r3
 800633a:	2300      	movs	r3, #0
 800633c:	4602      	mov	r2, r0
 800633e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006340:	6a21      	ldr	r1, [r4, #32]
 8006342:	4628      	mov	r0, r5
 8006344:	47b0      	blx	r6
 8006346:	1c43      	adds	r3, r0, #1
 8006348:	89a3      	ldrh	r3, [r4, #12]
 800634a:	d106      	bne.n	800635a <__sflush_r+0x66>
 800634c:	6829      	ldr	r1, [r5, #0]
 800634e:	291d      	cmp	r1, #29
 8006350:	d82c      	bhi.n	80063ac <__sflush_r+0xb8>
 8006352:	4a2a      	ldr	r2, [pc, #168]	; (80063fc <__sflush_r+0x108>)
 8006354:	40ca      	lsrs	r2, r1
 8006356:	07d6      	lsls	r6, r2, #31
 8006358:	d528      	bpl.n	80063ac <__sflush_r+0xb8>
 800635a:	2200      	movs	r2, #0
 800635c:	6062      	str	r2, [r4, #4]
 800635e:	04d9      	lsls	r1, r3, #19
 8006360:	6922      	ldr	r2, [r4, #16]
 8006362:	6022      	str	r2, [r4, #0]
 8006364:	d504      	bpl.n	8006370 <__sflush_r+0x7c>
 8006366:	1c42      	adds	r2, r0, #1
 8006368:	d101      	bne.n	800636e <__sflush_r+0x7a>
 800636a:	682b      	ldr	r3, [r5, #0]
 800636c:	b903      	cbnz	r3, 8006370 <__sflush_r+0x7c>
 800636e:	6560      	str	r0, [r4, #84]	; 0x54
 8006370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006372:	602f      	str	r7, [r5, #0]
 8006374:	2900      	cmp	r1, #0
 8006376:	d0ca      	beq.n	800630e <__sflush_r+0x1a>
 8006378:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800637c:	4299      	cmp	r1, r3
 800637e:	d002      	beq.n	8006386 <__sflush_r+0x92>
 8006380:	4628      	mov	r0, r5
 8006382:	f7ff f9eb 	bl	800575c <_free_r>
 8006386:	2000      	movs	r0, #0
 8006388:	6360      	str	r0, [r4, #52]	; 0x34
 800638a:	e7c1      	b.n	8006310 <__sflush_r+0x1c>
 800638c:	6a21      	ldr	r1, [r4, #32]
 800638e:	2301      	movs	r3, #1
 8006390:	4628      	mov	r0, r5
 8006392:	47b0      	blx	r6
 8006394:	1c41      	adds	r1, r0, #1
 8006396:	d1c7      	bne.n	8006328 <__sflush_r+0x34>
 8006398:	682b      	ldr	r3, [r5, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0c4      	beq.n	8006328 <__sflush_r+0x34>
 800639e:	2b1d      	cmp	r3, #29
 80063a0:	d001      	beq.n	80063a6 <__sflush_r+0xb2>
 80063a2:	2b16      	cmp	r3, #22
 80063a4:	d101      	bne.n	80063aa <__sflush_r+0xb6>
 80063a6:	602f      	str	r7, [r5, #0]
 80063a8:	e7b1      	b.n	800630e <__sflush_r+0x1a>
 80063aa:	89a3      	ldrh	r3, [r4, #12]
 80063ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063b0:	81a3      	strh	r3, [r4, #12]
 80063b2:	e7ad      	b.n	8006310 <__sflush_r+0x1c>
 80063b4:	690f      	ldr	r7, [r1, #16]
 80063b6:	2f00      	cmp	r7, #0
 80063b8:	d0a9      	beq.n	800630e <__sflush_r+0x1a>
 80063ba:	0793      	lsls	r3, r2, #30
 80063bc:	680e      	ldr	r6, [r1, #0]
 80063be:	bf08      	it	eq
 80063c0:	694b      	ldreq	r3, [r1, #20]
 80063c2:	600f      	str	r7, [r1, #0]
 80063c4:	bf18      	it	ne
 80063c6:	2300      	movne	r3, #0
 80063c8:	eba6 0807 	sub.w	r8, r6, r7
 80063cc:	608b      	str	r3, [r1, #8]
 80063ce:	f1b8 0f00 	cmp.w	r8, #0
 80063d2:	dd9c      	ble.n	800630e <__sflush_r+0x1a>
 80063d4:	6a21      	ldr	r1, [r4, #32]
 80063d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063d8:	4643      	mov	r3, r8
 80063da:	463a      	mov	r2, r7
 80063dc:	4628      	mov	r0, r5
 80063de:	47b0      	blx	r6
 80063e0:	2800      	cmp	r0, #0
 80063e2:	dc06      	bgt.n	80063f2 <__sflush_r+0xfe>
 80063e4:	89a3      	ldrh	r3, [r4, #12]
 80063e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ea:	81a3      	strh	r3, [r4, #12]
 80063ec:	f04f 30ff 	mov.w	r0, #4294967295
 80063f0:	e78e      	b.n	8006310 <__sflush_r+0x1c>
 80063f2:	4407      	add	r7, r0
 80063f4:	eba8 0800 	sub.w	r8, r8, r0
 80063f8:	e7e9      	b.n	80063ce <__sflush_r+0xda>
 80063fa:	bf00      	nop
 80063fc:	20400001 	.word	0x20400001

08006400 <_fflush_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	690b      	ldr	r3, [r1, #16]
 8006404:	4605      	mov	r5, r0
 8006406:	460c      	mov	r4, r1
 8006408:	b913      	cbnz	r3, 8006410 <_fflush_r+0x10>
 800640a:	2500      	movs	r5, #0
 800640c:	4628      	mov	r0, r5
 800640e:	bd38      	pop	{r3, r4, r5, pc}
 8006410:	b118      	cbz	r0, 800641a <_fflush_r+0x1a>
 8006412:	6983      	ldr	r3, [r0, #24]
 8006414:	b90b      	cbnz	r3, 800641a <_fflush_r+0x1a>
 8006416:	f000 f887 	bl	8006528 <__sinit>
 800641a:	4b14      	ldr	r3, [pc, #80]	; (800646c <_fflush_r+0x6c>)
 800641c:	429c      	cmp	r4, r3
 800641e:	d11b      	bne.n	8006458 <_fflush_r+0x58>
 8006420:	686c      	ldr	r4, [r5, #4]
 8006422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0ef      	beq.n	800640a <_fflush_r+0xa>
 800642a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800642c:	07d0      	lsls	r0, r2, #31
 800642e:	d404      	bmi.n	800643a <_fflush_r+0x3a>
 8006430:	0599      	lsls	r1, r3, #22
 8006432:	d402      	bmi.n	800643a <_fflush_r+0x3a>
 8006434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006436:	f000 f915 	bl	8006664 <__retarget_lock_acquire_recursive>
 800643a:	4628      	mov	r0, r5
 800643c:	4621      	mov	r1, r4
 800643e:	f7ff ff59 	bl	80062f4 <__sflush_r>
 8006442:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006444:	07da      	lsls	r2, r3, #31
 8006446:	4605      	mov	r5, r0
 8006448:	d4e0      	bmi.n	800640c <_fflush_r+0xc>
 800644a:	89a3      	ldrh	r3, [r4, #12]
 800644c:	059b      	lsls	r3, r3, #22
 800644e:	d4dd      	bmi.n	800640c <_fflush_r+0xc>
 8006450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006452:	f000 f908 	bl	8006666 <__retarget_lock_release_recursive>
 8006456:	e7d9      	b.n	800640c <_fflush_r+0xc>
 8006458:	4b05      	ldr	r3, [pc, #20]	; (8006470 <_fflush_r+0x70>)
 800645a:	429c      	cmp	r4, r3
 800645c:	d101      	bne.n	8006462 <_fflush_r+0x62>
 800645e:	68ac      	ldr	r4, [r5, #8]
 8006460:	e7df      	b.n	8006422 <_fflush_r+0x22>
 8006462:	4b04      	ldr	r3, [pc, #16]	; (8006474 <_fflush_r+0x74>)
 8006464:	429c      	cmp	r4, r3
 8006466:	bf08      	it	eq
 8006468:	68ec      	ldreq	r4, [r5, #12]
 800646a:	e7da      	b.n	8006422 <_fflush_r+0x22>
 800646c:	08006ba8 	.word	0x08006ba8
 8006470:	08006bc8 	.word	0x08006bc8
 8006474:	08006b88 	.word	0x08006b88

08006478 <std>:
 8006478:	2300      	movs	r3, #0
 800647a:	b510      	push	{r4, lr}
 800647c:	4604      	mov	r4, r0
 800647e:	e9c0 3300 	strd	r3, r3, [r0]
 8006482:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006486:	6083      	str	r3, [r0, #8]
 8006488:	8181      	strh	r1, [r0, #12]
 800648a:	6643      	str	r3, [r0, #100]	; 0x64
 800648c:	81c2      	strh	r2, [r0, #14]
 800648e:	6183      	str	r3, [r0, #24]
 8006490:	4619      	mov	r1, r3
 8006492:	2208      	movs	r2, #8
 8006494:	305c      	adds	r0, #92	; 0x5c
 8006496:	f7ff f8c1 	bl	800561c <memset>
 800649a:	4b05      	ldr	r3, [pc, #20]	; (80064b0 <std+0x38>)
 800649c:	6263      	str	r3, [r4, #36]	; 0x24
 800649e:	4b05      	ldr	r3, [pc, #20]	; (80064b4 <std+0x3c>)
 80064a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80064a2:	4b05      	ldr	r3, [pc, #20]	; (80064b8 <std+0x40>)
 80064a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064a6:	4b05      	ldr	r3, [pc, #20]	; (80064bc <std+0x44>)
 80064a8:	6224      	str	r4, [r4, #32]
 80064aa:	6323      	str	r3, [r4, #48]	; 0x30
 80064ac:	bd10      	pop	{r4, pc}
 80064ae:	bf00      	nop
 80064b0:	0800686d 	.word	0x0800686d
 80064b4:	0800688f 	.word	0x0800688f
 80064b8:	080068c7 	.word	0x080068c7
 80064bc:	080068eb 	.word	0x080068eb

080064c0 <_cleanup_r>:
 80064c0:	4901      	ldr	r1, [pc, #4]	; (80064c8 <_cleanup_r+0x8>)
 80064c2:	f000 b8af 	b.w	8006624 <_fwalk_reent>
 80064c6:	bf00      	nop
 80064c8:	08006401 	.word	0x08006401

080064cc <__sfmoreglue>:
 80064cc:	b570      	push	{r4, r5, r6, lr}
 80064ce:	1e4a      	subs	r2, r1, #1
 80064d0:	2568      	movs	r5, #104	; 0x68
 80064d2:	4355      	muls	r5, r2
 80064d4:	460e      	mov	r6, r1
 80064d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80064da:	f7ff f98f 	bl	80057fc <_malloc_r>
 80064de:	4604      	mov	r4, r0
 80064e0:	b140      	cbz	r0, 80064f4 <__sfmoreglue+0x28>
 80064e2:	2100      	movs	r1, #0
 80064e4:	e9c0 1600 	strd	r1, r6, [r0]
 80064e8:	300c      	adds	r0, #12
 80064ea:	60a0      	str	r0, [r4, #8]
 80064ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80064f0:	f7ff f894 	bl	800561c <memset>
 80064f4:	4620      	mov	r0, r4
 80064f6:	bd70      	pop	{r4, r5, r6, pc}

080064f8 <__sfp_lock_acquire>:
 80064f8:	4801      	ldr	r0, [pc, #4]	; (8006500 <__sfp_lock_acquire+0x8>)
 80064fa:	f000 b8b3 	b.w	8006664 <__retarget_lock_acquire_recursive>
 80064fe:	bf00      	nop
 8006500:	2000b048 	.word	0x2000b048

08006504 <__sfp_lock_release>:
 8006504:	4801      	ldr	r0, [pc, #4]	; (800650c <__sfp_lock_release+0x8>)
 8006506:	f000 b8ae 	b.w	8006666 <__retarget_lock_release_recursive>
 800650a:	bf00      	nop
 800650c:	2000b048 	.word	0x2000b048

08006510 <__sinit_lock_acquire>:
 8006510:	4801      	ldr	r0, [pc, #4]	; (8006518 <__sinit_lock_acquire+0x8>)
 8006512:	f000 b8a7 	b.w	8006664 <__retarget_lock_acquire_recursive>
 8006516:	bf00      	nop
 8006518:	2000b043 	.word	0x2000b043

0800651c <__sinit_lock_release>:
 800651c:	4801      	ldr	r0, [pc, #4]	; (8006524 <__sinit_lock_release+0x8>)
 800651e:	f000 b8a2 	b.w	8006666 <__retarget_lock_release_recursive>
 8006522:	bf00      	nop
 8006524:	2000b043 	.word	0x2000b043

08006528 <__sinit>:
 8006528:	b510      	push	{r4, lr}
 800652a:	4604      	mov	r4, r0
 800652c:	f7ff fff0 	bl	8006510 <__sinit_lock_acquire>
 8006530:	69a3      	ldr	r3, [r4, #24]
 8006532:	b11b      	cbz	r3, 800653c <__sinit+0x14>
 8006534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006538:	f7ff bff0 	b.w	800651c <__sinit_lock_release>
 800653c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006540:	6523      	str	r3, [r4, #80]	; 0x50
 8006542:	4b13      	ldr	r3, [pc, #76]	; (8006590 <__sinit+0x68>)
 8006544:	4a13      	ldr	r2, [pc, #76]	; (8006594 <__sinit+0x6c>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	62a2      	str	r2, [r4, #40]	; 0x28
 800654a:	42a3      	cmp	r3, r4
 800654c:	bf04      	itt	eq
 800654e:	2301      	moveq	r3, #1
 8006550:	61a3      	streq	r3, [r4, #24]
 8006552:	4620      	mov	r0, r4
 8006554:	f000 f820 	bl	8006598 <__sfp>
 8006558:	6060      	str	r0, [r4, #4]
 800655a:	4620      	mov	r0, r4
 800655c:	f000 f81c 	bl	8006598 <__sfp>
 8006560:	60a0      	str	r0, [r4, #8]
 8006562:	4620      	mov	r0, r4
 8006564:	f000 f818 	bl	8006598 <__sfp>
 8006568:	2200      	movs	r2, #0
 800656a:	60e0      	str	r0, [r4, #12]
 800656c:	2104      	movs	r1, #4
 800656e:	6860      	ldr	r0, [r4, #4]
 8006570:	f7ff ff82 	bl	8006478 <std>
 8006574:	68a0      	ldr	r0, [r4, #8]
 8006576:	2201      	movs	r2, #1
 8006578:	2109      	movs	r1, #9
 800657a:	f7ff ff7d 	bl	8006478 <std>
 800657e:	68e0      	ldr	r0, [r4, #12]
 8006580:	2202      	movs	r2, #2
 8006582:	2112      	movs	r1, #18
 8006584:	f7ff ff78 	bl	8006478 <std>
 8006588:	2301      	movs	r3, #1
 800658a:	61a3      	str	r3, [r4, #24]
 800658c:	e7d2      	b.n	8006534 <__sinit+0xc>
 800658e:	bf00      	nop
 8006590:	08006a9c 	.word	0x08006a9c
 8006594:	080064c1 	.word	0x080064c1

08006598 <__sfp>:
 8006598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659a:	4607      	mov	r7, r0
 800659c:	f7ff ffac 	bl	80064f8 <__sfp_lock_acquire>
 80065a0:	4b1e      	ldr	r3, [pc, #120]	; (800661c <__sfp+0x84>)
 80065a2:	681e      	ldr	r6, [r3, #0]
 80065a4:	69b3      	ldr	r3, [r6, #24]
 80065a6:	b913      	cbnz	r3, 80065ae <__sfp+0x16>
 80065a8:	4630      	mov	r0, r6
 80065aa:	f7ff ffbd 	bl	8006528 <__sinit>
 80065ae:	3648      	adds	r6, #72	; 0x48
 80065b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80065b4:	3b01      	subs	r3, #1
 80065b6:	d503      	bpl.n	80065c0 <__sfp+0x28>
 80065b8:	6833      	ldr	r3, [r6, #0]
 80065ba:	b30b      	cbz	r3, 8006600 <__sfp+0x68>
 80065bc:	6836      	ldr	r6, [r6, #0]
 80065be:	e7f7      	b.n	80065b0 <__sfp+0x18>
 80065c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80065c4:	b9d5      	cbnz	r5, 80065fc <__sfp+0x64>
 80065c6:	4b16      	ldr	r3, [pc, #88]	; (8006620 <__sfp+0x88>)
 80065c8:	60e3      	str	r3, [r4, #12]
 80065ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80065ce:	6665      	str	r5, [r4, #100]	; 0x64
 80065d0:	f000 f847 	bl	8006662 <__retarget_lock_init_recursive>
 80065d4:	f7ff ff96 	bl	8006504 <__sfp_lock_release>
 80065d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80065dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80065e0:	6025      	str	r5, [r4, #0]
 80065e2:	61a5      	str	r5, [r4, #24]
 80065e4:	2208      	movs	r2, #8
 80065e6:	4629      	mov	r1, r5
 80065e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80065ec:	f7ff f816 	bl	800561c <memset>
 80065f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80065f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80065f8:	4620      	mov	r0, r4
 80065fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065fc:	3468      	adds	r4, #104	; 0x68
 80065fe:	e7d9      	b.n	80065b4 <__sfp+0x1c>
 8006600:	2104      	movs	r1, #4
 8006602:	4638      	mov	r0, r7
 8006604:	f7ff ff62 	bl	80064cc <__sfmoreglue>
 8006608:	4604      	mov	r4, r0
 800660a:	6030      	str	r0, [r6, #0]
 800660c:	2800      	cmp	r0, #0
 800660e:	d1d5      	bne.n	80065bc <__sfp+0x24>
 8006610:	f7ff ff78 	bl	8006504 <__sfp_lock_release>
 8006614:	230c      	movs	r3, #12
 8006616:	603b      	str	r3, [r7, #0]
 8006618:	e7ee      	b.n	80065f8 <__sfp+0x60>
 800661a:	bf00      	nop
 800661c:	08006a9c 	.word	0x08006a9c
 8006620:	ffff0001 	.word	0xffff0001

08006624 <_fwalk_reent>:
 8006624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006628:	4606      	mov	r6, r0
 800662a:	4688      	mov	r8, r1
 800662c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006630:	2700      	movs	r7, #0
 8006632:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006636:	f1b9 0901 	subs.w	r9, r9, #1
 800663a:	d505      	bpl.n	8006648 <_fwalk_reent+0x24>
 800663c:	6824      	ldr	r4, [r4, #0]
 800663e:	2c00      	cmp	r4, #0
 8006640:	d1f7      	bne.n	8006632 <_fwalk_reent+0xe>
 8006642:	4638      	mov	r0, r7
 8006644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006648:	89ab      	ldrh	r3, [r5, #12]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d907      	bls.n	800665e <_fwalk_reent+0x3a>
 800664e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006652:	3301      	adds	r3, #1
 8006654:	d003      	beq.n	800665e <_fwalk_reent+0x3a>
 8006656:	4629      	mov	r1, r5
 8006658:	4630      	mov	r0, r6
 800665a:	47c0      	blx	r8
 800665c:	4307      	orrs	r7, r0
 800665e:	3568      	adds	r5, #104	; 0x68
 8006660:	e7e9      	b.n	8006636 <_fwalk_reent+0x12>

08006662 <__retarget_lock_init_recursive>:
 8006662:	4770      	bx	lr

08006664 <__retarget_lock_acquire_recursive>:
 8006664:	4770      	bx	lr

08006666 <__retarget_lock_release_recursive>:
 8006666:	4770      	bx	lr

08006668 <__swhatbuf_r>:
 8006668:	b570      	push	{r4, r5, r6, lr}
 800666a:	460e      	mov	r6, r1
 800666c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006670:	2900      	cmp	r1, #0
 8006672:	b096      	sub	sp, #88	; 0x58
 8006674:	4614      	mov	r4, r2
 8006676:	461d      	mov	r5, r3
 8006678:	da07      	bge.n	800668a <__swhatbuf_r+0x22>
 800667a:	2300      	movs	r3, #0
 800667c:	602b      	str	r3, [r5, #0]
 800667e:	89b3      	ldrh	r3, [r6, #12]
 8006680:	061a      	lsls	r2, r3, #24
 8006682:	d410      	bmi.n	80066a6 <__swhatbuf_r+0x3e>
 8006684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006688:	e00e      	b.n	80066a8 <__swhatbuf_r+0x40>
 800668a:	466a      	mov	r2, sp
 800668c:	f000 f954 	bl	8006938 <_fstat_r>
 8006690:	2800      	cmp	r0, #0
 8006692:	dbf2      	blt.n	800667a <__swhatbuf_r+0x12>
 8006694:	9a01      	ldr	r2, [sp, #4]
 8006696:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800669a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800669e:	425a      	negs	r2, r3
 80066a0:	415a      	adcs	r2, r3
 80066a2:	602a      	str	r2, [r5, #0]
 80066a4:	e7ee      	b.n	8006684 <__swhatbuf_r+0x1c>
 80066a6:	2340      	movs	r3, #64	; 0x40
 80066a8:	2000      	movs	r0, #0
 80066aa:	6023      	str	r3, [r4, #0]
 80066ac:	b016      	add	sp, #88	; 0x58
 80066ae:	bd70      	pop	{r4, r5, r6, pc}

080066b0 <__smakebuf_r>:
 80066b0:	898b      	ldrh	r3, [r1, #12]
 80066b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066b4:	079d      	lsls	r5, r3, #30
 80066b6:	4606      	mov	r6, r0
 80066b8:	460c      	mov	r4, r1
 80066ba:	d507      	bpl.n	80066cc <__smakebuf_r+0x1c>
 80066bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80066c0:	6023      	str	r3, [r4, #0]
 80066c2:	6123      	str	r3, [r4, #16]
 80066c4:	2301      	movs	r3, #1
 80066c6:	6163      	str	r3, [r4, #20]
 80066c8:	b002      	add	sp, #8
 80066ca:	bd70      	pop	{r4, r5, r6, pc}
 80066cc:	ab01      	add	r3, sp, #4
 80066ce:	466a      	mov	r2, sp
 80066d0:	f7ff ffca 	bl	8006668 <__swhatbuf_r>
 80066d4:	9900      	ldr	r1, [sp, #0]
 80066d6:	4605      	mov	r5, r0
 80066d8:	4630      	mov	r0, r6
 80066da:	f7ff f88f 	bl	80057fc <_malloc_r>
 80066de:	b948      	cbnz	r0, 80066f4 <__smakebuf_r+0x44>
 80066e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066e4:	059a      	lsls	r2, r3, #22
 80066e6:	d4ef      	bmi.n	80066c8 <__smakebuf_r+0x18>
 80066e8:	f023 0303 	bic.w	r3, r3, #3
 80066ec:	f043 0302 	orr.w	r3, r3, #2
 80066f0:	81a3      	strh	r3, [r4, #12]
 80066f2:	e7e3      	b.n	80066bc <__smakebuf_r+0xc>
 80066f4:	4b0d      	ldr	r3, [pc, #52]	; (800672c <__smakebuf_r+0x7c>)
 80066f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80066f8:	89a3      	ldrh	r3, [r4, #12]
 80066fa:	6020      	str	r0, [r4, #0]
 80066fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006700:	81a3      	strh	r3, [r4, #12]
 8006702:	9b00      	ldr	r3, [sp, #0]
 8006704:	6163      	str	r3, [r4, #20]
 8006706:	9b01      	ldr	r3, [sp, #4]
 8006708:	6120      	str	r0, [r4, #16]
 800670a:	b15b      	cbz	r3, 8006724 <__smakebuf_r+0x74>
 800670c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006710:	4630      	mov	r0, r6
 8006712:	f000 f923 	bl	800695c <_isatty_r>
 8006716:	b128      	cbz	r0, 8006724 <__smakebuf_r+0x74>
 8006718:	89a3      	ldrh	r3, [r4, #12]
 800671a:	f023 0303 	bic.w	r3, r3, #3
 800671e:	f043 0301 	orr.w	r3, r3, #1
 8006722:	81a3      	strh	r3, [r4, #12]
 8006724:	89a0      	ldrh	r0, [r4, #12]
 8006726:	4305      	orrs	r5, r0
 8006728:	81a5      	strh	r5, [r4, #12]
 800672a:	e7cd      	b.n	80066c8 <__smakebuf_r+0x18>
 800672c:	080064c1 	.word	0x080064c1

08006730 <memcpy>:
 8006730:	440a      	add	r2, r1
 8006732:	4291      	cmp	r1, r2
 8006734:	f100 33ff 	add.w	r3, r0, #4294967295
 8006738:	d100      	bne.n	800673c <memcpy+0xc>
 800673a:	4770      	bx	lr
 800673c:	b510      	push	{r4, lr}
 800673e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006742:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006746:	4291      	cmp	r1, r2
 8006748:	d1f9      	bne.n	800673e <memcpy+0xe>
 800674a:	bd10      	pop	{r4, pc}

0800674c <memmove>:
 800674c:	4288      	cmp	r0, r1
 800674e:	b510      	push	{r4, lr}
 8006750:	eb01 0402 	add.w	r4, r1, r2
 8006754:	d902      	bls.n	800675c <memmove+0x10>
 8006756:	4284      	cmp	r4, r0
 8006758:	4623      	mov	r3, r4
 800675a:	d807      	bhi.n	800676c <memmove+0x20>
 800675c:	1e43      	subs	r3, r0, #1
 800675e:	42a1      	cmp	r1, r4
 8006760:	d008      	beq.n	8006774 <memmove+0x28>
 8006762:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006766:	f803 2f01 	strb.w	r2, [r3, #1]!
 800676a:	e7f8      	b.n	800675e <memmove+0x12>
 800676c:	4402      	add	r2, r0
 800676e:	4601      	mov	r1, r0
 8006770:	428a      	cmp	r2, r1
 8006772:	d100      	bne.n	8006776 <memmove+0x2a>
 8006774:	bd10      	pop	{r4, pc}
 8006776:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800677a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800677e:	e7f7      	b.n	8006770 <memmove+0x24>

08006780 <__malloc_lock>:
 8006780:	4801      	ldr	r0, [pc, #4]	; (8006788 <__malloc_lock+0x8>)
 8006782:	f7ff bf6f 	b.w	8006664 <__retarget_lock_acquire_recursive>
 8006786:	bf00      	nop
 8006788:	2000b044 	.word	0x2000b044

0800678c <__malloc_unlock>:
 800678c:	4801      	ldr	r0, [pc, #4]	; (8006794 <__malloc_unlock+0x8>)
 800678e:	f7ff bf6a 	b.w	8006666 <__retarget_lock_release_recursive>
 8006792:	bf00      	nop
 8006794:	2000b044 	.word	0x2000b044

08006798 <_realloc_r>:
 8006798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679a:	4607      	mov	r7, r0
 800679c:	4614      	mov	r4, r2
 800679e:	460e      	mov	r6, r1
 80067a0:	b921      	cbnz	r1, 80067ac <_realloc_r+0x14>
 80067a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80067a6:	4611      	mov	r1, r2
 80067a8:	f7ff b828 	b.w	80057fc <_malloc_r>
 80067ac:	b922      	cbnz	r2, 80067b8 <_realloc_r+0x20>
 80067ae:	f7fe ffd5 	bl	800575c <_free_r>
 80067b2:	4625      	mov	r5, r4
 80067b4:	4628      	mov	r0, r5
 80067b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067b8:	f000 f8f2 	bl	80069a0 <_malloc_usable_size_r>
 80067bc:	42a0      	cmp	r0, r4
 80067be:	d20f      	bcs.n	80067e0 <_realloc_r+0x48>
 80067c0:	4621      	mov	r1, r4
 80067c2:	4638      	mov	r0, r7
 80067c4:	f7ff f81a 	bl	80057fc <_malloc_r>
 80067c8:	4605      	mov	r5, r0
 80067ca:	2800      	cmp	r0, #0
 80067cc:	d0f2      	beq.n	80067b4 <_realloc_r+0x1c>
 80067ce:	4631      	mov	r1, r6
 80067d0:	4622      	mov	r2, r4
 80067d2:	f7ff ffad 	bl	8006730 <memcpy>
 80067d6:	4631      	mov	r1, r6
 80067d8:	4638      	mov	r0, r7
 80067da:	f7fe ffbf 	bl	800575c <_free_r>
 80067de:	e7e9      	b.n	80067b4 <_realloc_r+0x1c>
 80067e0:	4635      	mov	r5, r6
 80067e2:	e7e7      	b.n	80067b4 <_realloc_r+0x1c>

080067e4 <_raise_r>:
 80067e4:	291f      	cmp	r1, #31
 80067e6:	b538      	push	{r3, r4, r5, lr}
 80067e8:	4604      	mov	r4, r0
 80067ea:	460d      	mov	r5, r1
 80067ec:	d904      	bls.n	80067f8 <_raise_r+0x14>
 80067ee:	2316      	movs	r3, #22
 80067f0:	6003      	str	r3, [r0, #0]
 80067f2:	f04f 30ff 	mov.w	r0, #4294967295
 80067f6:	bd38      	pop	{r3, r4, r5, pc}
 80067f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80067fa:	b112      	cbz	r2, 8006802 <_raise_r+0x1e>
 80067fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006800:	b94b      	cbnz	r3, 8006816 <_raise_r+0x32>
 8006802:	4620      	mov	r0, r4
 8006804:	f000 f830 	bl	8006868 <_getpid_r>
 8006808:	462a      	mov	r2, r5
 800680a:	4601      	mov	r1, r0
 800680c:	4620      	mov	r0, r4
 800680e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006812:	f000 b817 	b.w	8006844 <_kill_r>
 8006816:	2b01      	cmp	r3, #1
 8006818:	d00a      	beq.n	8006830 <_raise_r+0x4c>
 800681a:	1c59      	adds	r1, r3, #1
 800681c:	d103      	bne.n	8006826 <_raise_r+0x42>
 800681e:	2316      	movs	r3, #22
 8006820:	6003      	str	r3, [r0, #0]
 8006822:	2001      	movs	r0, #1
 8006824:	e7e7      	b.n	80067f6 <_raise_r+0x12>
 8006826:	2400      	movs	r4, #0
 8006828:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800682c:	4628      	mov	r0, r5
 800682e:	4798      	blx	r3
 8006830:	2000      	movs	r0, #0
 8006832:	e7e0      	b.n	80067f6 <_raise_r+0x12>

08006834 <raise>:
 8006834:	4b02      	ldr	r3, [pc, #8]	; (8006840 <raise+0xc>)
 8006836:	4601      	mov	r1, r0
 8006838:	6818      	ldr	r0, [r3, #0]
 800683a:	f7ff bfd3 	b.w	80067e4 <_raise_r>
 800683e:	bf00      	nop
 8006840:	20000014 	.word	0x20000014

08006844 <_kill_r>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	4d07      	ldr	r5, [pc, #28]	; (8006864 <_kill_r+0x20>)
 8006848:	2300      	movs	r3, #0
 800684a:	4604      	mov	r4, r0
 800684c:	4608      	mov	r0, r1
 800684e:	4611      	mov	r1, r2
 8006850:	602b      	str	r3, [r5, #0]
 8006852:	f7fe fd9f 	bl	8005394 <_kill>
 8006856:	1c43      	adds	r3, r0, #1
 8006858:	d102      	bne.n	8006860 <_kill_r+0x1c>
 800685a:	682b      	ldr	r3, [r5, #0]
 800685c:	b103      	cbz	r3, 8006860 <_kill_r+0x1c>
 800685e:	6023      	str	r3, [r4, #0]
 8006860:	bd38      	pop	{r3, r4, r5, pc}
 8006862:	bf00      	nop
 8006864:	2000b04c 	.word	0x2000b04c

08006868 <_getpid_r>:
 8006868:	f7fe bd8c 	b.w	8005384 <_getpid>

0800686c <__sread>:
 800686c:	b510      	push	{r4, lr}
 800686e:	460c      	mov	r4, r1
 8006870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006874:	f000 f89c 	bl	80069b0 <_read_r>
 8006878:	2800      	cmp	r0, #0
 800687a:	bfab      	itete	ge
 800687c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800687e:	89a3      	ldrhlt	r3, [r4, #12]
 8006880:	181b      	addge	r3, r3, r0
 8006882:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006886:	bfac      	ite	ge
 8006888:	6563      	strge	r3, [r4, #84]	; 0x54
 800688a:	81a3      	strhlt	r3, [r4, #12]
 800688c:	bd10      	pop	{r4, pc}

0800688e <__swrite>:
 800688e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006892:	461f      	mov	r7, r3
 8006894:	898b      	ldrh	r3, [r1, #12]
 8006896:	05db      	lsls	r3, r3, #23
 8006898:	4605      	mov	r5, r0
 800689a:	460c      	mov	r4, r1
 800689c:	4616      	mov	r6, r2
 800689e:	d505      	bpl.n	80068ac <__swrite+0x1e>
 80068a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068a4:	2302      	movs	r3, #2
 80068a6:	2200      	movs	r2, #0
 80068a8:	f000 f868 	bl	800697c <_lseek_r>
 80068ac:	89a3      	ldrh	r3, [r4, #12]
 80068ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068b6:	81a3      	strh	r3, [r4, #12]
 80068b8:	4632      	mov	r2, r6
 80068ba:	463b      	mov	r3, r7
 80068bc:	4628      	mov	r0, r5
 80068be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068c2:	f000 b817 	b.w	80068f4 <_write_r>

080068c6 <__sseek>:
 80068c6:	b510      	push	{r4, lr}
 80068c8:	460c      	mov	r4, r1
 80068ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ce:	f000 f855 	bl	800697c <_lseek_r>
 80068d2:	1c43      	adds	r3, r0, #1
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	bf15      	itete	ne
 80068d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80068da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80068de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80068e2:	81a3      	strheq	r3, [r4, #12]
 80068e4:	bf18      	it	ne
 80068e6:	81a3      	strhne	r3, [r4, #12]
 80068e8:	bd10      	pop	{r4, pc}

080068ea <__sclose>:
 80068ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ee:	f000 b813 	b.w	8006918 <_close_r>
	...

080068f4 <_write_r>:
 80068f4:	b538      	push	{r3, r4, r5, lr}
 80068f6:	4d07      	ldr	r5, [pc, #28]	; (8006914 <_write_r+0x20>)
 80068f8:	4604      	mov	r4, r0
 80068fa:	4608      	mov	r0, r1
 80068fc:	4611      	mov	r1, r2
 80068fe:	2200      	movs	r2, #0
 8006900:	602a      	str	r2, [r5, #0]
 8006902:	461a      	mov	r2, r3
 8006904:	f7fe fd7d 	bl	8005402 <_write>
 8006908:	1c43      	adds	r3, r0, #1
 800690a:	d102      	bne.n	8006912 <_write_r+0x1e>
 800690c:	682b      	ldr	r3, [r5, #0]
 800690e:	b103      	cbz	r3, 8006912 <_write_r+0x1e>
 8006910:	6023      	str	r3, [r4, #0]
 8006912:	bd38      	pop	{r3, r4, r5, pc}
 8006914:	2000b04c 	.word	0x2000b04c

08006918 <_close_r>:
 8006918:	b538      	push	{r3, r4, r5, lr}
 800691a:	4d06      	ldr	r5, [pc, #24]	; (8006934 <_close_r+0x1c>)
 800691c:	2300      	movs	r3, #0
 800691e:	4604      	mov	r4, r0
 8006920:	4608      	mov	r0, r1
 8006922:	602b      	str	r3, [r5, #0]
 8006924:	f7fe fd89 	bl	800543a <_close>
 8006928:	1c43      	adds	r3, r0, #1
 800692a:	d102      	bne.n	8006932 <_close_r+0x1a>
 800692c:	682b      	ldr	r3, [r5, #0]
 800692e:	b103      	cbz	r3, 8006932 <_close_r+0x1a>
 8006930:	6023      	str	r3, [r4, #0]
 8006932:	bd38      	pop	{r3, r4, r5, pc}
 8006934:	2000b04c 	.word	0x2000b04c

08006938 <_fstat_r>:
 8006938:	b538      	push	{r3, r4, r5, lr}
 800693a:	4d07      	ldr	r5, [pc, #28]	; (8006958 <_fstat_r+0x20>)
 800693c:	2300      	movs	r3, #0
 800693e:	4604      	mov	r4, r0
 8006940:	4608      	mov	r0, r1
 8006942:	4611      	mov	r1, r2
 8006944:	602b      	str	r3, [r5, #0]
 8006946:	f7fe fd84 	bl	8005452 <_fstat>
 800694a:	1c43      	adds	r3, r0, #1
 800694c:	d102      	bne.n	8006954 <_fstat_r+0x1c>
 800694e:	682b      	ldr	r3, [r5, #0]
 8006950:	b103      	cbz	r3, 8006954 <_fstat_r+0x1c>
 8006952:	6023      	str	r3, [r4, #0]
 8006954:	bd38      	pop	{r3, r4, r5, pc}
 8006956:	bf00      	nop
 8006958:	2000b04c 	.word	0x2000b04c

0800695c <_isatty_r>:
 800695c:	b538      	push	{r3, r4, r5, lr}
 800695e:	4d06      	ldr	r5, [pc, #24]	; (8006978 <_isatty_r+0x1c>)
 8006960:	2300      	movs	r3, #0
 8006962:	4604      	mov	r4, r0
 8006964:	4608      	mov	r0, r1
 8006966:	602b      	str	r3, [r5, #0]
 8006968:	f7fe fd83 	bl	8005472 <_isatty>
 800696c:	1c43      	adds	r3, r0, #1
 800696e:	d102      	bne.n	8006976 <_isatty_r+0x1a>
 8006970:	682b      	ldr	r3, [r5, #0]
 8006972:	b103      	cbz	r3, 8006976 <_isatty_r+0x1a>
 8006974:	6023      	str	r3, [r4, #0]
 8006976:	bd38      	pop	{r3, r4, r5, pc}
 8006978:	2000b04c 	.word	0x2000b04c

0800697c <_lseek_r>:
 800697c:	b538      	push	{r3, r4, r5, lr}
 800697e:	4d07      	ldr	r5, [pc, #28]	; (800699c <_lseek_r+0x20>)
 8006980:	4604      	mov	r4, r0
 8006982:	4608      	mov	r0, r1
 8006984:	4611      	mov	r1, r2
 8006986:	2200      	movs	r2, #0
 8006988:	602a      	str	r2, [r5, #0]
 800698a:	461a      	mov	r2, r3
 800698c:	f7fe fd7c 	bl	8005488 <_lseek>
 8006990:	1c43      	adds	r3, r0, #1
 8006992:	d102      	bne.n	800699a <_lseek_r+0x1e>
 8006994:	682b      	ldr	r3, [r5, #0]
 8006996:	b103      	cbz	r3, 800699a <_lseek_r+0x1e>
 8006998:	6023      	str	r3, [r4, #0]
 800699a:	bd38      	pop	{r3, r4, r5, pc}
 800699c:	2000b04c 	.word	0x2000b04c

080069a0 <_malloc_usable_size_r>:
 80069a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069a4:	1f18      	subs	r0, r3, #4
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	bfbc      	itt	lt
 80069aa:	580b      	ldrlt	r3, [r1, r0]
 80069ac:	18c0      	addlt	r0, r0, r3
 80069ae:	4770      	bx	lr

080069b0 <_read_r>:
 80069b0:	b538      	push	{r3, r4, r5, lr}
 80069b2:	4d07      	ldr	r5, [pc, #28]	; (80069d0 <_read_r+0x20>)
 80069b4:	4604      	mov	r4, r0
 80069b6:	4608      	mov	r0, r1
 80069b8:	4611      	mov	r1, r2
 80069ba:	2200      	movs	r2, #0
 80069bc:	602a      	str	r2, [r5, #0]
 80069be:	461a      	mov	r2, r3
 80069c0:	f7fe fd02 	bl	80053c8 <_read>
 80069c4:	1c43      	adds	r3, r0, #1
 80069c6:	d102      	bne.n	80069ce <_read_r+0x1e>
 80069c8:	682b      	ldr	r3, [r5, #0]
 80069ca:	b103      	cbz	r3, 80069ce <_read_r+0x1e>
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	bd38      	pop	{r3, r4, r5, pc}
 80069d0:	2000b04c 	.word	0x2000b04c

080069d4 <_init>:
 80069d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d6:	bf00      	nop
 80069d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069da:	bc08      	pop	{r3}
 80069dc:	469e      	mov	lr, r3
 80069de:	4770      	bx	lr

080069e0 <_fini>:
 80069e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e2:	bf00      	nop
 80069e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069e6:	bc08      	pop	{r3}
 80069e8:	469e      	mov	lr, r3
 80069ea:	4770      	bx	lr
