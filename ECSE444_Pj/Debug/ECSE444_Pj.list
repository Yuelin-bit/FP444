
ECSE444_Pj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004684  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004814  08004814  00014814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048f8  080048f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080048f8  080048f8  000148f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004900  08004900  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004900  08004900  00014900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004904  08004904  00014904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000070  08004978  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08004978  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105cc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000202c  00000000  00000000  0003066c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00032698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  00033508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002617f  00000000  00000000  000342b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f5d5  00000000  00000000  0005a42f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0b45  00000000  00000000  00069a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015a549  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004038  00000000  00000000  0015a59c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080047fc 	.word	0x080047fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080047fc 	.word	0x080047fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800057e:	2300      	movs	r3, #0
 8000580:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000582:	2003      	movs	r0, #3
 8000584:	f000 f901 	bl	800078a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000588:	200f      	movs	r0, #15
 800058a:	f003 fba3 	bl	8003cd4 <HAL_InitTick>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d002      	beq.n	800059a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000594:	2301      	movs	r3, #1
 8000596:	71fb      	strb	r3, [r7, #7]
 8000598:	e001      	b.n	800059e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800059a:	f003 faf5 	bl	8003b88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800059e:	79fb      	ldrb	r3, [r7, #7]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	200000fc 	.word	0x200000fc

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200000fc 	.word	0x200000fc

080005e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f0:	f7ff ffee 	bl	80005d0 <HAL_GetTick>
 80005f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000600:	d005      	beq.n	800060e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <HAL_Delay+0x44>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800060e:	bf00      	nop
 8000610:	f7ff ffde 	bl	80005d0 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	429a      	cmp	r2, r3
 800061e:	d8f7      	bhi.n	8000610 <HAL_Delay+0x28>
  {
  }
}
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000004 	.word	0x20000004

08000630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f003 0307 	and.w	r3, r3, #7
 800063e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800064c:	4013      	ands	r3, r2
 800064e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800065c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000662:	4a04      	ldr	r2, [pc, #16]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	60d3      	str	r3, [r2, #12]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <__NVIC_GetPriorityGrouping+0x18>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	f003 0307 	and.w	r3, r3, #7
}
 8000686:	4618      	mov	r0, r3
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	db0b      	blt.n	80006be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f003 021f 	and.w	r2, r3, #31
 80006ac:	4907      	ldr	r1, [pc, #28]	; (80006cc <__NVIC_EnableIRQ+0x38>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	095b      	lsrs	r3, r3, #5
 80006b4:	2001      	movs	r0, #1
 80006b6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000e100 	.word	0xe000e100

080006d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	6039      	str	r1, [r7, #0]
 80006da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	db0a      	blt.n	80006fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	490c      	ldr	r1, [pc, #48]	; (800071c <__NVIC_SetPriority+0x4c>)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	0112      	lsls	r2, r2, #4
 80006f0:	b2d2      	uxtb	r2, r2
 80006f2:	440b      	add	r3, r1
 80006f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f8:	e00a      	b.n	8000710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4908      	ldr	r1, [pc, #32]	; (8000720 <__NVIC_SetPriority+0x50>)
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	3b04      	subs	r3, #4
 8000708:	0112      	lsls	r2, r2, #4
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	440b      	add	r3, r1
 800070e:	761a      	strb	r2, [r3, #24]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	e000e100 	.word	0xe000e100
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000724:	b480      	push	{r7}
 8000726:	b089      	sub	sp, #36	; 0x24
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	f1c3 0307 	rsb	r3, r3, #7
 800073e:	2b04      	cmp	r3, #4
 8000740:	bf28      	it	cs
 8000742:	2304      	movcs	r3, #4
 8000744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3304      	adds	r3, #4
 800074a:	2b06      	cmp	r3, #6
 800074c:	d902      	bls.n	8000754 <NVIC_EncodePriority+0x30>
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3b03      	subs	r3, #3
 8000752:	e000      	b.n	8000756 <NVIC_EncodePriority+0x32>
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	f04f 32ff 	mov.w	r2, #4294967295
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	fa02 f303 	lsl.w	r3, r2, r3
 8000762:	43da      	mvns	r2, r3
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	401a      	ands	r2, r3
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800076c:	f04f 31ff 	mov.w	r1, #4294967295
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	fa01 f303 	lsl.w	r3, r1, r3
 8000776:	43d9      	mvns	r1, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800077c:	4313      	orrs	r3, r2
         );
}
 800077e:	4618      	mov	r0, r3
 8000780:	3724      	adds	r7, #36	; 0x24
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff ff4c 	bl	8000630 <__NVIC_SetPriorityGrouping>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
 80007ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007b2:	f7ff ff61 	bl	8000678 <__NVIC_GetPriorityGrouping>
 80007b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	68b9      	ldr	r1, [r7, #8]
 80007bc:	6978      	ldr	r0, [r7, #20]
 80007be:	f7ff ffb1 	bl	8000724 <NVIC_EncodePriority>
 80007c2:	4602      	mov	r2, r0
 80007c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c8:	4611      	mov	r1, r2
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff ff80 	bl	80006d0 <__NVIC_SetPriority>
}
 80007d0:	bf00      	nop
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ff54 	bl	8000694 <__NVIC_EnableIRQ>
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b087      	sub	sp, #28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000802:	e17f      	b.n	8000b04 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	2101      	movs	r1, #1
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	fa01 f303 	lsl.w	r3, r1, r3
 8000810:	4013      	ands	r3, r2
 8000812:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	2b00      	cmp	r3, #0
 8000818:	f000 8171 	beq.w	8000afe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d00b      	beq.n	800083c <HAL_GPIO_Init+0x48>
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	2b02      	cmp	r3, #2
 800082a:	d007      	beq.n	800083c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000830:	2b11      	cmp	r3, #17
 8000832:	d003      	beq.n	800083c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	2b12      	cmp	r3, #18
 800083a:	d130      	bne.n	800089e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	2203      	movs	r2, #3
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	43db      	mvns	r3, r3
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	4013      	ands	r3, r2
 8000852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	68da      	ldr	r2, [r3, #12]
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	fa02 f303 	lsl.w	r3, r2, r3
 8000860:	693a      	ldr	r2, [r7, #16]
 8000862:	4313      	orrs	r3, r2
 8000864:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000872:	2201      	movs	r2, #1
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	43db      	mvns	r3, r3
 800087c:	693a      	ldr	r2, [r7, #16]
 800087e:	4013      	ands	r3, r2
 8000880:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	091b      	lsrs	r3, r3, #4
 8000888:	f003 0201 	and.w	r2, r3, #1
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	4313      	orrs	r3, r2
 8000896:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f003 0303 	and.w	r3, r3, #3
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	d118      	bne.n	80008dc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80008b0:	2201      	movs	r2, #1
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	43db      	mvns	r3, r3
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	4013      	ands	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	08db      	lsrs	r3, r3, #3
 80008c6:	f003 0201 	and.w	r2, r3, #1
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	693a      	ldr	r2, [r7, #16]
 80008da:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	2203      	movs	r2, #3
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	43db      	mvns	r3, r3
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	4013      	ands	r3, r2
 80008f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	689a      	ldr	r2, [r3, #8]
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	693a      	ldr	r2, [r7, #16]
 8000902:	4313      	orrs	r3, r2
 8000904:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	693a      	ldr	r2, [r7, #16]
 800090a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	2b02      	cmp	r3, #2
 8000912:	d003      	beq.n	800091c <HAL_GPIO_Init+0x128>
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	2b12      	cmp	r3, #18
 800091a:	d123      	bne.n	8000964 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	08da      	lsrs	r2, r3, #3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3208      	adds	r2, #8
 8000924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000928:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	f003 0307 	and.w	r3, r3, #7
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	220f      	movs	r2, #15
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	43db      	mvns	r3, r3
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	4013      	ands	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	691a      	ldr	r2, [r3, #16]
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	4313      	orrs	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	08da      	lsrs	r2, r3, #3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3208      	adds	r2, #8
 800095e:	6939      	ldr	r1, [r7, #16]
 8000960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	2203      	movs	r2, #3
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	43db      	mvns	r3, r3
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	4013      	ands	r3, r2
 800097a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	f003 0203 	and.w	r2, r3, #3
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	4313      	orrs	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	f000 80ac 	beq.w	8000afe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	4b5f      	ldr	r3, [pc, #380]	; (8000b24 <HAL_GPIO_Init+0x330>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009aa:	4a5e      	ldr	r2, [pc, #376]	; (8000b24 <HAL_GPIO_Init+0x330>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6613      	str	r3, [r2, #96]	; 0x60
 80009b2:	4b5c      	ldr	r3, [pc, #368]	; (8000b24 <HAL_GPIO_Init+0x330>)
 80009b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009be:	4a5a      	ldr	r2, [pc, #360]	; (8000b28 <HAL_GPIO_Init+0x334>)
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	089b      	lsrs	r3, r3, #2
 80009c4:	3302      	adds	r3, #2
 80009c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	220f      	movs	r2, #15
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43db      	mvns	r3, r3
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	4013      	ands	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009e8:	d025      	beq.n	8000a36 <HAL_GPIO_Init+0x242>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a4f      	ldr	r2, [pc, #316]	; (8000b2c <HAL_GPIO_Init+0x338>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d01f      	beq.n	8000a32 <HAL_GPIO_Init+0x23e>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a4e      	ldr	r2, [pc, #312]	; (8000b30 <HAL_GPIO_Init+0x33c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d019      	beq.n	8000a2e <HAL_GPIO_Init+0x23a>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a4d      	ldr	r2, [pc, #308]	; (8000b34 <HAL_GPIO_Init+0x340>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d013      	beq.n	8000a2a <HAL_GPIO_Init+0x236>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a4c      	ldr	r2, [pc, #304]	; (8000b38 <HAL_GPIO_Init+0x344>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d00d      	beq.n	8000a26 <HAL_GPIO_Init+0x232>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4b      	ldr	r2, [pc, #300]	; (8000b3c <HAL_GPIO_Init+0x348>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d007      	beq.n	8000a22 <HAL_GPIO_Init+0x22e>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a4a      	ldr	r2, [pc, #296]	; (8000b40 <HAL_GPIO_Init+0x34c>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d101      	bne.n	8000a1e <HAL_GPIO_Init+0x22a>
 8000a1a:	2306      	movs	r3, #6
 8000a1c:	e00c      	b.n	8000a38 <HAL_GPIO_Init+0x244>
 8000a1e:	2307      	movs	r3, #7
 8000a20:	e00a      	b.n	8000a38 <HAL_GPIO_Init+0x244>
 8000a22:	2305      	movs	r3, #5
 8000a24:	e008      	b.n	8000a38 <HAL_GPIO_Init+0x244>
 8000a26:	2304      	movs	r3, #4
 8000a28:	e006      	b.n	8000a38 <HAL_GPIO_Init+0x244>
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	e004      	b.n	8000a38 <HAL_GPIO_Init+0x244>
 8000a2e:	2302      	movs	r3, #2
 8000a30:	e002      	b.n	8000a38 <HAL_GPIO_Init+0x244>
 8000a32:	2301      	movs	r3, #1
 8000a34:	e000      	b.n	8000a38 <HAL_GPIO_Init+0x244>
 8000a36:	2300      	movs	r3, #0
 8000a38:	697a      	ldr	r2, [r7, #20]
 8000a3a:	f002 0203 	and.w	r2, r2, #3
 8000a3e:	0092      	lsls	r2, r2, #2
 8000a40:	4093      	lsls	r3, r2
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a48:	4937      	ldr	r1, [pc, #220]	; (8000b28 <HAL_GPIO_Init+0x334>)
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	089b      	lsrs	r3, r3, #2
 8000a4e:	3302      	adds	r3, #2
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a56:	4b3b      	ldr	r3, [pc, #236]	; (8000b44 <HAL_GPIO_Init+0x350>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	4013      	ands	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d003      	beq.n	8000a7a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a7a:	4a32      	ldr	r2, [pc, #200]	; (8000b44 <HAL_GPIO_Init+0x350>)
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000a80:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <HAL_GPIO_Init+0x350>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000aa4:	4a27      	ldr	r2, [pc, #156]	; (8000b44 <HAL_GPIO_Init+0x350>)
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000aaa:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <HAL_GPIO_Init+0x350>)
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d003      	beq.n	8000ace <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ace:	4a1d      	ldr	r2, [pc, #116]	; (8000b44 <HAL_GPIO_Init+0x350>)
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <HAL_GPIO_Init+0x350>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	43db      	mvns	r3, r3
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d003      	beq.n	8000af8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000af8:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <HAL_GPIO_Init+0x350>)
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	3301      	adds	r3, #1
 8000b02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f47f ae78 	bne.w	8000804 <HAL_GPIO_Init+0x10>
  }
}
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop
 8000b18:	371c      	adds	r7, #28
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40010000 	.word	0x40010000
 8000b2c:	48000400 	.word	0x48000400
 8000b30:	48000800 	.word	0x48000800
 8000b34:	48000c00 	.word	0x48000c00
 8000b38:	48001000 	.word	0x48001000
 8000b3c:	48001400 	.word	0x48001400
 8000b40:	48001800 	.word	0x48001800
 8000b44:	40010400 	.word	0x40010400

08000b48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	691a      	ldr	r2, [r3, #16]
 8000b58:	887b      	ldrh	r3, [r7, #2]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d002      	beq.n	8000b66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b60:	2301      	movs	r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
 8000b64:	e001      	b.n	8000b6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b66:	2300      	movs	r3, #0
 8000b68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	807b      	strh	r3, [r7, #2]
 8000b84:	4613      	mov	r3, r2
 8000b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b88:	787b      	ldrb	r3, [r7, #1]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b8e:	887a      	ldrh	r2, [r7, #2]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b94:	e002      	b.n	8000b9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b96:	887a      	ldrh	r2, [r7, #2]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bb4:	695a      	ldr	r2, [r3, #20]
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d006      	beq.n	8000bcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bc0:	88fb      	ldrh	r3, [r7, #6]
 8000bc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 f806 	bl	8000bd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40010400 	.word	0x40010400

08000bd8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <HAL_PWREx_GetVoltageRange+0x18>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	40007000 	.word	0x40007000

08000c0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c1a:	d130      	bne.n	8000c7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c1c:	4b23      	ldr	r3, [pc, #140]	; (8000cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c28:	d038      	beq.n	8000c9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c2a:	4b20      	ldr	r3, [pc, #128]	; (8000cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c32:	4a1e      	ldr	r2, [pc, #120]	; (8000cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2232      	movs	r2, #50	; 0x32
 8000c40:	fb02 f303 	mul.w	r3, r2, r3
 8000c44:	4a1b      	ldr	r2, [pc, #108]	; (8000cb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c46:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4a:	0c9b      	lsrs	r3, r3, #18
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c50:	e002      	b.n	8000c58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	3b01      	subs	r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c5a:	695b      	ldr	r3, [r3, #20]
 8000c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c64:	d102      	bne.n	8000c6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1f2      	bne.n	8000c52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c6e:	695b      	ldr	r3, [r3, #20]
 8000c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c78:	d110      	bne.n	8000c9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	e00f      	b.n	8000c9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c8a:	d007      	beq.n	8000c9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c8c:	4b07      	ldr	r3, [pc, #28]	; (8000cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c94:	4a05      	ldr	r2, [pc, #20]	; (8000cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40007000 	.word	0x40007000
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	431bde83 	.word	0x431bde83

08000cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d101      	bne.n	8000cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e3d4      	b.n	8001474 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cca:	4ba1      	ldr	r3, [pc, #644]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	f003 030c 	and.w	r3, r3, #12
 8000cd2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cd4:	4b9e      	ldr	r3, [pc, #632]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	f003 0303 	and.w	r3, r3, #3
 8000cdc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 0310 	and.w	r3, r3, #16
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f000 80e4 	beq.w	8000eb4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d007      	beq.n	8000d02 <HAL_RCC_OscConfig+0x4a>
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	2b0c      	cmp	r3, #12
 8000cf6:	f040 808b 	bne.w	8000e10 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	f040 8087 	bne.w	8000e10 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d02:	4b93      	ldr	r3, [pc, #588]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d005      	beq.n	8000d1a <HAL_RCC_OscConfig+0x62>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e3ac      	b.n	8001474 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6a1a      	ldr	r2, [r3, #32]
 8000d1e:	4b8c      	ldr	r3, [pc, #560]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0308 	and.w	r3, r3, #8
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d004      	beq.n	8000d34 <HAL_RCC_OscConfig+0x7c>
 8000d2a:	4b89      	ldr	r3, [pc, #548]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d32:	e005      	b.n	8000d40 <HAL_RCC_OscConfig+0x88>
 8000d34:	4b86      	ldr	r3, [pc, #536]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d3a:	091b      	lsrs	r3, r3, #4
 8000d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d223      	bcs.n	8000d8c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a1b      	ldr	r3, [r3, #32]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 fd73 	bl	8001834 <RCC_SetFlashLatencyFromMSIRange>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e38d      	b.n	8001474 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d58:	4b7d      	ldr	r3, [pc, #500]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a7c      	ldr	r2, [pc, #496]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000d5e:	f043 0308 	orr.w	r3, r3, #8
 8000d62:	6013      	str	r3, [r2, #0]
 8000d64:	4b7a      	ldr	r3, [pc, #488]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a1b      	ldr	r3, [r3, #32]
 8000d70:	4977      	ldr	r1, [pc, #476]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000d72:	4313      	orrs	r3, r2
 8000d74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d76:	4b76      	ldr	r3, [pc, #472]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	021b      	lsls	r3, r3, #8
 8000d84:	4972      	ldr	r1, [pc, #456]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000d86:	4313      	orrs	r3, r2
 8000d88:	604b      	str	r3, [r1, #4]
 8000d8a:	e025      	b.n	8000dd8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d8c:	4b70      	ldr	r3, [pc, #448]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a6f      	ldr	r2, [pc, #444]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000d92:	f043 0308 	orr.w	r3, r3, #8
 8000d96:	6013      	str	r3, [r2, #0]
 8000d98:	4b6d      	ldr	r3, [pc, #436]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6a1b      	ldr	r3, [r3, #32]
 8000da4:	496a      	ldr	r1, [pc, #424]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000da6:	4313      	orrs	r3, r2
 8000da8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000daa:	4b69      	ldr	r3, [pc, #420]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	021b      	lsls	r3, r3, #8
 8000db8:	4965      	ldr	r1, [pc, #404]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d109      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a1b      	ldr	r3, [r3, #32]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 fd33 	bl	8001834 <RCC_SetFlashLatencyFromMSIRange>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e34d      	b.n	8001474 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000dd8:	f000 fc36 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	4b5c      	ldr	r3, [pc, #368]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	091b      	lsrs	r3, r3, #4
 8000de4:	f003 030f 	and.w	r3, r3, #15
 8000de8:	495a      	ldr	r1, [pc, #360]	; (8000f54 <HAL_RCC_OscConfig+0x29c>)
 8000dea:	5ccb      	ldrb	r3, [r1, r3]
 8000dec:	f003 031f 	and.w	r3, r3, #31
 8000df0:	fa22 f303 	lsr.w	r3, r2, r3
 8000df4:	4a58      	ldr	r2, [pc, #352]	; (8000f58 <HAL_RCC_OscConfig+0x2a0>)
 8000df6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000df8:	4b58      	ldr	r3, [pc, #352]	; (8000f5c <HAL_RCC_OscConfig+0x2a4>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f002 ff69 	bl	8003cd4 <HAL_InitTick>
 8000e02:	4603      	mov	r3, r0
 8000e04:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d052      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	e331      	b.n	8001474 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d032      	beq.n	8000e7e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e18:	4b4d      	ldr	r3, [pc, #308]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a4c      	ldr	r2, [pc, #304]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e24:	f7ff fbd4 	bl	80005d0 <HAL_GetTick>
 8000e28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e2a:	e008      	b.n	8000e3e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e2c:	f7ff fbd0 	bl	80005d0 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d901      	bls.n	8000e3e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e31a      	b.n	8001474 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e3e:	4b44      	ldr	r3, [pc, #272]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0f0      	beq.n	8000e2c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e4a:	4b41      	ldr	r3, [pc, #260]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a40      	ldr	r2, [pc, #256]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000e50:	f043 0308 	orr.w	r3, r3, #8
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	4b3e      	ldr	r3, [pc, #248]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a1b      	ldr	r3, [r3, #32]
 8000e62:	493b      	ldr	r1, [pc, #236]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000e64:	4313      	orrs	r3, r2
 8000e66:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e68:	4b39      	ldr	r3, [pc, #228]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	69db      	ldr	r3, [r3, #28]
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	4936      	ldr	r1, [pc, #216]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	604b      	str	r3, [r1, #4]
 8000e7c:	e01a      	b.n	8000eb4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e7e:	4b34      	ldr	r3, [pc, #208]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a33      	ldr	r2, [pc, #204]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000e84:	f023 0301 	bic.w	r3, r3, #1
 8000e88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e8a:	f7ff fba1 	bl	80005d0 <HAL_GetTick>
 8000e8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e90:	e008      	b.n	8000ea4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e92:	f7ff fb9d 	bl	80005d0 <HAL_GetTick>
 8000e96:	4602      	mov	r2, r0
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d901      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e2e7      	b.n	8001474 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ea4:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f003 0302 	and.w	r3, r3, #2
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1f0      	bne.n	8000e92 <HAL_RCC_OscConfig+0x1da>
 8000eb0:	e000      	b.n	8000eb4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000eb2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d074      	beq.n	8000faa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	2b08      	cmp	r3, #8
 8000ec4:	d005      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x21a>
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	2b0c      	cmp	r3, #12
 8000eca:	d10e      	bne.n	8000eea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d10b      	bne.n	8000eea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed2:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d064      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x2f0>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d160      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e2c4      	b.n	8001474 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef2:	d106      	bne.n	8000f02 <HAL_RCC_OscConfig+0x24a>
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a15      	ldr	r2, [pc, #84]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	e01d      	b.n	8000f3e <HAL_RCC_OscConfig+0x286>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f0a:	d10c      	bne.n	8000f26 <HAL_RCC_OscConfig+0x26e>
 8000f0c:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000f12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0c      	ldr	r2, [pc, #48]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	e00b      	b.n	8000f3e <HAL_RCC_OscConfig+0x286>
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <HAL_RCC_OscConfig+0x298>)
 8000f38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f3c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d01c      	beq.n	8000f80 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f46:	f7ff fb43 	bl	80005d0 <HAL_GetTick>
 8000f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f4c:	e011      	b.n	8000f72 <HAL_RCC_OscConfig+0x2ba>
 8000f4e:	bf00      	nop
 8000f50:	40021000 	.word	0x40021000
 8000f54:	0800487c 	.word	0x0800487c
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f60:	f7ff fb36 	bl	80005d0 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b64      	cmp	r3, #100	; 0x64
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e280      	b.n	8001474 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f72:	4baf      	ldr	r3, [pc, #700]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d0f0      	beq.n	8000f60 <HAL_RCC_OscConfig+0x2a8>
 8000f7e:	e014      	b.n	8000faa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f80:	f7ff fb26 	bl	80005d0 <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f88:	f7ff fb22 	bl	80005d0 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b64      	cmp	r3, #100	; 0x64
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e26c      	b.n	8001474 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f9a:	4ba5      	ldr	r3, [pc, #660]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1f0      	bne.n	8000f88 <HAL_RCC_OscConfig+0x2d0>
 8000fa6:	e000      	b.n	8000faa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d060      	beq.n	8001078 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	d005      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x310>
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	2b0c      	cmp	r3, #12
 8000fc0:	d119      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d116      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fc8:	4b99      	ldr	r3, [pc, #612]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d005      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x328>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d101      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e249      	b.n	8001474 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe0:	4b93      	ldr	r3, [pc, #588]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	061b      	lsls	r3, r3, #24
 8000fee:	4990      	ldr	r1, [pc, #576]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ff4:	e040      	b.n	8001078 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d023      	beq.n	8001046 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ffe:	4b8c      	ldr	r3, [pc, #560]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a8b      	ldr	r2, [pc, #556]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 8001004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800100a:	f7ff fae1 	bl	80005d0 <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001012:	f7ff fadd 	bl	80005d0 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e227      	b.n	8001474 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001024:	4b82      	ldr	r3, [pc, #520]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0f0      	beq.n	8001012 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001030:	4b7f      	ldr	r3, [pc, #508]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	691b      	ldr	r3, [r3, #16]
 800103c:	061b      	lsls	r3, r3, #24
 800103e:	497c      	ldr	r1, [pc, #496]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 8001040:	4313      	orrs	r3, r2
 8001042:	604b      	str	r3, [r1, #4]
 8001044:	e018      	b.n	8001078 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001046:	4b7a      	ldr	r3, [pc, #488]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a79      	ldr	r2, [pc, #484]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 800104c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001052:	f7ff fabd 	bl	80005d0 <HAL_GetTick>
 8001056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001058:	e008      	b.n	800106c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800105a:	f7ff fab9 	bl	80005d0 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e203      	b.n	8001474 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800106c:	4b70      	ldr	r3, [pc, #448]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1f0      	bne.n	800105a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0308 	and.w	r3, r3, #8
 8001080:	2b00      	cmp	r3, #0
 8001082:	d03c      	beq.n	80010fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d01c      	beq.n	80010c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800108c:	4b68      	ldr	r3, [pc, #416]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 800108e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001092:	4a67      	ldr	r2, [pc, #412]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800109c:	f7ff fa98 	bl	80005d0 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010a4:	f7ff fa94 	bl	80005d0 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e1de      	b.n	8001474 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010b6:	4b5e      	ldr	r3, [pc, #376]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 80010b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0ef      	beq.n	80010a4 <HAL_RCC_OscConfig+0x3ec>
 80010c4:	e01b      	b.n	80010fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010c6:	4b5a      	ldr	r3, [pc, #360]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 80010c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010cc:	4a58      	ldr	r2, [pc, #352]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 80010ce:	f023 0301 	bic.w	r3, r3, #1
 80010d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d6:	f7ff fa7b 	bl	80005d0 <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010de:	f7ff fa77 	bl	80005d0 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e1c1      	b.n	8001474 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010f0:	4b4f      	ldr	r3, [pc, #316]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 80010f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1ef      	bne.n	80010de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	2b00      	cmp	r3, #0
 8001108:	f000 80a6 	beq.w	8001258 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800110c:	2300      	movs	r3, #0
 800110e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001110:	4b47      	ldr	r3, [pc, #284]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 8001112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d10d      	bne.n	8001138 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800111c:	4b44      	ldr	r3, [pc, #272]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 800111e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001120:	4a43      	ldr	r2, [pc, #268]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 8001122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001126:	6593      	str	r3, [r2, #88]	; 0x58
 8001128:	4b41      	ldr	r3, [pc, #260]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 800112a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001134:	2301      	movs	r3, #1
 8001136:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001138:	4b3e      	ldr	r3, [pc, #248]	; (8001234 <HAL_RCC_OscConfig+0x57c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001140:	2b00      	cmp	r3, #0
 8001142:	d118      	bne.n	8001176 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001144:	4b3b      	ldr	r3, [pc, #236]	; (8001234 <HAL_RCC_OscConfig+0x57c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a3a      	ldr	r2, [pc, #232]	; (8001234 <HAL_RCC_OscConfig+0x57c>)
 800114a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001150:	f7ff fa3e 	bl	80005d0 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001158:	f7ff fa3a 	bl	80005d0 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e184      	b.n	8001474 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800116a:	4b32      	ldr	r3, [pc, #200]	; (8001234 <HAL_RCC_OscConfig+0x57c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f0      	beq.n	8001158 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d108      	bne.n	8001190 <HAL_RCC_OscConfig+0x4d8>
 800117e:	4b2c      	ldr	r3, [pc, #176]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 8001180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001184:	4a2a      	ldr	r2, [pc, #168]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800118e:	e024      	b.n	80011da <HAL_RCC_OscConfig+0x522>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	2b05      	cmp	r3, #5
 8001196:	d110      	bne.n	80011ba <HAL_RCC_OscConfig+0x502>
 8001198:	4b25      	ldr	r3, [pc, #148]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 800119a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800119e:	4a24      	ldr	r2, [pc, #144]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011a8:	4b21      	ldr	r3, [pc, #132]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 80011aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ae:	4a20      	ldr	r2, [pc, #128]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011b8:	e00f      	b.n	80011da <HAL_RCC_OscConfig+0x522>
 80011ba:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 80011bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011c0:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 80011c2:	f023 0301 	bic.w	r3, r3, #1
 80011c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 80011cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011d0:	4a17      	ldr	r2, [pc, #92]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 80011d2:	f023 0304 	bic.w	r3, r3, #4
 80011d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d016      	beq.n	8001210 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e2:	f7ff f9f5 	bl	80005d0 <HAL_GetTick>
 80011e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011e8:	e00a      	b.n	8001200 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ea:	f7ff f9f1 	bl	80005d0 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e139      	b.n	8001474 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_RCC_OscConfig+0x578>)
 8001202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0ed      	beq.n	80011ea <HAL_RCC_OscConfig+0x532>
 800120e:	e01a      	b.n	8001246 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001210:	f7ff f9de 	bl	80005d0 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001216:	e00f      	b.n	8001238 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001218:	f7ff f9da 	bl	80005d0 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	f241 3288 	movw	r2, #5000	; 0x1388
 8001226:	4293      	cmp	r3, r2
 8001228:	d906      	bls.n	8001238 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e122      	b.n	8001474 <HAL_RCC_OscConfig+0x7bc>
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000
 8001234:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001238:	4b90      	ldr	r3, [pc, #576]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 800123a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1e8      	bne.n	8001218 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001246:	7ffb      	ldrb	r3, [r7, #31]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d105      	bne.n	8001258 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800124c:	4b8b      	ldr	r3, [pc, #556]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 800124e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001250:	4a8a      	ldr	r2, [pc, #552]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 8001252:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001256:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 8108 	beq.w	8001472 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001266:	2b02      	cmp	r3, #2
 8001268:	f040 80d0 	bne.w	800140c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800126c:	4b83      	ldr	r3, [pc, #524]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	f003 0203 	and.w	r2, r3, #3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127c:	429a      	cmp	r2, r3
 800127e:	d130      	bne.n	80012e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	3b01      	subs	r3, #1
 800128c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800128e:	429a      	cmp	r2, r3
 8001290:	d127      	bne.n	80012e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800129c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800129e:	429a      	cmp	r2, r3
 80012a0:	d11f      	bne.n	80012e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80012ac:	2a07      	cmp	r2, #7
 80012ae:	bf14      	ite	ne
 80012b0:	2201      	movne	r2, #1
 80012b2:	2200      	moveq	r2, #0
 80012b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d113      	bne.n	80012e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c4:	085b      	lsrs	r3, r3, #1
 80012c6:	3b01      	subs	r3, #1
 80012c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d109      	bne.n	80012e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	085b      	lsrs	r3, r3, #1
 80012da:	3b01      	subs	r3, #1
 80012dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012de:	429a      	cmp	r2, r3
 80012e0:	d06e      	beq.n	80013c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	2b0c      	cmp	r3, #12
 80012e6:	d069      	beq.n	80013bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80012e8:	4b64      	ldr	r3, [pc, #400]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d105      	bne.n	8001300 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80012f4:	4b61      	ldr	r3, [pc, #388]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e0b7      	b.n	8001474 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001304:	4b5d      	ldr	r3, [pc, #372]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a5c      	ldr	r2, [pc, #368]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 800130a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800130e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001310:	f7ff f95e 	bl	80005d0 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001318:	f7ff f95a 	bl	80005d0 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e0a4      	b.n	8001474 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800132a:	4b54      	ldr	r3, [pc, #336]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001336:	4b51      	ldr	r3, [pc, #324]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	4b51      	ldr	r3, [pc, #324]	; (8001480 <HAL_RCC_OscConfig+0x7c8>)
 800133c:	4013      	ands	r3, r2
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001346:	3a01      	subs	r2, #1
 8001348:	0112      	lsls	r2, r2, #4
 800134a:	4311      	orrs	r1, r2
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001350:	0212      	lsls	r2, r2, #8
 8001352:	4311      	orrs	r1, r2
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001358:	0852      	lsrs	r2, r2, #1
 800135a:	3a01      	subs	r2, #1
 800135c:	0552      	lsls	r2, r2, #21
 800135e:	4311      	orrs	r1, r2
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001364:	0852      	lsrs	r2, r2, #1
 8001366:	3a01      	subs	r2, #1
 8001368:	0652      	lsls	r2, r2, #25
 800136a:	4311      	orrs	r1, r2
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001370:	0912      	lsrs	r2, r2, #4
 8001372:	0452      	lsls	r2, r2, #17
 8001374:	430a      	orrs	r2, r1
 8001376:	4941      	ldr	r1, [pc, #260]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 8001378:	4313      	orrs	r3, r2
 800137a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800137c:	4b3f      	ldr	r3, [pc, #252]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a3e      	ldr	r2, [pc, #248]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 8001382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001386:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001388:	4b3c      	ldr	r3, [pc, #240]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	4a3b      	ldr	r2, [pc, #236]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 800138e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001392:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001394:	f7ff f91c 	bl	80005d0 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139c:	f7ff f918 	bl	80005d0 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e062      	b.n	8001474 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ae:	4b33      	ldr	r3, [pc, #204]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f0      	beq.n	800139c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013ba:	e05a      	b.n	8001472 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e059      	b.n	8001474 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013c0:	4b2e      	ldr	r3, [pc, #184]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d152      	bne.n	8001472 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80013cc:	4b2b      	ldr	r3, [pc, #172]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a2a      	ldr	r2, [pc, #168]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 80013d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013d8:	4b28      	ldr	r3, [pc, #160]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	4a27      	ldr	r2, [pc, #156]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 80013de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013e4:	f7ff f8f4 	bl	80005d0 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ec:	f7ff f8f0 	bl	80005d0 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e03a      	b.n	8001474 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013fe:	4b1f      	ldr	r3, [pc, #124]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0f0      	beq.n	80013ec <HAL_RCC_OscConfig+0x734>
 800140a:	e032      	b.n	8001472 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	2b0c      	cmp	r3, #12
 8001410:	d02d      	beq.n	800146e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001412:	4b1a      	ldr	r3, [pc, #104]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a19      	ldr	r2, [pc, #100]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 8001418:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800141c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d105      	bne.n	8001436 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800142a:	4b14      	ldr	r3, [pc, #80]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	4a13      	ldr	r2, [pc, #76]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 8001430:	f023 0303 	bic.w	r3, r3, #3
 8001434:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	4a10      	ldr	r2, [pc, #64]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 800143c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001444:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001446:	f7ff f8c3 	bl	80005d0 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800144e:	f7ff f8bf 	bl	80005d0 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e009      	b.n	8001474 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_RCC_OscConfig+0x7c4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1f0      	bne.n	800144e <HAL_RCC_OscConfig+0x796>
 800146c:	e001      	b.n	8001472 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3720      	adds	r7, #32
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40021000 	.word	0x40021000
 8001480:	f99d808c 	.word	0xf99d808c

08001484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e0c8      	b.n	800162a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001498:	4b66      	ldr	r3, [pc, #408]	; (8001634 <HAL_RCC_ClockConfig+0x1b0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d910      	bls.n	80014c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a6:	4b63      	ldr	r3, [pc, #396]	; (8001634 <HAL_RCC_ClockConfig+0x1b0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 0207 	bic.w	r2, r3, #7
 80014ae:	4961      	ldr	r1, [pc, #388]	; (8001634 <HAL_RCC_ClockConfig+0x1b0>)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b6:	4b5f      	ldr	r3, [pc, #380]	; (8001634 <HAL_RCC_ClockConfig+0x1b0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d001      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e0b0      	b.n	800162a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d04c      	beq.n	800156e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d107      	bne.n	80014ec <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014dc:	4b56      	ldr	r3, [pc, #344]	; (8001638 <HAL_RCC_ClockConfig+0x1b4>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d121      	bne.n	800152c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e09e      	b.n	800162a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d107      	bne.n	8001504 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014f4:	4b50      	ldr	r3, [pc, #320]	; (8001638 <HAL_RCC_ClockConfig+0x1b4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d115      	bne.n	800152c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e092      	b.n	800162a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d107      	bne.n	800151c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800150c:	4b4a      	ldr	r3, [pc, #296]	; (8001638 <HAL_RCC_ClockConfig+0x1b4>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d109      	bne.n	800152c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e086      	b.n	800162a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800151c:	4b46      	ldr	r3, [pc, #280]	; (8001638 <HAL_RCC_ClockConfig+0x1b4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e07e      	b.n	800162a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800152c:	4b42      	ldr	r3, [pc, #264]	; (8001638 <HAL_RCC_ClockConfig+0x1b4>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f023 0203 	bic.w	r2, r3, #3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	493f      	ldr	r1, [pc, #252]	; (8001638 <HAL_RCC_ClockConfig+0x1b4>)
 800153a:	4313      	orrs	r3, r2
 800153c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800153e:	f7ff f847 	bl	80005d0 <HAL_GetTick>
 8001542:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001544:	e00a      	b.n	800155c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001546:	f7ff f843 	bl	80005d0 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	f241 3288 	movw	r2, #5000	; 0x1388
 8001554:	4293      	cmp	r3, r2
 8001556:	d901      	bls.n	800155c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e066      	b.n	800162a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155c:	4b36      	ldr	r3, [pc, #216]	; (8001638 <HAL_RCC_ClockConfig+0x1b4>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 020c 	and.w	r2, r3, #12
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	429a      	cmp	r2, r3
 800156c:	d1eb      	bne.n	8001546 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d008      	beq.n	800158c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800157a:	4b2f      	ldr	r3, [pc, #188]	; (8001638 <HAL_RCC_ClockConfig+0x1b4>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	492c      	ldr	r1, [pc, #176]	; (8001638 <HAL_RCC_ClockConfig+0x1b4>)
 8001588:	4313      	orrs	r3, r2
 800158a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800158c:	4b29      	ldr	r3, [pc, #164]	; (8001634 <HAL_RCC_ClockConfig+0x1b0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d210      	bcs.n	80015bc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159a:	4b26      	ldr	r3, [pc, #152]	; (8001634 <HAL_RCC_ClockConfig+0x1b0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f023 0207 	bic.w	r2, r3, #7
 80015a2:	4924      	ldr	r1, [pc, #144]	; (8001634 <HAL_RCC_ClockConfig+0x1b0>)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015aa:	4b22      	ldr	r3, [pc, #136]	; (8001634 <HAL_RCC_ClockConfig+0x1b0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d001      	beq.n	80015bc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e036      	b.n	800162a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d008      	beq.n	80015da <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <HAL_RCC_ClockConfig+0x1b4>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	4918      	ldr	r1, [pc, #96]	; (8001638 <HAL_RCC_ClockConfig+0x1b4>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d009      	beq.n	80015fa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015e6:	4b14      	ldr	r3, [pc, #80]	; (8001638 <HAL_RCC_ClockConfig+0x1b4>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	4910      	ldr	r1, [pc, #64]	; (8001638 <HAL_RCC_ClockConfig+0x1b4>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015fa:	f000 f825 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 80015fe:	4602      	mov	r2, r0
 8001600:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <HAL_RCC_ClockConfig+0x1b4>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	091b      	lsrs	r3, r3, #4
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	490c      	ldr	r1, [pc, #48]	; (800163c <HAL_RCC_ClockConfig+0x1b8>)
 800160c:	5ccb      	ldrb	r3, [r1, r3]
 800160e:	f003 031f 	and.w	r3, r3, #31
 8001612:	fa22 f303 	lsr.w	r3, r2, r3
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800161a:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <HAL_RCC_ClockConfig+0x1c0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f002 fb58 	bl	8003cd4 <HAL_InitTick>
 8001624:	4603      	mov	r3, r0
 8001626:	72fb      	strb	r3, [r7, #11]

  return status;
 8001628:	7afb      	ldrb	r3, [r7, #11]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40022000 	.word	0x40022000
 8001638:	40021000 	.word	0x40021000
 800163c:	0800487c 	.word	0x0800487c
 8001640:	20000008 	.word	0x20000008
 8001644:	20000000 	.word	0x20000000

08001648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	; 0x24
 800164c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
 8001652:	2300      	movs	r3, #0
 8001654:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001656:	4b3e      	ldr	r3, [pc, #248]	; (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001660:	4b3b      	ldr	r3, [pc, #236]	; (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d005      	beq.n	800167c <HAL_RCC_GetSysClockFreq+0x34>
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	2b0c      	cmp	r3, #12
 8001674:	d121      	bne.n	80016ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d11e      	bne.n	80016ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800167c:	4b34      	ldr	r3, [pc, #208]	; (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0308 	and.w	r3, r3, #8
 8001684:	2b00      	cmp	r3, #0
 8001686:	d107      	bne.n	8001698 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001688:	4b31      	ldr	r3, [pc, #196]	; (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 800168a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800168e:	0a1b      	lsrs	r3, r3, #8
 8001690:	f003 030f 	and.w	r3, r3, #15
 8001694:	61fb      	str	r3, [r7, #28]
 8001696:	e005      	b.n	80016a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001698:	4b2d      	ldr	r3, [pc, #180]	; (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	091b      	lsrs	r3, r3, #4
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80016a4:	4a2b      	ldr	r2, [pc, #172]	; (8001754 <HAL_RCC_GetSysClockFreq+0x10c>)
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d10d      	bne.n	80016d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016b8:	e00a      	b.n	80016d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d102      	bne.n	80016c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016c0:	4b25      	ldr	r3, [pc, #148]	; (8001758 <HAL_RCC_GetSysClockFreq+0x110>)
 80016c2:	61bb      	str	r3, [r7, #24]
 80016c4:	e004      	b.n	80016d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d101      	bne.n	80016d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016cc:	4b23      	ldr	r3, [pc, #140]	; (800175c <HAL_RCC_GetSysClockFreq+0x114>)
 80016ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	2b0c      	cmp	r3, #12
 80016d4:	d134      	bne.n	8001740 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016d6:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d003      	beq.n	80016ee <HAL_RCC_GetSysClockFreq+0xa6>
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d003      	beq.n	80016f4 <HAL_RCC_GetSysClockFreq+0xac>
 80016ec:	e005      	b.n	80016fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80016ee:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <HAL_RCC_GetSysClockFreq+0x110>)
 80016f0:	617b      	str	r3, [r7, #20]
      break;
 80016f2:	e005      	b.n	8001700 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_RCC_GetSysClockFreq+0x114>)
 80016f6:	617b      	str	r3, [r7, #20]
      break;
 80016f8:	e002      	b.n	8001700 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	617b      	str	r3, [r7, #20]
      break;
 80016fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	091b      	lsrs	r3, r3, #4
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	3301      	adds	r3, #1
 800170c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	0a1b      	lsrs	r3, r3, #8
 8001714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	fb02 f203 	mul.w	r2, r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	fbb2 f3f3 	udiv	r3, r2, r3
 8001724:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	0e5b      	lsrs	r3, r3, #25
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	3301      	adds	r3, #1
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	fbb2 f3f3 	udiv	r3, r2, r3
 800173e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001740:	69bb      	ldr	r3, [r7, #24]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3724      	adds	r7, #36	; 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000
 8001754:	08004894 	.word	0x08004894
 8001758:	00f42400 	.word	0x00f42400
 800175c:	007a1200 	.word	0x007a1200

08001760 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <HAL_RCC_GetHCLKFreq+0x14>)
 8001766:	681b      	ldr	r3, [r3, #0]
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000008 	.word	0x20000008

08001778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800177c:	f7ff fff0 	bl	8001760 <HAL_RCC_GetHCLKFreq>
 8001780:	4602      	mov	r2, r0
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	0a1b      	lsrs	r3, r3, #8
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	4904      	ldr	r1, [pc, #16]	; (80017a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800178e:	5ccb      	ldrb	r3, [r1, r3]
 8001790:	f003 031f 	and.w	r3, r3, #31
 8001794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001798:	4618      	mov	r0, r3
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40021000 	.word	0x40021000
 80017a0:	0800488c 	.word	0x0800488c

080017a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80017a8:	f7ff ffda 	bl	8001760 <HAL_RCC_GetHCLKFreq>
 80017ac:	4602      	mov	r2, r0
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	0adb      	lsrs	r3, r3, #11
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	4904      	ldr	r1, [pc, #16]	; (80017cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80017ba:	5ccb      	ldrb	r3, [r1, r3]
 80017bc:	f003 031f 	and.w	r3, r3, #31
 80017c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40021000 	.word	0x40021000
 80017cc:	0800488c 	.word	0x0800488c

080017d0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	220f      	movs	r2, #15
 80017de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_RCC_GetClockConfig+0x5c>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 0203 	and.w	r2, r3, #3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <HAL_RCC_GetClockConfig+0x5c>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <HAL_RCC_GetClockConfig+0x5c>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_RCC_GetClockConfig+0x5c>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	08db      	lsrs	r3, r3, #3
 800180a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001812:	4b07      	ldr	r3, [pc, #28]	; (8001830 <HAL_RCC_GetClockConfig+0x60>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0207 	and.w	r2, r3, #7
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	601a      	str	r2, [r3, #0]
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000
 8001830:	40022000 	.word	0x40022000

08001834 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001840:	4b2a      	ldr	r3, [pc, #168]	; (80018ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800184c:	f7ff f9d0 	bl	8000bf0 <HAL_PWREx_GetVoltageRange>
 8001850:	6178      	str	r0, [r7, #20]
 8001852:	e014      	b.n	800187e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001854:	4b25      	ldr	r3, [pc, #148]	; (80018ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001858:	4a24      	ldr	r2, [pc, #144]	; (80018ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800185a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185e:	6593      	str	r3, [r2, #88]	; 0x58
 8001860:	4b22      	ldr	r3, [pc, #136]	; (80018ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800186c:	f7ff f9c0 	bl	8000bf0 <HAL_PWREx_GetVoltageRange>
 8001870:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001872:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001876:	4a1d      	ldr	r2, [pc, #116]	; (80018ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800187c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001884:	d10b      	bne.n	800189e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b80      	cmp	r3, #128	; 0x80
 800188a:	d919      	bls.n	80018c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2ba0      	cmp	r3, #160	; 0xa0
 8001890:	d902      	bls.n	8001898 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001892:	2302      	movs	r3, #2
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	e013      	b.n	80018c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001898:	2301      	movs	r3, #1
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	e010      	b.n	80018c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b80      	cmp	r3, #128	; 0x80
 80018a2:	d902      	bls.n	80018aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80018a4:	2303      	movs	r3, #3
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	e00a      	b.n	80018c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b80      	cmp	r3, #128	; 0x80
 80018ae:	d102      	bne.n	80018b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018b0:	2302      	movs	r3, #2
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	e004      	b.n	80018c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b70      	cmp	r3, #112	; 0x70
 80018ba:	d101      	bne.n	80018c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018bc:	2301      	movs	r3, #1
 80018be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f023 0207 	bic.w	r2, r3, #7
 80018c8:	4909      	ldr	r1, [pc, #36]	; (80018f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018d0:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d001      	beq.n	80018e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40022000 	.word	0x40022000

080018f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80018fc:	2300      	movs	r3, #0
 80018fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001900:	2300      	movs	r3, #0
 8001902:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800190c:	2b00      	cmp	r3, #0
 800190e:	d041      	beq.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001914:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001918:	d02a      	beq.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800191a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800191e:	d824      	bhi.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001920:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001924:	d008      	beq.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001926:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800192a:	d81e      	bhi.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800192c:	2b00      	cmp	r3, #0
 800192e:	d00a      	beq.n	8001946 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001930:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001934:	d010      	beq.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001936:	e018      	b.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001938:	4b86      	ldr	r3, [pc, #536]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	4a85      	ldr	r2, [pc, #532]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800193e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001942:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001944:	e015      	b.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3304      	adds	r3, #4
 800194a:	2100      	movs	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f000 fabb 	bl	8001ec8 <RCCEx_PLLSAI1_Config>
 8001952:	4603      	mov	r3, r0
 8001954:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001956:	e00c      	b.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3320      	adds	r3, #32
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f000 fba6 	bl	80020b0 <RCCEx_PLLSAI2_Config>
 8001964:	4603      	mov	r3, r0
 8001966:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001968:	e003      	b.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	74fb      	strb	r3, [r7, #19]
      break;
 800196e:	e000      	b.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001970:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001972:	7cfb      	ldrb	r3, [r7, #19]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10b      	bne.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001978:	4b76      	ldr	r3, [pc, #472]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800197a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800197e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001986:	4973      	ldr	r1, [pc, #460]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001988:	4313      	orrs	r3, r2
 800198a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800198e:	e001      	b.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001990:	7cfb      	ldrb	r3, [r7, #19]
 8001992:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d041      	beq.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80019a8:	d02a      	beq.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80019aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80019ae:	d824      	bhi.n	80019fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80019b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019b4:	d008      	beq.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80019b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019ba:	d81e      	bhi.n	80019fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00a      	beq.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80019c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c4:	d010      	beq.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80019c6:	e018      	b.n	80019fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80019c8:	4b62      	ldr	r3, [pc, #392]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	4a61      	ldr	r2, [pc, #388]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80019ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80019d4:	e015      	b.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3304      	adds	r3, #4
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 fa73 	bl	8001ec8 <RCCEx_PLLSAI1_Config>
 80019e2:	4603      	mov	r3, r0
 80019e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80019e6:	e00c      	b.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3320      	adds	r3, #32
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 fb5e 	bl	80020b0 <RCCEx_PLLSAI2_Config>
 80019f4:	4603      	mov	r3, r0
 80019f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80019f8:	e003      	b.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	74fb      	strb	r3, [r7, #19]
      break;
 80019fe:	e000      	b.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001a00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001a02:	7cfb      	ldrb	r3, [r7, #19]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10b      	bne.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a08:	4b52      	ldr	r3, [pc, #328]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a16:	494f      	ldr	r1, [pc, #316]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001a1e:	e001      	b.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a20:	7cfb      	ldrb	r3, [r7, #19]
 8001a22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80a0 	beq.w	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a32:	2300      	movs	r3, #0
 8001a34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a36:	4b47      	ldr	r3, [pc, #284]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001a46:	2300      	movs	r3, #0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d00d      	beq.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4c:	4b41      	ldr	r3, [pc, #260]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a50:	4a40      	ldr	r2, [pc, #256]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a56:	6593      	str	r3, [r2, #88]	; 0x58
 8001a58:	4b3e      	ldr	r3, [pc, #248]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a64:	2301      	movs	r3, #1
 8001a66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a68:	4b3b      	ldr	r3, [pc, #236]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a3a      	ldr	r2, [pc, #232]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a74:	f7fe fdac 	bl	80005d0 <HAL_GetTick>
 8001a78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001a7a:	e009      	b.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7c:	f7fe fda8 	bl	80005d0 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d902      	bls.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	74fb      	strb	r3, [r7, #19]
        break;
 8001a8e:	e005      	b.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001a90:	4b31      	ldr	r3, [pc, #196]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0ef      	beq.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001a9c:	7cfb      	ldrb	r3, [r7, #19]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d15c      	bne.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001aa2:	4b2c      	ldr	r3, [pc, #176]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d01f      	beq.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d019      	beq.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ac0:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001acc:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad2:	4a20      	ldr	r2, [pc, #128]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001adc:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae2:	4a1c      	ldr	r2, [pc, #112]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001aec:	4a19      	ldr	r2, [pc, #100]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d016      	beq.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afe:	f7fe fd67 	bl	80005d0 <HAL_GetTick>
 8001b02:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b04:	e00b      	b.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b06:	f7fe fd63 	bl	80005d0 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d902      	bls.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	74fb      	strb	r3, [r7, #19]
            break;
 8001b1c:	e006      	b.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0ec      	beq.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001b2c:	7cfb      	ldrb	r3, [r7, #19]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b42:	4904      	ldr	r1, [pc, #16]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001b4a:	e009      	b.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001b4c:	7cfb      	ldrb	r3, [r7, #19]
 8001b4e:	74bb      	strb	r3, [r7, #18]
 8001b50:	e006      	b.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001b52:	bf00      	nop
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b5c:	7cfb      	ldrb	r3, [r7, #19]
 8001b5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b60:	7c7b      	ldrb	r3, [r7, #17]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d105      	bne.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b66:	4b9e      	ldr	r3, [pc, #632]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6a:	4a9d      	ldr	r2, [pc, #628]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00a      	beq.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b7e:	4b98      	ldr	r3, [pc, #608]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b84:	f023 0203 	bic.w	r2, r3, #3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8c:	4994      	ldr	r1, [pc, #592]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00a      	beq.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ba0:	4b8f      	ldr	r3, [pc, #572]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba6:	f023 020c 	bic.w	r2, r3, #12
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bae:	498c      	ldr	r1, [pc, #560]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00a      	beq.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001bc2:	4b87      	ldr	r3, [pc, #540]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	4983      	ldr	r1, [pc, #524]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00a      	beq.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001be4:	4b7e      	ldr	r3, [pc, #504]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	497b      	ldr	r1, [pc, #492]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0310 	and.w	r3, r3, #16
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00a      	beq.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001c06:	4b76      	ldr	r3, [pc, #472]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c14:	4972      	ldr	r1, [pc, #456]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0320 	and.w	r3, r3, #32
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d00a      	beq.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c28:	4b6d      	ldr	r3, [pc, #436]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c36:	496a      	ldr	r1, [pc, #424]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00a      	beq.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001c4a:	4b65      	ldr	r3, [pc, #404]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c58:	4961      	ldr	r1, [pc, #388]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00a      	beq.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001c6c:	4b5c      	ldr	r3, [pc, #368]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c7a:	4959      	ldr	r1, [pc, #356]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00a      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c8e:	4b54      	ldr	r3, [pc, #336]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c9c:	4950      	ldr	r1, [pc, #320]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00a      	beq.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001cb0:	4b4b      	ldr	r3, [pc, #300]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cbe:	4948      	ldr	r1, [pc, #288]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00a      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001cd2:	4b43      	ldr	r3, [pc, #268]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce0:	493f      	ldr	r1, [pc, #252]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d028      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001cf4:	4b3a      	ldr	r3, [pc, #232]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d02:	4937      	ldr	r1, [pc, #220]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d12:	d106      	bne.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d14:	4b32      	ldr	r3, [pc, #200]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	4a31      	ldr	r2, [pc, #196]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d1e:	60d3      	str	r3, [r2, #12]
 8001d20:	e011      	b.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d2a:	d10c      	bne.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3304      	adds	r3, #4
 8001d30:	2101      	movs	r1, #1
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 f8c8 	bl	8001ec8 <RCCEx_PLLSAI1_Config>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001d3c:	7cfb      	ldrb	r3, [r7, #19]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8001d42:	7cfb      	ldrb	r3, [r7, #19]
 8001d44:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d028      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001d52:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d60:	491f      	ldr	r1, [pc, #124]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d70:	d106      	bne.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d72:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	4a1a      	ldr	r2, [pc, #104]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d7c:	60d3      	str	r3, [r2, #12]
 8001d7e:	e011      	b.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d88:	d10c      	bne.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	2101      	movs	r1, #1
 8001d90:	4618      	mov	r0, r3
 8001d92:	f000 f899 	bl	8001ec8 <RCCEx_PLLSAI1_Config>
 8001d96:	4603      	mov	r3, r0
 8001d98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001d9a:	7cfb      	ldrb	r3, [r7, #19]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8001da0:	7cfb      	ldrb	r3, [r7, #19]
 8001da2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d02b      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001db6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dbe:	4908      	ldr	r1, [pc, #32]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001dce:	d109      	bne.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001dd0:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	4a02      	ldr	r2, [pc, #8]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dda:	60d3      	str	r3, [r2, #12]
 8001ddc:	e014      	b.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001de8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001dec:	d10c      	bne.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3304      	adds	r3, #4
 8001df2:	2101      	movs	r1, #1
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 f867 	bl	8001ec8 <RCCEx_PLLSAI1_Config>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001dfe:	7cfb      	ldrb	r3, [r7, #19]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8001e04:	7cfb      	ldrb	r3, [r7, #19]
 8001e06:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d02f      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e14:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e22:	4928      	ldr	r1, [pc, #160]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e32:	d10d      	bne.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3304      	adds	r3, #4
 8001e38:	2102      	movs	r1, #2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f844 	bl	8001ec8 <RCCEx_PLLSAI1_Config>
 8001e40:	4603      	mov	r3, r0
 8001e42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e44:	7cfb      	ldrb	r3, [r7, #19]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d014      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8001e4a:	7cfb      	ldrb	r3, [r7, #19]
 8001e4c:	74bb      	strb	r3, [r7, #18]
 8001e4e:	e011      	b.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3320      	adds	r3, #32
 8001e5e:	2102      	movs	r1, #2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f000 f925 	bl	80020b0 <RCCEx_PLLSAI2_Config>
 8001e66:	4603      	mov	r3, r0
 8001e68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e6a:	7cfb      	ldrb	r3, [r7, #19]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8001e70:	7cfb      	ldrb	r3, [r7, #19]
 8001e72:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00a      	beq.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001e80:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e86:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e8e:	490d      	ldr	r1, [pc, #52]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00b      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eb2:	4904      	ldr	r1, [pc, #16]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001eba:	7cbb      	ldrb	r3, [r7, #18]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40021000 	.word	0x40021000

08001ec8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001ed6:	4b75      	ldr	r3, [pc, #468]	; (80020ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d018      	beq.n	8001f14 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001ee2:	4b72      	ldr	r3, [pc, #456]	; (80020ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f003 0203 	and.w	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d10d      	bne.n	8001f0e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
       ||
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d009      	beq.n	8001f0e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001efa:	4b6c      	ldr	r3, [pc, #432]	; (80020ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	091b      	lsrs	r3, r3, #4
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
       ||
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d047      	beq.n	8001f9e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	e044      	b.n	8001f9e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d018      	beq.n	8001f4e <RCCEx_PLLSAI1_Config+0x86>
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d825      	bhi.n	8001f6c <RCCEx_PLLSAI1_Config+0xa4>
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d002      	beq.n	8001f2a <RCCEx_PLLSAI1_Config+0x62>
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d009      	beq.n	8001f3c <RCCEx_PLLSAI1_Config+0x74>
 8001f28:	e020      	b.n	8001f6c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001f2a:	4b60      	ldr	r3, [pc, #384]	; (80020ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d11d      	bne.n	8001f72 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f3a:	e01a      	b.n	8001f72 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001f3c:	4b5b      	ldr	r3, [pc, #364]	; (80020ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d116      	bne.n	8001f76 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f4c:	e013      	b.n	8001f76 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001f4e:	4b57      	ldr	r3, [pc, #348]	; (80020ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10f      	bne.n	8001f7a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001f5a:	4b54      	ldr	r3, [pc, #336]	; (80020ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d109      	bne.n	8001f7a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001f6a:	e006      	b.n	8001f7a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f70:	e004      	b.n	8001f7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001f72:	bf00      	nop
 8001f74:	e002      	b.n	8001f7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001f76:	bf00      	nop
 8001f78:	e000      	b.n	8001f7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001f7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10d      	bne.n	8001f9e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001f82:	4b4a      	ldr	r3, [pc, #296]	; (80020ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6819      	ldr	r1, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	011b      	lsls	r3, r3, #4
 8001f96:	430b      	orrs	r3, r1
 8001f98:	4944      	ldr	r1, [pc, #272]	; (80020ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d17d      	bne.n	80020a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001fa4:	4b41      	ldr	r3, [pc, #260]	; (80020ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a40      	ldr	r2, [pc, #256]	; (80020ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8001faa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001fae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fb0:	f7fe fb0e 	bl	80005d0 <HAL_GetTick>
 8001fb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001fb6:	e009      	b.n	8001fcc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001fb8:	f7fe fb0a 	bl	80005d0 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d902      	bls.n	8001fcc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	73fb      	strb	r3, [r7, #15]
        break;
 8001fca:	e005      	b.n	8001fd8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001fcc:	4b37      	ldr	r3, [pc, #220]	; (80020ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1ef      	bne.n	8001fb8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d160      	bne.n	80020a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d111      	bne.n	8002008 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001fe4:	4b31      	ldr	r3, [pc, #196]	; (80020ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8001fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6892      	ldr	r2, [r2, #8]
 8001ff4:	0211      	lsls	r1, r2, #8
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68d2      	ldr	r2, [r2, #12]
 8001ffa:	0912      	lsrs	r2, r2, #4
 8001ffc:	0452      	lsls	r2, r2, #17
 8001ffe:	430a      	orrs	r2, r1
 8002000:	492a      	ldr	r1, [pc, #168]	; (80020ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002002:	4313      	orrs	r3, r2
 8002004:	610b      	str	r3, [r1, #16]
 8002006:	e027      	b.n	8002058 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d112      	bne.n	8002034 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800200e:	4b27      	ldr	r3, [pc, #156]	; (80020ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002016:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6892      	ldr	r2, [r2, #8]
 800201e:	0211      	lsls	r1, r2, #8
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6912      	ldr	r2, [r2, #16]
 8002024:	0852      	lsrs	r2, r2, #1
 8002026:	3a01      	subs	r2, #1
 8002028:	0552      	lsls	r2, r2, #21
 800202a:	430a      	orrs	r2, r1
 800202c:	491f      	ldr	r1, [pc, #124]	; (80020ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800202e:	4313      	orrs	r3, r2
 8002030:	610b      	str	r3, [r1, #16]
 8002032:	e011      	b.n	8002058 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002034:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800203c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6892      	ldr	r2, [r2, #8]
 8002044:	0211      	lsls	r1, r2, #8
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6952      	ldr	r2, [r2, #20]
 800204a:	0852      	lsrs	r2, r2, #1
 800204c:	3a01      	subs	r2, #1
 800204e:	0652      	lsls	r2, r2, #25
 8002050:	430a      	orrs	r2, r1
 8002052:	4916      	ldr	r1, [pc, #88]	; (80020ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002054:	4313      	orrs	r3, r2
 8002056:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002058:	4b14      	ldr	r3, [pc, #80]	; (80020ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a13      	ldr	r2, [pc, #76]	; (80020ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800205e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002062:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002064:	f7fe fab4 	bl	80005d0 <HAL_GetTick>
 8002068:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800206a:	e009      	b.n	8002080 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800206c:	f7fe fab0 	bl	80005d0 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d902      	bls.n	8002080 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	73fb      	strb	r3, [r7, #15]
          break;
 800207e:	e005      	b.n	800208c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002080:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0ef      	beq.n	800206c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d106      	bne.n	80020a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002094:	691a      	ldr	r2, [r3, #16]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	4904      	ldr	r1, [pc, #16]	; (80020ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800209c:	4313      	orrs	r3, r2
 800209e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40021000 	.word	0x40021000

080020b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80020be:	4b6a      	ldr	r3, [pc, #424]	; (8002268 <RCCEx_PLLSAI2_Config+0x1b8>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d018      	beq.n	80020fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80020ca:	4b67      	ldr	r3, [pc, #412]	; (8002268 <RCCEx_PLLSAI2_Config+0x1b8>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	f003 0203 	and.w	r2, r3, #3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d10d      	bne.n	80020f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
       ||
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d009      	beq.n	80020f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80020e2:	4b61      	ldr	r3, [pc, #388]	; (8002268 <RCCEx_PLLSAI2_Config+0x1b8>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	091b      	lsrs	r3, r3, #4
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
       ||
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d047      	beq.n	8002186 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	73fb      	strb	r3, [r7, #15]
 80020fa:	e044      	b.n	8002186 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b03      	cmp	r3, #3
 8002102:	d018      	beq.n	8002136 <RCCEx_PLLSAI2_Config+0x86>
 8002104:	2b03      	cmp	r3, #3
 8002106:	d825      	bhi.n	8002154 <RCCEx_PLLSAI2_Config+0xa4>
 8002108:	2b01      	cmp	r3, #1
 800210a:	d002      	beq.n	8002112 <RCCEx_PLLSAI2_Config+0x62>
 800210c:	2b02      	cmp	r3, #2
 800210e:	d009      	beq.n	8002124 <RCCEx_PLLSAI2_Config+0x74>
 8002110:	e020      	b.n	8002154 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002112:	4b55      	ldr	r3, [pc, #340]	; (8002268 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d11d      	bne.n	800215a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002122:	e01a      	b.n	800215a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002124:	4b50      	ldr	r3, [pc, #320]	; (8002268 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212c:	2b00      	cmp	r3, #0
 800212e:	d116      	bne.n	800215e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002134:	e013      	b.n	800215e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002136:	4b4c      	ldr	r3, [pc, #304]	; (8002268 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10f      	bne.n	8002162 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002142:	4b49      	ldr	r3, [pc, #292]	; (8002268 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d109      	bne.n	8002162 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002152:	e006      	b.n	8002162 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
      break;
 8002158:	e004      	b.n	8002164 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800215a:	bf00      	nop
 800215c:	e002      	b.n	8002164 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800215e:	bf00      	nop
 8002160:	e000      	b.n	8002164 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002162:	bf00      	nop
    }

    if(status == HAL_OK)
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10d      	bne.n	8002186 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800216a:	4b3f      	ldr	r3, [pc, #252]	; (8002268 <RCCEx_PLLSAI2_Config+0x1b8>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6819      	ldr	r1, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	3b01      	subs	r3, #1
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	430b      	orrs	r3, r1
 8002180:	4939      	ldr	r1, [pc, #228]	; (8002268 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002182:	4313      	orrs	r3, r2
 8002184:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d167      	bne.n	800225c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800218c:	4b36      	ldr	r3, [pc, #216]	; (8002268 <RCCEx_PLLSAI2_Config+0x1b8>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a35      	ldr	r2, [pc, #212]	; (8002268 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002196:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002198:	f7fe fa1a 	bl	80005d0 <HAL_GetTick>
 800219c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800219e:	e009      	b.n	80021b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80021a0:	f7fe fa16 	bl	80005d0 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d902      	bls.n	80021b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	73fb      	strb	r3, [r7, #15]
        break;
 80021b2:	e005      	b.n	80021c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80021b4:	4b2c      	ldr	r3, [pc, #176]	; (8002268 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1ef      	bne.n	80021a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d14a      	bne.n	800225c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d111      	bne.n	80021f0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80021cc:	4b26      	ldr	r3, [pc, #152]	; (8002268 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80021d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6892      	ldr	r2, [r2, #8]
 80021dc:	0211      	lsls	r1, r2, #8
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	68d2      	ldr	r2, [r2, #12]
 80021e2:	0912      	lsrs	r2, r2, #4
 80021e4:	0452      	lsls	r2, r2, #17
 80021e6:	430a      	orrs	r2, r1
 80021e8:	491f      	ldr	r1, [pc, #124]	; (8002268 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	614b      	str	r3, [r1, #20]
 80021ee:	e011      	b.n	8002214 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80021f0:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80021f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6892      	ldr	r2, [r2, #8]
 8002200:	0211      	lsls	r1, r2, #8
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6912      	ldr	r2, [r2, #16]
 8002206:	0852      	lsrs	r2, r2, #1
 8002208:	3a01      	subs	r2, #1
 800220a:	0652      	lsls	r2, r2, #25
 800220c:	430a      	orrs	r2, r1
 800220e:	4916      	ldr	r1, [pc, #88]	; (8002268 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002210:	4313      	orrs	r3, r2
 8002212:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002214:	4b14      	ldr	r3, [pc, #80]	; (8002268 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a13      	ldr	r2, [pc, #76]	; (8002268 <RCCEx_PLLSAI2_Config+0x1b8>)
 800221a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002220:	f7fe f9d6 	bl	80005d0 <HAL_GetTick>
 8002224:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002226:	e009      	b.n	800223c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002228:	f7fe f9d2 	bl	80005d0 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d902      	bls.n	800223c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	73fb      	strb	r3, [r7, #15]
          break;
 800223a:	e005      	b.n	8002248 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800223c:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <RCCEx_PLLSAI2_Config+0x1b8>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0ef      	beq.n	8002228 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002250:	695a      	ldr	r2, [r3, #20]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	4904      	ldr	r1, [pc, #16]	; (8002268 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002258:	4313      	orrs	r3, r2
 800225a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800225c:	7bfb      	ldrb	r3, [r7, #15]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40021000 	.word	0x40021000

0800226c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e049      	b.n	8002312 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d106      	bne.n	8002298 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f001 fc9c 	bl	8003bd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3304      	adds	r3, #4
 80022a8:	4619      	mov	r1, r3
 80022aa:	4610      	mov	r0, r2
 80022ac:	f000 fab4 	bl	8002818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b01      	cmp	r3, #1
 800232e:	d001      	beq.n	8002334 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e04f      	b.n	80023d4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a23      	ldr	r2, [pc, #140]	; (80023e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d01d      	beq.n	8002392 <HAL_TIM_Base_Start_IT+0x76>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800235e:	d018      	beq.n	8002392 <HAL_TIM_Base_Start_IT+0x76>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a1f      	ldr	r2, [pc, #124]	; (80023e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d013      	beq.n	8002392 <HAL_TIM_Base_Start_IT+0x76>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a1e      	ldr	r2, [pc, #120]	; (80023e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d00e      	beq.n	8002392 <HAL_TIM_Base_Start_IT+0x76>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a1c      	ldr	r2, [pc, #112]	; (80023ec <HAL_TIM_Base_Start_IT+0xd0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d009      	beq.n	8002392 <HAL_TIM_Base_Start_IT+0x76>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a1b      	ldr	r2, [pc, #108]	; (80023f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d004      	beq.n	8002392 <HAL_TIM_Base_Start_IT+0x76>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a19      	ldr	r2, [pc, #100]	; (80023f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d115      	bne.n	80023be <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	4b17      	ldr	r3, [pc, #92]	; (80023f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800239a:	4013      	ands	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2b06      	cmp	r3, #6
 80023a2:	d015      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0xb4>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023aa:	d011      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0201 	orr.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023bc:	e008      	b.n	80023d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 0201 	orr.w	r2, r2, #1
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	e000      	b.n	80023d2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	40012c00 	.word	0x40012c00
 80023e4:	40000400 	.word	0x40000400
 80023e8:	40000800 	.word	0x40000800
 80023ec:	40000c00 	.word	0x40000c00
 80023f0:	40013400 	.word	0x40013400
 80023f4:	40014000 	.word	0x40014000
 80023f8:	00010007 	.word	0x00010007

080023fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b02      	cmp	r3, #2
 8002410:	d122      	bne.n	8002458 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b02      	cmp	r3, #2
 800241e:	d11b      	bne.n	8002458 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f06f 0202 	mvn.w	r2, #2
 8002428:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f9cb 	bl	80027da <HAL_TIM_IC_CaptureCallback>
 8002444:	e005      	b.n	8002452 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f9bd 	bl	80027c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f9ce 	bl	80027ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	2b04      	cmp	r3, #4
 8002464:	d122      	bne.n	80024ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b04      	cmp	r3, #4
 8002472:	d11b      	bne.n	80024ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0204 	mvn.w	r2, #4
 800247c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2202      	movs	r2, #2
 8002482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f9a1 	bl	80027da <HAL_TIM_IC_CaptureCallback>
 8002498:	e005      	b.n	80024a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f993 	bl	80027c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f9a4 	bl	80027ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d122      	bne.n	8002500 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d11b      	bne.n	8002500 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f06f 0208 	mvn.w	r2, #8
 80024d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2204      	movs	r2, #4
 80024d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f977 	bl	80027da <HAL_TIM_IC_CaptureCallback>
 80024ec:	e005      	b.n	80024fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f969 	bl	80027c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f97a 	bl	80027ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	f003 0310 	and.w	r3, r3, #16
 800250a:	2b10      	cmp	r3, #16
 800250c:	d122      	bne.n	8002554 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	2b10      	cmp	r3, #16
 800251a:	d11b      	bne.n	8002554 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f06f 0210 	mvn.w	r2, #16
 8002524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2208      	movs	r2, #8
 800252a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f94d 	bl	80027da <HAL_TIM_IC_CaptureCallback>
 8002540:	e005      	b.n	800254e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f93f 	bl	80027c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f950 	bl	80027ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b01      	cmp	r3, #1
 8002560:	d10e      	bne.n	8002580 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b01      	cmp	r3, #1
 800256e:	d107      	bne.n	8002580 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f06f 0201 	mvn.w	r2, #1
 8002578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f001 faec 	bl	8003b58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258a:	2b80      	cmp	r3, #128	; 0x80
 800258c:	d10e      	bne.n	80025ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002598:	2b80      	cmp	r3, #128	; 0x80
 800259a:	d107      	bne.n	80025ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 fafc 	bl	8002ba4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ba:	d10e      	bne.n	80025da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c6:	2b80      	cmp	r3, #128	; 0x80
 80025c8:	d107      	bne.n	80025da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80025d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 faef 	bl	8002bb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e4:	2b40      	cmp	r3, #64	; 0x40
 80025e6:	d10e      	bne.n	8002606 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f2:	2b40      	cmp	r3, #64	; 0x40
 80025f4:	d107      	bne.n	8002606 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f8fe 	bl	8002802 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	f003 0320 	and.w	r3, r3, #32
 8002610:	2b20      	cmp	r3, #32
 8002612:	d10e      	bne.n	8002632 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f003 0320 	and.w	r3, r3, #32
 800261e:	2b20      	cmp	r3, #32
 8002620:	d107      	bne.n	8002632 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f06f 0220 	mvn.w	r2, #32
 800262a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 faaf 	bl	8002b90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b084      	sub	sp, #16
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_TIM_ConfigClockSource+0x18>
 800264e:	2302      	movs	r3, #2
 8002650:	e0b5      	b.n	80027be <HAL_TIM_ConfigClockSource+0x184>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2202      	movs	r2, #2
 800265e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002670:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002674:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800267c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800268e:	d03e      	beq.n	800270e <HAL_TIM_ConfigClockSource+0xd4>
 8002690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002694:	f200 8087 	bhi.w	80027a6 <HAL_TIM_ConfigClockSource+0x16c>
 8002698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800269c:	f000 8085 	beq.w	80027aa <HAL_TIM_ConfigClockSource+0x170>
 80026a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a4:	d87f      	bhi.n	80027a6 <HAL_TIM_ConfigClockSource+0x16c>
 80026a6:	2b70      	cmp	r3, #112	; 0x70
 80026a8:	d01a      	beq.n	80026e0 <HAL_TIM_ConfigClockSource+0xa6>
 80026aa:	2b70      	cmp	r3, #112	; 0x70
 80026ac:	d87b      	bhi.n	80027a6 <HAL_TIM_ConfigClockSource+0x16c>
 80026ae:	2b60      	cmp	r3, #96	; 0x60
 80026b0:	d050      	beq.n	8002754 <HAL_TIM_ConfigClockSource+0x11a>
 80026b2:	2b60      	cmp	r3, #96	; 0x60
 80026b4:	d877      	bhi.n	80027a6 <HAL_TIM_ConfigClockSource+0x16c>
 80026b6:	2b50      	cmp	r3, #80	; 0x50
 80026b8:	d03c      	beq.n	8002734 <HAL_TIM_ConfigClockSource+0xfa>
 80026ba:	2b50      	cmp	r3, #80	; 0x50
 80026bc:	d873      	bhi.n	80027a6 <HAL_TIM_ConfigClockSource+0x16c>
 80026be:	2b40      	cmp	r3, #64	; 0x40
 80026c0:	d058      	beq.n	8002774 <HAL_TIM_ConfigClockSource+0x13a>
 80026c2:	2b40      	cmp	r3, #64	; 0x40
 80026c4:	d86f      	bhi.n	80027a6 <HAL_TIM_ConfigClockSource+0x16c>
 80026c6:	2b30      	cmp	r3, #48	; 0x30
 80026c8:	d064      	beq.n	8002794 <HAL_TIM_ConfigClockSource+0x15a>
 80026ca:	2b30      	cmp	r3, #48	; 0x30
 80026cc:	d86b      	bhi.n	80027a6 <HAL_TIM_ConfigClockSource+0x16c>
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	d060      	beq.n	8002794 <HAL_TIM_ConfigClockSource+0x15a>
 80026d2:	2b20      	cmp	r3, #32
 80026d4:	d867      	bhi.n	80027a6 <HAL_TIM_ConfigClockSource+0x16c>
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d05c      	beq.n	8002794 <HAL_TIM_ConfigClockSource+0x15a>
 80026da:	2b10      	cmp	r3, #16
 80026dc:	d05a      	beq.n	8002794 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80026de:	e062      	b.n	80027a6 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	6899      	ldr	r1, [r3, #8]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f000 f9a6 	bl	8002a40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002702:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	609a      	str	r2, [r3, #8]
      break;
 800270c:	e04e      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6899      	ldr	r1, [r3, #8]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f000 f98f 	bl	8002a40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002730:	609a      	str	r2, [r3, #8]
      break;
 8002732:	e03b      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	6859      	ldr	r1, [r3, #4]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	461a      	mov	r2, r3
 8002742:	f000 f903 	bl	800294c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2150      	movs	r1, #80	; 0x50
 800274c:	4618      	mov	r0, r3
 800274e:	f000 f95c 	bl	8002a0a <TIM_ITRx_SetConfig>
      break;
 8002752:	e02b      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	6859      	ldr	r1, [r3, #4]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	461a      	mov	r2, r3
 8002762:	f000 f922 	bl	80029aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2160      	movs	r1, #96	; 0x60
 800276c:	4618      	mov	r0, r3
 800276e:	f000 f94c 	bl	8002a0a <TIM_ITRx_SetConfig>
      break;
 8002772:	e01b      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	6859      	ldr	r1, [r3, #4]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	461a      	mov	r2, r3
 8002782:	f000 f8e3 	bl	800294c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2140      	movs	r1, #64	; 0x40
 800278c:	4618      	mov	r0, r3
 800278e:	f000 f93c 	bl	8002a0a <TIM_ITRx_SetConfig>
      break;
 8002792:	e00b      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4619      	mov	r1, r3
 800279e:	4610      	mov	r0, r2
 80027a0:	f000 f933 	bl	8002a0a <TIM_ITRx_SetConfig>
        break;
 80027a4:	e002      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x172>
      break;
 80027a6:	bf00      	nop
 80027a8:	e000      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x172>
      break;
 80027aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a40      	ldr	r2, [pc, #256]	; (800292c <TIM_Base_SetConfig+0x114>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d013      	beq.n	8002858 <TIM_Base_SetConfig+0x40>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002836:	d00f      	beq.n	8002858 <TIM_Base_SetConfig+0x40>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a3d      	ldr	r2, [pc, #244]	; (8002930 <TIM_Base_SetConfig+0x118>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d00b      	beq.n	8002858 <TIM_Base_SetConfig+0x40>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a3c      	ldr	r2, [pc, #240]	; (8002934 <TIM_Base_SetConfig+0x11c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d007      	beq.n	8002858 <TIM_Base_SetConfig+0x40>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a3b      	ldr	r2, [pc, #236]	; (8002938 <TIM_Base_SetConfig+0x120>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d003      	beq.n	8002858 <TIM_Base_SetConfig+0x40>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a3a      	ldr	r2, [pc, #232]	; (800293c <TIM_Base_SetConfig+0x124>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d108      	bne.n	800286a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a2f      	ldr	r2, [pc, #188]	; (800292c <TIM_Base_SetConfig+0x114>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d01f      	beq.n	80028b2 <TIM_Base_SetConfig+0x9a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002878:	d01b      	beq.n	80028b2 <TIM_Base_SetConfig+0x9a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a2c      	ldr	r2, [pc, #176]	; (8002930 <TIM_Base_SetConfig+0x118>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d017      	beq.n	80028b2 <TIM_Base_SetConfig+0x9a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a2b      	ldr	r2, [pc, #172]	; (8002934 <TIM_Base_SetConfig+0x11c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <TIM_Base_SetConfig+0x9a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a2a      	ldr	r2, [pc, #168]	; (8002938 <TIM_Base_SetConfig+0x120>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00f      	beq.n	80028b2 <TIM_Base_SetConfig+0x9a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a29      	ldr	r2, [pc, #164]	; (800293c <TIM_Base_SetConfig+0x124>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00b      	beq.n	80028b2 <TIM_Base_SetConfig+0x9a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a28      	ldr	r2, [pc, #160]	; (8002940 <TIM_Base_SetConfig+0x128>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d007      	beq.n	80028b2 <TIM_Base_SetConfig+0x9a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a27      	ldr	r2, [pc, #156]	; (8002944 <TIM_Base_SetConfig+0x12c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d003      	beq.n	80028b2 <TIM_Base_SetConfig+0x9a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a26      	ldr	r2, [pc, #152]	; (8002948 <TIM_Base_SetConfig+0x130>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d108      	bne.n	80028c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a10      	ldr	r2, [pc, #64]	; (800292c <TIM_Base_SetConfig+0x114>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d00f      	beq.n	8002910 <TIM_Base_SetConfig+0xf8>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a12      	ldr	r2, [pc, #72]	; (800293c <TIM_Base_SetConfig+0x124>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d00b      	beq.n	8002910 <TIM_Base_SetConfig+0xf8>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a11      	ldr	r2, [pc, #68]	; (8002940 <TIM_Base_SetConfig+0x128>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d007      	beq.n	8002910 <TIM_Base_SetConfig+0xf8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a10      	ldr	r2, [pc, #64]	; (8002944 <TIM_Base_SetConfig+0x12c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d003      	beq.n	8002910 <TIM_Base_SetConfig+0xf8>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a0f      	ldr	r2, [pc, #60]	; (8002948 <TIM_Base_SetConfig+0x130>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d103      	bne.n	8002918 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	615a      	str	r2, [r3, #20]
}
 800291e:	bf00      	nop
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40012c00 	.word	0x40012c00
 8002930:	40000400 	.word	0x40000400
 8002934:	40000800 	.word	0x40000800
 8002938:	40000c00 	.word	0x40000c00
 800293c:	40013400 	.word	0x40013400
 8002940:	40014000 	.word	0x40014000
 8002944:	40014400 	.word	0x40014400
 8002948:	40014800 	.word	0x40014800

0800294c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	f023 0201 	bic.w	r2, r3, #1
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f023 030a 	bic.w	r3, r3, #10
 8002988:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	4313      	orrs	r3, r2
 8002990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	621a      	str	r2, [r3, #32]
}
 800299e:	bf00      	nop
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b087      	sub	sp, #28
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	f023 0210 	bic.w	r2, r3, #16
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	031b      	lsls	r3, r3, #12
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4313      	orrs	r3, r2
 80029de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	621a      	str	r2, [r3, #32]
}
 80029fe:	bf00      	nop
 8002a00:	371c      	adds	r7, #28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b085      	sub	sp, #20
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f043 0307 	orr.w	r3, r3, #7
 8002a2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	609a      	str	r2, [r3, #8]
}
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	021a      	lsls	r2, r3, #8
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	431a      	orrs	r2, r3
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	609a      	str	r2, [r3, #8]
}
 8002a74:	bf00      	nop
 8002a76:	371c      	adds	r7, #28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e068      	b.n	8002b6a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a2e      	ldr	r2, [pc, #184]	; (8002b78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d004      	beq.n	8002acc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a2d      	ldr	r2, [pc, #180]	; (8002b7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d108      	bne.n	8002ade <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002ad2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a1e      	ldr	r2, [pc, #120]	; (8002b78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d01d      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0a:	d018      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a1b      	ldr	r2, [pc, #108]	; (8002b80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d013      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a1a      	ldr	r2, [pc, #104]	; (8002b84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d00e      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a18      	ldr	r2, [pc, #96]	; (8002b88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d009      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a13      	ldr	r2, [pc, #76]	; (8002b7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d004      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a14      	ldr	r2, [pc, #80]	; (8002b8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d10c      	bne.n	8002b58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40012c00 	.word	0x40012c00
 8002b7c:	40013400 	.word	0x40013400
 8002b80:	40000400 	.word	0x40000400
 8002b84:	40000800 	.word	0x40000800
 8002b88:	40000c00 	.word	0x40000c00
 8002b8c:	40014000 	.word	0x40014000

08002b90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e040      	b.n	8002c60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f001 f812 	bl	8003c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2224      	movs	r2, #36	; 0x24
 8002bf8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0201 	bic.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f8c0 	bl	8002d90 <UART_SetConfig>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e022      	b.n	8002c60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 fb3e 	bl	80032a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 fbc5 	bl	80033e8 <UART_CheckIdleState>
 8002c5e:	4603      	mov	r3, r0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08a      	sub	sp, #40	; 0x28
 8002c6c:	af02      	add	r7, sp, #8
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	603b      	str	r3, [r7, #0]
 8002c74:	4613      	mov	r3, r2
 8002c76:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	f040 8082 	bne.w	8002d86 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <HAL_UART_Transmit+0x26>
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e07a      	b.n	8002d88 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <HAL_UART_Transmit+0x38>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e073      	b.n	8002d88 <HAL_UART_Transmit+0x120>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2221      	movs	r2, #33	; 0x21
 8002cb4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cb6:	f7fd fc8b 	bl	80005d0 <HAL_GetTick>
 8002cba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	88fa      	ldrh	r2, [r7, #6]
 8002cc0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	88fa      	ldrh	r2, [r7, #6]
 8002cc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd4:	d108      	bne.n	8002ce8 <HAL_UART_Transmit+0x80>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d104      	bne.n	8002ce8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	e003      	b.n	8002cf0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002cf8:	e02d      	b.n	8002d56 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2200      	movs	r2, #0
 8002d02:	2180      	movs	r1, #128	; 0x80
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 fbb8 	bl	800347a <UART_WaitOnFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e039      	b.n	8002d88 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10b      	bne.n	8002d32 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	881a      	ldrh	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d26:	b292      	uxth	r2, r2
 8002d28:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	61bb      	str	r3, [r7, #24]
 8002d30:	e008      	b.n	8002d44 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	781a      	ldrb	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	b292      	uxth	r2, r2
 8002d3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	3301      	adds	r3, #1
 8002d42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1cb      	bne.n	8002cfa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2140      	movs	r1, #64	; 0x40
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 fb84 	bl	800347a <UART_WaitOnFlagUntilTimeout>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e005      	b.n	8002d88 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	e000      	b.n	8002d88 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002d86:	2302      	movs	r3, #2
  }
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3720      	adds	r7, #32
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d90:	b5b0      	push	{r4, r5, r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	4bad      	ldr	r3, [pc, #692]	; (8003070 <UART_SetConfig+0x2e0>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6812      	ldr	r2, [r2, #0]
 8002dc2:	69f9      	ldr	r1, [r7, #28]
 8002dc4:	430b      	orrs	r3, r1
 8002dc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4aa2      	ldr	r2, [pc, #648]	; (8003074 <UART_SetConfig+0x2e4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d004      	beq.n	8002df8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	69fa      	ldr	r2, [r7, #28]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	69fa      	ldr	r2, [r7, #28]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a99      	ldr	r2, [pc, #612]	; (8003078 <UART_SetConfig+0x2e8>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d121      	bne.n	8002e5a <UART_SetConfig+0xca>
 8002e16:	4b99      	ldr	r3, [pc, #612]	; (800307c <UART_SetConfig+0x2ec>)
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1c:	f003 0303 	and.w	r3, r3, #3
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d817      	bhi.n	8002e54 <UART_SetConfig+0xc4>
 8002e24:	a201      	add	r2, pc, #4	; (adr r2, 8002e2c <UART_SetConfig+0x9c>)
 8002e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2a:	bf00      	nop
 8002e2c:	08002e3d 	.word	0x08002e3d
 8002e30:	08002e49 	.word	0x08002e49
 8002e34:	08002e43 	.word	0x08002e43
 8002e38:	08002e4f 	.word	0x08002e4f
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	76fb      	strb	r3, [r7, #27]
 8002e40:	e0e7      	b.n	8003012 <UART_SetConfig+0x282>
 8002e42:	2302      	movs	r3, #2
 8002e44:	76fb      	strb	r3, [r7, #27]
 8002e46:	e0e4      	b.n	8003012 <UART_SetConfig+0x282>
 8002e48:	2304      	movs	r3, #4
 8002e4a:	76fb      	strb	r3, [r7, #27]
 8002e4c:	e0e1      	b.n	8003012 <UART_SetConfig+0x282>
 8002e4e:	2308      	movs	r3, #8
 8002e50:	76fb      	strb	r3, [r7, #27]
 8002e52:	e0de      	b.n	8003012 <UART_SetConfig+0x282>
 8002e54:	2310      	movs	r3, #16
 8002e56:	76fb      	strb	r3, [r7, #27]
 8002e58:	e0db      	b.n	8003012 <UART_SetConfig+0x282>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a88      	ldr	r2, [pc, #544]	; (8003080 <UART_SetConfig+0x2f0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d132      	bne.n	8002eca <UART_SetConfig+0x13a>
 8002e64:	4b85      	ldr	r3, [pc, #532]	; (800307c <UART_SetConfig+0x2ec>)
 8002e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6a:	f003 030c 	and.w	r3, r3, #12
 8002e6e:	2b0c      	cmp	r3, #12
 8002e70:	d828      	bhi.n	8002ec4 <UART_SetConfig+0x134>
 8002e72:	a201      	add	r2, pc, #4	; (adr r2, 8002e78 <UART_SetConfig+0xe8>)
 8002e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e78:	08002ead 	.word	0x08002ead
 8002e7c:	08002ec5 	.word	0x08002ec5
 8002e80:	08002ec5 	.word	0x08002ec5
 8002e84:	08002ec5 	.word	0x08002ec5
 8002e88:	08002eb9 	.word	0x08002eb9
 8002e8c:	08002ec5 	.word	0x08002ec5
 8002e90:	08002ec5 	.word	0x08002ec5
 8002e94:	08002ec5 	.word	0x08002ec5
 8002e98:	08002eb3 	.word	0x08002eb3
 8002e9c:	08002ec5 	.word	0x08002ec5
 8002ea0:	08002ec5 	.word	0x08002ec5
 8002ea4:	08002ec5 	.word	0x08002ec5
 8002ea8:	08002ebf 	.word	0x08002ebf
 8002eac:	2300      	movs	r3, #0
 8002eae:	76fb      	strb	r3, [r7, #27]
 8002eb0:	e0af      	b.n	8003012 <UART_SetConfig+0x282>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	76fb      	strb	r3, [r7, #27]
 8002eb6:	e0ac      	b.n	8003012 <UART_SetConfig+0x282>
 8002eb8:	2304      	movs	r3, #4
 8002eba:	76fb      	strb	r3, [r7, #27]
 8002ebc:	e0a9      	b.n	8003012 <UART_SetConfig+0x282>
 8002ebe:	2308      	movs	r3, #8
 8002ec0:	76fb      	strb	r3, [r7, #27]
 8002ec2:	e0a6      	b.n	8003012 <UART_SetConfig+0x282>
 8002ec4:	2310      	movs	r3, #16
 8002ec6:	76fb      	strb	r3, [r7, #27]
 8002ec8:	e0a3      	b.n	8003012 <UART_SetConfig+0x282>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a6d      	ldr	r2, [pc, #436]	; (8003084 <UART_SetConfig+0x2f4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d120      	bne.n	8002f16 <UART_SetConfig+0x186>
 8002ed4:	4b69      	ldr	r3, [pc, #420]	; (800307c <UART_SetConfig+0x2ec>)
 8002ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eda:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ede:	2b30      	cmp	r3, #48	; 0x30
 8002ee0:	d013      	beq.n	8002f0a <UART_SetConfig+0x17a>
 8002ee2:	2b30      	cmp	r3, #48	; 0x30
 8002ee4:	d814      	bhi.n	8002f10 <UART_SetConfig+0x180>
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	d009      	beq.n	8002efe <UART_SetConfig+0x16e>
 8002eea:	2b20      	cmp	r3, #32
 8002eec:	d810      	bhi.n	8002f10 <UART_SetConfig+0x180>
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d002      	beq.n	8002ef8 <UART_SetConfig+0x168>
 8002ef2:	2b10      	cmp	r3, #16
 8002ef4:	d006      	beq.n	8002f04 <UART_SetConfig+0x174>
 8002ef6:	e00b      	b.n	8002f10 <UART_SetConfig+0x180>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	76fb      	strb	r3, [r7, #27]
 8002efc:	e089      	b.n	8003012 <UART_SetConfig+0x282>
 8002efe:	2302      	movs	r3, #2
 8002f00:	76fb      	strb	r3, [r7, #27]
 8002f02:	e086      	b.n	8003012 <UART_SetConfig+0x282>
 8002f04:	2304      	movs	r3, #4
 8002f06:	76fb      	strb	r3, [r7, #27]
 8002f08:	e083      	b.n	8003012 <UART_SetConfig+0x282>
 8002f0a:	2308      	movs	r3, #8
 8002f0c:	76fb      	strb	r3, [r7, #27]
 8002f0e:	e080      	b.n	8003012 <UART_SetConfig+0x282>
 8002f10:	2310      	movs	r3, #16
 8002f12:	76fb      	strb	r3, [r7, #27]
 8002f14:	e07d      	b.n	8003012 <UART_SetConfig+0x282>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a5b      	ldr	r2, [pc, #364]	; (8003088 <UART_SetConfig+0x2f8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d120      	bne.n	8002f62 <UART_SetConfig+0x1d2>
 8002f20:	4b56      	ldr	r3, [pc, #344]	; (800307c <UART_SetConfig+0x2ec>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f2a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f2c:	d013      	beq.n	8002f56 <UART_SetConfig+0x1c6>
 8002f2e:	2bc0      	cmp	r3, #192	; 0xc0
 8002f30:	d814      	bhi.n	8002f5c <UART_SetConfig+0x1cc>
 8002f32:	2b80      	cmp	r3, #128	; 0x80
 8002f34:	d009      	beq.n	8002f4a <UART_SetConfig+0x1ba>
 8002f36:	2b80      	cmp	r3, #128	; 0x80
 8002f38:	d810      	bhi.n	8002f5c <UART_SetConfig+0x1cc>
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <UART_SetConfig+0x1b4>
 8002f3e:	2b40      	cmp	r3, #64	; 0x40
 8002f40:	d006      	beq.n	8002f50 <UART_SetConfig+0x1c0>
 8002f42:	e00b      	b.n	8002f5c <UART_SetConfig+0x1cc>
 8002f44:	2300      	movs	r3, #0
 8002f46:	76fb      	strb	r3, [r7, #27]
 8002f48:	e063      	b.n	8003012 <UART_SetConfig+0x282>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	76fb      	strb	r3, [r7, #27]
 8002f4e:	e060      	b.n	8003012 <UART_SetConfig+0x282>
 8002f50:	2304      	movs	r3, #4
 8002f52:	76fb      	strb	r3, [r7, #27]
 8002f54:	e05d      	b.n	8003012 <UART_SetConfig+0x282>
 8002f56:	2308      	movs	r3, #8
 8002f58:	76fb      	strb	r3, [r7, #27]
 8002f5a:	e05a      	b.n	8003012 <UART_SetConfig+0x282>
 8002f5c:	2310      	movs	r3, #16
 8002f5e:	76fb      	strb	r3, [r7, #27]
 8002f60:	e057      	b.n	8003012 <UART_SetConfig+0x282>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a49      	ldr	r2, [pc, #292]	; (800308c <UART_SetConfig+0x2fc>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d125      	bne.n	8002fb8 <UART_SetConfig+0x228>
 8002f6c:	4b43      	ldr	r3, [pc, #268]	; (800307c <UART_SetConfig+0x2ec>)
 8002f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f7a:	d017      	beq.n	8002fac <UART_SetConfig+0x21c>
 8002f7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f80:	d817      	bhi.n	8002fb2 <UART_SetConfig+0x222>
 8002f82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f86:	d00b      	beq.n	8002fa0 <UART_SetConfig+0x210>
 8002f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f8c:	d811      	bhi.n	8002fb2 <UART_SetConfig+0x222>
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <UART_SetConfig+0x20a>
 8002f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f96:	d006      	beq.n	8002fa6 <UART_SetConfig+0x216>
 8002f98:	e00b      	b.n	8002fb2 <UART_SetConfig+0x222>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	76fb      	strb	r3, [r7, #27]
 8002f9e:	e038      	b.n	8003012 <UART_SetConfig+0x282>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	76fb      	strb	r3, [r7, #27]
 8002fa4:	e035      	b.n	8003012 <UART_SetConfig+0x282>
 8002fa6:	2304      	movs	r3, #4
 8002fa8:	76fb      	strb	r3, [r7, #27]
 8002faa:	e032      	b.n	8003012 <UART_SetConfig+0x282>
 8002fac:	2308      	movs	r3, #8
 8002fae:	76fb      	strb	r3, [r7, #27]
 8002fb0:	e02f      	b.n	8003012 <UART_SetConfig+0x282>
 8002fb2:	2310      	movs	r3, #16
 8002fb4:	76fb      	strb	r3, [r7, #27]
 8002fb6:	e02c      	b.n	8003012 <UART_SetConfig+0x282>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a2d      	ldr	r2, [pc, #180]	; (8003074 <UART_SetConfig+0x2e4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d125      	bne.n	800300e <UART_SetConfig+0x27e>
 8002fc2:	4b2e      	ldr	r3, [pc, #184]	; (800307c <UART_SetConfig+0x2ec>)
 8002fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fd0:	d017      	beq.n	8003002 <UART_SetConfig+0x272>
 8002fd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fd6:	d817      	bhi.n	8003008 <UART_SetConfig+0x278>
 8002fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fdc:	d00b      	beq.n	8002ff6 <UART_SetConfig+0x266>
 8002fde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fe2:	d811      	bhi.n	8003008 <UART_SetConfig+0x278>
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <UART_SetConfig+0x260>
 8002fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fec:	d006      	beq.n	8002ffc <UART_SetConfig+0x26c>
 8002fee:	e00b      	b.n	8003008 <UART_SetConfig+0x278>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	76fb      	strb	r3, [r7, #27]
 8002ff4:	e00d      	b.n	8003012 <UART_SetConfig+0x282>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	76fb      	strb	r3, [r7, #27]
 8002ffa:	e00a      	b.n	8003012 <UART_SetConfig+0x282>
 8002ffc:	2304      	movs	r3, #4
 8002ffe:	76fb      	strb	r3, [r7, #27]
 8003000:	e007      	b.n	8003012 <UART_SetConfig+0x282>
 8003002:	2308      	movs	r3, #8
 8003004:	76fb      	strb	r3, [r7, #27]
 8003006:	e004      	b.n	8003012 <UART_SetConfig+0x282>
 8003008:	2310      	movs	r3, #16
 800300a:	76fb      	strb	r3, [r7, #27]
 800300c:	e001      	b.n	8003012 <UART_SetConfig+0x282>
 800300e:	2310      	movs	r3, #16
 8003010:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a17      	ldr	r2, [pc, #92]	; (8003074 <UART_SetConfig+0x2e4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	f040 8087 	bne.w	800312c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800301e:	7efb      	ldrb	r3, [r7, #27]
 8003020:	2b08      	cmp	r3, #8
 8003022:	d837      	bhi.n	8003094 <UART_SetConfig+0x304>
 8003024:	a201      	add	r2, pc, #4	; (adr r2, 800302c <UART_SetConfig+0x29c>)
 8003026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302a:	bf00      	nop
 800302c:	08003051 	.word	0x08003051
 8003030:	08003095 	.word	0x08003095
 8003034:	08003059 	.word	0x08003059
 8003038:	08003095 	.word	0x08003095
 800303c:	0800305f 	.word	0x0800305f
 8003040:	08003095 	.word	0x08003095
 8003044:	08003095 	.word	0x08003095
 8003048:	08003095 	.word	0x08003095
 800304c:	08003067 	.word	0x08003067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003050:	f7fe fb92 	bl	8001778 <HAL_RCC_GetPCLK1Freq>
 8003054:	6178      	str	r0, [r7, #20]
        break;
 8003056:	e022      	b.n	800309e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003058:	4b0d      	ldr	r3, [pc, #52]	; (8003090 <UART_SetConfig+0x300>)
 800305a:	617b      	str	r3, [r7, #20]
        break;
 800305c:	e01f      	b.n	800309e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800305e:	f7fe faf3 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 8003062:	6178      	str	r0, [r7, #20]
        break;
 8003064:	e01b      	b.n	800309e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800306a:	617b      	str	r3, [r7, #20]
        break;
 800306c:	e017      	b.n	800309e <UART_SetConfig+0x30e>
 800306e:	bf00      	nop
 8003070:	efff69f3 	.word	0xefff69f3
 8003074:	40008000 	.word	0x40008000
 8003078:	40013800 	.word	0x40013800
 800307c:	40021000 	.word	0x40021000
 8003080:	40004400 	.word	0x40004400
 8003084:	40004800 	.word	0x40004800
 8003088:	40004c00 	.word	0x40004c00
 800308c:	40005000 	.word	0x40005000
 8003090:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	76bb      	strb	r3, [r7, #26]
        break;
 800309c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80f1 	beq.w	8003288 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	4413      	add	r3, r2
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d305      	bcc.n	80030c2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d902      	bls.n	80030c8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	76bb      	strb	r3, [r7, #26]
 80030c6:	e0df      	b.n	8003288 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f04f 0100 	mov.w	r1, #0
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	020b      	lsls	r3, r1, #8
 80030da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80030de:	0202      	lsls	r2, r0, #8
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	6849      	ldr	r1, [r1, #4]
 80030e4:	0849      	lsrs	r1, r1, #1
 80030e6:	4608      	mov	r0, r1
 80030e8:	f04f 0100 	mov.w	r1, #0
 80030ec:	1814      	adds	r4, r2, r0
 80030ee:	eb43 0501 	adc.w	r5, r3, r1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	461a      	mov	r2, r3
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	4620      	mov	r0, r4
 80030fe:	4629      	mov	r1, r5
 8003100:	f7fd f8be 	bl	8000280 <__aeabi_uldivmod>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4613      	mov	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003112:	d308      	bcc.n	8003126 <UART_SetConfig+0x396>
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800311a:	d204      	bcs.n	8003126 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	60da      	str	r2, [r3, #12]
 8003124:	e0b0      	b.n	8003288 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	76bb      	strb	r3, [r7, #26]
 800312a:	e0ad      	b.n	8003288 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003134:	d15c      	bne.n	80031f0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003136:	7efb      	ldrb	r3, [r7, #27]
 8003138:	2b08      	cmp	r3, #8
 800313a:	d828      	bhi.n	800318e <UART_SetConfig+0x3fe>
 800313c:	a201      	add	r2, pc, #4	; (adr r2, 8003144 <UART_SetConfig+0x3b4>)
 800313e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003142:	bf00      	nop
 8003144:	08003169 	.word	0x08003169
 8003148:	08003171 	.word	0x08003171
 800314c:	08003179 	.word	0x08003179
 8003150:	0800318f 	.word	0x0800318f
 8003154:	0800317f 	.word	0x0800317f
 8003158:	0800318f 	.word	0x0800318f
 800315c:	0800318f 	.word	0x0800318f
 8003160:	0800318f 	.word	0x0800318f
 8003164:	08003187 	.word	0x08003187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003168:	f7fe fb06 	bl	8001778 <HAL_RCC_GetPCLK1Freq>
 800316c:	6178      	str	r0, [r7, #20]
        break;
 800316e:	e013      	b.n	8003198 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003170:	f7fe fb18 	bl	80017a4 <HAL_RCC_GetPCLK2Freq>
 8003174:	6178      	str	r0, [r7, #20]
        break;
 8003176:	e00f      	b.n	8003198 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003178:	4b49      	ldr	r3, [pc, #292]	; (80032a0 <UART_SetConfig+0x510>)
 800317a:	617b      	str	r3, [r7, #20]
        break;
 800317c:	e00c      	b.n	8003198 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800317e:	f7fe fa63 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 8003182:	6178      	str	r0, [r7, #20]
        break;
 8003184:	e008      	b.n	8003198 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800318a:	617b      	str	r3, [r7, #20]
        break;
 800318c:	e004      	b.n	8003198 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	76bb      	strb	r3, [r7, #26]
        break;
 8003196:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d074      	beq.n	8003288 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	005a      	lsls	r2, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	085b      	lsrs	r3, r3, #1
 80031a8:	441a      	add	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b0f      	cmp	r3, #15
 80031ba:	d916      	bls.n	80031ea <UART_SetConfig+0x45a>
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c2:	d212      	bcs.n	80031ea <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	f023 030f 	bic.w	r3, r3, #15
 80031cc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	085b      	lsrs	r3, r3, #1
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	b29a      	uxth	r2, r3
 80031da:	89fb      	ldrh	r3, [r7, #14]
 80031dc:	4313      	orrs	r3, r2
 80031de:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	89fa      	ldrh	r2, [r7, #14]
 80031e6:	60da      	str	r2, [r3, #12]
 80031e8:	e04e      	b.n	8003288 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	76bb      	strb	r3, [r7, #26]
 80031ee:	e04b      	b.n	8003288 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031f0:	7efb      	ldrb	r3, [r7, #27]
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d827      	bhi.n	8003246 <UART_SetConfig+0x4b6>
 80031f6:	a201      	add	r2, pc, #4	; (adr r2, 80031fc <UART_SetConfig+0x46c>)
 80031f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fc:	08003221 	.word	0x08003221
 8003200:	08003229 	.word	0x08003229
 8003204:	08003231 	.word	0x08003231
 8003208:	08003247 	.word	0x08003247
 800320c:	08003237 	.word	0x08003237
 8003210:	08003247 	.word	0x08003247
 8003214:	08003247 	.word	0x08003247
 8003218:	08003247 	.word	0x08003247
 800321c:	0800323f 	.word	0x0800323f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003220:	f7fe faaa 	bl	8001778 <HAL_RCC_GetPCLK1Freq>
 8003224:	6178      	str	r0, [r7, #20]
        break;
 8003226:	e013      	b.n	8003250 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003228:	f7fe fabc 	bl	80017a4 <HAL_RCC_GetPCLK2Freq>
 800322c:	6178      	str	r0, [r7, #20]
        break;
 800322e:	e00f      	b.n	8003250 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003230:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <UART_SetConfig+0x510>)
 8003232:	617b      	str	r3, [r7, #20]
        break;
 8003234:	e00c      	b.n	8003250 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003236:	f7fe fa07 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 800323a:	6178      	str	r0, [r7, #20]
        break;
 800323c:	e008      	b.n	8003250 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800323e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003242:	617b      	str	r3, [r7, #20]
        break;
 8003244:	e004      	b.n	8003250 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003246:	2300      	movs	r3, #0
 8003248:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	76bb      	strb	r3, [r7, #26]
        break;
 800324e:	bf00      	nop
    }

    if (pclk != 0U)
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d018      	beq.n	8003288 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	085a      	lsrs	r2, r3, #1
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	441a      	add	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	fbb2 f3f3 	udiv	r3, r2, r3
 8003268:	b29b      	uxth	r3, r3
 800326a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	2b0f      	cmp	r3, #15
 8003270:	d908      	bls.n	8003284 <UART_SetConfig+0x4f4>
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003278:	d204      	bcs.n	8003284 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	60da      	str	r2, [r3, #12]
 8003282:	e001      	b.n	8003288 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003294:	7ebb      	ldrb	r3, [r7, #26]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3720      	adds	r7, #32
 800329a:	46bd      	mov	sp, r7
 800329c:	bdb0      	pop	{r4, r5, r7, pc}
 800329e:	bf00      	nop
 80032a0:	00f42400 	.word	0x00f42400

080032a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	f003 0310 	and.w	r3, r3, #16
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	f003 0320 	and.w	r3, r3, #32
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01a      	beq.n	80033ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033a2:	d10a      	bne.n	80033ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	605a      	str	r2, [r3, #4]
  }
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033f8:	f7fd f8ea 	bl	80005d0 <HAL_GetTick>
 80033fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b08      	cmp	r3, #8
 800340a:	d10e      	bne.n	800342a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800340c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f82d 	bl	800347a <UART_WaitOnFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e023      	b.n	8003472 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b04      	cmp	r3, #4
 8003436:	d10e      	bne.n	8003456 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003438:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f817 	bl	800347a <UART_WaitOnFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e00d      	b.n	8003472 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2220      	movs	r2, #32
 800345a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2220      	movs	r2, #32
 8003460:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	603b      	str	r3, [r7, #0]
 8003486:	4613      	mov	r3, r2
 8003488:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800348a:	e05e      	b.n	800354a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003492:	d05a      	beq.n	800354a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003494:	f7fd f89c 	bl	80005d0 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d302      	bcc.n	80034aa <UART_WaitOnFlagUntilTimeout+0x30>
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d11b      	bne.n	80034e2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034b8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0201 	bic.w	r2, r2, #1
 80034c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2220      	movs	r2, #32
 80034d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e043      	b.n	800356a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d02c      	beq.n	800354a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034fe:	d124      	bne.n	800354a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003508:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003518:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0201 	bic.w	r2, r2, #1
 8003528:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2220      	movs	r2, #32
 800352e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2220      	movs	r2, #32
 800353a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e00f      	b.n	800356a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	69da      	ldr	r2, [r3, #28]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4013      	ands	r3, r2
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	429a      	cmp	r2, r3
 8003558:	bf0c      	ite	eq
 800355a:	2301      	moveq	r3, #1
 800355c:	2300      	movne	r3, #0
 800355e:	b2db      	uxtb	r3, r3
 8003560:	461a      	mov	r2, r3
 8003562:	79fb      	ldrb	r3, [r7, #7]
 8003564:	429a      	cmp	r2, r3
 8003566:	d091      	beq.n	800348c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <printWelcome>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char buffer[100] = {0};
char tBuff[20];
void printWelcome(){
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
	  sprintf(buffer, "       Welcome to our game! \r \n");
 8003578:	4954      	ldr	r1, [pc, #336]	; (80036cc <printWelcome+0x158>)
 800357a:	4855      	ldr	r0, [pc, #340]	; (80036d0 <printWelcome+0x15c>)
 800357c:	f000 fd10 	bl	8003fa0 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8003580:	4853      	ldr	r0, [pc, #332]	; (80036d0 <printWelcome+0x15c>)
 8003582:	f7fc fe25 	bl	80001d0 <strlen>
 8003586:	4603      	mov	r3, r0
 8003588:	b29a      	uxth	r2, r3
 800358a:	f247 5330 	movw	r3, #30000	; 0x7530
 800358e:	4950      	ldr	r1, [pc, #320]	; (80036d0 <printWelcome+0x15c>)
 8003590:	4850      	ldr	r0, [pc, #320]	; (80036d4 <printWelcome+0x160>)
 8003592:	f7ff fb69 	bl	8002c68 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 8003596:	484e      	ldr	r0, [pc, #312]	; (80036d0 <printWelcome+0x15c>)
 8003598:	f7fc fe1a 	bl	80001d0 <strlen>
 800359c:	4603      	mov	r3, r0
 800359e:	461a      	mov	r2, r3
 80035a0:	2100      	movs	r1, #0
 80035a2:	484b      	ldr	r0, [pc, #300]	; (80036d0 <printWelcome+0x15c>)
 80035a4:	f000 fcf4 	bl	8003f90 <memset>

	  sprintf(buffer, "------------------------------ \r \n");
 80035a8:	494b      	ldr	r1, [pc, #300]	; (80036d8 <printWelcome+0x164>)
 80035aa:	4849      	ldr	r0, [pc, #292]	; (80036d0 <printWelcome+0x15c>)
 80035ac:	f000 fcf8 	bl	8003fa0 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 80035b0:	4847      	ldr	r0, [pc, #284]	; (80036d0 <printWelcome+0x15c>)
 80035b2:	f7fc fe0d 	bl	80001d0 <strlen>
 80035b6:	4603      	mov	r3, r0
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	f247 5330 	movw	r3, #30000	; 0x7530
 80035be:	4944      	ldr	r1, [pc, #272]	; (80036d0 <printWelcome+0x15c>)
 80035c0:	4844      	ldr	r0, [pc, #272]	; (80036d4 <printWelcome+0x160>)
 80035c2:	f7ff fb51 	bl	8002c68 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 80035c6:	4842      	ldr	r0, [pc, #264]	; (80036d0 <printWelcome+0x15c>)
 80035c8:	f7fc fe02 	bl	80001d0 <strlen>
 80035cc:	4603      	mov	r3, r0
 80035ce:	461a      	mov	r2, r3
 80035d0:	2100      	movs	r1, #0
 80035d2:	483f      	ldr	r0, [pc, #252]	; (80036d0 <printWelcome+0x15c>)
 80035d4:	f000 fcdc 	bl	8003f90 <memset>

	  sprintf(buffer, "|                             | \r \n");
 80035d8:	4940      	ldr	r1, [pc, #256]	; (80036dc <printWelcome+0x168>)
 80035da:	483d      	ldr	r0, [pc, #244]	; (80036d0 <printWelcome+0x15c>)
 80035dc:	f000 fce0 	bl	8003fa0 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 80035e0:	483b      	ldr	r0, [pc, #236]	; (80036d0 <printWelcome+0x15c>)
 80035e2:	f7fc fdf5 	bl	80001d0 <strlen>
 80035e6:	4603      	mov	r3, r0
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	f247 5330 	movw	r3, #30000	; 0x7530
 80035ee:	4938      	ldr	r1, [pc, #224]	; (80036d0 <printWelcome+0x15c>)
 80035f0:	4838      	ldr	r0, [pc, #224]	; (80036d4 <printWelcome+0x160>)
 80035f2:	f7ff fb39 	bl	8002c68 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 80035f6:	4836      	ldr	r0, [pc, #216]	; (80036d0 <printWelcome+0x15c>)
 80035f8:	f7fc fdea 	bl	80001d0 <strlen>
 80035fc:	4603      	mov	r3, r0
 80035fe:	461a      	mov	r2, r3
 8003600:	2100      	movs	r1, #0
 8003602:	4833      	ldr	r0, [pc, #204]	; (80036d0 <printWelcome+0x15c>)
 8003604:	f000 fcc4 	bl	8003f90 <memset>

	  sprintf(buffer, "|                             | \r \n");
 8003608:	4934      	ldr	r1, [pc, #208]	; (80036dc <printWelcome+0x168>)
 800360a:	4831      	ldr	r0, [pc, #196]	; (80036d0 <printWelcome+0x15c>)
 800360c:	f000 fcc8 	bl	8003fa0 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8003610:	482f      	ldr	r0, [pc, #188]	; (80036d0 <printWelcome+0x15c>)
 8003612:	f7fc fddd 	bl	80001d0 <strlen>
 8003616:	4603      	mov	r3, r0
 8003618:	b29a      	uxth	r2, r3
 800361a:	f247 5330 	movw	r3, #30000	; 0x7530
 800361e:	492c      	ldr	r1, [pc, #176]	; (80036d0 <printWelcome+0x15c>)
 8003620:	482c      	ldr	r0, [pc, #176]	; (80036d4 <printWelcome+0x160>)
 8003622:	f7ff fb21 	bl	8002c68 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 8003626:	482a      	ldr	r0, [pc, #168]	; (80036d0 <printWelcome+0x15c>)
 8003628:	f7fc fdd2 	bl	80001d0 <strlen>
 800362c:	4603      	mov	r3, r0
 800362e:	461a      	mov	r2, r3
 8003630:	2100      	movs	r1, #0
 8003632:	4827      	ldr	r0, [pc, #156]	; (80036d0 <printWelcome+0x15c>)
 8003634:	f000 fcac 	bl	8003f90 <memset>

	  sprintf(buffer, "|                             | \r \n");
 8003638:	4928      	ldr	r1, [pc, #160]	; (80036dc <printWelcome+0x168>)
 800363a:	4825      	ldr	r0, [pc, #148]	; (80036d0 <printWelcome+0x15c>)
 800363c:	f000 fcb0 	bl	8003fa0 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8003640:	4823      	ldr	r0, [pc, #140]	; (80036d0 <printWelcome+0x15c>)
 8003642:	f7fc fdc5 	bl	80001d0 <strlen>
 8003646:	4603      	mov	r3, r0
 8003648:	b29a      	uxth	r2, r3
 800364a:	f247 5330 	movw	r3, #30000	; 0x7530
 800364e:	4920      	ldr	r1, [pc, #128]	; (80036d0 <printWelcome+0x15c>)
 8003650:	4820      	ldr	r0, [pc, #128]	; (80036d4 <printWelcome+0x160>)
 8003652:	f7ff fb09 	bl	8002c68 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 8003656:	481e      	ldr	r0, [pc, #120]	; (80036d0 <printWelcome+0x15c>)
 8003658:	f7fc fdba 	bl	80001d0 <strlen>
 800365c:	4603      	mov	r3, r0
 800365e:	461a      	mov	r2, r3
 8003660:	2100      	movs	r1, #0
 8003662:	481b      	ldr	r0, [pc, #108]	; (80036d0 <printWelcome+0x15c>)
 8003664:	f000 fc94 	bl	8003f90 <memset>

	  sprintf(buffer, "|                             | \r \n");
 8003668:	491c      	ldr	r1, [pc, #112]	; (80036dc <printWelcome+0x168>)
 800366a:	4819      	ldr	r0, [pc, #100]	; (80036d0 <printWelcome+0x15c>)
 800366c:	f000 fc98 	bl	8003fa0 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8003670:	4817      	ldr	r0, [pc, #92]	; (80036d0 <printWelcome+0x15c>)
 8003672:	f7fc fdad 	bl	80001d0 <strlen>
 8003676:	4603      	mov	r3, r0
 8003678:	b29a      	uxth	r2, r3
 800367a:	f247 5330 	movw	r3, #30000	; 0x7530
 800367e:	4914      	ldr	r1, [pc, #80]	; (80036d0 <printWelcome+0x15c>)
 8003680:	4814      	ldr	r0, [pc, #80]	; (80036d4 <printWelcome+0x160>)
 8003682:	f7ff faf1 	bl	8002c68 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 8003686:	4812      	ldr	r0, [pc, #72]	; (80036d0 <printWelcome+0x15c>)
 8003688:	f7fc fda2 	bl	80001d0 <strlen>
 800368c:	4603      	mov	r3, r0
 800368e:	461a      	mov	r2, r3
 8003690:	2100      	movs	r1, #0
 8003692:	480f      	ldr	r0, [pc, #60]	; (80036d0 <printWelcome+0x15c>)
 8003694:	f000 fc7c 	bl	8003f90 <memset>

	  sprintf(buffer, "------------------------------ \r \n");
 8003698:	490f      	ldr	r1, [pc, #60]	; (80036d8 <printWelcome+0x164>)
 800369a:	480d      	ldr	r0, [pc, #52]	; (80036d0 <printWelcome+0x15c>)
 800369c:	f000 fc80 	bl	8003fa0 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 80036a0:	480b      	ldr	r0, [pc, #44]	; (80036d0 <printWelcome+0x15c>)
 80036a2:	f7fc fd95 	bl	80001d0 <strlen>
 80036a6:	4603      	mov	r3, r0
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	f247 5330 	movw	r3, #30000	; 0x7530
 80036ae:	4908      	ldr	r1, [pc, #32]	; (80036d0 <printWelcome+0x15c>)
 80036b0:	4808      	ldr	r0, [pc, #32]	; (80036d4 <printWelcome+0x160>)
 80036b2:	f7ff fad9 	bl	8002c68 <HAL_UART_Transmit>
	  memset(buffer, 0, strlen(buffer));
 80036b6:	4806      	ldr	r0, [pc, #24]	; (80036d0 <printWelcome+0x15c>)
 80036b8:	f7fc fd8a 	bl	80001d0 <strlen>
 80036bc:	4603      	mov	r3, r0
 80036be:	461a      	mov	r2, r3
 80036c0:	2100      	movs	r1, #0
 80036c2:	4803      	ldr	r0, [pc, #12]	; (80036d0 <printWelcome+0x15c>)
 80036c4:	f000 fc64 	bl	8003f90 <memset>
}
 80036c8:	bf00      	nop
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	08004814 	.word	0x08004814
 80036d0:	2000008c 	.word	0x2000008c
 80036d4:	20000114 	.word	0x20000114
 80036d8:	08004834 	.word	0x08004834
 80036dc:	08004858 	.word	0x08004858

080036e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036e4:	f7fc ff48 	bl	8000578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036e8:	f000 f87c 	bl	80037e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036ec:	f000 f94a 	bl	8003984 <MX_GPIO_Init>
  MX_TIM2_Init();
 80036f0:	f000 f8ca 	bl	8003888 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80036f4:	f000 f916 	bl	8003924 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80036f8:	4837      	ldr	r0, [pc, #220]	; (80037d8 <main+0xf8>)
 80036fa:	f7fe fe0f 	bl	800231c <HAL_TIM_Base_Start_IT>
  printWelcome();
 80036fe:	f7ff ff39 	bl	8003574 <printWelcome>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if( HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin)==1){
 8003702:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003706:	4835      	ldr	r0, [pc, #212]	; (80037dc <main+0xfc>)
 8003708:	f7fd fa1e 	bl	8000b48 <HAL_GPIO_ReadPin>
 800370c:	4603      	mov	r3, r0
 800370e:	2b01      	cmp	r3, #1
 8003710:	d110      	bne.n	8003734 <main+0x54>
	 		  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8003712:	2201      	movs	r2, #1
 8003714:	2120      	movs	r1, #32
 8003716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800371a:	f7fd fa2d 	bl	8000b78 <HAL_GPIO_WritePin>
	 		  HAL_Delay(500);
 800371e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003722:	f7fc ff61 	bl	80005e8 <HAL_Delay>
	 		 HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8003726:	2200      	movs	r2, #0
 8003728:	2120      	movs	r1, #32
 800372a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800372e:	f7fd fa23 	bl	8000b78 <HAL_GPIO_WritePin>
 8003732:	e7e6      	b.n	8003702 <main+0x22>
	 	  }
	  else if( HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin)==1){
 8003734:	2101      	movs	r1, #1
 8003736:	482a      	ldr	r0, [pc, #168]	; (80037e0 <main+0x100>)
 8003738:	f7fd fa06 	bl	8000b48 <HAL_GPIO_ReadPin>
 800373c:	4603      	mov	r3, r0
 800373e:	2b01      	cmp	r3, #1
 8003740:	d110      	bne.n	8003764 <main+0x84>
		  HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 8003742:	2201      	movs	r2, #1
 8003744:	2140      	movs	r1, #64	; 0x40
 8003746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800374a:	f7fd fa15 	bl	8000b78 <HAL_GPIO_WritePin>
		 HAL_Delay(500);
 800374e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003752:	f7fc ff49 	bl	80005e8 <HAL_Delay>
		 HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8003756:	2200      	movs	r2, #0
 8003758:	2140      	movs	r1, #64	; 0x40
 800375a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800375e:	f7fd fa0b 	bl	8000b78 <HAL_GPIO_WritePin>
 8003762:	e7ce      	b.n	8003702 <main+0x22>
	  }
	  else if( HAL_GPIO_ReadPin(PB3_GPIO_Port, PB3_Pin)==1){
 8003764:	2108      	movs	r1, #8
 8003766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800376a:	f7fd f9ed 	bl	8000b48 <HAL_GPIO_ReadPin>
 800376e:	4603      	mov	r3, r0
 8003770:	2b01      	cmp	r3, #1
 8003772:	d112      	bne.n	800379a <main+0xba>
		  HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 8003774:	2201      	movs	r2, #1
 8003776:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800377a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800377e:	f7fd f9fb 	bl	8000b78 <HAL_GPIO_WritePin>
		 	 		  HAL_Delay(500);
 8003782:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003786:	f7fc ff2f 	bl	80005e8 <HAL_Delay>
		 	 		 HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 800378a:	2200      	movs	r2, #0
 800378c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003794:	f7fd f9f0 	bl	8000b78 <HAL_GPIO_WritePin>
 8003798:	e7b3      	b.n	8003702 <main+0x22>
	  }
	  else if( HAL_GPIO_ReadPin(PB4_GPIO_Port, PB4_Pin)==1){
 800379a:	2110      	movs	r1, #16
 800379c:	4810      	ldr	r0, [pc, #64]	; (80037e0 <main+0x100>)
 800379e:	f7fd f9d3 	bl	8000b48 <HAL_GPIO_ReadPin>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d110      	bne.n	80037ca <main+0xea>
		  HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 80037a8:	2201      	movs	r2, #1
 80037aa:	2104      	movs	r1, #4
 80037ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037b0:	f7fd f9e2 	bl	8000b78 <HAL_GPIO_WritePin>
		 	 		  HAL_Delay(500);
 80037b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80037b8:	f7fc ff16 	bl	80005e8 <HAL_Delay>
		 	 		 HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 80037bc:	2200      	movs	r2, #0
 80037be:	2104      	movs	r1, #4
 80037c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037c4:	f7fd f9d8 	bl	8000b78 <HAL_GPIO_WritePin>
 80037c8:	e79b      	b.n	8003702 <main+0x22>
	  }
	  else{
		  HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
 80037ca:	2200      	movs	r2, #0
 80037cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037d0:	4803      	ldr	r0, [pc, #12]	; (80037e0 <main+0x100>)
 80037d2:	f7fd f9d1 	bl	8000b78 <HAL_GPIO_WritePin>
	  if( HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin)==1){
 80037d6:	e794      	b.n	8003702 <main+0x22>
 80037d8:	20000198 	.word	0x20000198
 80037dc:	48000c00 	.word	0x48000c00
 80037e0:	48000400 	.word	0x48000400

080037e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b096      	sub	sp, #88	; 0x58
 80037e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037ea:	f107 0314 	add.w	r3, r7, #20
 80037ee:	2244      	movs	r2, #68	; 0x44
 80037f0:	2100      	movs	r1, #0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 fbcc 	bl	8003f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037f8:	463b      	mov	r3, r7
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	605a      	str	r2, [r3, #4]
 8003800:	609a      	str	r2, [r3, #8]
 8003802:	60da      	str	r2, [r3, #12]
 8003804:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003806:	f44f 7000 	mov.w	r0, #512	; 0x200
 800380a:	f7fd f9ff 	bl	8000c0c <HAL_PWREx_ControlVoltageScaling>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003814:	f000 f9b2 	bl	8003b7c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003818:	2310      	movs	r3, #16
 800381a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800381c:	2301      	movs	r3, #1
 800381e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003820:	2300      	movs	r3, #0
 8003822:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003824:	2360      	movs	r3, #96	; 0x60
 8003826:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003828:	2302      	movs	r3, #2
 800382a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800382c:	2301      	movs	r3, #1
 800382e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003830:	2301      	movs	r3, #1
 8003832:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003834:	2328      	movs	r3, #40	; 0x28
 8003836:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003838:	2307      	movs	r3, #7
 800383a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800383c:	2302      	movs	r3, #2
 800383e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003840:	2302      	movs	r3, #2
 8003842:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003844:	f107 0314 	add.w	r3, r7, #20
 8003848:	4618      	mov	r0, r3
 800384a:	f7fd fa35 	bl	8000cb8 <HAL_RCC_OscConfig>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8003854:	f000 f992 	bl	8003b7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003858:	230f      	movs	r3, #15
 800385a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800385c:	2303      	movs	r3, #3
 800385e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003860:	2300      	movs	r3, #0
 8003862:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003864:	2300      	movs	r3, #0
 8003866:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003868:	2300      	movs	r3, #0
 800386a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800386c:	463b      	mov	r3, r7
 800386e:	2104      	movs	r1, #4
 8003870:	4618      	mov	r0, r3
 8003872:	f7fd fe07 	bl	8001484 <HAL_RCC_ClockConfig>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800387c:	f000 f97e 	bl	8003b7c <Error_Handler>
  }
}
 8003880:	bf00      	nop
 8003882:	3758      	adds	r7, #88	; 0x58
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800388e:	f107 0310 	add.w	r3, r7, #16
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	605a      	str	r2, [r3, #4]
 8003898:	609a      	str	r2, [r3, #8]
 800389a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800389c:	1d3b      	adds	r3, r7, #4
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	605a      	str	r2, [r3, #4]
 80038a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80038a6:	4b1e      	ldr	r3, [pc, #120]	; (8003920 <MX_TIM2_Init+0x98>)
 80038a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80038ae:	4b1c      	ldr	r3, [pc, #112]	; (8003920 <MX_TIM2_Init+0x98>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038b4:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <MX_TIM2_Init+0x98>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 80038ba:	4b19      	ldr	r3, [pc, #100]	; (8003920 <MX_TIM2_Init+0x98>)
 80038bc:	f240 7216 	movw	r2, #1814	; 0x716
 80038c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038c2:	4b17      	ldr	r3, [pc, #92]	; (8003920 <MX_TIM2_Init+0x98>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038c8:	4b15      	ldr	r3, [pc, #84]	; (8003920 <MX_TIM2_Init+0x98>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80038ce:	4814      	ldr	r0, [pc, #80]	; (8003920 <MX_TIM2_Init+0x98>)
 80038d0:	f7fe fccc 	bl	800226c <HAL_TIM_Base_Init>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80038da:	f000 f94f 	bl	8003b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80038e4:	f107 0310 	add.w	r3, r7, #16
 80038e8:	4619      	mov	r1, r3
 80038ea:	480d      	ldr	r0, [pc, #52]	; (8003920 <MX_TIM2_Init+0x98>)
 80038ec:	f7fe fea5 	bl	800263a <HAL_TIM_ConfigClockSource>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80038f6:	f000 f941 	bl	8003b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80038fa:	2320      	movs	r3, #32
 80038fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003902:	1d3b      	adds	r3, r7, #4
 8003904:	4619      	mov	r1, r3
 8003906:	4806      	ldr	r0, [pc, #24]	; (8003920 <MX_TIM2_Init+0x98>)
 8003908:	f7ff f8ba 	bl	8002a80 <HAL_TIMEx_MasterConfigSynchronization>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003912:	f000 f933 	bl	8003b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003916:	bf00      	nop
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20000198 	.word	0x20000198

08003924 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003928:	4b14      	ldr	r3, [pc, #80]	; (800397c <MX_USART1_UART_Init+0x58>)
 800392a:	4a15      	ldr	r2, [pc, #84]	; (8003980 <MX_USART1_UART_Init+0x5c>)
 800392c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800392e:	4b13      	ldr	r3, [pc, #76]	; (800397c <MX_USART1_UART_Init+0x58>)
 8003930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003934:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003936:	4b11      	ldr	r3, [pc, #68]	; (800397c <MX_USART1_UART_Init+0x58>)
 8003938:	2200      	movs	r2, #0
 800393a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800393c:	4b0f      	ldr	r3, [pc, #60]	; (800397c <MX_USART1_UART_Init+0x58>)
 800393e:	2200      	movs	r2, #0
 8003940:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003942:	4b0e      	ldr	r3, [pc, #56]	; (800397c <MX_USART1_UART_Init+0x58>)
 8003944:	2200      	movs	r2, #0
 8003946:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003948:	4b0c      	ldr	r3, [pc, #48]	; (800397c <MX_USART1_UART_Init+0x58>)
 800394a:	220c      	movs	r2, #12
 800394c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800394e:	4b0b      	ldr	r3, [pc, #44]	; (800397c <MX_USART1_UART_Init+0x58>)
 8003950:	2200      	movs	r2, #0
 8003952:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003954:	4b09      	ldr	r3, [pc, #36]	; (800397c <MX_USART1_UART_Init+0x58>)
 8003956:	2200      	movs	r2, #0
 8003958:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800395a:	4b08      	ldr	r3, [pc, #32]	; (800397c <MX_USART1_UART_Init+0x58>)
 800395c:	2200      	movs	r2, #0
 800395e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003960:	4b06      	ldr	r3, [pc, #24]	; (800397c <MX_USART1_UART_Init+0x58>)
 8003962:	2200      	movs	r2, #0
 8003964:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003966:	4805      	ldr	r0, [pc, #20]	; (800397c <MX_USART1_UART_Init+0x58>)
 8003968:	f7ff f930 	bl	8002bcc <HAL_UART_Init>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003972:	f000 f903 	bl	8003b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20000114 	.word	0x20000114
 8003980:	40013800 	.word	0x40013800

08003984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b08a      	sub	sp, #40	; 0x28
 8003988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800398a:	f107 0314 	add.w	r3, r7, #20
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	605a      	str	r2, [r3, #4]
 8003994:	609a      	str	r2, [r3, #8]
 8003996:	60da      	str	r2, [r3, #12]
 8003998:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800399a:	4b69      	ldr	r3, [pc, #420]	; (8003b40 <MX_GPIO_Init+0x1bc>)
 800399c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399e:	4a68      	ldr	r2, [pc, #416]	; (8003b40 <MX_GPIO_Init+0x1bc>)
 80039a0:	f043 0310 	orr.w	r3, r3, #16
 80039a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039a6:	4b66      	ldr	r3, [pc, #408]	; (8003b40 <MX_GPIO_Init+0x1bc>)
 80039a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039aa:	f003 0310 	and.w	r3, r3, #16
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039b2:	4b63      	ldr	r3, [pc, #396]	; (8003b40 <MX_GPIO_Init+0x1bc>)
 80039b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b6:	4a62      	ldr	r2, [pc, #392]	; (8003b40 <MX_GPIO_Init+0x1bc>)
 80039b8:	f043 0304 	orr.w	r3, r3, #4
 80039bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039be:	4b60      	ldr	r3, [pc, #384]	; (8003b40 <MX_GPIO_Init+0x1bc>)
 80039c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ca:	4b5d      	ldr	r3, [pc, #372]	; (8003b40 <MX_GPIO_Init+0x1bc>)
 80039cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ce:	4a5c      	ldr	r2, [pc, #368]	; (8003b40 <MX_GPIO_Init+0x1bc>)
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039d6:	4b5a      	ldr	r3, [pc, #360]	; (8003b40 <MX_GPIO_Init+0x1bc>)
 80039d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	60bb      	str	r3, [r7, #8]
 80039e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039e2:	4b57      	ldr	r3, [pc, #348]	; (8003b40 <MX_GPIO_Init+0x1bc>)
 80039e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e6:	4a56      	ldr	r2, [pc, #344]	; (8003b40 <MX_GPIO_Init+0x1bc>)
 80039e8:	f043 0302 	orr.w	r3, r3, #2
 80039ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039ee:	4b54      	ldr	r3, [pc, #336]	; (8003b40 <MX_GPIO_Init+0x1bc>)
 80039f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	607b      	str	r3, [r7, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039fa:	4b51      	ldr	r3, [pc, #324]	; (8003b40 <MX_GPIO_Init+0x1bc>)
 80039fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fe:	4a50      	ldr	r2, [pc, #320]	; (8003b40 <MX_GPIO_Init+0x1bc>)
 8003a00:	f043 0308 	orr.w	r3, r3, #8
 8003a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a06:	4b4e      	ldr	r3, [pc, #312]	; (8003b40 <MX_GPIO_Init+0x1bc>)
 8003a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	603b      	str	r3, [r7, #0]
 8003a10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8003a12:	2200      	movs	r2, #0
 8003a14:	2108      	movs	r1, #8
 8003a16:	484b      	ldr	r0, [pc, #300]	; (8003b44 <MX_GPIO_Init+0x1c0>)
 8003a18:	f7fd f8ae 	bl	8000b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f248 0164 	movw	r1, #32868	; 0x8064
 8003a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a26:	f7fd f8a7 	bl	8000b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a30:	4845      	ldr	r0, [pc, #276]	; (8003b48 <MX_GPIO_Init+0x1c4>)
 8003a32:	f7fd f8a1 	bl	8000b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8003a36:	2308      	movs	r3, #8
 8003a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a42:	2300      	movs	r3, #0
 8003a44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8003a46:	f107 0314 	add.w	r3, r7, #20
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	483d      	ldr	r0, [pc, #244]	; (8003b44 <MX_GPIO_Init+0x1c0>)
 8003a4e:	f7fc fed1 	bl	80007f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BluePB_Pin */
  GPIO_InitStruct.Pin = BluePB_Pin;
 8003a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a58:	4b3c      	ldr	r3, [pc, #240]	; (8003b4c <MX_GPIO_Init+0x1c8>)
 8003a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BluePB_GPIO_Port, &GPIO_InitStruct);
 8003a60:	f107 0314 	add.w	r3, r7, #20
 8003a64:	4619      	mov	r1, r3
 8003a66:	483a      	ldr	r0, [pc, #232]	; (8003b50 <MX_GPIO_Init+0x1cc>)
 8003a68:	f7fc fec4 	bl	80007f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8003a6c:	f248 0364 	movw	r3, #32868	; 0x8064
 8003a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a72:	2301      	movs	r3, #1
 8003a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a7e:	f107 0314 	add.w	r3, r7, #20
 8003a82:	4619      	mov	r1, r3
 8003a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a88:	f7fc feb4 	bl	80007f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3_Pin */
  GPIO_InitStruct.Pin = PB3_Pin;
 8003a8c:	2308      	movs	r3, #8
 8003a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a90:	4b2e      	ldr	r3, [pc, #184]	; (8003b4c <MX_GPIO_Init+0x1c8>)
 8003a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB3_GPIO_Port, &GPIO_InitStruct);
 8003a98:	f107 0314 	add.w	r3, r7, #20
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003aa2:	f7fc fea7 	bl	80007f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003aa6:	2310      	movs	r3, #16
 8003aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab2:	f107 0314 	add.w	r3, r7, #20
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003abc:	f7fc fe9a 	bl	80007f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2_Pin PB1 PB4_Pin */
  GPIO_InitStruct.Pin = PB2_Pin|GPIO_PIN_1|PB4_Pin;
 8003ac0:	2313      	movs	r3, #19
 8003ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ac4:	4b21      	ldr	r3, [pc, #132]	; (8003b4c <MX_GPIO_Init+0x1c8>)
 8003ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003acc:	f107 0314 	add.w	r3, r7, #20
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	481d      	ldr	r0, [pc, #116]	; (8003b48 <MX_GPIO_Init+0x1c4>)
 8003ad4:	f7fc fe8e 	bl	80007f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROW1_Pin */
  GPIO_InitStruct.Pin = ROW1_Pin;
 8003ad8:	2304      	movs	r3, #4
 8003ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROW1_GPIO_Port, &GPIO_InitStruct);
 8003ae4:	f107 0314 	add.w	r3, r7, #20
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4817      	ldr	r0, [pc, #92]	; (8003b48 <MX_GPIO_Init+0x1c4>)
 8003aec:	f7fc fe82 	bl	80007f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003af0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003af6:	2301      	movs	r3, #1
 8003af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afe:	2300      	movs	r3, #0
 8003b00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003b02:	f107 0314 	add.w	r3, r7, #20
 8003b06:	4619      	mov	r1, r3
 8003b08:	480f      	ldr	r0, [pc, #60]	; (8003b48 <MX_GPIO_Init+0x1c4>)
 8003b0a:	f7fc fe73 	bl	80007f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1_Pin */
  GPIO_InitStruct.Pin = PB1_Pin;
 8003b0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b14:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <MX_GPIO_Init+0x1c8>)
 8003b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB1_GPIO_Port, &GPIO_InitStruct);
 8003b1c:	f107 0314 	add.w	r3, r7, #20
 8003b20:	4619      	mov	r1, r3
 8003b22:	480c      	ldr	r0, [pc, #48]	; (8003b54 <MX_GPIO_Init+0x1d0>)
 8003b24:	f7fc fe66 	bl	80007f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003b28:	2200      	movs	r2, #0
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	2028      	movs	r0, #40	; 0x28
 8003b2e:	f7fc fe37 	bl	80007a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003b32:	2028      	movs	r0, #40	; 0x28
 8003b34:	f7fc fe50 	bl	80007d8 <HAL_NVIC_EnableIRQ>

}
 8003b38:	bf00      	nop
 8003b3a:	3728      	adds	r7, #40	; 0x28
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40021000 	.word	0x40021000
 8003b44:	48001000 	.word	0x48001000
 8003b48:	48000400 	.word	0x48000400
 8003b4c:	10110000 	.word	0x10110000
 8003b50:	48000800 	.word	0x48000800
 8003b54:	48000c00 	.word	0x48000c00

08003b58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a04      	ldr	r2, [pc, #16]	; (8003b78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d101      	bne.n	8003b6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003b6a:	f7fc fd1d 	bl	80005a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40014800 	.word	0x40014800

08003b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b80:	b672      	cpsid	i
}
 8003b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b84:	e7fe      	b.n	8003b84 <Error_Handler+0x8>
	...

08003b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b8e:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <HAL_MspInit+0x44>)
 8003b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b92:	4a0e      	ldr	r2, [pc, #56]	; (8003bcc <HAL_MspInit+0x44>)
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	6613      	str	r3, [r2, #96]	; 0x60
 8003b9a:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <HAL_MspInit+0x44>)
 8003b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	607b      	str	r3, [r7, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ba6:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <HAL_MspInit+0x44>)
 8003ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003baa:	4a08      	ldr	r2, [pc, #32]	; (8003bcc <HAL_MspInit+0x44>)
 8003bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8003bb2:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <HAL_MspInit+0x44>)
 8003bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40021000 	.word	0x40021000

08003bd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be0:	d113      	bne.n	8003c0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003be2:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <HAL_TIM_Base_MspInit+0x44>)
 8003be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be6:	4a0b      	ldr	r2, [pc, #44]	; (8003c14 <HAL_TIM_Base_MspInit+0x44>)
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	6593      	str	r3, [r2, #88]	; 0x58
 8003bee:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <HAL_TIM_Base_MspInit+0x44>)
 8003bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	201c      	movs	r0, #28
 8003c00:	f7fc fdce 	bl	80007a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003c04:	201c      	movs	r0, #28
 8003c06:	f7fc fde7 	bl	80007d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003c0a:	bf00      	nop
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40021000 	.word	0x40021000

08003c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b0ac      	sub	sp, #176	; 0xb0
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	609a      	str	r2, [r3, #8]
 8003c2c:	60da      	str	r2, [r3, #12]
 8003c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c30:	f107 0314 	add.w	r3, r7, #20
 8003c34:	2288      	movs	r2, #136	; 0x88
 8003c36:	2100      	movs	r1, #0
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 f9a9 	bl	8003f90 <memset>
  if(huart->Instance==USART1)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a21      	ldr	r2, [pc, #132]	; (8003cc8 <HAL_UART_MspInit+0xb0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d13a      	bne.n	8003cbe <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c50:	f107 0314 	add.w	r3, r7, #20
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fd fe4d 	bl	80018f4 <HAL_RCCEx_PeriphCLKConfig>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003c60:	f7ff ff8c 	bl	8003b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c64:	4b19      	ldr	r3, [pc, #100]	; (8003ccc <HAL_UART_MspInit+0xb4>)
 8003c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c68:	4a18      	ldr	r2, [pc, #96]	; (8003ccc <HAL_UART_MspInit+0xb4>)
 8003c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c6e:	6613      	str	r3, [r2, #96]	; 0x60
 8003c70:	4b16      	ldr	r3, [pc, #88]	; (8003ccc <HAL_UART_MspInit+0xb4>)
 8003c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c78:	613b      	str	r3, [r7, #16]
 8003c7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c7c:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <HAL_UART_MspInit+0xb4>)
 8003c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c80:	4a12      	ldr	r2, [pc, #72]	; (8003ccc <HAL_UART_MspInit+0xb4>)
 8003c82:	f043 0302 	orr.w	r3, r3, #2
 8003c86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c88:	4b10      	ldr	r3, [pc, #64]	; (8003ccc <HAL_UART_MspInit+0xb4>)
 8003c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c94:	23c0      	movs	r3, #192	; 0xc0
 8003c96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003cac:	2307      	movs	r3, #7
 8003cae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cb2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4805      	ldr	r0, [pc, #20]	; (8003cd0 <HAL_UART_MspInit+0xb8>)
 8003cba:	f7fc fd9b 	bl	80007f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003cbe:	bf00      	nop
 8003cc0:	37b0      	adds	r7, #176	; 0xb0
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40013800 	.word	0x40013800
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	48000400 	.word	0x48000400

08003cd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08c      	sub	sp, #48	; 0x30
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	201a      	movs	r0, #26
 8003cea:	f7fc fd59 	bl	80007a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003cee:	201a      	movs	r0, #26
 8003cf0:	f7fc fd72 	bl	80007d8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8003cf4:	4b1e      	ldr	r3, [pc, #120]	; (8003d70 <HAL_InitTick+0x9c>)
 8003cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf8:	4a1d      	ldr	r2, [pc, #116]	; (8003d70 <HAL_InitTick+0x9c>)
 8003cfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cfe:	6613      	str	r3, [r2, #96]	; 0x60
 8003d00:	4b1b      	ldr	r3, [pc, #108]	; (8003d70 <HAL_InitTick+0x9c>)
 8003d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d0c:	f107 0210 	add.w	r2, r7, #16
 8003d10:	f107 0314 	add.w	r3, r7, #20
 8003d14:	4611      	mov	r1, r2
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fd fd5a 	bl	80017d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003d1c:	f7fd fd42 	bl	80017a4 <HAL_RCC_GetPCLK2Freq>
 8003d20:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d24:	4a13      	ldr	r2, [pc, #76]	; (8003d74 <HAL_InitTick+0xa0>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	0c9b      	lsrs	r3, r3, #18
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8003d30:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <HAL_InitTick+0xa4>)
 8003d32:	4a12      	ldr	r2, [pc, #72]	; (8003d7c <HAL_InitTick+0xa8>)
 8003d34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8003d36:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <HAL_InitTick+0xa4>)
 8003d38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003d3c:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8003d3e:	4a0e      	ldr	r2, [pc, #56]	; (8003d78 <HAL_InitTick+0xa4>)
 8003d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d42:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8003d44:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <HAL_InitTick+0xa4>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d4a:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <HAL_InitTick+0xa4>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8003d50:	4809      	ldr	r0, [pc, #36]	; (8003d78 <HAL_InitTick+0xa4>)
 8003d52:	f7fe fa8b 	bl	800226c <HAL_TIM_Base_Init>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d104      	bne.n	8003d66 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8003d5c:	4806      	ldr	r0, [pc, #24]	; (8003d78 <HAL_InitTick+0xa4>)
 8003d5e:	f7fe fadd 	bl	800231c <HAL_TIM_Base_Start_IT>
 8003d62:	4603      	mov	r3, r0
 8003d64:	e000      	b.n	8003d68 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3730      	adds	r7, #48	; 0x30
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40021000 	.word	0x40021000
 8003d74:	431bde83 	.word	0x431bde83
 8003d78:	200001e4 	.word	0x200001e4
 8003d7c:	40014800 	.word	0x40014800

08003d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d84:	e7fe      	b.n	8003d84 <NMI_Handler+0x4>

08003d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d86:	b480      	push	{r7}
 8003d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d8a:	e7fe      	b.n	8003d8a <HardFault_Handler+0x4>

08003d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d90:	e7fe      	b.n	8003d90 <MemManage_Handler+0x4>

08003d92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d92:	b480      	push	{r7}
 8003d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d96:	e7fe      	b.n	8003d96 <BusFault_Handler+0x4>

08003d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d9c:	e7fe      	b.n	8003d9c <UsageFault_Handler+0x4>

08003d9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003da2:	bf00      	nop
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003db0:	bf00      	nop
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dbe:	bf00      	nop
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dcc:	bf00      	nop
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
	...

08003dd8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003ddc:	4802      	ldr	r0, [pc, #8]	; (8003de8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8003dde:	f7fe fb0d 	bl	80023fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003de2:	bf00      	nop
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	200001e4 	.word	0x200001e4

08003dec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003df0:	4802      	ldr	r0, [pc, #8]	; (8003dfc <TIM2_IRQHandler+0x10>)
 8003df2:	f7fe fb03 	bl	80023fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003df6:	bf00      	nop
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000198 	.word	0x20000198

08003e00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003e04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003e08:	f7fc fece 	bl	8000ba8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003e0c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003e10:	f7fc feca 	bl	8000ba8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003e14:	bf00      	nop
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e20:	4a14      	ldr	r2, [pc, #80]	; (8003e74 <_sbrk+0x5c>)
 8003e22:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <_sbrk+0x60>)
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e2c:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <_sbrk+0x64>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d102      	bne.n	8003e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e34:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <_sbrk+0x64>)
 8003e36:	4a12      	ldr	r2, [pc, #72]	; (8003e80 <_sbrk+0x68>)
 8003e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e3a:	4b10      	ldr	r3, [pc, #64]	; (8003e7c <_sbrk+0x64>)
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4413      	add	r3, r2
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d207      	bcs.n	8003e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e48:	f000 f878 	bl	8003f3c <__errno>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	220c      	movs	r2, #12
 8003e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e52:	f04f 33ff 	mov.w	r3, #4294967295
 8003e56:	e009      	b.n	8003e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e58:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <_sbrk+0x64>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e5e:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <_sbrk+0x64>)
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4413      	add	r3, r2
 8003e66:	4a05      	ldr	r2, [pc, #20]	; (8003e7c <_sbrk+0x64>)
 8003e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	20018000 	.word	0x20018000
 8003e78:	00000400 	.word	0x00000400
 8003e7c:	200000f0 	.word	0x200000f0
 8003e80:	20000240 	.word	0x20000240

08003e84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003e88:	4b15      	ldr	r3, [pc, #84]	; (8003ee0 <SystemInit+0x5c>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	4a14      	ldr	r2, [pc, #80]	; (8003ee0 <SystemInit+0x5c>)
 8003e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003e98:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <SystemInit+0x60>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a11      	ldr	r2, [pc, #68]	; (8003ee4 <SystemInit+0x60>)
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003ea4:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <SystemInit+0x60>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003eaa:	4b0e      	ldr	r3, [pc, #56]	; (8003ee4 <SystemInit+0x60>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a0d      	ldr	r2, [pc, #52]	; (8003ee4 <SystemInit+0x60>)
 8003eb0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003eb4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003eb8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003eba:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <SystemInit+0x60>)
 8003ebc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ec0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003ec2:	4b08      	ldr	r3, [pc, #32]	; (8003ee4 <SystemInit+0x60>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a07      	ldr	r2, [pc, #28]	; (8003ee4 <SystemInit+0x60>)
 8003ec8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ecc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003ece:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <SystemInit+0x60>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	619a      	str	r2, [r3, #24]
}
 8003ed4:	bf00      	nop
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	e000ed00 	.word	0xe000ed00
 8003ee4:	40021000 	.word	0x40021000

08003ee8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003eec:	f7ff ffca 	bl	8003e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003ef0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003ef2:	e003      	b.n	8003efc <LoopCopyDataInit>

08003ef4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003ef6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003ef8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003efa:	3104      	adds	r1, #4

08003efc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003efc:	480a      	ldr	r0, [pc, #40]	; (8003f28 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003efe:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <LoopForever+0xe>)
	adds	r2, r0, r1
 8003f00:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003f02:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003f04:	d3f6      	bcc.n	8003ef4 <CopyDataInit>
	ldr	r2, =_sbss
 8003f06:	4a0a      	ldr	r2, [pc, #40]	; (8003f30 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003f08:	e002      	b.n	8003f10 <LoopFillZerobss>

08003f0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003f0a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003f0c:	f842 3b04 	str.w	r3, [r2], #4

08003f10 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003f10:	4b08      	ldr	r3, [pc, #32]	; (8003f34 <LoopForever+0x16>)
	cmp	r2, r3
 8003f12:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003f14:	d3f9      	bcc.n	8003f0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f16:	f000 f817 	bl	8003f48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f1a:	f7ff fbe1 	bl	80036e0 <main>

08003f1e <LoopForever>:

LoopForever:
    b LoopForever
 8003f1e:	e7fe      	b.n	8003f1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003f20:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003f24:	08004908 	.word	0x08004908
	ldr	r0, =_sdata
 8003f28:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003f2c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8003f30:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8003f34:	20000240 	.word	0x20000240

08003f38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f38:	e7fe      	b.n	8003f38 <ADC1_2_IRQHandler>
	...

08003f3c <__errno>:
 8003f3c:	4b01      	ldr	r3, [pc, #4]	; (8003f44 <__errno+0x8>)
 8003f3e:	6818      	ldr	r0, [r3, #0]
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	2000000c 	.word	0x2000000c

08003f48 <__libc_init_array>:
 8003f48:	b570      	push	{r4, r5, r6, lr}
 8003f4a:	4d0d      	ldr	r5, [pc, #52]	; (8003f80 <__libc_init_array+0x38>)
 8003f4c:	4c0d      	ldr	r4, [pc, #52]	; (8003f84 <__libc_init_array+0x3c>)
 8003f4e:	1b64      	subs	r4, r4, r5
 8003f50:	10a4      	asrs	r4, r4, #2
 8003f52:	2600      	movs	r6, #0
 8003f54:	42a6      	cmp	r6, r4
 8003f56:	d109      	bne.n	8003f6c <__libc_init_array+0x24>
 8003f58:	4d0b      	ldr	r5, [pc, #44]	; (8003f88 <__libc_init_array+0x40>)
 8003f5a:	4c0c      	ldr	r4, [pc, #48]	; (8003f8c <__libc_init_array+0x44>)
 8003f5c:	f000 fc4e 	bl	80047fc <_init>
 8003f60:	1b64      	subs	r4, r4, r5
 8003f62:	10a4      	asrs	r4, r4, #2
 8003f64:	2600      	movs	r6, #0
 8003f66:	42a6      	cmp	r6, r4
 8003f68:	d105      	bne.n	8003f76 <__libc_init_array+0x2e>
 8003f6a:	bd70      	pop	{r4, r5, r6, pc}
 8003f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f70:	4798      	blx	r3
 8003f72:	3601      	adds	r6, #1
 8003f74:	e7ee      	b.n	8003f54 <__libc_init_array+0xc>
 8003f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f7a:	4798      	blx	r3
 8003f7c:	3601      	adds	r6, #1
 8003f7e:	e7f2      	b.n	8003f66 <__libc_init_array+0x1e>
 8003f80:	08004900 	.word	0x08004900
 8003f84:	08004900 	.word	0x08004900
 8003f88:	08004900 	.word	0x08004900
 8003f8c:	08004904 	.word	0x08004904

08003f90 <memset>:
 8003f90:	4402      	add	r2, r0
 8003f92:	4603      	mov	r3, r0
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d100      	bne.n	8003f9a <memset+0xa>
 8003f98:	4770      	bx	lr
 8003f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f9e:	e7f9      	b.n	8003f94 <memset+0x4>

08003fa0 <siprintf>:
 8003fa0:	b40e      	push	{r1, r2, r3}
 8003fa2:	b500      	push	{lr}
 8003fa4:	b09c      	sub	sp, #112	; 0x70
 8003fa6:	ab1d      	add	r3, sp, #116	; 0x74
 8003fa8:	9002      	str	r0, [sp, #8]
 8003faa:	9006      	str	r0, [sp, #24]
 8003fac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003fb0:	4809      	ldr	r0, [pc, #36]	; (8003fd8 <siprintf+0x38>)
 8003fb2:	9107      	str	r1, [sp, #28]
 8003fb4:	9104      	str	r1, [sp, #16]
 8003fb6:	4909      	ldr	r1, [pc, #36]	; (8003fdc <siprintf+0x3c>)
 8003fb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fbc:	9105      	str	r1, [sp, #20]
 8003fbe:	6800      	ldr	r0, [r0, #0]
 8003fc0:	9301      	str	r3, [sp, #4]
 8003fc2:	a902      	add	r1, sp, #8
 8003fc4:	f000 f868 	bl	8004098 <_svfiprintf_r>
 8003fc8:	9b02      	ldr	r3, [sp, #8]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	701a      	strb	r2, [r3, #0]
 8003fce:	b01c      	add	sp, #112	; 0x70
 8003fd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fd4:	b003      	add	sp, #12
 8003fd6:	4770      	bx	lr
 8003fd8:	2000000c 	.word	0x2000000c
 8003fdc:	ffff0208 	.word	0xffff0208

08003fe0 <__ssputs_r>:
 8003fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe4:	688e      	ldr	r6, [r1, #8]
 8003fe6:	429e      	cmp	r6, r3
 8003fe8:	4682      	mov	sl, r0
 8003fea:	460c      	mov	r4, r1
 8003fec:	4690      	mov	r8, r2
 8003fee:	461f      	mov	r7, r3
 8003ff0:	d838      	bhi.n	8004064 <__ssputs_r+0x84>
 8003ff2:	898a      	ldrh	r2, [r1, #12]
 8003ff4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ff8:	d032      	beq.n	8004060 <__ssputs_r+0x80>
 8003ffa:	6825      	ldr	r5, [r4, #0]
 8003ffc:	6909      	ldr	r1, [r1, #16]
 8003ffe:	eba5 0901 	sub.w	r9, r5, r1
 8004002:	6965      	ldr	r5, [r4, #20]
 8004004:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004008:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800400c:	3301      	adds	r3, #1
 800400e:	444b      	add	r3, r9
 8004010:	106d      	asrs	r5, r5, #1
 8004012:	429d      	cmp	r5, r3
 8004014:	bf38      	it	cc
 8004016:	461d      	movcc	r5, r3
 8004018:	0553      	lsls	r3, r2, #21
 800401a:	d531      	bpl.n	8004080 <__ssputs_r+0xa0>
 800401c:	4629      	mov	r1, r5
 800401e:	f000 fb47 	bl	80046b0 <_malloc_r>
 8004022:	4606      	mov	r6, r0
 8004024:	b950      	cbnz	r0, 800403c <__ssputs_r+0x5c>
 8004026:	230c      	movs	r3, #12
 8004028:	f8ca 3000 	str.w	r3, [sl]
 800402c:	89a3      	ldrh	r3, [r4, #12]
 800402e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004032:	81a3      	strh	r3, [r4, #12]
 8004034:	f04f 30ff 	mov.w	r0, #4294967295
 8004038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800403c:	6921      	ldr	r1, [r4, #16]
 800403e:	464a      	mov	r2, r9
 8004040:	f000 fabe 	bl	80045c0 <memcpy>
 8004044:	89a3      	ldrh	r3, [r4, #12]
 8004046:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800404a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800404e:	81a3      	strh	r3, [r4, #12]
 8004050:	6126      	str	r6, [r4, #16]
 8004052:	6165      	str	r5, [r4, #20]
 8004054:	444e      	add	r6, r9
 8004056:	eba5 0509 	sub.w	r5, r5, r9
 800405a:	6026      	str	r6, [r4, #0]
 800405c:	60a5      	str	r5, [r4, #8]
 800405e:	463e      	mov	r6, r7
 8004060:	42be      	cmp	r6, r7
 8004062:	d900      	bls.n	8004066 <__ssputs_r+0x86>
 8004064:	463e      	mov	r6, r7
 8004066:	4632      	mov	r2, r6
 8004068:	6820      	ldr	r0, [r4, #0]
 800406a:	4641      	mov	r1, r8
 800406c:	f000 fab6 	bl	80045dc <memmove>
 8004070:	68a3      	ldr	r3, [r4, #8]
 8004072:	6822      	ldr	r2, [r4, #0]
 8004074:	1b9b      	subs	r3, r3, r6
 8004076:	4432      	add	r2, r6
 8004078:	60a3      	str	r3, [r4, #8]
 800407a:	6022      	str	r2, [r4, #0]
 800407c:	2000      	movs	r0, #0
 800407e:	e7db      	b.n	8004038 <__ssputs_r+0x58>
 8004080:	462a      	mov	r2, r5
 8004082:	f000 fb6f 	bl	8004764 <_realloc_r>
 8004086:	4606      	mov	r6, r0
 8004088:	2800      	cmp	r0, #0
 800408a:	d1e1      	bne.n	8004050 <__ssputs_r+0x70>
 800408c:	6921      	ldr	r1, [r4, #16]
 800408e:	4650      	mov	r0, sl
 8004090:	f000 fabe 	bl	8004610 <_free_r>
 8004094:	e7c7      	b.n	8004026 <__ssputs_r+0x46>
	...

08004098 <_svfiprintf_r>:
 8004098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800409c:	4698      	mov	r8, r3
 800409e:	898b      	ldrh	r3, [r1, #12]
 80040a0:	061b      	lsls	r3, r3, #24
 80040a2:	b09d      	sub	sp, #116	; 0x74
 80040a4:	4607      	mov	r7, r0
 80040a6:	460d      	mov	r5, r1
 80040a8:	4614      	mov	r4, r2
 80040aa:	d50e      	bpl.n	80040ca <_svfiprintf_r+0x32>
 80040ac:	690b      	ldr	r3, [r1, #16]
 80040ae:	b963      	cbnz	r3, 80040ca <_svfiprintf_r+0x32>
 80040b0:	2140      	movs	r1, #64	; 0x40
 80040b2:	f000 fafd 	bl	80046b0 <_malloc_r>
 80040b6:	6028      	str	r0, [r5, #0]
 80040b8:	6128      	str	r0, [r5, #16]
 80040ba:	b920      	cbnz	r0, 80040c6 <_svfiprintf_r+0x2e>
 80040bc:	230c      	movs	r3, #12
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	f04f 30ff 	mov.w	r0, #4294967295
 80040c4:	e0d1      	b.n	800426a <_svfiprintf_r+0x1d2>
 80040c6:	2340      	movs	r3, #64	; 0x40
 80040c8:	616b      	str	r3, [r5, #20]
 80040ca:	2300      	movs	r3, #0
 80040cc:	9309      	str	r3, [sp, #36]	; 0x24
 80040ce:	2320      	movs	r3, #32
 80040d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80040d8:	2330      	movs	r3, #48	; 0x30
 80040da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004284 <_svfiprintf_r+0x1ec>
 80040de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040e2:	f04f 0901 	mov.w	r9, #1
 80040e6:	4623      	mov	r3, r4
 80040e8:	469a      	mov	sl, r3
 80040ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040ee:	b10a      	cbz	r2, 80040f4 <_svfiprintf_r+0x5c>
 80040f0:	2a25      	cmp	r2, #37	; 0x25
 80040f2:	d1f9      	bne.n	80040e8 <_svfiprintf_r+0x50>
 80040f4:	ebba 0b04 	subs.w	fp, sl, r4
 80040f8:	d00b      	beq.n	8004112 <_svfiprintf_r+0x7a>
 80040fa:	465b      	mov	r3, fp
 80040fc:	4622      	mov	r2, r4
 80040fe:	4629      	mov	r1, r5
 8004100:	4638      	mov	r0, r7
 8004102:	f7ff ff6d 	bl	8003fe0 <__ssputs_r>
 8004106:	3001      	adds	r0, #1
 8004108:	f000 80aa 	beq.w	8004260 <_svfiprintf_r+0x1c8>
 800410c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800410e:	445a      	add	r2, fp
 8004110:	9209      	str	r2, [sp, #36]	; 0x24
 8004112:	f89a 3000 	ldrb.w	r3, [sl]
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 80a2 	beq.w	8004260 <_svfiprintf_r+0x1c8>
 800411c:	2300      	movs	r3, #0
 800411e:	f04f 32ff 	mov.w	r2, #4294967295
 8004122:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004126:	f10a 0a01 	add.w	sl, sl, #1
 800412a:	9304      	str	r3, [sp, #16]
 800412c:	9307      	str	r3, [sp, #28]
 800412e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004132:	931a      	str	r3, [sp, #104]	; 0x68
 8004134:	4654      	mov	r4, sl
 8004136:	2205      	movs	r2, #5
 8004138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800413c:	4851      	ldr	r0, [pc, #324]	; (8004284 <_svfiprintf_r+0x1ec>)
 800413e:	f7fc f84f 	bl	80001e0 <memchr>
 8004142:	9a04      	ldr	r2, [sp, #16]
 8004144:	b9d8      	cbnz	r0, 800417e <_svfiprintf_r+0xe6>
 8004146:	06d0      	lsls	r0, r2, #27
 8004148:	bf44      	itt	mi
 800414a:	2320      	movmi	r3, #32
 800414c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004150:	0711      	lsls	r1, r2, #28
 8004152:	bf44      	itt	mi
 8004154:	232b      	movmi	r3, #43	; 0x2b
 8004156:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800415a:	f89a 3000 	ldrb.w	r3, [sl]
 800415e:	2b2a      	cmp	r3, #42	; 0x2a
 8004160:	d015      	beq.n	800418e <_svfiprintf_r+0xf6>
 8004162:	9a07      	ldr	r2, [sp, #28]
 8004164:	4654      	mov	r4, sl
 8004166:	2000      	movs	r0, #0
 8004168:	f04f 0c0a 	mov.w	ip, #10
 800416c:	4621      	mov	r1, r4
 800416e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004172:	3b30      	subs	r3, #48	; 0x30
 8004174:	2b09      	cmp	r3, #9
 8004176:	d94e      	bls.n	8004216 <_svfiprintf_r+0x17e>
 8004178:	b1b0      	cbz	r0, 80041a8 <_svfiprintf_r+0x110>
 800417a:	9207      	str	r2, [sp, #28]
 800417c:	e014      	b.n	80041a8 <_svfiprintf_r+0x110>
 800417e:	eba0 0308 	sub.w	r3, r0, r8
 8004182:	fa09 f303 	lsl.w	r3, r9, r3
 8004186:	4313      	orrs	r3, r2
 8004188:	9304      	str	r3, [sp, #16]
 800418a:	46a2      	mov	sl, r4
 800418c:	e7d2      	b.n	8004134 <_svfiprintf_r+0x9c>
 800418e:	9b03      	ldr	r3, [sp, #12]
 8004190:	1d19      	adds	r1, r3, #4
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	9103      	str	r1, [sp, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	bfbb      	ittet	lt
 800419a:	425b      	neglt	r3, r3
 800419c:	f042 0202 	orrlt.w	r2, r2, #2
 80041a0:	9307      	strge	r3, [sp, #28]
 80041a2:	9307      	strlt	r3, [sp, #28]
 80041a4:	bfb8      	it	lt
 80041a6:	9204      	strlt	r2, [sp, #16]
 80041a8:	7823      	ldrb	r3, [r4, #0]
 80041aa:	2b2e      	cmp	r3, #46	; 0x2e
 80041ac:	d10c      	bne.n	80041c8 <_svfiprintf_r+0x130>
 80041ae:	7863      	ldrb	r3, [r4, #1]
 80041b0:	2b2a      	cmp	r3, #42	; 0x2a
 80041b2:	d135      	bne.n	8004220 <_svfiprintf_r+0x188>
 80041b4:	9b03      	ldr	r3, [sp, #12]
 80041b6:	1d1a      	adds	r2, r3, #4
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	9203      	str	r2, [sp, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	bfb8      	it	lt
 80041c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80041c4:	3402      	adds	r4, #2
 80041c6:	9305      	str	r3, [sp, #20]
 80041c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004294 <_svfiprintf_r+0x1fc>
 80041cc:	7821      	ldrb	r1, [r4, #0]
 80041ce:	2203      	movs	r2, #3
 80041d0:	4650      	mov	r0, sl
 80041d2:	f7fc f805 	bl	80001e0 <memchr>
 80041d6:	b140      	cbz	r0, 80041ea <_svfiprintf_r+0x152>
 80041d8:	2340      	movs	r3, #64	; 0x40
 80041da:	eba0 000a 	sub.w	r0, r0, sl
 80041de:	fa03 f000 	lsl.w	r0, r3, r0
 80041e2:	9b04      	ldr	r3, [sp, #16]
 80041e4:	4303      	orrs	r3, r0
 80041e6:	3401      	adds	r4, #1
 80041e8:	9304      	str	r3, [sp, #16]
 80041ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041ee:	4826      	ldr	r0, [pc, #152]	; (8004288 <_svfiprintf_r+0x1f0>)
 80041f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041f4:	2206      	movs	r2, #6
 80041f6:	f7fb fff3 	bl	80001e0 <memchr>
 80041fa:	2800      	cmp	r0, #0
 80041fc:	d038      	beq.n	8004270 <_svfiprintf_r+0x1d8>
 80041fe:	4b23      	ldr	r3, [pc, #140]	; (800428c <_svfiprintf_r+0x1f4>)
 8004200:	bb1b      	cbnz	r3, 800424a <_svfiprintf_r+0x1b2>
 8004202:	9b03      	ldr	r3, [sp, #12]
 8004204:	3307      	adds	r3, #7
 8004206:	f023 0307 	bic.w	r3, r3, #7
 800420a:	3308      	adds	r3, #8
 800420c:	9303      	str	r3, [sp, #12]
 800420e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004210:	4433      	add	r3, r6
 8004212:	9309      	str	r3, [sp, #36]	; 0x24
 8004214:	e767      	b.n	80040e6 <_svfiprintf_r+0x4e>
 8004216:	fb0c 3202 	mla	r2, ip, r2, r3
 800421a:	460c      	mov	r4, r1
 800421c:	2001      	movs	r0, #1
 800421e:	e7a5      	b.n	800416c <_svfiprintf_r+0xd4>
 8004220:	2300      	movs	r3, #0
 8004222:	3401      	adds	r4, #1
 8004224:	9305      	str	r3, [sp, #20]
 8004226:	4619      	mov	r1, r3
 8004228:	f04f 0c0a 	mov.w	ip, #10
 800422c:	4620      	mov	r0, r4
 800422e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004232:	3a30      	subs	r2, #48	; 0x30
 8004234:	2a09      	cmp	r2, #9
 8004236:	d903      	bls.n	8004240 <_svfiprintf_r+0x1a8>
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0c5      	beq.n	80041c8 <_svfiprintf_r+0x130>
 800423c:	9105      	str	r1, [sp, #20]
 800423e:	e7c3      	b.n	80041c8 <_svfiprintf_r+0x130>
 8004240:	fb0c 2101 	mla	r1, ip, r1, r2
 8004244:	4604      	mov	r4, r0
 8004246:	2301      	movs	r3, #1
 8004248:	e7f0      	b.n	800422c <_svfiprintf_r+0x194>
 800424a:	ab03      	add	r3, sp, #12
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	462a      	mov	r2, r5
 8004250:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <_svfiprintf_r+0x1f8>)
 8004252:	a904      	add	r1, sp, #16
 8004254:	4638      	mov	r0, r7
 8004256:	f3af 8000 	nop.w
 800425a:	1c42      	adds	r2, r0, #1
 800425c:	4606      	mov	r6, r0
 800425e:	d1d6      	bne.n	800420e <_svfiprintf_r+0x176>
 8004260:	89ab      	ldrh	r3, [r5, #12]
 8004262:	065b      	lsls	r3, r3, #25
 8004264:	f53f af2c 	bmi.w	80040c0 <_svfiprintf_r+0x28>
 8004268:	9809      	ldr	r0, [sp, #36]	; 0x24
 800426a:	b01d      	add	sp, #116	; 0x74
 800426c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004270:	ab03      	add	r3, sp, #12
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	462a      	mov	r2, r5
 8004276:	4b06      	ldr	r3, [pc, #24]	; (8004290 <_svfiprintf_r+0x1f8>)
 8004278:	a904      	add	r1, sp, #16
 800427a:	4638      	mov	r0, r7
 800427c:	f000 f87a 	bl	8004374 <_printf_i>
 8004280:	e7eb      	b.n	800425a <_svfiprintf_r+0x1c2>
 8004282:	bf00      	nop
 8004284:	080048c4 	.word	0x080048c4
 8004288:	080048ce 	.word	0x080048ce
 800428c:	00000000 	.word	0x00000000
 8004290:	08003fe1 	.word	0x08003fe1
 8004294:	080048ca 	.word	0x080048ca

08004298 <_printf_common>:
 8004298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800429c:	4616      	mov	r6, r2
 800429e:	4699      	mov	r9, r3
 80042a0:	688a      	ldr	r2, [r1, #8]
 80042a2:	690b      	ldr	r3, [r1, #16]
 80042a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042a8:	4293      	cmp	r3, r2
 80042aa:	bfb8      	it	lt
 80042ac:	4613      	movlt	r3, r2
 80042ae:	6033      	str	r3, [r6, #0]
 80042b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042b4:	4607      	mov	r7, r0
 80042b6:	460c      	mov	r4, r1
 80042b8:	b10a      	cbz	r2, 80042be <_printf_common+0x26>
 80042ba:	3301      	adds	r3, #1
 80042bc:	6033      	str	r3, [r6, #0]
 80042be:	6823      	ldr	r3, [r4, #0]
 80042c0:	0699      	lsls	r1, r3, #26
 80042c2:	bf42      	ittt	mi
 80042c4:	6833      	ldrmi	r3, [r6, #0]
 80042c6:	3302      	addmi	r3, #2
 80042c8:	6033      	strmi	r3, [r6, #0]
 80042ca:	6825      	ldr	r5, [r4, #0]
 80042cc:	f015 0506 	ands.w	r5, r5, #6
 80042d0:	d106      	bne.n	80042e0 <_printf_common+0x48>
 80042d2:	f104 0a19 	add.w	sl, r4, #25
 80042d6:	68e3      	ldr	r3, [r4, #12]
 80042d8:	6832      	ldr	r2, [r6, #0]
 80042da:	1a9b      	subs	r3, r3, r2
 80042dc:	42ab      	cmp	r3, r5
 80042de:	dc26      	bgt.n	800432e <_printf_common+0x96>
 80042e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042e4:	1e13      	subs	r3, r2, #0
 80042e6:	6822      	ldr	r2, [r4, #0]
 80042e8:	bf18      	it	ne
 80042ea:	2301      	movne	r3, #1
 80042ec:	0692      	lsls	r2, r2, #26
 80042ee:	d42b      	bmi.n	8004348 <_printf_common+0xb0>
 80042f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042f4:	4649      	mov	r1, r9
 80042f6:	4638      	mov	r0, r7
 80042f8:	47c0      	blx	r8
 80042fa:	3001      	adds	r0, #1
 80042fc:	d01e      	beq.n	800433c <_printf_common+0xa4>
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	68e5      	ldr	r5, [r4, #12]
 8004302:	6832      	ldr	r2, [r6, #0]
 8004304:	f003 0306 	and.w	r3, r3, #6
 8004308:	2b04      	cmp	r3, #4
 800430a:	bf08      	it	eq
 800430c:	1aad      	subeq	r5, r5, r2
 800430e:	68a3      	ldr	r3, [r4, #8]
 8004310:	6922      	ldr	r2, [r4, #16]
 8004312:	bf0c      	ite	eq
 8004314:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004318:	2500      	movne	r5, #0
 800431a:	4293      	cmp	r3, r2
 800431c:	bfc4      	itt	gt
 800431e:	1a9b      	subgt	r3, r3, r2
 8004320:	18ed      	addgt	r5, r5, r3
 8004322:	2600      	movs	r6, #0
 8004324:	341a      	adds	r4, #26
 8004326:	42b5      	cmp	r5, r6
 8004328:	d11a      	bne.n	8004360 <_printf_common+0xc8>
 800432a:	2000      	movs	r0, #0
 800432c:	e008      	b.n	8004340 <_printf_common+0xa8>
 800432e:	2301      	movs	r3, #1
 8004330:	4652      	mov	r2, sl
 8004332:	4649      	mov	r1, r9
 8004334:	4638      	mov	r0, r7
 8004336:	47c0      	blx	r8
 8004338:	3001      	adds	r0, #1
 800433a:	d103      	bne.n	8004344 <_printf_common+0xac>
 800433c:	f04f 30ff 	mov.w	r0, #4294967295
 8004340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004344:	3501      	adds	r5, #1
 8004346:	e7c6      	b.n	80042d6 <_printf_common+0x3e>
 8004348:	18e1      	adds	r1, r4, r3
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	2030      	movs	r0, #48	; 0x30
 800434e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004352:	4422      	add	r2, r4
 8004354:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004358:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800435c:	3302      	adds	r3, #2
 800435e:	e7c7      	b.n	80042f0 <_printf_common+0x58>
 8004360:	2301      	movs	r3, #1
 8004362:	4622      	mov	r2, r4
 8004364:	4649      	mov	r1, r9
 8004366:	4638      	mov	r0, r7
 8004368:	47c0      	blx	r8
 800436a:	3001      	adds	r0, #1
 800436c:	d0e6      	beq.n	800433c <_printf_common+0xa4>
 800436e:	3601      	adds	r6, #1
 8004370:	e7d9      	b.n	8004326 <_printf_common+0x8e>
	...

08004374 <_printf_i>:
 8004374:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004378:	460c      	mov	r4, r1
 800437a:	4691      	mov	r9, r2
 800437c:	7e27      	ldrb	r7, [r4, #24]
 800437e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004380:	2f78      	cmp	r7, #120	; 0x78
 8004382:	4680      	mov	r8, r0
 8004384:	469a      	mov	sl, r3
 8004386:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800438a:	d807      	bhi.n	800439c <_printf_i+0x28>
 800438c:	2f62      	cmp	r7, #98	; 0x62
 800438e:	d80a      	bhi.n	80043a6 <_printf_i+0x32>
 8004390:	2f00      	cmp	r7, #0
 8004392:	f000 80d8 	beq.w	8004546 <_printf_i+0x1d2>
 8004396:	2f58      	cmp	r7, #88	; 0x58
 8004398:	f000 80a3 	beq.w	80044e2 <_printf_i+0x16e>
 800439c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80043a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043a4:	e03a      	b.n	800441c <_printf_i+0xa8>
 80043a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043aa:	2b15      	cmp	r3, #21
 80043ac:	d8f6      	bhi.n	800439c <_printf_i+0x28>
 80043ae:	a001      	add	r0, pc, #4	; (adr r0, 80043b4 <_printf_i+0x40>)
 80043b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80043b4:	0800440d 	.word	0x0800440d
 80043b8:	08004421 	.word	0x08004421
 80043bc:	0800439d 	.word	0x0800439d
 80043c0:	0800439d 	.word	0x0800439d
 80043c4:	0800439d 	.word	0x0800439d
 80043c8:	0800439d 	.word	0x0800439d
 80043cc:	08004421 	.word	0x08004421
 80043d0:	0800439d 	.word	0x0800439d
 80043d4:	0800439d 	.word	0x0800439d
 80043d8:	0800439d 	.word	0x0800439d
 80043dc:	0800439d 	.word	0x0800439d
 80043e0:	0800452d 	.word	0x0800452d
 80043e4:	08004451 	.word	0x08004451
 80043e8:	0800450f 	.word	0x0800450f
 80043ec:	0800439d 	.word	0x0800439d
 80043f0:	0800439d 	.word	0x0800439d
 80043f4:	0800454f 	.word	0x0800454f
 80043f8:	0800439d 	.word	0x0800439d
 80043fc:	08004451 	.word	0x08004451
 8004400:	0800439d 	.word	0x0800439d
 8004404:	0800439d 	.word	0x0800439d
 8004408:	08004517 	.word	0x08004517
 800440c:	680b      	ldr	r3, [r1, #0]
 800440e:	1d1a      	adds	r2, r3, #4
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	600a      	str	r2, [r1, #0]
 8004414:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004418:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800441c:	2301      	movs	r3, #1
 800441e:	e0a3      	b.n	8004568 <_printf_i+0x1f4>
 8004420:	6825      	ldr	r5, [r4, #0]
 8004422:	6808      	ldr	r0, [r1, #0]
 8004424:	062e      	lsls	r6, r5, #24
 8004426:	f100 0304 	add.w	r3, r0, #4
 800442a:	d50a      	bpl.n	8004442 <_printf_i+0xce>
 800442c:	6805      	ldr	r5, [r0, #0]
 800442e:	600b      	str	r3, [r1, #0]
 8004430:	2d00      	cmp	r5, #0
 8004432:	da03      	bge.n	800443c <_printf_i+0xc8>
 8004434:	232d      	movs	r3, #45	; 0x2d
 8004436:	426d      	negs	r5, r5
 8004438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800443c:	485e      	ldr	r0, [pc, #376]	; (80045b8 <_printf_i+0x244>)
 800443e:	230a      	movs	r3, #10
 8004440:	e019      	b.n	8004476 <_printf_i+0x102>
 8004442:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004446:	6805      	ldr	r5, [r0, #0]
 8004448:	600b      	str	r3, [r1, #0]
 800444a:	bf18      	it	ne
 800444c:	b22d      	sxthne	r5, r5
 800444e:	e7ef      	b.n	8004430 <_printf_i+0xbc>
 8004450:	680b      	ldr	r3, [r1, #0]
 8004452:	6825      	ldr	r5, [r4, #0]
 8004454:	1d18      	adds	r0, r3, #4
 8004456:	6008      	str	r0, [r1, #0]
 8004458:	0628      	lsls	r0, r5, #24
 800445a:	d501      	bpl.n	8004460 <_printf_i+0xec>
 800445c:	681d      	ldr	r5, [r3, #0]
 800445e:	e002      	b.n	8004466 <_printf_i+0xf2>
 8004460:	0669      	lsls	r1, r5, #25
 8004462:	d5fb      	bpl.n	800445c <_printf_i+0xe8>
 8004464:	881d      	ldrh	r5, [r3, #0]
 8004466:	4854      	ldr	r0, [pc, #336]	; (80045b8 <_printf_i+0x244>)
 8004468:	2f6f      	cmp	r7, #111	; 0x6f
 800446a:	bf0c      	ite	eq
 800446c:	2308      	moveq	r3, #8
 800446e:	230a      	movne	r3, #10
 8004470:	2100      	movs	r1, #0
 8004472:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004476:	6866      	ldr	r6, [r4, #4]
 8004478:	60a6      	str	r6, [r4, #8]
 800447a:	2e00      	cmp	r6, #0
 800447c:	bfa2      	ittt	ge
 800447e:	6821      	ldrge	r1, [r4, #0]
 8004480:	f021 0104 	bicge.w	r1, r1, #4
 8004484:	6021      	strge	r1, [r4, #0]
 8004486:	b90d      	cbnz	r5, 800448c <_printf_i+0x118>
 8004488:	2e00      	cmp	r6, #0
 800448a:	d04d      	beq.n	8004528 <_printf_i+0x1b4>
 800448c:	4616      	mov	r6, r2
 800448e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004492:	fb03 5711 	mls	r7, r3, r1, r5
 8004496:	5dc7      	ldrb	r7, [r0, r7]
 8004498:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800449c:	462f      	mov	r7, r5
 800449e:	42bb      	cmp	r3, r7
 80044a0:	460d      	mov	r5, r1
 80044a2:	d9f4      	bls.n	800448e <_printf_i+0x11a>
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d10b      	bne.n	80044c0 <_printf_i+0x14c>
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	07df      	lsls	r7, r3, #31
 80044ac:	d508      	bpl.n	80044c0 <_printf_i+0x14c>
 80044ae:	6923      	ldr	r3, [r4, #16]
 80044b0:	6861      	ldr	r1, [r4, #4]
 80044b2:	4299      	cmp	r1, r3
 80044b4:	bfde      	ittt	le
 80044b6:	2330      	movle	r3, #48	; 0x30
 80044b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80044c0:	1b92      	subs	r2, r2, r6
 80044c2:	6122      	str	r2, [r4, #16]
 80044c4:	f8cd a000 	str.w	sl, [sp]
 80044c8:	464b      	mov	r3, r9
 80044ca:	aa03      	add	r2, sp, #12
 80044cc:	4621      	mov	r1, r4
 80044ce:	4640      	mov	r0, r8
 80044d0:	f7ff fee2 	bl	8004298 <_printf_common>
 80044d4:	3001      	adds	r0, #1
 80044d6:	d14c      	bne.n	8004572 <_printf_i+0x1fe>
 80044d8:	f04f 30ff 	mov.w	r0, #4294967295
 80044dc:	b004      	add	sp, #16
 80044de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044e2:	4835      	ldr	r0, [pc, #212]	; (80045b8 <_printf_i+0x244>)
 80044e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	680e      	ldr	r6, [r1, #0]
 80044ec:	061f      	lsls	r7, r3, #24
 80044ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80044f2:	600e      	str	r6, [r1, #0]
 80044f4:	d514      	bpl.n	8004520 <_printf_i+0x1ac>
 80044f6:	07d9      	lsls	r1, r3, #31
 80044f8:	bf44      	itt	mi
 80044fa:	f043 0320 	orrmi.w	r3, r3, #32
 80044fe:	6023      	strmi	r3, [r4, #0]
 8004500:	b91d      	cbnz	r5, 800450a <_printf_i+0x196>
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	f023 0320 	bic.w	r3, r3, #32
 8004508:	6023      	str	r3, [r4, #0]
 800450a:	2310      	movs	r3, #16
 800450c:	e7b0      	b.n	8004470 <_printf_i+0xfc>
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	f043 0320 	orr.w	r3, r3, #32
 8004514:	6023      	str	r3, [r4, #0]
 8004516:	2378      	movs	r3, #120	; 0x78
 8004518:	4828      	ldr	r0, [pc, #160]	; (80045bc <_printf_i+0x248>)
 800451a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800451e:	e7e3      	b.n	80044e8 <_printf_i+0x174>
 8004520:	065e      	lsls	r6, r3, #25
 8004522:	bf48      	it	mi
 8004524:	b2ad      	uxthmi	r5, r5
 8004526:	e7e6      	b.n	80044f6 <_printf_i+0x182>
 8004528:	4616      	mov	r6, r2
 800452a:	e7bb      	b.n	80044a4 <_printf_i+0x130>
 800452c:	680b      	ldr	r3, [r1, #0]
 800452e:	6826      	ldr	r6, [r4, #0]
 8004530:	6960      	ldr	r0, [r4, #20]
 8004532:	1d1d      	adds	r5, r3, #4
 8004534:	600d      	str	r5, [r1, #0]
 8004536:	0635      	lsls	r5, r6, #24
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	d501      	bpl.n	8004540 <_printf_i+0x1cc>
 800453c:	6018      	str	r0, [r3, #0]
 800453e:	e002      	b.n	8004546 <_printf_i+0x1d2>
 8004540:	0671      	lsls	r1, r6, #25
 8004542:	d5fb      	bpl.n	800453c <_printf_i+0x1c8>
 8004544:	8018      	strh	r0, [r3, #0]
 8004546:	2300      	movs	r3, #0
 8004548:	6123      	str	r3, [r4, #16]
 800454a:	4616      	mov	r6, r2
 800454c:	e7ba      	b.n	80044c4 <_printf_i+0x150>
 800454e:	680b      	ldr	r3, [r1, #0]
 8004550:	1d1a      	adds	r2, r3, #4
 8004552:	600a      	str	r2, [r1, #0]
 8004554:	681e      	ldr	r6, [r3, #0]
 8004556:	6862      	ldr	r2, [r4, #4]
 8004558:	2100      	movs	r1, #0
 800455a:	4630      	mov	r0, r6
 800455c:	f7fb fe40 	bl	80001e0 <memchr>
 8004560:	b108      	cbz	r0, 8004566 <_printf_i+0x1f2>
 8004562:	1b80      	subs	r0, r0, r6
 8004564:	6060      	str	r0, [r4, #4]
 8004566:	6863      	ldr	r3, [r4, #4]
 8004568:	6123      	str	r3, [r4, #16]
 800456a:	2300      	movs	r3, #0
 800456c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004570:	e7a8      	b.n	80044c4 <_printf_i+0x150>
 8004572:	6923      	ldr	r3, [r4, #16]
 8004574:	4632      	mov	r2, r6
 8004576:	4649      	mov	r1, r9
 8004578:	4640      	mov	r0, r8
 800457a:	47d0      	blx	sl
 800457c:	3001      	adds	r0, #1
 800457e:	d0ab      	beq.n	80044d8 <_printf_i+0x164>
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	079b      	lsls	r3, r3, #30
 8004584:	d413      	bmi.n	80045ae <_printf_i+0x23a>
 8004586:	68e0      	ldr	r0, [r4, #12]
 8004588:	9b03      	ldr	r3, [sp, #12]
 800458a:	4298      	cmp	r0, r3
 800458c:	bfb8      	it	lt
 800458e:	4618      	movlt	r0, r3
 8004590:	e7a4      	b.n	80044dc <_printf_i+0x168>
 8004592:	2301      	movs	r3, #1
 8004594:	4632      	mov	r2, r6
 8004596:	4649      	mov	r1, r9
 8004598:	4640      	mov	r0, r8
 800459a:	47d0      	blx	sl
 800459c:	3001      	adds	r0, #1
 800459e:	d09b      	beq.n	80044d8 <_printf_i+0x164>
 80045a0:	3501      	adds	r5, #1
 80045a2:	68e3      	ldr	r3, [r4, #12]
 80045a4:	9903      	ldr	r1, [sp, #12]
 80045a6:	1a5b      	subs	r3, r3, r1
 80045a8:	42ab      	cmp	r3, r5
 80045aa:	dcf2      	bgt.n	8004592 <_printf_i+0x21e>
 80045ac:	e7eb      	b.n	8004586 <_printf_i+0x212>
 80045ae:	2500      	movs	r5, #0
 80045b0:	f104 0619 	add.w	r6, r4, #25
 80045b4:	e7f5      	b.n	80045a2 <_printf_i+0x22e>
 80045b6:	bf00      	nop
 80045b8:	080048d5 	.word	0x080048d5
 80045bc:	080048e6 	.word	0x080048e6

080045c0 <memcpy>:
 80045c0:	440a      	add	r2, r1
 80045c2:	4291      	cmp	r1, r2
 80045c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80045c8:	d100      	bne.n	80045cc <memcpy+0xc>
 80045ca:	4770      	bx	lr
 80045cc:	b510      	push	{r4, lr}
 80045ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045d6:	4291      	cmp	r1, r2
 80045d8:	d1f9      	bne.n	80045ce <memcpy+0xe>
 80045da:	bd10      	pop	{r4, pc}

080045dc <memmove>:
 80045dc:	4288      	cmp	r0, r1
 80045de:	b510      	push	{r4, lr}
 80045e0:	eb01 0402 	add.w	r4, r1, r2
 80045e4:	d902      	bls.n	80045ec <memmove+0x10>
 80045e6:	4284      	cmp	r4, r0
 80045e8:	4623      	mov	r3, r4
 80045ea:	d807      	bhi.n	80045fc <memmove+0x20>
 80045ec:	1e43      	subs	r3, r0, #1
 80045ee:	42a1      	cmp	r1, r4
 80045f0:	d008      	beq.n	8004604 <memmove+0x28>
 80045f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045fa:	e7f8      	b.n	80045ee <memmove+0x12>
 80045fc:	4402      	add	r2, r0
 80045fe:	4601      	mov	r1, r0
 8004600:	428a      	cmp	r2, r1
 8004602:	d100      	bne.n	8004606 <memmove+0x2a>
 8004604:	bd10      	pop	{r4, pc}
 8004606:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800460a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800460e:	e7f7      	b.n	8004600 <memmove+0x24>

08004610 <_free_r>:
 8004610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004612:	2900      	cmp	r1, #0
 8004614:	d048      	beq.n	80046a8 <_free_r+0x98>
 8004616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800461a:	9001      	str	r0, [sp, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	f1a1 0404 	sub.w	r4, r1, #4
 8004622:	bfb8      	it	lt
 8004624:	18e4      	addlt	r4, r4, r3
 8004626:	f000 f8d3 	bl	80047d0 <__malloc_lock>
 800462a:	4a20      	ldr	r2, [pc, #128]	; (80046ac <_free_r+0x9c>)
 800462c:	9801      	ldr	r0, [sp, #4]
 800462e:	6813      	ldr	r3, [r2, #0]
 8004630:	4615      	mov	r5, r2
 8004632:	b933      	cbnz	r3, 8004642 <_free_r+0x32>
 8004634:	6063      	str	r3, [r4, #4]
 8004636:	6014      	str	r4, [r2, #0]
 8004638:	b003      	add	sp, #12
 800463a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800463e:	f000 b8cd 	b.w	80047dc <__malloc_unlock>
 8004642:	42a3      	cmp	r3, r4
 8004644:	d90b      	bls.n	800465e <_free_r+0x4e>
 8004646:	6821      	ldr	r1, [r4, #0]
 8004648:	1862      	adds	r2, r4, r1
 800464a:	4293      	cmp	r3, r2
 800464c:	bf04      	itt	eq
 800464e:	681a      	ldreq	r2, [r3, #0]
 8004650:	685b      	ldreq	r3, [r3, #4]
 8004652:	6063      	str	r3, [r4, #4]
 8004654:	bf04      	itt	eq
 8004656:	1852      	addeq	r2, r2, r1
 8004658:	6022      	streq	r2, [r4, #0]
 800465a:	602c      	str	r4, [r5, #0]
 800465c:	e7ec      	b.n	8004638 <_free_r+0x28>
 800465e:	461a      	mov	r2, r3
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	b10b      	cbz	r3, 8004668 <_free_r+0x58>
 8004664:	42a3      	cmp	r3, r4
 8004666:	d9fa      	bls.n	800465e <_free_r+0x4e>
 8004668:	6811      	ldr	r1, [r2, #0]
 800466a:	1855      	adds	r5, r2, r1
 800466c:	42a5      	cmp	r5, r4
 800466e:	d10b      	bne.n	8004688 <_free_r+0x78>
 8004670:	6824      	ldr	r4, [r4, #0]
 8004672:	4421      	add	r1, r4
 8004674:	1854      	adds	r4, r2, r1
 8004676:	42a3      	cmp	r3, r4
 8004678:	6011      	str	r1, [r2, #0]
 800467a:	d1dd      	bne.n	8004638 <_free_r+0x28>
 800467c:	681c      	ldr	r4, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	6053      	str	r3, [r2, #4]
 8004682:	4421      	add	r1, r4
 8004684:	6011      	str	r1, [r2, #0]
 8004686:	e7d7      	b.n	8004638 <_free_r+0x28>
 8004688:	d902      	bls.n	8004690 <_free_r+0x80>
 800468a:	230c      	movs	r3, #12
 800468c:	6003      	str	r3, [r0, #0]
 800468e:	e7d3      	b.n	8004638 <_free_r+0x28>
 8004690:	6825      	ldr	r5, [r4, #0]
 8004692:	1961      	adds	r1, r4, r5
 8004694:	428b      	cmp	r3, r1
 8004696:	bf04      	itt	eq
 8004698:	6819      	ldreq	r1, [r3, #0]
 800469a:	685b      	ldreq	r3, [r3, #4]
 800469c:	6063      	str	r3, [r4, #4]
 800469e:	bf04      	itt	eq
 80046a0:	1949      	addeq	r1, r1, r5
 80046a2:	6021      	streq	r1, [r4, #0]
 80046a4:	6054      	str	r4, [r2, #4]
 80046a6:	e7c7      	b.n	8004638 <_free_r+0x28>
 80046a8:	b003      	add	sp, #12
 80046aa:	bd30      	pop	{r4, r5, pc}
 80046ac:	200000f4 	.word	0x200000f4

080046b0 <_malloc_r>:
 80046b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b2:	1ccd      	adds	r5, r1, #3
 80046b4:	f025 0503 	bic.w	r5, r5, #3
 80046b8:	3508      	adds	r5, #8
 80046ba:	2d0c      	cmp	r5, #12
 80046bc:	bf38      	it	cc
 80046be:	250c      	movcc	r5, #12
 80046c0:	2d00      	cmp	r5, #0
 80046c2:	4606      	mov	r6, r0
 80046c4:	db01      	blt.n	80046ca <_malloc_r+0x1a>
 80046c6:	42a9      	cmp	r1, r5
 80046c8:	d903      	bls.n	80046d2 <_malloc_r+0x22>
 80046ca:	230c      	movs	r3, #12
 80046cc:	6033      	str	r3, [r6, #0]
 80046ce:	2000      	movs	r0, #0
 80046d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046d2:	f000 f87d 	bl	80047d0 <__malloc_lock>
 80046d6:	4921      	ldr	r1, [pc, #132]	; (800475c <_malloc_r+0xac>)
 80046d8:	680a      	ldr	r2, [r1, #0]
 80046da:	4614      	mov	r4, r2
 80046dc:	b99c      	cbnz	r4, 8004706 <_malloc_r+0x56>
 80046de:	4f20      	ldr	r7, [pc, #128]	; (8004760 <_malloc_r+0xb0>)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	b923      	cbnz	r3, 80046ee <_malloc_r+0x3e>
 80046e4:	4621      	mov	r1, r4
 80046e6:	4630      	mov	r0, r6
 80046e8:	f000 f862 	bl	80047b0 <_sbrk_r>
 80046ec:	6038      	str	r0, [r7, #0]
 80046ee:	4629      	mov	r1, r5
 80046f0:	4630      	mov	r0, r6
 80046f2:	f000 f85d 	bl	80047b0 <_sbrk_r>
 80046f6:	1c43      	adds	r3, r0, #1
 80046f8:	d123      	bne.n	8004742 <_malloc_r+0x92>
 80046fa:	230c      	movs	r3, #12
 80046fc:	6033      	str	r3, [r6, #0]
 80046fe:	4630      	mov	r0, r6
 8004700:	f000 f86c 	bl	80047dc <__malloc_unlock>
 8004704:	e7e3      	b.n	80046ce <_malloc_r+0x1e>
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	1b5b      	subs	r3, r3, r5
 800470a:	d417      	bmi.n	800473c <_malloc_r+0x8c>
 800470c:	2b0b      	cmp	r3, #11
 800470e:	d903      	bls.n	8004718 <_malloc_r+0x68>
 8004710:	6023      	str	r3, [r4, #0]
 8004712:	441c      	add	r4, r3
 8004714:	6025      	str	r5, [r4, #0]
 8004716:	e004      	b.n	8004722 <_malloc_r+0x72>
 8004718:	6863      	ldr	r3, [r4, #4]
 800471a:	42a2      	cmp	r2, r4
 800471c:	bf0c      	ite	eq
 800471e:	600b      	streq	r3, [r1, #0]
 8004720:	6053      	strne	r3, [r2, #4]
 8004722:	4630      	mov	r0, r6
 8004724:	f000 f85a 	bl	80047dc <__malloc_unlock>
 8004728:	f104 000b 	add.w	r0, r4, #11
 800472c:	1d23      	adds	r3, r4, #4
 800472e:	f020 0007 	bic.w	r0, r0, #7
 8004732:	1ac2      	subs	r2, r0, r3
 8004734:	d0cc      	beq.n	80046d0 <_malloc_r+0x20>
 8004736:	1a1b      	subs	r3, r3, r0
 8004738:	50a3      	str	r3, [r4, r2]
 800473a:	e7c9      	b.n	80046d0 <_malloc_r+0x20>
 800473c:	4622      	mov	r2, r4
 800473e:	6864      	ldr	r4, [r4, #4]
 8004740:	e7cc      	b.n	80046dc <_malloc_r+0x2c>
 8004742:	1cc4      	adds	r4, r0, #3
 8004744:	f024 0403 	bic.w	r4, r4, #3
 8004748:	42a0      	cmp	r0, r4
 800474a:	d0e3      	beq.n	8004714 <_malloc_r+0x64>
 800474c:	1a21      	subs	r1, r4, r0
 800474e:	4630      	mov	r0, r6
 8004750:	f000 f82e 	bl	80047b0 <_sbrk_r>
 8004754:	3001      	adds	r0, #1
 8004756:	d1dd      	bne.n	8004714 <_malloc_r+0x64>
 8004758:	e7cf      	b.n	80046fa <_malloc_r+0x4a>
 800475a:	bf00      	nop
 800475c:	200000f4 	.word	0x200000f4
 8004760:	200000f8 	.word	0x200000f8

08004764 <_realloc_r>:
 8004764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004766:	4607      	mov	r7, r0
 8004768:	4614      	mov	r4, r2
 800476a:	460e      	mov	r6, r1
 800476c:	b921      	cbnz	r1, 8004778 <_realloc_r+0x14>
 800476e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004772:	4611      	mov	r1, r2
 8004774:	f7ff bf9c 	b.w	80046b0 <_malloc_r>
 8004778:	b922      	cbnz	r2, 8004784 <_realloc_r+0x20>
 800477a:	f7ff ff49 	bl	8004610 <_free_r>
 800477e:	4625      	mov	r5, r4
 8004780:	4628      	mov	r0, r5
 8004782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004784:	f000 f830 	bl	80047e8 <_malloc_usable_size_r>
 8004788:	42a0      	cmp	r0, r4
 800478a:	d20f      	bcs.n	80047ac <_realloc_r+0x48>
 800478c:	4621      	mov	r1, r4
 800478e:	4638      	mov	r0, r7
 8004790:	f7ff ff8e 	bl	80046b0 <_malloc_r>
 8004794:	4605      	mov	r5, r0
 8004796:	2800      	cmp	r0, #0
 8004798:	d0f2      	beq.n	8004780 <_realloc_r+0x1c>
 800479a:	4631      	mov	r1, r6
 800479c:	4622      	mov	r2, r4
 800479e:	f7ff ff0f 	bl	80045c0 <memcpy>
 80047a2:	4631      	mov	r1, r6
 80047a4:	4638      	mov	r0, r7
 80047a6:	f7ff ff33 	bl	8004610 <_free_r>
 80047aa:	e7e9      	b.n	8004780 <_realloc_r+0x1c>
 80047ac:	4635      	mov	r5, r6
 80047ae:	e7e7      	b.n	8004780 <_realloc_r+0x1c>

080047b0 <_sbrk_r>:
 80047b0:	b538      	push	{r3, r4, r5, lr}
 80047b2:	4d06      	ldr	r5, [pc, #24]	; (80047cc <_sbrk_r+0x1c>)
 80047b4:	2300      	movs	r3, #0
 80047b6:	4604      	mov	r4, r0
 80047b8:	4608      	mov	r0, r1
 80047ba:	602b      	str	r3, [r5, #0]
 80047bc:	f7ff fb2c 	bl	8003e18 <_sbrk>
 80047c0:	1c43      	adds	r3, r0, #1
 80047c2:	d102      	bne.n	80047ca <_sbrk_r+0x1a>
 80047c4:	682b      	ldr	r3, [r5, #0]
 80047c6:	b103      	cbz	r3, 80047ca <_sbrk_r+0x1a>
 80047c8:	6023      	str	r3, [r4, #0]
 80047ca:	bd38      	pop	{r3, r4, r5, pc}
 80047cc:	20000230 	.word	0x20000230

080047d0 <__malloc_lock>:
 80047d0:	4801      	ldr	r0, [pc, #4]	; (80047d8 <__malloc_lock+0x8>)
 80047d2:	f000 b811 	b.w	80047f8 <__retarget_lock_acquire_recursive>
 80047d6:	bf00      	nop
 80047d8:	20000238 	.word	0x20000238

080047dc <__malloc_unlock>:
 80047dc:	4801      	ldr	r0, [pc, #4]	; (80047e4 <__malloc_unlock+0x8>)
 80047de:	f000 b80c 	b.w	80047fa <__retarget_lock_release_recursive>
 80047e2:	bf00      	nop
 80047e4:	20000238 	.word	0x20000238

080047e8 <_malloc_usable_size_r>:
 80047e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047ec:	1f18      	subs	r0, r3, #4
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	bfbc      	itt	lt
 80047f2:	580b      	ldrlt	r3, [r1, r0]
 80047f4:	18c0      	addlt	r0, r0, r3
 80047f6:	4770      	bx	lr

080047f8 <__retarget_lock_acquire_recursive>:
 80047f8:	4770      	bx	lr

080047fa <__retarget_lock_release_recursive>:
 80047fa:	4770      	bx	lr

080047fc <_init>:
 80047fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fe:	bf00      	nop
 8004800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004802:	bc08      	pop	{r3}
 8004804:	469e      	mov	lr, r3
 8004806:	4770      	bx	lr

08004808 <_fini>:
 8004808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480a:	bf00      	nop
 800480c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800480e:	bc08      	pop	{r3}
 8004810:	469e      	mov	lr, r3
 8004812:	4770      	bx	lr
