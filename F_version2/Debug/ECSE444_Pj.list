
ECSE444_Pj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002574  08002574  00012574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025bc  080025bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080025bc  080025bc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025bc  080025bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025bc  080025bc  000125bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025c0  080025c0  000125c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080025c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  080025d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  080025d0  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4c3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000192b  00000000  00000000  0002c4ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  0002de30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a80  00000000  00000000  0002e978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025332  00000000  00000000  0002f3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb64  00000000  00000000  0005472a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9226  00000000  00000000  0006028e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001494b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e48  00000000  00000000  00149508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800255c 	.word	0x0800255c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800255c 	.word	0x0800255c

080001c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d2:	2003      	movs	r0, #3
 80001d4:	f000 f901 	bl	80003da <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001d8:	200f      	movs	r0, #15
 80001da:	f002 f895 	bl	8002308 <HAL_InitTick>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
 80001e8:	e001      	b.n	80001ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ea:	f002 f845 	bl	8002278 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001ee:	79fb      	ldrb	r3, [r7, #7]
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80001fc:	4b06      	ldr	r3, [pc, #24]	; (8000218 <HAL_IncTick+0x20>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	461a      	mov	r2, r3
 8000202:	4b06      	ldr	r3, [pc, #24]	; (800021c <HAL_IncTick+0x24>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4413      	add	r3, r2
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <HAL_IncTick+0x24>)
 800020a:	6013      	str	r3, [r2, #0]
}
 800020c:	bf00      	nop
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	20000004 	.word	0x20000004
 800021c:	20000028 	.word	0x20000028

08000220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
  return uwTick;
 8000224:	4b03      	ldr	r3, [pc, #12]	; (8000234 <HAL_GetTick+0x14>)
 8000226:	681b      	ldr	r3, [r3, #0]
}
 8000228:	4618      	mov	r0, r3
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	20000028 	.word	0x20000028

08000238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000240:	f7ff ffee 	bl	8000220 <HAL_GetTick>
 8000244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000250:	d005      	beq.n	800025e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000252:	4b0a      	ldr	r3, [pc, #40]	; (800027c <HAL_Delay+0x44>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	461a      	mov	r2, r3
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	4413      	add	r3, r2
 800025c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800025e:	bf00      	nop
 8000260:	f7ff ffde 	bl	8000220 <HAL_GetTick>
 8000264:	4602      	mov	r2, r0
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	1ad3      	subs	r3, r2, r3
 800026a:	68fa      	ldr	r2, [r7, #12]
 800026c:	429a      	cmp	r2, r3
 800026e:	d8f7      	bhi.n	8000260 <HAL_Delay+0x28>
  {
  }
}
 8000270:	bf00      	nop
 8000272:	bf00      	nop
 8000274:	3710      	adds	r7, #16
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	20000004 	.word	0x20000004

08000280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f003 0307 	and.w	r3, r3, #7
 800028e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000290:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000296:	68ba      	ldr	r2, [r7, #8]
 8000298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800029c:	4013      	ands	r3, r2
 800029e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002b2:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <__NVIC_SetPriorityGrouping+0x44>)
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	60d3      	str	r3, [r2, #12]
}
 80002b8:	bf00      	nop
 80002ba:	3714      	adds	r7, #20
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr
 80002c4:	e000ed00 	.word	0xe000ed00

080002c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002cc:	4b04      	ldr	r3, [pc, #16]	; (80002e0 <__NVIC_GetPriorityGrouping+0x18>)
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	0a1b      	lsrs	r3, r3, #8
 80002d2:	f003 0307 	and.w	r3, r3, #7
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	e000ed00 	.word	0xe000ed00

080002e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	db0b      	blt.n	800030e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	f003 021f 	and.w	r2, r3, #31
 80002fc:	4907      	ldr	r1, [pc, #28]	; (800031c <__NVIC_EnableIRQ+0x38>)
 80002fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000302:	095b      	lsrs	r3, r3, #5
 8000304:	2001      	movs	r0, #1
 8000306:	fa00 f202 	lsl.w	r2, r0, r2
 800030a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	e000e100 	.word	0xe000e100

08000320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	6039      	str	r1, [r7, #0]
 800032a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800032c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000330:	2b00      	cmp	r3, #0
 8000332:	db0a      	blt.n	800034a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	b2da      	uxtb	r2, r3
 8000338:	490c      	ldr	r1, [pc, #48]	; (800036c <__NVIC_SetPriority+0x4c>)
 800033a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800033e:	0112      	lsls	r2, r2, #4
 8000340:	b2d2      	uxtb	r2, r2
 8000342:	440b      	add	r3, r1
 8000344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000348:	e00a      	b.n	8000360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	b2da      	uxtb	r2, r3
 800034e:	4908      	ldr	r1, [pc, #32]	; (8000370 <__NVIC_SetPriority+0x50>)
 8000350:	79fb      	ldrb	r3, [r7, #7]
 8000352:	f003 030f 	and.w	r3, r3, #15
 8000356:	3b04      	subs	r3, #4
 8000358:	0112      	lsls	r2, r2, #4
 800035a:	b2d2      	uxtb	r2, r2
 800035c:	440b      	add	r3, r1
 800035e:	761a      	strb	r2, [r3, #24]
}
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	e000e100 	.word	0xe000e100
 8000370:	e000ed00 	.word	0xe000ed00

08000374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000374:	b480      	push	{r7}
 8000376:	b089      	sub	sp, #36	; 0x24
 8000378:	af00      	add	r7, sp, #0
 800037a:	60f8      	str	r0, [r7, #12]
 800037c:	60b9      	str	r1, [r7, #8]
 800037e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f003 0307 	and.w	r3, r3, #7
 8000386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000388:	69fb      	ldr	r3, [r7, #28]
 800038a:	f1c3 0307 	rsb	r3, r3, #7
 800038e:	2b04      	cmp	r3, #4
 8000390:	bf28      	it	cs
 8000392:	2304      	movcs	r3, #4
 8000394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000396:	69fb      	ldr	r3, [r7, #28]
 8000398:	3304      	adds	r3, #4
 800039a:	2b06      	cmp	r3, #6
 800039c:	d902      	bls.n	80003a4 <NVIC_EncodePriority+0x30>
 800039e:	69fb      	ldr	r3, [r7, #28]
 80003a0:	3b03      	subs	r3, #3
 80003a2:	e000      	b.n	80003a6 <NVIC_EncodePriority+0x32>
 80003a4:	2300      	movs	r3, #0
 80003a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a8:	f04f 32ff 	mov.w	r2, #4294967295
 80003ac:	69bb      	ldr	r3, [r7, #24]
 80003ae:	fa02 f303 	lsl.w	r3, r2, r3
 80003b2:	43da      	mvns	r2, r3
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	401a      	ands	r2, r3
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003bc:	f04f 31ff 	mov.w	r1, #4294967295
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	fa01 f303 	lsl.w	r3, r1, r3
 80003c6:	43d9      	mvns	r1, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003cc:	4313      	orrs	r3, r2
         );
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	3724      	adds	r7, #36	; 0x24
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr

080003da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003da:	b580      	push	{r7, lr}
 80003dc:	b082      	sub	sp, #8
 80003de:	af00      	add	r7, sp, #0
 80003e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003e2:	6878      	ldr	r0, [r7, #4]
 80003e4:	f7ff ff4c 	bl	8000280 <__NVIC_SetPriorityGrouping>
}
 80003e8:	bf00      	nop
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b086      	sub	sp, #24
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	60b9      	str	r1, [r7, #8]
 80003fa:	607a      	str	r2, [r7, #4]
 80003fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80003fe:	2300      	movs	r3, #0
 8000400:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000402:	f7ff ff61 	bl	80002c8 <__NVIC_GetPriorityGrouping>
 8000406:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	68b9      	ldr	r1, [r7, #8]
 800040c:	6978      	ldr	r0, [r7, #20]
 800040e:	f7ff ffb1 	bl	8000374 <NVIC_EncodePriority>
 8000412:	4602      	mov	r2, r0
 8000414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000418:	4611      	mov	r1, r2
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff80 	bl	8000320 <__NVIC_SetPriority>
}
 8000420:	bf00      	nop
 8000422:	3718      	adds	r7, #24
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff ff54 	bl	80002e4 <__NVIC_EnableIRQ>
}
 800043c:	bf00      	nop
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000444:	b480      	push	{r7}
 8000446:	b087      	sub	sp, #28
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
 800044c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800044e:	2300      	movs	r3, #0
 8000450:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000452:	e17f      	b.n	8000754 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	2101      	movs	r1, #1
 800045a:	697b      	ldr	r3, [r7, #20]
 800045c:	fa01 f303 	lsl.w	r3, r1, r3
 8000460:	4013      	ands	r3, r2
 8000462:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	2b00      	cmp	r3, #0
 8000468:	f000 8171 	beq.w	800074e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	685b      	ldr	r3, [r3, #4]
 8000470:	2b01      	cmp	r3, #1
 8000472:	d00b      	beq.n	800048c <HAL_GPIO_Init+0x48>
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	2b02      	cmp	r3, #2
 800047a:	d007      	beq.n	800048c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000480:	2b11      	cmp	r3, #17
 8000482:	d003      	beq.n	800048c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	685b      	ldr	r3, [r3, #4]
 8000488:	2b12      	cmp	r3, #18
 800048a:	d130      	bne.n	80004ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	689b      	ldr	r3, [r3, #8]
 8000490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000492:	697b      	ldr	r3, [r7, #20]
 8000494:	005b      	lsls	r3, r3, #1
 8000496:	2203      	movs	r2, #3
 8000498:	fa02 f303 	lsl.w	r3, r2, r3
 800049c:	43db      	mvns	r3, r3
 800049e:	693a      	ldr	r2, [r7, #16]
 80004a0:	4013      	ands	r3, r2
 80004a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	68da      	ldr	r2, [r3, #12]
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	fa02 f303 	lsl.w	r3, r2, r3
 80004b0:	693a      	ldr	r2, [r7, #16]
 80004b2:	4313      	orrs	r3, r2
 80004b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	693a      	ldr	r2, [r7, #16]
 80004ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80004c2:	2201      	movs	r2, #1
 80004c4:	697b      	ldr	r3, [r7, #20]
 80004c6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ca:	43db      	mvns	r3, r3
 80004cc:	693a      	ldr	r2, [r7, #16]
 80004ce:	4013      	ands	r3, r2
 80004d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	091b      	lsrs	r3, r3, #4
 80004d8:	f003 0201 	and.w	r2, r3, #1
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	fa02 f303 	lsl.w	r3, r2, r3
 80004e2:	693a      	ldr	r2, [r7, #16]
 80004e4:	4313      	orrs	r3, r2
 80004e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	693a      	ldr	r2, [r7, #16]
 80004ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	f003 0303 	and.w	r3, r3, #3
 80004f6:	2b03      	cmp	r3, #3
 80004f8:	d118      	bne.n	800052c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000500:	2201      	movs	r2, #1
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	fa02 f303 	lsl.w	r3, r2, r3
 8000508:	43db      	mvns	r3, r3
 800050a:	693a      	ldr	r2, [r7, #16]
 800050c:	4013      	ands	r3, r2
 800050e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	08db      	lsrs	r3, r3, #3
 8000516:	f003 0201 	and.w	r2, r3, #1
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	fa02 f303 	lsl.w	r3, r2, r3
 8000520:	693a      	ldr	r2, [r7, #16]
 8000522:	4313      	orrs	r3, r2
 8000524:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	693a      	ldr	r2, [r7, #16]
 800052a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	2203      	movs	r2, #3
 8000538:	fa02 f303 	lsl.w	r3, r2, r3
 800053c:	43db      	mvns	r3, r3
 800053e:	693a      	ldr	r2, [r7, #16]
 8000540:	4013      	ands	r3, r2
 8000542:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	689a      	ldr	r2, [r3, #8]
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	fa02 f303 	lsl.w	r3, r2, r3
 8000550:	693a      	ldr	r2, [r7, #16]
 8000552:	4313      	orrs	r3, r2
 8000554:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	693a      	ldr	r2, [r7, #16]
 800055a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	2b02      	cmp	r3, #2
 8000562:	d003      	beq.n	800056c <HAL_GPIO_Init+0x128>
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	2b12      	cmp	r3, #18
 800056a:	d123      	bne.n	80005b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	08da      	lsrs	r2, r3, #3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	3208      	adds	r2, #8
 8000574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000578:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	f003 0307 	and.w	r3, r3, #7
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	220f      	movs	r2, #15
 8000584:	fa02 f303 	lsl.w	r3, r2, r3
 8000588:	43db      	mvns	r3, r3
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	4013      	ands	r3, r2
 800058e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	691a      	ldr	r2, [r3, #16]
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	f003 0307 	and.w	r3, r3, #7
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	fa02 f303 	lsl.w	r3, r2, r3
 80005a0:	693a      	ldr	r2, [r7, #16]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	08da      	lsrs	r2, r3, #3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	3208      	adds	r2, #8
 80005ae:	6939      	ldr	r1, [r7, #16]
 80005b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	2203      	movs	r2, #3
 80005c0:	fa02 f303 	lsl.w	r3, r2, r3
 80005c4:	43db      	mvns	r3, r3
 80005c6:	693a      	ldr	r2, [r7, #16]
 80005c8:	4013      	ands	r3, r2
 80005ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	f003 0203 	and.w	r2, r3, #3
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	fa02 f303 	lsl.w	r3, r2, r3
 80005dc:	693a      	ldr	r2, [r7, #16]
 80005de:	4313      	orrs	r3, r2
 80005e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	693a      	ldr	r2, [r7, #16]
 80005e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	f000 80ac 	beq.w	800074e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f6:	4b5f      	ldr	r3, [pc, #380]	; (8000774 <HAL_GPIO_Init+0x330>)
 80005f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005fa:	4a5e      	ldr	r2, [pc, #376]	; (8000774 <HAL_GPIO_Init+0x330>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6613      	str	r3, [r2, #96]	; 0x60
 8000602:	4b5c      	ldr	r3, [pc, #368]	; (8000774 <HAL_GPIO_Init+0x330>)
 8000604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800060e:	4a5a      	ldr	r2, [pc, #360]	; (8000778 <HAL_GPIO_Init+0x334>)
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	089b      	lsrs	r3, r3, #2
 8000614:	3302      	adds	r3, #2
 8000616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800061a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	f003 0303 	and.w	r3, r3, #3
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	220f      	movs	r2, #15
 8000626:	fa02 f303 	lsl.w	r3, r2, r3
 800062a:	43db      	mvns	r3, r3
 800062c:	693a      	ldr	r2, [r7, #16]
 800062e:	4013      	ands	r3, r2
 8000630:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000638:	d025      	beq.n	8000686 <HAL_GPIO_Init+0x242>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4a4f      	ldr	r2, [pc, #316]	; (800077c <HAL_GPIO_Init+0x338>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d01f      	beq.n	8000682 <HAL_GPIO_Init+0x23e>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a4e      	ldr	r2, [pc, #312]	; (8000780 <HAL_GPIO_Init+0x33c>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d019      	beq.n	800067e <HAL_GPIO_Init+0x23a>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a4d      	ldr	r2, [pc, #308]	; (8000784 <HAL_GPIO_Init+0x340>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d013      	beq.n	800067a <HAL_GPIO_Init+0x236>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4a4c      	ldr	r2, [pc, #304]	; (8000788 <HAL_GPIO_Init+0x344>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d00d      	beq.n	8000676 <HAL_GPIO_Init+0x232>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a4b      	ldr	r2, [pc, #300]	; (800078c <HAL_GPIO_Init+0x348>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d007      	beq.n	8000672 <HAL_GPIO_Init+0x22e>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a4a      	ldr	r2, [pc, #296]	; (8000790 <HAL_GPIO_Init+0x34c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d101      	bne.n	800066e <HAL_GPIO_Init+0x22a>
 800066a:	2306      	movs	r3, #6
 800066c:	e00c      	b.n	8000688 <HAL_GPIO_Init+0x244>
 800066e:	2307      	movs	r3, #7
 8000670:	e00a      	b.n	8000688 <HAL_GPIO_Init+0x244>
 8000672:	2305      	movs	r3, #5
 8000674:	e008      	b.n	8000688 <HAL_GPIO_Init+0x244>
 8000676:	2304      	movs	r3, #4
 8000678:	e006      	b.n	8000688 <HAL_GPIO_Init+0x244>
 800067a:	2303      	movs	r3, #3
 800067c:	e004      	b.n	8000688 <HAL_GPIO_Init+0x244>
 800067e:	2302      	movs	r3, #2
 8000680:	e002      	b.n	8000688 <HAL_GPIO_Init+0x244>
 8000682:	2301      	movs	r3, #1
 8000684:	e000      	b.n	8000688 <HAL_GPIO_Init+0x244>
 8000686:	2300      	movs	r3, #0
 8000688:	697a      	ldr	r2, [r7, #20]
 800068a:	f002 0203 	and.w	r2, r2, #3
 800068e:	0092      	lsls	r2, r2, #2
 8000690:	4093      	lsls	r3, r2
 8000692:	693a      	ldr	r2, [r7, #16]
 8000694:	4313      	orrs	r3, r2
 8000696:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000698:	4937      	ldr	r1, [pc, #220]	; (8000778 <HAL_GPIO_Init+0x334>)
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	089b      	lsrs	r3, r3, #2
 800069e:	3302      	adds	r3, #2
 80006a0:	693a      	ldr	r2, [r7, #16]
 80006a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80006a6:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <HAL_GPIO_Init+0x350>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	43db      	mvns	r3, r3
 80006b0:	693a      	ldr	r2, [r7, #16]
 80006b2:	4013      	ands	r3, r2
 80006b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d003      	beq.n	80006ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80006c2:	693a      	ldr	r2, [r7, #16]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80006ca:	4a32      	ldr	r2, [pc, #200]	; (8000794 <HAL_GPIO_Init+0x350>)
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <HAL_GPIO_Init+0x350>)
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	43db      	mvns	r3, r3
 80006da:	693a      	ldr	r2, [r7, #16]
 80006dc:	4013      	ands	r3, r2
 80006de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d003      	beq.n	80006f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80006ec:	693a      	ldr	r2, [r7, #16]
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80006f4:	4a27      	ldr	r2, [pc, #156]	; (8000794 <HAL_GPIO_Init+0x350>)
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <HAL_GPIO_Init+0x350>)
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	43db      	mvns	r3, r3
 8000704:	693a      	ldr	r2, [r7, #16]
 8000706:	4013      	ands	r3, r2
 8000708:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000712:	2b00      	cmp	r3, #0
 8000714:	d003      	beq.n	800071e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000716:	693a      	ldr	r2, [r7, #16]
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	4313      	orrs	r3, r2
 800071c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800071e:	4a1d      	ldr	r2, [pc, #116]	; (8000794 <HAL_GPIO_Init+0x350>)
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <HAL_GPIO_Init+0x350>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	43db      	mvns	r3, r3
 800072e:	693a      	ldr	r2, [r7, #16]
 8000730:	4013      	ands	r3, r2
 8000732:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800073c:	2b00      	cmp	r3, #0
 800073e:	d003      	beq.n	8000748 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000740:	693a      	ldr	r2, [r7, #16]
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	4313      	orrs	r3, r2
 8000746:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000748:	4a12      	ldr	r2, [pc, #72]	; (8000794 <HAL_GPIO_Init+0x350>)
 800074a:	693b      	ldr	r3, [r7, #16]
 800074c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	3301      	adds	r3, #1
 8000752:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	fa22 f303 	lsr.w	r3, r2, r3
 800075e:	2b00      	cmp	r3, #0
 8000760:	f47f ae78 	bne.w	8000454 <HAL_GPIO_Init+0x10>
  }
}
 8000764:	bf00      	nop
 8000766:	bf00      	nop
 8000768:	371c      	adds	r7, #28
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40021000 	.word	0x40021000
 8000778:	40010000 	.word	0x40010000
 800077c:	48000400 	.word	0x48000400
 8000780:	48000800 	.word	0x48000800
 8000784:	48000c00 	.word	0x48000c00
 8000788:	48001000 	.word	0x48001000
 800078c:	48001400 	.word	0x48001400
 8000790:	48001800 	.word	0x48001800
 8000794:	40010400 	.word	0x40010400

08000798 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	691a      	ldr	r2, [r3, #16]
 80007a8:	887b      	ldrh	r3, [r7, #2]
 80007aa:	4013      	ands	r3, r2
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d002      	beq.n	80007b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80007b0:	2301      	movs	r3, #1
 80007b2:	73fb      	strb	r3, [r7, #15]
 80007b4:	e001      	b.n	80007ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3714      	adds	r7, #20
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	460b      	mov	r3, r1
 80007d2:	807b      	strh	r3, [r7, #2]
 80007d4:	4613      	mov	r3, r2
 80007d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007d8:	787b      	ldrb	r3, [r7, #1]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d003      	beq.n	80007e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007de:	887a      	ldrh	r2, [r7, #2]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80007e4:	e002      	b.n	80007ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007e6:	887a      	ldrh	r2, [r7, #2]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000804:	695a      	ldr	r2, [r3, #20]
 8000806:	88fb      	ldrh	r3, [r7, #6]
 8000808:	4013      	ands	r3, r2
 800080a:	2b00      	cmp	r3, #0
 800080c:	d006      	beq.n	800081c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800080e:	4a05      	ldr	r2, [pc, #20]	; (8000824 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000810:	88fb      	ldrh	r3, [r7, #6]
 8000812:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000814:	88fb      	ldrh	r3, [r7, #6]
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f806 	bl	8000828 <HAL_GPIO_EXTI_Callback>
  }
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40010400 	.word	0x40010400

08000828 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000844:	4b04      	ldr	r3, [pc, #16]	; (8000858 <HAL_PWREx_GetVoltageRange+0x18>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800084c:	4618      	mov	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40007000 	.word	0x40007000

0800085c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800086a:	d130      	bne.n	80008ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800086c:	4b23      	ldr	r3, [pc, #140]	; (80008fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000878:	d038      	beq.n	80008ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800087a:	4b20      	ldr	r3, [pc, #128]	; (80008fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000882:	4a1e      	ldr	r2, [pc, #120]	; (80008fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000884:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000888:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800088a:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2232      	movs	r2, #50	; 0x32
 8000890:	fb02 f303 	mul.w	r3, r2, r3
 8000894:	4a1b      	ldr	r2, [pc, #108]	; (8000904 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000896:	fba2 2303 	umull	r2, r3, r2, r3
 800089a:	0c9b      	lsrs	r3, r3, #18
 800089c:	3301      	adds	r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80008a0:	e002      	b.n	80008a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	3b01      	subs	r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008aa:	695b      	ldr	r3, [r3, #20]
 80008ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008b4:	d102      	bne.n	80008bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d1f2      	bne.n	80008a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008be:	695b      	ldr	r3, [r3, #20]
 80008c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008c8:	d110      	bne.n	80008ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80008ca:	2303      	movs	r3, #3
 80008cc:	e00f      	b.n	80008ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008da:	d007      	beq.n	80008ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80008e4:	4a05      	ldr	r2, [pc, #20]	; (80008fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3714      	adds	r7, #20
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40007000 	.word	0x40007000
 8000900:	20000008 	.word	0x20000008
 8000904:	431bde83 	.word	0x431bde83

08000908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d101      	bne.n	800091a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	e3d4      	b.n	80010c4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800091a:	4ba1      	ldr	r3, [pc, #644]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	f003 030c 	and.w	r3, r3, #12
 8000922:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000924:	4b9e      	ldr	r3, [pc, #632]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	f003 0303 	and.w	r3, r3, #3
 800092c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f003 0310 	and.w	r3, r3, #16
 8000936:	2b00      	cmp	r3, #0
 8000938:	f000 80e4 	beq.w	8000b04 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d007      	beq.n	8000952 <HAL_RCC_OscConfig+0x4a>
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	2b0c      	cmp	r3, #12
 8000946:	f040 808b 	bne.w	8000a60 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	2b01      	cmp	r3, #1
 800094e:	f040 8087 	bne.w	8000a60 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000952:	4b93      	ldr	r3, [pc, #588]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	2b00      	cmp	r3, #0
 800095c:	d005      	beq.n	800096a <HAL_RCC_OscConfig+0x62>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d101      	bne.n	800096a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	e3ac      	b.n	80010c4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6a1a      	ldr	r2, [r3, #32]
 800096e:	4b8c      	ldr	r3, [pc, #560]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f003 0308 	and.w	r3, r3, #8
 8000976:	2b00      	cmp	r3, #0
 8000978:	d004      	beq.n	8000984 <HAL_RCC_OscConfig+0x7c>
 800097a:	4b89      	ldr	r3, [pc, #548]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000982:	e005      	b.n	8000990 <HAL_RCC_OscConfig+0x88>
 8000984:	4b86      	ldr	r3, [pc, #536]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800098a:	091b      	lsrs	r3, r3, #4
 800098c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000990:	4293      	cmp	r3, r2
 8000992:	d223      	bcs.n	80009dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6a1b      	ldr	r3, [r3, #32]
 8000998:	4618      	mov	r0, r3
 800099a:	f000 fd5d 	bl	8001458 <RCC_SetFlashLatencyFromMSIRange>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80009a4:	2301      	movs	r3, #1
 80009a6:	e38d      	b.n	80010c4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009a8:	4b7d      	ldr	r3, [pc, #500]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a7c      	ldr	r2, [pc, #496]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 80009ae:	f043 0308 	orr.w	r3, r3, #8
 80009b2:	6013      	str	r3, [r2, #0]
 80009b4:	4b7a      	ldr	r3, [pc, #488]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6a1b      	ldr	r3, [r3, #32]
 80009c0:	4977      	ldr	r1, [pc, #476]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 80009c2:	4313      	orrs	r3, r2
 80009c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80009c6:	4b76      	ldr	r3, [pc, #472]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	021b      	lsls	r3, r3, #8
 80009d4:	4972      	ldr	r1, [pc, #456]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 80009d6:	4313      	orrs	r3, r2
 80009d8:	604b      	str	r3, [r1, #4]
 80009da:	e025      	b.n	8000a28 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009dc:	4b70      	ldr	r3, [pc, #448]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a6f      	ldr	r2, [pc, #444]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 80009e2:	f043 0308 	orr.w	r3, r3, #8
 80009e6:	6013      	str	r3, [r2, #0]
 80009e8:	4b6d      	ldr	r3, [pc, #436]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6a1b      	ldr	r3, [r3, #32]
 80009f4:	496a      	ldr	r1, [pc, #424]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 80009f6:	4313      	orrs	r3, r2
 80009f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80009fa:	4b69      	ldr	r3, [pc, #420]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	021b      	lsls	r3, r3, #8
 8000a08:	4965      	ldr	r1, [pc, #404]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d109      	bne.n	8000a28 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6a1b      	ldr	r3, [r3, #32]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 fd1d 	bl	8001458 <RCC_SetFlashLatencyFromMSIRange>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
 8000a26:	e34d      	b.n	80010c4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000a28:	f000 fc36 	bl	8001298 <HAL_RCC_GetSysClockFreq>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	4b5c      	ldr	r3, [pc, #368]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	091b      	lsrs	r3, r3, #4
 8000a34:	f003 030f 	and.w	r3, r3, #15
 8000a38:	495a      	ldr	r1, [pc, #360]	; (8000ba4 <HAL_RCC_OscConfig+0x29c>)
 8000a3a:	5ccb      	ldrb	r3, [r1, r3]
 8000a3c:	f003 031f 	and.w	r3, r3, #31
 8000a40:	fa22 f303 	lsr.w	r3, r2, r3
 8000a44:	4a58      	ldr	r2, [pc, #352]	; (8000ba8 <HAL_RCC_OscConfig+0x2a0>)
 8000a46:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000a48:	4b58      	ldr	r3, [pc, #352]	; (8000bac <HAL_RCC_OscConfig+0x2a4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f001 fc5b 	bl	8002308 <HAL_InitTick>
 8000a52:	4603      	mov	r3, r0
 8000a54:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d052      	beq.n	8000b02 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	e331      	b.n	80010c4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d032      	beq.n	8000ace <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000a68:	4b4d      	ldr	r3, [pc, #308]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a4c      	ldr	r2, [pc, #304]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000a74:	f7ff fbd4 	bl	8000220 <HAL_GetTick>
 8000a78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000a7a:	e008      	b.n	8000a8e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000a7c:	f7ff fbd0 	bl	8000220 <HAL_GetTick>
 8000a80:	4602      	mov	r2, r0
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d901      	bls.n	8000a8e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	e31a      	b.n	80010c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000a8e:	4b44      	ldr	r3, [pc, #272]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d0f0      	beq.n	8000a7c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a9a:	4b41      	ldr	r3, [pc, #260]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a40      	ldr	r2, [pc, #256]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000aa0:	f043 0308 	orr.w	r3, r3, #8
 8000aa4:	6013      	str	r3, [r2, #0]
 8000aa6:	4b3e      	ldr	r3, [pc, #248]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6a1b      	ldr	r3, [r3, #32]
 8000ab2:	493b      	ldr	r1, [pc, #236]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ab8:	4b39      	ldr	r3, [pc, #228]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	69db      	ldr	r3, [r3, #28]
 8000ac4:	021b      	lsls	r3, r3, #8
 8000ac6:	4936      	ldr	r1, [pc, #216]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	604b      	str	r3, [r1, #4]
 8000acc:	e01a      	b.n	8000b04 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ace:	4b34      	ldr	r3, [pc, #208]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a33      	ldr	r2, [pc, #204]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000ad4:	f023 0301 	bic.w	r3, r3, #1
 8000ad8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ada:	f7ff fba1 	bl	8000220 <HAL_GetTick>
 8000ade:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ae0:	e008      	b.n	8000af4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ae2:	f7ff fb9d 	bl	8000220 <HAL_GetTick>
 8000ae6:	4602      	mov	r2, r0
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	d901      	bls.n	8000af4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000af0:	2303      	movs	r3, #3
 8000af2:	e2e7      	b.n	80010c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000af4:	4b2a      	ldr	r3, [pc, #168]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f003 0302 	and.w	r3, r3, #2
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1f0      	bne.n	8000ae2 <HAL_RCC_OscConfig+0x1da>
 8000b00:	e000      	b.n	8000b04 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b02:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d074      	beq.n	8000bfa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	2b08      	cmp	r3, #8
 8000b14:	d005      	beq.n	8000b22 <HAL_RCC_OscConfig+0x21a>
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	2b0c      	cmp	r3, #12
 8000b1a:	d10e      	bne.n	8000b3a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d10b      	bne.n	8000b3a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b22:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d064      	beq.n	8000bf8 <HAL_RCC_OscConfig+0x2f0>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d160      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e2c4      	b.n	80010c4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b42:	d106      	bne.n	8000b52 <HAL_RCC_OscConfig+0x24a>
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b4e:	6013      	str	r3, [r2, #0]
 8000b50:	e01d      	b.n	8000b8e <HAL_RCC_OscConfig+0x286>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b5a:	d10c      	bne.n	8000b76 <HAL_RCC_OscConfig+0x26e>
 8000b5c:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000b62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	e00b      	b.n	8000b8e <HAL_RCC_OscConfig+0x286>
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a09      	ldr	r2, [pc, #36]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b80:	6013      	str	r3, [r2, #0]
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a06      	ldr	r2, [pc, #24]	; (8000ba0 <HAL_RCC_OscConfig+0x298>)
 8000b88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b8c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d01c      	beq.n	8000bd0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b96:	f7ff fb43 	bl	8000220 <HAL_GetTick>
 8000b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000b9c:	e011      	b.n	8000bc2 <HAL_RCC_OscConfig+0x2ba>
 8000b9e:	bf00      	nop
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	08002574 	.word	0x08002574
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bb0:	f7ff fb36 	bl	8000220 <HAL_GetTick>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	2b64      	cmp	r3, #100	; 0x64
 8000bbc:	d901      	bls.n	8000bc2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	e280      	b.n	80010c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000bc2:	4baf      	ldr	r3, [pc, #700]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d0f0      	beq.n	8000bb0 <HAL_RCC_OscConfig+0x2a8>
 8000bce:	e014      	b.n	8000bfa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bd0:	f7ff fb26 	bl	8000220 <HAL_GetTick>
 8000bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000bd6:	e008      	b.n	8000bea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bd8:	f7ff fb22 	bl	8000220 <HAL_GetTick>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	2b64      	cmp	r3, #100	; 0x64
 8000be4:	d901      	bls.n	8000bea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000be6:	2303      	movs	r3, #3
 8000be8:	e26c      	b.n	80010c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000bea:	4ba5      	ldr	r3, [pc, #660]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1f0      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x2d0>
 8000bf6:	e000      	b.n	8000bfa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d060      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	2b04      	cmp	r3, #4
 8000c0a:	d005      	beq.n	8000c18 <HAL_RCC_OscConfig+0x310>
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	2b0c      	cmp	r3, #12
 8000c10:	d119      	bne.n	8000c46 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d116      	bne.n	8000c46 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c18:	4b99      	ldr	r3, [pc, #612]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d005      	beq.n	8000c30 <HAL_RCC_OscConfig+0x328>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d101      	bne.n	8000c30 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e249      	b.n	80010c4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c30:	4b93      	ldr	r3, [pc, #588]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	691b      	ldr	r3, [r3, #16]
 8000c3c:	061b      	lsls	r3, r3, #24
 8000c3e:	4990      	ldr	r1, [pc, #576]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000c40:	4313      	orrs	r3, r2
 8000c42:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c44:	e040      	b.n	8000cc8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d023      	beq.n	8000c96 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c4e:	4b8c      	ldr	r3, [pc, #560]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a8b      	ldr	r2, [pc, #556]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c5a:	f7ff fae1 	bl	8000220 <HAL_GetTick>
 8000c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000c60:	e008      	b.n	8000c74 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c62:	f7ff fadd 	bl	8000220 <HAL_GetTick>
 8000c66:	4602      	mov	r2, r0
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	1ad3      	subs	r3, r2, r3
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d901      	bls.n	8000c74 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000c70:	2303      	movs	r3, #3
 8000c72:	e227      	b.n	80010c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000c74:	4b82      	ldr	r3, [pc, #520]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d0f0      	beq.n	8000c62 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c80:	4b7f      	ldr	r3, [pc, #508]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	691b      	ldr	r3, [r3, #16]
 8000c8c:	061b      	lsls	r3, r3, #24
 8000c8e:	497c      	ldr	r1, [pc, #496]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000c90:	4313      	orrs	r3, r2
 8000c92:	604b      	str	r3, [r1, #4]
 8000c94:	e018      	b.n	8000cc8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c96:	4b7a      	ldr	r3, [pc, #488]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a79      	ldr	r2, [pc, #484]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ca2:	f7ff fabd 	bl	8000220 <HAL_GetTick>
 8000ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ca8:	e008      	b.n	8000cbc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000caa:	f7ff fab9 	bl	8000220 <HAL_GetTick>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d901      	bls.n	8000cbc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	e203      	b.n	80010c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000cbc:	4b70      	ldr	r3, [pc, #448]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d1f0      	bne.n	8000caa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 0308 	and.w	r3, r3, #8
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d03c      	beq.n	8000d4e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	695b      	ldr	r3, [r3, #20]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d01c      	beq.n	8000d16 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cdc:	4b68      	ldr	r3, [pc, #416]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ce2:	4a67      	ldr	r2, [pc, #412]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cec:	f7ff fa98 	bl	8000220 <HAL_GetTick>
 8000cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000cf2:	e008      	b.n	8000d06 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cf4:	f7ff fa94 	bl	8000220 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d901      	bls.n	8000d06 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000d02:	2303      	movs	r3, #3
 8000d04:	e1de      	b.n	80010c4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000d06:	4b5e      	ldr	r3, [pc, #376]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0ef      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x3ec>
 8000d14:	e01b      	b.n	8000d4e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d16:	4b5a      	ldr	r3, [pc, #360]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d1c:	4a58      	ldr	r2, [pc, #352]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000d1e:	f023 0301 	bic.w	r3, r3, #1
 8000d22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d26:	f7ff fa7b 	bl	8000220 <HAL_GetTick>
 8000d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d2c:	e008      	b.n	8000d40 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d2e:	f7ff fa77 	bl	8000220 <HAL_GetTick>
 8000d32:	4602      	mov	r2, r0
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d901      	bls.n	8000d40 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	e1c1      	b.n	80010c4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d40:	4b4f      	ldr	r3, [pc, #316]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d1ef      	bne.n	8000d2e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f000 80a6 	beq.w	8000ea8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000d60:	4b47      	ldr	r3, [pc, #284]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d10d      	bne.n	8000d88 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d6c:	4b44      	ldr	r3, [pc, #272]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d70:	4a43      	ldr	r2, [pc, #268]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d76:	6593      	str	r3, [r2, #88]	; 0x58
 8000d78:	4b41      	ldr	r3, [pc, #260]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d84:	2301      	movs	r3, #1
 8000d86:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d88:	4b3e      	ldr	r3, [pc, #248]	; (8000e84 <HAL_RCC_OscConfig+0x57c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d118      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d94:	4b3b      	ldr	r3, [pc, #236]	; (8000e84 <HAL_RCC_OscConfig+0x57c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a3a      	ldr	r2, [pc, #232]	; (8000e84 <HAL_RCC_OscConfig+0x57c>)
 8000d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000da0:	f7ff fa3e 	bl	8000220 <HAL_GetTick>
 8000da4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000da6:	e008      	b.n	8000dba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000da8:	f7ff fa3a 	bl	8000220 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d901      	bls.n	8000dba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e184      	b.n	80010c4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dba:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <HAL_RCC_OscConfig+0x57c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0f0      	beq.n	8000da8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d108      	bne.n	8000de0 <HAL_RCC_OscConfig+0x4d8>
 8000dce:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dd4:	4a2a      	ldr	r2, [pc, #168]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000dde:	e024      	b.n	8000e2a <HAL_RCC_OscConfig+0x522>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	2b05      	cmp	r3, #5
 8000de6:	d110      	bne.n	8000e0a <HAL_RCC_OscConfig+0x502>
 8000de8:	4b25      	ldr	r3, [pc, #148]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dee:	4a24      	ldr	r2, [pc, #144]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000df0:	f043 0304 	orr.w	r3, r3, #4
 8000df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000df8:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dfe:	4a20      	ldr	r2, [pc, #128]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e08:	e00f      	b.n	8000e2a <HAL_RCC_OscConfig+0x522>
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e10:	4a1b      	ldr	r2, [pc, #108]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000e12:	f023 0301 	bic.w	r3, r3, #1
 8000e16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e20:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000e22:	f023 0304 	bic.w	r3, r3, #4
 8000e26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d016      	beq.n	8000e60 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e32:	f7ff f9f5 	bl	8000220 <HAL_GetTick>
 8000e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e38:	e00a      	b.n	8000e50 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e3a:	f7ff f9f1 	bl	8000220 <HAL_GetTick>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d901      	bls.n	8000e50 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	e139      	b.n	80010c4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <HAL_RCC_OscConfig+0x578>)
 8000e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d0ed      	beq.n	8000e3a <HAL_RCC_OscConfig+0x532>
 8000e5e:	e01a      	b.n	8000e96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e60:	f7ff f9de 	bl	8000220 <HAL_GetTick>
 8000e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000e66:	e00f      	b.n	8000e88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e68:	f7ff f9da 	bl	8000220 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d906      	bls.n	8000e88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e122      	b.n	80010c4 <HAL_RCC_OscConfig+0x7bc>
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000e88:	4b90      	ldr	r3, [pc, #576]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 8000e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1e8      	bne.n	8000e68 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e96:	7ffb      	ldrb	r3, [r7, #31]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d105      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e9c:	4b8b      	ldr	r3, [pc, #556]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 8000e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea0:	4a8a      	ldr	r2, [pc, #552]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 8000ea2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f000 8108 	beq.w	80010c2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	f040 80d0 	bne.w	800105c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000ebc:	4b83      	ldr	r3, [pc, #524]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	f003 0203 	and.w	r2, r3, #3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d130      	bne.n	8000f32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	3b01      	subs	r3, #1
 8000edc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d127      	bne.n	8000f32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d11f      	bne.n	8000f32 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000efc:	2a07      	cmp	r2, #7
 8000efe:	bf14      	ite	ne
 8000f00:	2201      	movne	r2, #1
 8000f02:	2200      	moveq	r2, #0
 8000f04:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d113      	bne.n	8000f32 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f14:	085b      	lsrs	r3, r3, #1
 8000f16:	3b01      	subs	r3, #1
 8000f18:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d109      	bne.n	8000f32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	085b      	lsrs	r3, r3, #1
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d06e      	beq.n	8001010 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	2b0c      	cmp	r3, #12
 8000f36:	d069      	beq.n	800100c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8000f38:	4b64      	ldr	r3, [pc, #400]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d105      	bne.n	8000f50 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8000f44:	4b61      	ldr	r3, [pc, #388]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e0b7      	b.n	80010c4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8000f54:	4b5d      	ldr	r3, [pc, #372]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a5c      	ldr	r2, [pc, #368]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 8000f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f5e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000f60:	f7ff f95e 	bl	8000220 <HAL_GetTick>
 8000f64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f66:	e008      	b.n	8000f7a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f68:	f7ff f95a 	bl	8000220 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d901      	bls.n	8000f7a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e0a4      	b.n	80010c4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f7a:	4b54      	ldr	r3, [pc, #336]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1f0      	bne.n	8000f68 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f86:	4b51      	ldr	r3, [pc, #324]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 8000f88:	68da      	ldr	r2, [r3, #12]
 8000f8a:	4b51      	ldr	r3, [pc, #324]	; (80010d0 <HAL_RCC_OscConfig+0x7c8>)
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000f96:	3a01      	subs	r2, #1
 8000f98:	0112      	lsls	r2, r2, #4
 8000f9a:	4311      	orrs	r1, r2
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000fa0:	0212      	lsls	r2, r2, #8
 8000fa2:	4311      	orrs	r1, r2
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000fa8:	0852      	lsrs	r2, r2, #1
 8000faa:	3a01      	subs	r2, #1
 8000fac:	0552      	lsls	r2, r2, #21
 8000fae:	4311      	orrs	r1, r2
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000fb4:	0852      	lsrs	r2, r2, #1
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	0652      	lsls	r2, r2, #25
 8000fba:	4311      	orrs	r1, r2
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000fc0:	0912      	lsrs	r2, r2, #4
 8000fc2:	0452      	lsls	r2, r2, #17
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	4941      	ldr	r1, [pc, #260]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8000fcc:	4b3f      	ldr	r3, [pc, #252]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a3e      	ldr	r2, [pc, #248]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 8000fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000fd8:	4b3c      	ldr	r3, [pc, #240]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	4a3b      	ldr	r2, [pc, #236]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 8000fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fe2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000fe4:	f7ff f91c 	bl	8000220 <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fec:	f7ff f918 	bl	8000220 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e062      	b.n	80010c4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000ffe:	4b33      	ldr	r3, [pc, #204]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0f0      	beq.n	8000fec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800100a:	e05a      	b.n	80010c2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e059      	b.n	80010c4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001010:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d152      	bne.n	80010c2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800101c:	4b2b      	ldr	r3, [pc, #172]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a2a      	ldr	r2, [pc, #168]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 8001022:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001026:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001028:	4b28      	ldr	r3, [pc, #160]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	4a27      	ldr	r2, [pc, #156]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 800102e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001032:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001034:	f7ff f8f4 	bl	8000220 <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800103c:	f7ff f8f0 	bl	8000220 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e03a      	b.n	80010c4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d0f0      	beq.n	800103c <HAL_RCC_OscConfig+0x734>
 800105a:	e032      	b.n	80010c2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	2b0c      	cmp	r3, #12
 8001060:	d02d      	beq.n	80010be <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001062:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a19      	ldr	r2, [pc, #100]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 8001068:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800106c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d105      	bne.n	8001086 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800107a:	4b14      	ldr	r3, [pc, #80]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	4a13      	ldr	r2, [pc, #76]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 8001080:	f023 0303 	bic.w	r3, r3, #3
 8001084:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	4a10      	ldr	r2, [pc, #64]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 800108c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001094:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001096:	f7ff f8c3 	bl	8000220 <HAL_GetTick>
 800109a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800109c:	e008      	b.n	80010b0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800109e:	f7ff f8bf 	bl	8000220 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e009      	b.n	80010c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_RCC_OscConfig+0x7c4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1f0      	bne.n	800109e <HAL_RCC_OscConfig+0x796>
 80010bc:	e001      	b.n	80010c2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3720      	adds	r7, #32
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40021000 	.word	0x40021000
 80010d0:	f99d808c 	.word	0xf99d808c

080010d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e0c8      	b.n	800127a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010e8:	4b66      	ldr	r3, [pc, #408]	; (8001284 <HAL_RCC_ClockConfig+0x1b0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d910      	bls.n	8001118 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010f6:	4b63      	ldr	r3, [pc, #396]	; (8001284 <HAL_RCC_ClockConfig+0x1b0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f023 0207 	bic.w	r2, r3, #7
 80010fe:	4961      	ldr	r1, [pc, #388]	; (8001284 <HAL_RCC_ClockConfig+0x1b0>)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	4313      	orrs	r3, r2
 8001104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001106:	4b5f      	ldr	r3, [pc, #380]	; (8001284 <HAL_RCC_ClockConfig+0x1b0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d001      	beq.n	8001118 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e0b0      	b.n	800127a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	2b00      	cmp	r3, #0
 8001122:	d04c      	beq.n	80011be <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b03      	cmp	r3, #3
 800112a:	d107      	bne.n	800113c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800112c:	4b56      	ldr	r3, [pc, #344]	; (8001288 <HAL_RCC_ClockConfig+0x1b4>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d121      	bne.n	800117c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e09e      	b.n	800127a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b02      	cmp	r3, #2
 8001142:	d107      	bne.n	8001154 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001144:	4b50      	ldr	r3, [pc, #320]	; (8001288 <HAL_RCC_ClockConfig+0x1b4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d115      	bne.n	800117c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e092      	b.n	800127a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d107      	bne.n	800116c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800115c:	4b4a      	ldr	r3, [pc, #296]	; (8001288 <HAL_RCC_ClockConfig+0x1b4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d109      	bne.n	800117c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e086      	b.n	800127a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800116c:	4b46      	ldr	r3, [pc, #280]	; (8001288 <HAL_RCC_ClockConfig+0x1b4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e07e      	b.n	800127a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800117c:	4b42      	ldr	r3, [pc, #264]	; (8001288 <HAL_RCC_ClockConfig+0x1b4>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f023 0203 	bic.w	r2, r3, #3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	493f      	ldr	r1, [pc, #252]	; (8001288 <HAL_RCC_ClockConfig+0x1b4>)
 800118a:	4313      	orrs	r3, r2
 800118c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800118e:	f7ff f847 	bl	8000220 <HAL_GetTick>
 8001192:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001194:	e00a      	b.n	80011ac <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001196:	f7ff f843 	bl	8000220 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e066      	b.n	800127a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ac:	4b36      	ldr	r3, [pc, #216]	; (8001288 <HAL_RCC_ClockConfig+0x1b4>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 020c 	and.w	r2, r3, #12
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d1eb      	bne.n	8001196 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d008      	beq.n	80011dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011ca:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <HAL_RCC_ClockConfig+0x1b4>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	492c      	ldr	r1, [pc, #176]	; (8001288 <HAL_RCC_ClockConfig+0x1b4>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011dc:	4b29      	ldr	r3, [pc, #164]	; (8001284 <HAL_RCC_ClockConfig+0x1b0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d210      	bcs.n	800120c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <HAL_RCC_ClockConfig+0x1b0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f023 0207 	bic.w	r2, r3, #7
 80011f2:	4924      	ldr	r1, [pc, #144]	; (8001284 <HAL_RCC_ClockConfig+0x1b0>)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fa:	4b22      	ldr	r3, [pc, #136]	; (8001284 <HAL_RCC_ClockConfig+0x1b0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d001      	beq.n	800120c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e036      	b.n	800127a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	d008      	beq.n	800122a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001218:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <HAL_RCC_ClockConfig+0x1b4>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	4918      	ldr	r1, [pc, #96]	; (8001288 <HAL_RCC_ClockConfig+0x1b4>)
 8001226:	4313      	orrs	r3, r2
 8001228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d009      	beq.n	800124a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <HAL_RCC_ClockConfig+0x1b4>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	4910      	ldr	r1, [pc, #64]	; (8001288 <HAL_RCC_ClockConfig+0x1b4>)
 8001246:	4313      	orrs	r3, r2
 8001248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800124a:	f000 f825 	bl	8001298 <HAL_RCC_GetSysClockFreq>
 800124e:	4602      	mov	r2, r0
 8001250:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <HAL_RCC_ClockConfig+0x1b4>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	490c      	ldr	r1, [pc, #48]	; (800128c <HAL_RCC_ClockConfig+0x1b8>)
 800125c:	5ccb      	ldrb	r3, [r1, r3]
 800125e:	f003 031f 	and.w	r3, r3, #31
 8001262:	fa22 f303 	lsr.w	r3, r2, r3
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <HAL_RCC_ClockConfig+0x1bc>)
 8001268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_RCC_ClockConfig+0x1c0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f001 f84a 	bl	8002308 <HAL_InitTick>
 8001274:	4603      	mov	r3, r0
 8001276:	72fb      	strb	r3, [r7, #11]

  return status;
 8001278:	7afb      	ldrb	r3, [r7, #11]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40022000 	.word	0x40022000
 8001288:	40021000 	.word	0x40021000
 800128c:	08002574 	.word	0x08002574
 8001290:	20000008 	.word	0x20000008
 8001294:	20000000 	.word	0x20000000

08001298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	; 0x24
 800129c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012a6:	4b3e      	ldr	r3, [pc, #248]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012b0:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d005      	beq.n	80012cc <HAL_RCC_GetSysClockFreq+0x34>
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	2b0c      	cmp	r3, #12
 80012c4:	d121      	bne.n	800130a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d11e      	bne.n	800130a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80012cc:	4b34      	ldr	r3, [pc, #208]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d107      	bne.n	80012e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80012d8:	4b31      	ldr	r3, [pc, #196]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80012da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012de:	0a1b      	lsrs	r3, r3, #8
 80012e0:	f003 030f 	and.w	r3, r3, #15
 80012e4:	61fb      	str	r3, [r7, #28]
 80012e6:	e005      	b.n	80012f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80012e8:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	091b      	lsrs	r3, r3, #4
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80012f4:	4a2b      	ldr	r2, [pc, #172]	; (80013a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d10d      	bne.n	8001320 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001308:	e00a      	b.n	8001320 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	2b04      	cmp	r3, #4
 800130e:	d102      	bne.n	8001316 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001310:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001312:	61bb      	str	r3, [r7, #24]
 8001314:	e004      	b.n	8001320 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	2b08      	cmp	r3, #8
 800131a:	d101      	bne.n	8001320 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800131c:	4b23      	ldr	r3, [pc, #140]	; (80013ac <HAL_RCC_GetSysClockFreq+0x114>)
 800131e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	2b0c      	cmp	r3, #12
 8001324:	d134      	bne.n	8001390 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001326:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d003      	beq.n	800133e <HAL_RCC_GetSysClockFreq+0xa6>
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	2b03      	cmp	r3, #3
 800133a:	d003      	beq.n	8001344 <HAL_RCC_GetSysClockFreq+0xac>
 800133c:	e005      	b.n	800134a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001340:	617b      	str	r3, [r7, #20]
      break;
 8001342:	e005      	b.n	8001350 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <HAL_RCC_GetSysClockFreq+0x114>)
 8001346:	617b      	str	r3, [r7, #20]
      break;
 8001348:	e002      	b.n	8001350 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	617b      	str	r3, [r7, #20]
      break;
 800134e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	3301      	adds	r3, #1
 800135c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	0a1b      	lsrs	r3, r3, #8
 8001364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	fb02 f203 	mul.w	r2, r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	fbb2 f3f3 	udiv	r3, r2, r3
 8001374:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	0e5b      	lsrs	r3, r3, #25
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	3301      	adds	r3, #1
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	fbb2 f3f3 	udiv	r3, r2, r3
 800138e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001390:	69bb      	ldr	r3, [r7, #24]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3724      	adds	r7, #36	; 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000
 80013a4:	0800258c 	.word	0x0800258c
 80013a8:	00f42400 	.word	0x00f42400
 80013ac:	007a1200 	.word	0x007a1200

080013b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80013b6:	681b      	ldr	r3, [r3, #0]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000008 	.word	0x20000008

080013c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80013cc:	f7ff fff0 	bl	80013b0 <HAL_RCC_GetHCLKFreq>
 80013d0:	4602      	mov	r2, r0
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	0adb      	lsrs	r3, r3, #11
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	4904      	ldr	r1, [pc, #16]	; (80013f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80013de:	5ccb      	ldrb	r3, [r1, r3]
 80013e0:	f003 031f 	and.w	r3, r3, #31
 80013e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40021000 	.word	0x40021000
 80013f0:	08002584 	.word	0x08002584

080013f4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	220f      	movs	r2, #15
 8001402:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_RCC_GetClockConfig+0x5c>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 0203 	and.w	r2, r3, #3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <HAL_RCC_GetClockConfig+0x5c>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <HAL_RCC_GetClockConfig+0x5c>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_RCC_GetClockConfig+0x5c>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	08db      	lsrs	r3, r3, #3
 800142e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <HAL_RCC_GetClockConfig+0x60>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0207 	and.w	r2, r3, #7
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	601a      	str	r2, [r3, #0]
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000
 8001454:	40022000 	.word	0x40022000

08001458 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001464:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001470:	f7ff f9e6 	bl	8000840 <HAL_PWREx_GetVoltageRange>
 8001474:	6178      	str	r0, [r7, #20]
 8001476:	e014      	b.n	80014a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800147a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147c:	4a24      	ldr	r2, [pc, #144]	; (8001510 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800147e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001482:	6593      	str	r3, [r2, #88]	; 0x58
 8001484:	4b22      	ldr	r3, [pc, #136]	; (8001510 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001490:	f7ff f9d6 	bl	8000840 <HAL_PWREx_GetVoltageRange>
 8001494:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001496:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149a:	4a1d      	ldr	r2, [pc, #116]	; (8001510 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800149c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014a8:	d10b      	bne.n	80014c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b80      	cmp	r3, #128	; 0x80
 80014ae:	d919      	bls.n	80014e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2ba0      	cmp	r3, #160	; 0xa0
 80014b4:	d902      	bls.n	80014bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80014b6:	2302      	movs	r3, #2
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	e013      	b.n	80014e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80014bc:	2301      	movs	r3, #1
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	e010      	b.n	80014e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b80      	cmp	r3, #128	; 0x80
 80014c6:	d902      	bls.n	80014ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80014c8:	2303      	movs	r3, #3
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	e00a      	b.n	80014e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b80      	cmp	r3, #128	; 0x80
 80014d2:	d102      	bne.n	80014da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80014d4:	2302      	movs	r3, #2
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	e004      	b.n	80014e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b70      	cmp	r3, #112	; 0x70
 80014de:	d101      	bne.n	80014e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80014e0:	2301      	movs	r3, #1
 80014e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f023 0207 	bic.w	r2, r3, #7
 80014ec:	4909      	ldr	r1, [pc, #36]	; (8001514 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d001      	beq.n	8001506 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40021000 	.word	0x40021000
 8001514:	40022000 	.word	0x40022000

08001518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e049      	b.n	80015be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d106      	bne.n	8001544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 febe 	bl	80022c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2202      	movs	r2, #2
 8001548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3304      	adds	r3, #4
 8001554:	4619      	mov	r1, r3
 8001556:	4610      	mov	r0, r2
 8001558:	f000 fab4 	bl	8001ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d001      	beq.n	80015e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e04f      	b.n	8001680 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2202      	movs	r2, #2
 80015e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68da      	ldr	r2, [r3, #12]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 0201 	orr.w	r2, r2, #1
 80015f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a23      	ldr	r2, [pc, #140]	; (800168c <HAL_TIM_Base_Start_IT+0xc4>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d01d      	beq.n	800163e <HAL_TIM_Base_Start_IT+0x76>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800160a:	d018      	beq.n	800163e <HAL_TIM_Base_Start_IT+0x76>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a1f      	ldr	r2, [pc, #124]	; (8001690 <HAL_TIM_Base_Start_IT+0xc8>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d013      	beq.n	800163e <HAL_TIM_Base_Start_IT+0x76>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a1e      	ldr	r2, [pc, #120]	; (8001694 <HAL_TIM_Base_Start_IT+0xcc>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d00e      	beq.n	800163e <HAL_TIM_Base_Start_IT+0x76>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a1c      	ldr	r2, [pc, #112]	; (8001698 <HAL_TIM_Base_Start_IT+0xd0>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d009      	beq.n	800163e <HAL_TIM_Base_Start_IT+0x76>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a1b      	ldr	r2, [pc, #108]	; (800169c <HAL_TIM_Base_Start_IT+0xd4>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d004      	beq.n	800163e <HAL_TIM_Base_Start_IT+0x76>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a19      	ldr	r2, [pc, #100]	; (80016a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d115      	bne.n	800166a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001646:	4013      	ands	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2b06      	cmp	r3, #6
 800164e:	d015      	beq.n	800167c <HAL_TIM_Base_Start_IT+0xb4>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001656:	d011      	beq.n	800167c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0201 	orr.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001668:	e008      	b.n	800167c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f042 0201 	orr.w	r2, r2, #1
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	e000      	b.n	800167e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800167c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	40012c00 	.word	0x40012c00
 8001690:	40000400 	.word	0x40000400
 8001694:	40000800 	.word	0x40000800
 8001698:	40000c00 	.word	0x40000c00
 800169c:	40013400 	.word	0x40013400
 80016a0:	40014000 	.word	0x40014000
 80016a4:	00010007 	.word	0x00010007

080016a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d122      	bne.n	8001704 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d11b      	bne.n	8001704 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f06f 0202 	mvn.w	r2, #2
 80016d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f9cb 	bl	8001a86 <HAL_TIM_IC_CaptureCallback>
 80016f0:	e005      	b.n	80016fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 f9bd 	bl	8001a72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 f9ce 	bl	8001a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	2b04      	cmp	r3, #4
 8001710:	d122      	bne.n	8001758 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b04      	cmp	r3, #4
 800171e:	d11b      	bne.n	8001758 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f06f 0204 	mvn.w	r2, #4
 8001728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2202      	movs	r2, #2
 800172e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f9a1 	bl	8001a86 <HAL_TIM_IC_CaptureCallback>
 8001744:	e005      	b.n	8001752 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 f993 	bl	8001a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 f9a4 	bl	8001a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	2b08      	cmp	r3, #8
 8001764:	d122      	bne.n	80017ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	2b08      	cmp	r3, #8
 8001772:	d11b      	bne.n	80017ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f06f 0208 	mvn.w	r2, #8
 800177c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2204      	movs	r2, #4
 8001782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 f977 	bl	8001a86 <HAL_TIM_IC_CaptureCallback>
 8001798:	e005      	b.n	80017a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 f969 	bl	8001a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 f97a 	bl	8001a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	f003 0310 	and.w	r3, r3, #16
 80017b6:	2b10      	cmp	r3, #16
 80017b8:	d122      	bne.n	8001800 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	f003 0310 	and.w	r3, r3, #16
 80017c4:	2b10      	cmp	r3, #16
 80017c6:	d11b      	bne.n	8001800 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f06f 0210 	mvn.w	r2, #16
 80017d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2208      	movs	r2, #8
 80017d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f94d 	bl	8001a86 <HAL_TIM_IC_CaptureCallback>
 80017ec:	e005      	b.n	80017fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f93f 	bl	8001a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 f950 	bl	8001a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b01      	cmp	r3, #1
 800180c:	d10e      	bne.n	800182c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b01      	cmp	r3, #1
 800181a:	d107      	bne.n	800182c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f06f 0201 	mvn.w	r2, #1
 8001824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 fd0e 	bl	8002248 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001836:	2b80      	cmp	r3, #128	; 0x80
 8001838:	d10e      	bne.n	8001858 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001844:	2b80      	cmp	r3, #128	; 0x80
 8001846:	d107      	bne.n	8001858 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 fafc 	bl	8001e50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001866:	d10e      	bne.n	8001886 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001872:	2b80      	cmp	r3, #128	; 0x80
 8001874:	d107      	bne.n	8001886 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800187e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 faef 	bl	8001e64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001890:	2b40      	cmp	r3, #64	; 0x40
 8001892:	d10e      	bne.n	80018b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800189e:	2b40      	cmp	r3, #64	; 0x40
 80018a0:	d107      	bne.n	80018b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f8fe 	bl	8001aae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	f003 0320 	and.w	r3, r3, #32
 80018bc:	2b20      	cmp	r3, #32
 80018be:	d10e      	bne.n	80018de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	f003 0320 	and.w	r3, r3, #32
 80018ca:	2b20      	cmp	r3, #32
 80018cc:	d107      	bne.n	80018de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f06f 0220 	mvn.w	r2, #32
 80018d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 faaf 	bl	8001e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b084      	sub	sp, #16
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d101      	bne.n	80018fe <HAL_TIM_ConfigClockSource+0x18>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e0b5      	b.n	8001a6a <HAL_TIM_ConfigClockSource+0x184>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2202      	movs	r2, #2
 800190a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001920:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001928:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800193a:	d03e      	beq.n	80019ba <HAL_TIM_ConfigClockSource+0xd4>
 800193c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001940:	f200 8087 	bhi.w	8001a52 <HAL_TIM_ConfigClockSource+0x16c>
 8001944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001948:	f000 8085 	beq.w	8001a56 <HAL_TIM_ConfigClockSource+0x170>
 800194c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001950:	d87f      	bhi.n	8001a52 <HAL_TIM_ConfigClockSource+0x16c>
 8001952:	2b70      	cmp	r3, #112	; 0x70
 8001954:	d01a      	beq.n	800198c <HAL_TIM_ConfigClockSource+0xa6>
 8001956:	2b70      	cmp	r3, #112	; 0x70
 8001958:	d87b      	bhi.n	8001a52 <HAL_TIM_ConfigClockSource+0x16c>
 800195a:	2b60      	cmp	r3, #96	; 0x60
 800195c:	d050      	beq.n	8001a00 <HAL_TIM_ConfigClockSource+0x11a>
 800195e:	2b60      	cmp	r3, #96	; 0x60
 8001960:	d877      	bhi.n	8001a52 <HAL_TIM_ConfigClockSource+0x16c>
 8001962:	2b50      	cmp	r3, #80	; 0x50
 8001964:	d03c      	beq.n	80019e0 <HAL_TIM_ConfigClockSource+0xfa>
 8001966:	2b50      	cmp	r3, #80	; 0x50
 8001968:	d873      	bhi.n	8001a52 <HAL_TIM_ConfigClockSource+0x16c>
 800196a:	2b40      	cmp	r3, #64	; 0x40
 800196c:	d058      	beq.n	8001a20 <HAL_TIM_ConfigClockSource+0x13a>
 800196e:	2b40      	cmp	r3, #64	; 0x40
 8001970:	d86f      	bhi.n	8001a52 <HAL_TIM_ConfigClockSource+0x16c>
 8001972:	2b30      	cmp	r3, #48	; 0x30
 8001974:	d064      	beq.n	8001a40 <HAL_TIM_ConfigClockSource+0x15a>
 8001976:	2b30      	cmp	r3, #48	; 0x30
 8001978:	d86b      	bhi.n	8001a52 <HAL_TIM_ConfigClockSource+0x16c>
 800197a:	2b20      	cmp	r3, #32
 800197c:	d060      	beq.n	8001a40 <HAL_TIM_ConfigClockSource+0x15a>
 800197e:	2b20      	cmp	r3, #32
 8001980:	d867      	bhi.n	8001a52 <HAL_TIM_ConfigClockSource+0x16c>
 8001982:	2b00      	cmp	r3, #0
 8001984:	d05c      	beq.n	8001a40 <HAL_TIM_ConfigClockSource+0x15a>
 8001986:	2b10      	cmp	r3, #16
 8001988:	d05a      	beq.n	8001a40 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800198a:	e062      	b.n	8001a52 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	6899      	ldr	r1, [r3, #8]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f000 f9a6 	bl	8001cec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80019ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	609a      	str	r2, [r3, #8]
      break;
 80019b8:	e04e      	b.n	8001a58 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6899      	ldr	r1, [r3, #8]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	f000 f98f 	bl	8001cec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019dc:	609a      	str	r2, [r3, #8]
      break;
 80019de:	e03b      	b.n	8001a58 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	6859      	ldr	r1, [r3, #4]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	461a      	mov	r2, r3
 80019ee:	f000 f903 	bl	8001bf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2150      	movs	r1, #80	; 0x50
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 f95c 	bl	8001cb6 <TIM_ITRx_SetConfig>
      break;
 80019fe:	e02b      	b.n	8001a58 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6818      	ldr	r0, [r3, #0]
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	6859      	ldr	r1, [r3, #4]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	f000 f922 	bl	8001c56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2160      	movs	r1, #96	; 0x60
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 f94c 	bl	8001cb6 <TIM_ITRx_SetConfig>
      break;
 8001a1e:	e01b      	b.n	8001a58 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	6859      	ldr	r1, [r3, #4]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f000 f8e3 	bl	8001bf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2140      	movs	r1, #64	; 0x40
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f000 f93c 	bl	8001cb6 <TIM_ITRx_SetConfig>
      break;
 8001a3e:	e00b      	b.n	8001a58 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	f000 f933 	bl	8001cb6 <TIM_ITRx_SetConfig>
        break;
 8001a50:	e002      	b.n	8001a58 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8001a52:	bf00      	nop
 8001a54:	e000      	b.n	8001a58 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8001a56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a40      	ldr	r2, [pc, #256]	; (8001bd8 <TIM_Base_SetConfig+0x114>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d013      	beq.n	8001b04 <TIM_Base_SetConfig+0x40>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae2:	d00f      	beq.n	8001b04 <TIM_Base_SetConfig+0x40>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a3d      	ldr	r2, [pc, #244]	; (8001bdc <TIM_Base_SetConfig+0x118>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d00b      	beq.n	8001b04 <TIM_Base_SetConfig+0x40>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a3c      	ldr	r2, [pc, #240]	; (8001be0 <TIM_Base_SetConfig+0x11c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d007      	beq.n	8001b04 <TIM_Base_SetConfig+0x40>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a3b      	ldr	r2, [pc, #236]	; (8001be4 <TIM_Base_SetConfig+0x120>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d003      	beq.n	8001b04 <TIM_Base_SetConfig+0x40>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a3a      	ldr	r2, [pc, #232]	; (8001be8 <TIM_Base_SetConfig+0x124>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d108      	bne.n	8001b16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a2f      	ldr	r2, [pc, #188]	; (8001bd8 <TIM_Base_SetConfig+0x114>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d01f      	beq.n	8001b5e <TIM_Base_SetConfig+0x9a>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b24:	d01b      	beq.n	8001b5e <TIM_Base_SetConfig+0x9a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a2c      	ldr	r2, [pc, #176]	; (8001bdc <TIM_Base_SetConfig+0x118>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d017      	beq.n	8001b5e <TIM_Base_SetConfig+0x9a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a2b      	ldr	r2, [pc, #172]	; (8001be0 <TIM_Base_SetConfig+0x11c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d013      	beq.n	8001b5e <TIM_Base_SetConfig+0x9a>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a2a      	ldr	r2, [pc, #168]	; (8001be4 <TIM_Base_SetConfig+0x120>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00f      	beq.n	8001b5e <TIM_Base_SetConfig+0x9a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a29      	ldr	r2, [pc, #164]	; (8001be8 <TIM_Base_SetConfig+0x124>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d00b      	beq.n	8001b5e <TIM_Base_SetConfig+0x9a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a28      	ldr	r2, [pc, #160]	; (8001bec <TIM_Base_SetConfig+0x128>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d007      	beq.n	8001b5e <TIM_Base_SetConfig+0x9a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a27      	ldr	r2, [pc, #156]	; (8001bf0 <TIM_Base_SetConfig+0x12c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d003      	beq.n	8001b5e <TIM_Base_SetConfig+0x9a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a26      	ldr	r2, [pc, #152]	; (8001bf4 <TIM_Base_SetConfig+0x130>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d108      	bne.n	8001b70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a10      	ldr	r2, [pc, #64]	; (8001bd8 <TIM_Base_SetConfig+0x114>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d00f      	beq.n	8001bbc <TIM_Base_SetConfig+0xf8>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <TIM_Base_SetConfig+0x124>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d00b      	beq.n	8001bbc <TIM_Base_SetConfig+0xf8>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a11      	ldr	r2, [pc, #68]	; (8001bec <TIM_Base_SetConfig+0x128>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d007      	beq.n	8001bbc <TIM_Base_SetConfig+0xf8>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a10      	ldr	r2, [pc, #64]	; (8001bf0 <TIM_Base_SetConfig+0x12c>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d003      	beq.n	8001bbc <TIM_Base_SetConfig+0xf8>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a0f      	ldr	r2, [pc, #60]	; (8001bf4 <TIM_Base_SetConfig+0x130>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d103      	bne.n	8001bc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	615a      	str	r2, [r3, #20]
}
 8001bca:	bf00      	nop
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40012c00 	.word	0x40012c00
 8001bdc:	40000400 	.word	0x40000400
 8001be0:	40000800 	.word	0x40000800
 8001be4:	40000c00 	.word	0x40000c00
 8001be8:	40013400 	.word	0x40013400
 8001bec:	40014000 	.word	0x40014000
 8001bf0:	40014400 	.word	0x40014400
 8001bf4:	40014800 	.word	0x40014800

08001bf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	f023 0201 	bic.w	r2, r3, #1
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f023 030a 	bic.w	r3, r3, #10
 8001c34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	621a      	str	r2, [r3, #32]
}
 8001c4a:	bf00      	nop
 8001c4c:	371c      	adds	r7, #28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b087      	sub	sp, #28
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	f023 0210 	bic.w	r2, r3, #16
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001c80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	031b      	lsls	r3, r3, #12
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001c92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	621a      	str	r2, [r3, #32]
}
 8001caa:	bf00      	nop
 8001cac:	371c      	adds	r7, #28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b085      	sub	sp, #20
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ccc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	f043 0307 	orr.w	r3, r3, #7
 8001cd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	609a      	str	r2, [r3, #8]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	021a      	lsls	r2, r3, #8
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	609a      	str	r2, [r3, #8]
}
 8001d20:	bf00      	nop
 8001d22:	371c      	adds	r7, #28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d40:	2302      	movs	r3, #2
 8001d42:	e068      	b.n	8001e16 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a2e      	ldr	r2, [pc, #184]	; (8001e24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d004      	beq.n	8001d78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a2d      	ldr	r2, [pc, #180]	; (8001e28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d108      	bne.n	8001d8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001d7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a1e      	ldr	r2, [pc, #120]	; (8001e24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d01d      	beq.n	8001dea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db6:	d018      	beq.n	8001dea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a1b      	ldr	r2, [pc, #108]	; (8001e2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d013      	beq.n	8001dea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a1a      	ldr	r2, [pc, #104]	; (8001e30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d00e      	beq.n	8001dea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a18      	ldr	r2, [pc, #96]	; (8001e34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d009      	beq.n	8001dea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a13      	ldr	r2, [pc, #76]	; (8001e28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d004      	beq.n	8001dea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a14      	ldr	r2, [pc, #80]	; (8001e38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d10c      	bne.n	8001e04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001df0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40012c00 	.word	0x40012c00
 8001e28:	40013400 	.word	0x40013400
 8001e2c:	40000400 	.word	0x40000400
 8001e30:	40000800 	.word	0x40000800
 8001e34:	40000c00 	.word	0x40000c00
 8001e38:	40014000 	.word	0x40014000

08001e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e7c:	f7fe f9a4 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e80:	f000 f878 	bl	8001f74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e84:	f000 f916 	bl	80020b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001e88:	f000 f8c6 	bl	8002018 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001e8c:	4836      	ldr	r0, [pc, #216]	; (8001f68 <main+0xf0>)
 8001e8e:	f7ff fb9b 	bl	80015c8 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if( HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin)==1){
 8001e92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e96:	4835      	ldr	r0, [pc, #212]	; (8001f6c <main+0xf4>)
 8001e98:	f7fe fc7e 	bl	8000798 <HAL_GPIO_ReadPin>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d110      	bne.n	8001ec4 <main+0x4c>
	 		  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	2120      	movs	r1, #32
 8001ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eaa:	f7fe fc8d 	bl	80007c8 <HAL_GPIO_WritePin>
	 		  HAL_Delay(500);
 8001eae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001eb2:	f7fe f9c1 	bl	8000238 <HAL_Delay>
	 		 HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2120      	movs	r1, #32
 8001eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ebe:	f7fe fc83 	bl	80007c8 <HAL_GPIO_WritePin>
 8001ec2:	e7e6      	b.n	8001e92 <main+0x1a>
	 	  }
	  else if( HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin)==1){
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	482a      	ldr	r0, [pc, #168]	; (8001f70 <main+0xf8>)
 8001ec8:	f7fe fc66 	bl	8000798 <HAL_GPIO_ReadPin>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d110      	bne.n	8001ef4 <main+0x7c>
		  HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	2140      	movs	r1, #64	; 0x40
 8001ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eda:	f7fe fc75 	bl	80007c8 <HAL_GPIO_WritePin>
		 HAL_Delay(500);
 8001ede:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ee2:	f7fe f9a9 	bl	8000238 <HAL_Delay>
		 HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2140      	movs	r1, #64	; 0x40
 8001eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eee:	f7fe fc6b 	bl	80007c8 <HAL_GPIO_WritePin>
 8001ef2:	e7ce      	b.n	8001e92 <main+0x1a>
	  }
	  else if( HAL_GPIO_ReadPin(PB3_GPIO_Port, PB3_Pin)==1){
 8001ef4:	2108      	movs	r1, #8
 8001ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001efa:	f7fe fc4d 	bl	8000798 <HAL_GPIO_ReadPin>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d112      	bne.n	8001f2a <main+0xb2>
		  HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 8001f04:	2201      	movs	r2, #1
 8001f06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f0e:	f7fe fc5b 	bl	80007c8 <HAL_GPIO_WritePin>
		 	 		  HAL_Delay(500);
 8001f12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f16:	f7fe f98f 	bl	8000238 <HAL_Delay>
		 	 		 HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f24:	f7fe fc50 	bl	80007c8 <HAL_GPIO_WritePin>
 8001f28:	e7b3      	b.n	8001e92 <main+0x1a>
	  }
	  else if( HAL_GPIO_ReadPin(PB4_GPIO_Port, PB4_Pin)==1){
 8001f2a:	2110      	movs	r1, #16
 8001f2c:	4810      	ldr	r0, [pc, #64]	; (8001f70 <main+0xf8>)
 8001f2e:	f7fe fc33 	bl	8000798 <HAL_GPIO_ReadPin>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d110      	bne.n	8001f5a <main+0xe2>
		  HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 8001f38:	2201      	movs	r2, #1
 8001f3a:	2104      	movs	r1, #4
 8001f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f40:	f7fe fc42 	bl	80007c8 <HAL_GPIO_WritePin>
		 	 		  HAL_Delay(500);
 8001f44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f48:	f7fe f976 	bl	8000238 <HAL_Delay>
		 	 		 HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2104      	movs	r1, #4
 8001f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f54:	f7fe fc38 	bl	80007c8 <HAL_GPIO_WritePin>
 8001f58:	e79b      	b.n	8001e92 <main+0x1a>
	  }
	  else{
		  HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f60:	4803      	ldr	r0, [pc, #12]	; (8001f70 <main+0xf8>)
 8001f62:	f7fe fc31 	bl	80007c8 <HAL_GPIO_WritePin>
	  if( HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin)==1){
 8001f66:	e794      	b.n	8001e92 <main+0x1a>
 8001f68:	2000002c 	.word	0x2000002c
 8001f6c:	48000c00 	.word	0x48000c00
 8001f70:	48000400 	.word	0x48000400

08001f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b096      	sub	sp, #88	; 0x58
 8001f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f7a:	f107 0314 	add.w	r3, r7, #20
 8001f7e:	2244      	movs	r2, #68	; 0x44
 8001f80:	2100      	movs	r1, #0
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 fae2 	bl	800254c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f88:	463b      	mov	r3, r7
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	60da      	str	r2, [r3, #12]
 8001f94:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f96:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f9a:	f7fe fc5f 	bl	800085c <HAL_PWREx_ControlVoltageScaling>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001fa4:	f000 f962 	bl	800226c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001fa8:	2310      	movs	r3, #16
 8001faa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001fac:	2301      	movs	r3, #1
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001fb4:	2360      	movs	r3, #96	; 0x60
 8001fb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001fc4:	2328      	movs	r3, #40	; 0x28
 8001fc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001fc8:	2307      	movs	r3, #7
 8001fca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fc95 	bl	8000908 <HAL_RCC_OscConfig>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001fe4:	f000 f942 	bl	800226c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fe8:	230f      	movs	r3, #15
 8001fea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fec:	2303      	movs	r3, #3
 8001fee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	2104      	movs	r1, #4
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff f867 	bl	80010d4 <HAL_RCC_ClockConfig>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800200c:	f000 f92e 	bl	800226c <Error_Handler>
  }
}
 8002010:	bf00      	nop
 8002012:	3758      	adds	r7, #88	; 0x58
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800201e:	f107 0310 	add.w	r3, r7, #16
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002036:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <MX_TIM2_Init+0x98>)
 8002038:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800203c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800203e:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <MX_TIM2_Init+0x98>)
 8002040:	2200      	movs	r2, #0
 8002042:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002044:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <MX_TIM2_Init+0x98>)
 8002046:	2200      	movs	r2, #0
 8002048:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 800204a:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <MX_TIM2_Init+0x98>)
 800204c:	f240 7216 	movw	r2, #1814	; 0x716
 8002050:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002052:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <MX_TIM2_Init+0x98>)
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002058:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <MX_TIM2_Init+0x98>)
 800205a:	2200      	movs	r2, #0
 800205c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800205e:	4814      	ldr	r0, [pc, #80]	; (80020b0 <MX_TIM2_Init+0x98>)
 8002060:	f7ff fa5a 	bl	8001518 <HAL_TIM_Base_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800206a:	f000 f8ff 	bl	800226c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800206e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002072:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002074:	f107 0310 	add.w	r3, r7, #16
 8002078:	4619      	mov	r1, r3
 800207a:	480d      	ldr	r0, [pc, #52]	; (80020b0 <MX_TIM2_Init+0x98>)
 800207c:	f7ff fc33 	bl	80018e6 <HAL_TIM_ConfigClockSource>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002086:	f000 f8f1 	bl	800226c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800208a:	2320      	movs	r3, #32
 800208c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	4619      	mov	r1, r3
 8002096:	4806      	ldr	r0, [pc, #24]	; (80020b0 <MX_TIM2_Init+0x98>)
 8002098:	f7ff fe48 	bl	8001d2c <HAL_TIMEx_MasterConfigSynchronization>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80020a2:	f000 f8e3 	bl	800226c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020a6:	bf00      	nop
 80020a8:	3720      	adds	r7, #32
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	2000002c 	.word	0x2000002c

080020b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08a      	sub	sp, #40	; 0x28
 80020b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	60da      	str	r2, [r3, #12]
 80020c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ca:	4b5a      	ldr	r3, [pc, #360]	; (8002234 <MX_GPIO_Init+0x180>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ce:	4a59      	ldr	r2, [pc, #356]	; (8002234 <MX_GPIO_Init+0x180>)
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020d6:	4b57      	ldr	r3, [pc, #348]	; (8002234 <MX_GPIO_Init+0x180>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e2:	4b54      	ldr	r3, [pc, #336]	; (8002234 <MX_GPIO_Init+0x180>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e6:	4a53      	ldr	r2, [pc, #332]	; (8002234 <MX_GPIO_Init+0x180>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ee:	4b51      	ldr	r3, [pc, #324]	; (8002234 <MX_GPIO_Init+0x180>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fa:	4b4e      	ldr	r3, [pc, #312]	; (8002234 <MX_GPIO_Init+0x180>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fe:	4a4d      	ldr	r2, [pc, #308]	; (8002234 <MX_GPIO_Init+0x180>)
 8002100:	f043 0302 	orr.w	r3, r3, #2
 8002104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002106:	4b4b      	ldr	r3, [pc, #300]	; (8002234 <MX_GPIO_Init+0x180>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002112:	4b48      	ldr	r3, [pc, #288]	; (8002234 <MX_GPIO_Init+0x180>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002116:	4a47      	ldr	r2, [pc, #284]	; (8002234 <MX_GPIO_Init+0x180>)
 8002118:	f043 0308 	orr.w	r3, r3, #8
 800211c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800211e:	4b45      	ldr	r3, [pc, #276]	; (8002234 <MX_GPIO_Init+0x180>)
 8002120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800212a:	2200      	movs	r2, #0
 800212c:	f248 0164 	movw	r1, #32868	; 0x8064
 8002130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002134:	f7fe fb48 	bl	80007c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002138:	2200      	movs	r2, #0
 800213a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800213e:	483e      	ldr	r0, [pc, #248]	; (8002238 <MX_GPIO_Init+0x184>)
 8002140:	f7fe fb42 	bl	80007c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BluePB_Pin */
  GPIO_InitStruct.Pin = BluePB_Pin;
 8002144:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800214a:	4b3c      	ldr	r3, [pc, #240]	; (800223c <MX_GPIO_Init+0x188>)
 800214c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BluePB_GPIO_Port, &GPIO_InitStruct);
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	4619      	mov	r1, r3
 8002158:	4839      	ldr	r0, [pc, #228]	; (8002240 <MX_GPIO_Init+0x18c>)
 800215a:	f7fe f973 	bl	8000444 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 800215e:	f248 0364 	movw	r3, #32868	; 0x8064
 8002162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002164:	2301      	movs	r3, #1
 8002166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216c:	2300      	movs	r3, #0
 800216e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	4619      	mov	r1, r3
 8002176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800217a:	f7fe f963 	bl	8000444 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3_Pin */
  GPIO_InitStruct.Pin = PB3_Pin;
 800217e:	2308      	movs	r3, #8
 8002180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002182:	4b2e      	ldr	r3, [pc, #184]	; (800223c <MX_GPIO_Init+0x188>)
 8002184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB3_GPIO_Port, &GPIO_InitStruct);
 800218a:	f107 0314 	add.w	r3, r7, #20
 800218e:	4619      	mov	r1, r3
 8002190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002194:	f7fe f956 	bl	8000444 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002198:	2310      	movs	r3, #16
 800219a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800219c:	2300      	movs	r3, #0
 800219e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	4619      	mov	r1, r3
 80021aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ae:	f7fe f949 	bl	8000444 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2_Pin PB1 PB4_Pin */
  GPIO_InitStruct.Pin = PB2_Pin|GPIO_PIN_1|PB4_Pin;
 80021b2:	2313      	movs	r3, #19
 80021b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021b6:	4b21      	ldr	r3, [pc, #132]	; (800223c <MX_GPIO_Init+0x188>)
 80021b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021be:	f107 0314 	add.w	r3, r7, #20
 80021c2:	4619      	mov	r1, r3
 80021c4:	481c      	ldr	r0, [pc, #112]	; (8002238 <MX_GPIO_Init+0x184>)
 80021c6:	f7fe f93d 	bl	8000444 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROW1_Pin */
  GPIO_InitStruct.Pin = ROW1_Pin;
 80021ca:	2304      	movs	r3, #4
 80021cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROW1_GPIO_Port, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	4816      	ldr	r0, [pc, #88]	; (8002238 <MX_GPIO_Init+0x184>)
 80021de:	f7fe f931 	bl	8000444 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80021e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e8:	2301      	movs	r3, #1
 80021ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	2300      	movs	r3, #0
 80021f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	4619      	mov	r1, r3
 80021fa:	480f      	ldr	r0, [pc, #60]	; (8002238 <MX_GPIO_Init+0x184>)
 80021fc:	f7fe f922 	bl	8000444 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1_Pin */
  GPIO_InitStruct.Pin = PB1_Pin;
 8002200:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002206:	4b0d      	ldr	r3, [pc, #52]	; (800223c <MX_GPIO_Init+0x188>)
 8002208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB1_GPIO_Port, &GPIO_InitStruct);
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	4619      	mov	r1, r3
 8002214:	480b      	ldr	r0, [pc, #44]	; (8002244 <MX_GPIO_Init+0x190>)
 8002216:	f7fe f915 	bl	8000444 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2100      	movs	r1, #0
 800221e:	2028      	movs	r0, #40	; 0x28
 8002220:	f7fe f8e6 	bl	80003f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002224:	2028      	movs	r0, #40	; 0x28
 8002226:	f7fe f8ff 	bl	8000428 <HAL_NVIC_EnableIRQ>

}
 800222a:	bf00      	nop
 800222c:	3728      	adds	r7, #40	; 0x28
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	48000400 	.word	0x48000400
 800223c:	10110000 	.word	0x10110000
 8002240:	48000800 	.word	0x48000800
 8002244:	48000c00 	.word	0x48000c00

08002248 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a04      	ldr	r2, [pc, #16]	; (8002268 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d101      	bne.n	800225e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800225a:	f7fd ffcd 	bl	80001f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40014800 	.word	0x40014800

0800226c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002270:	b672      	cpsid	i
}
 8002272:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002274:	e7fe      	b.n	8002274 <Error_Handler+0x8>
	...

08002278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227e:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <HAL_MspInit+0x44>)
 8002280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002282:	4a0e      	ldr	r2, [pc, #56]	; (80022bc <HAL_MspInit+0x44>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	6613      	str	r3, [r2, #96]	; 0x60
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <HAL_MspInit+0x44>)
 800228c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_MspInit+0x44>)
 8002298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229a:	4a08      	ldr	r2, [pc, #32]	; (80022bc <HAL_MspInit+0x44>)
 800229c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a0:	6593      	str	r3, [r2, #88]	; 0x58
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_MspInit+0x44>)
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022aa:	603b      	str	r3, [r7, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000

080022c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d0:	d113      	bne.n	80022fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022d2:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <HAL_TIM_Base_MspInit+0x44>)
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	4a0b      	ldr	r2, [pc, #44]	; (8002304 <HAL_TIM_Base_MspInit+0x44>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6593      	str	r3, [r2, #88]	; 0x58
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_TIM_Base_MspInit+0x44>)
 80022e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	201c      	movs	r0, #28
 80022f0:	f7fe f87e 	bl	80003f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022f4:	201c      	movs	r0, #28
 80022f6:	f7fe f897 	bl	8000428 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000

08002308 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08c      	sub	sp, #48	; 0x30
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8002318:	2200      	movs	r2, #0
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	201a      	movs	r0, #26
 800231e:	f7fe f867 	bl	80003f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002322:	201a      	movs	r0, #26
 8002324:	f7fe f880 	bl	8000428 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8002328:	4b1e      	ldr	r3, [pc, #120]	; (80023a4 <HAL_InitTick+0x9c>)
 800232a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232c:	4a1d      	ldr	r2, [pc, #116]	; (80023a4 <HAL_InitTick+0x9c>)
 800232e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002332:	6613      	str	r3, [r2, #96]	; 0x60
 8002334:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <HAL_InitTick+0x9c>)
 8002336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002340:	f107 0210 	add.w	r2, r7, #16
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	4611      	mov	r1, r2
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff f852 	bl	80013f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002350:	f7ff f83a 	bl	80013c8 <HAL_RCC_GetPCLK2Freq>
 8002354:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002358:	4a13      	ldr	r2, [pc, #76]	; (80023a8 <HAL_InitTick+0xa0>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	0c9b      	lsrs	r3, r3, #18
 8002360:	3b01      	subs	r3, #1
 8002362:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <HAL_InitTick+0xa4>)
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <HAL_InitTick+0xa8>)
 8002368:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <HAL_InitTick+0xa4>)
 800236c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002370:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8002372:	4a0e      	ldr	r2, [pc, #56]	; (80023ac <HAL_InitTick+0xa4>)
 8002374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002376:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <HAL_InitTick+0xa4>)
 800237a:	2200      	movs	r2, #0
 800237c:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_InitTick+0xa4>)
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8002384:	4809      	ldr	r0, [pc, #36]	; (80023ac <HAL_InitTick+0xa4>)
 8002386:	f7ff f8c7 	bl	8001518 <HAL_TIM_Base_Init>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d104      	bne.n	800239a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8002390:	4806      	ldr	r0, [pc, #24]	; (80023ac <HAL_InitTick+0xa4>)
 8002392:	f7ff f919 	bl	80015c8 <HAL_TIM_Base_Start_IT>
 8002396:	4603      	mov	r3, r0
 8002398:	e000      	b.n	800239c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
}
 800239c:	4618      	mov	r0, r3
 800239e:	3730      	adds	r7, #48	; 0x30
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40021000 	.word	0x40021000
 80023a8:	431bde83 	.word	0x431bde83
 80023ac:	20000078 	.word	0x20000078
 80023b0:	40014800 	.word	0x40014800

080023b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023b8:	e7fe      	b.n	80023b8 <NMI_Handler+0x4>

080023ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023be:	e7fe      	b.n	80023be <HardFault_Handler+0x4>

080023c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c4:	e7fe      	b.n	80023c4 <MemManage_Handler+0x4>

080023c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ca:	e7fe      	b.n	80023ca <BusFault_Handler+0x4>

080023cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d0:	e7fe      	b.n	80023d0 <UsageFault_Handler+0x4>

080023d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002410:	4802      	ldr	r0, [pc, #8]	; (800241c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8002412:	f7ff f949 	bl	80016a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000078 	.word	0x20000078

08002420 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002424:	4802      	ldr	r0, [pc, #8]	; (8002430 <TIM2_IRQHandler+0x10>)
 8002426:	f7ff f93f 	bl	80016a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	2000002c 	.word	0x2000002c

08002434 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002438:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800243c:	f7fe f9dc 	bl	80007f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002440:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002444:	f7fe f9d8 	bl	80007f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002448:	bf00      	nop
 800244a:	bd80      	pop	{r7, pc}

0800244c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002450:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <SystemInit+0x5c>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <SystemInit+0x5c>)
 8002458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800245c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002460:	4b12      	ldr	r3, [pc, #72]	; (80024ac <SystemInit+0x60>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a11      	ldr	r2, [pc, #68]	; (80024ac <SystemInit+0x60>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800246c:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <SystemInit+0x60>)
 800246e:	2200      	movs	r2, #0
 8002470:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002472:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <SystemInit+0x60>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a0d      	ldr	r2, [pc, #52]	; (80024ac <SystemInit+0x60>)
 8002478:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800247c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002480:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <SystemInit+0x60>)
 8002484:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002488:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <SystemInit+0x60>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a07      	ldr	r2, [pc, #28]	; (80024ac <SystemInit+0x60>)
 8002490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002494:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002496:	4b05      	ldr	r3, [pc, #20]	; (80024ac <SystemInit+0x60>)
 8002498:	2200      	movs	r2, #0
 800249a:	619a      	str	r2, [r3, #24]
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	e000ed00 	.word	0xe000ed00
 80024ac:	40021000 	.word	0x40021000

080024b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80024b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024b4:	f7ff ffca 	bl	800244c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80024b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80024ba:	e003      	b.n	80024c4 <LoopCopyDataInit>

080024bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80024be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80024c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80024c2:	3104      	adds	r1, #4

080024c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80024c4:	480a      	ldr	r0, [pc, #40]	; (80024f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80024c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80024ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80024cc:	d3f6      	bcc.n	80024bc <CopyDataInit>
	ldr	r2, =_sbss
 80024ce:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80024d0:	e002      	b.n	80024d8 <LoopFillZerobss>

080024d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80024d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80024d4:	f842 3b04 	str.w	r3, [r2], #4

080024d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <LoopForever+0x16>)
	cmp	r2, r3
 80024da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80024dc:	d3f9      	bcc.n	80024d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024de:	f000 f811 	bl	8002504 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024e2:	f7ff fcc9 	bl	8001e78 <main>

080024e6 <LoopForever>:

LoopForever:
    b LoopForever
 80024e6:	e7fe      	b.n	80024e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024e8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80024ec:	080025c4 	.word	0x080025c4
	ldr	r0, =_sdata
 80024f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80024f4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80024f8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80024fc:	200000c4 	.word	0x200000c4

08002500 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002500:	e7fe      	b.n	8002500 <ADC1_2_IRQHandler>
	...

08002504 <__libc_init_array>:
 8002504:	b570      	push	{r4, r5, r6, lr}
 8002506:	4d0d      	ldr	r5, [pc, #52]	; (800253c <__libc_init_array+0x38>)
 8002508:	4c0d      	ldr	r4, [pc, #52]	; (8002540 <__libc_init_array+0x3c>)
 800250a:	1b64      	subs	r4, r4, r5
 800250c:	10a4      	asrs	r4, r4, #2
 800250e:	2600      	movs	r6, #0
 8002510:	42a6      	cmp	r6, r4
 8002512:	d109      	bne.n	8002528 <__libc_init_array+0x24>
 8002514:	4d0b      	ldr	r5, [pc, #44]	; (8002544 <__libc_init_array+0x40>)
 8002516:	4c0c      	ldr	r4, [pc, #48]	; (8002548 <__libc_init_array+0x44>)
 8002518:	f000 f820 	bl	800255c <_init>
 800251c:	1b64      	subs	r4, r4, r5
 800251e:	10a4      	asrs	r4, r4, #2
 8002520:	2600      	movs	r6, #0
 8002522:	42a6      	cmp	r6, r4
 8002524:	d105      	bne.n	8002532 <__libc_init_array+0x2e>
 8002526:	bd70      	pop	{r4, r5, r6, pc}
 8002528:	f855 3b04 	ldr.w	r3, [r5], #4
 800252c:	4798      	blx	r3
 800252e:	3601      	adds	r6, #1
 8002530:	e7ee      	b.n	8002510 <__libc_init_array+0xc>
 8002532:	f855 3b04 	ldr.w	r3, [r5], #4
 8002536:	4798      	blx	r3
 8002538:	3601      	adds	r6, #1
 800253a:	e7f2      	b.n	8002522 <__libc_init_array+0x1e>
 800253c:	080025bc 	.word	0x080025bc
 8002540:	080025bc 	.word	0x080025bc
 8002544:	080025bc 	.word	0x080025bc
 8002548:	080025c0 	.word	0x080025c0

0800254c <memset>:
 800254c:	4402      	add	r2, r0
 800254e:	4603      	mov	r3, r0
 8002550:	4293      	cmp	r3, r2
 8002552:	d100      	bne.n	8002556 <memset+0xa>
 8002554:	4770      	bx	lr
 8002556:	f803 1b01 	strb.w	r1, [r3], #1
 800255a:	e7f9      	b.n	8002550 <memset+0x4>

0800255c <_init>:
 800255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800255e:	bf00      	nop
 8002560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002562:	bc08      	pop	{r3}
 8002564:	469e      	mov	lr, r3
 8002566:	4770      	bx	lr

08002568 <_fini>:
 8002568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256a:	bf00      	nop
 800256c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800256e:	bc08      	pop	{r3}
 8002570:	469e      	mov	lr, r3
 8002572:	4770      	bx	lr
